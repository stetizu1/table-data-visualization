{"version":3,"sources":["app/constants/data/data.ts","app/text/headerText.ts","app/types/data/data.ts","app/helpers/data/formatText.ts","app/helpers/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/footerText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/helpers/react/useDebounce.ts","app/constants/data/DataLoadState.ts","app/constants/views-general/ViewType.ts","app/helpers/data/data.ts","app/constants/layout/layout.ts","icons/BrushOffSvg.tsx","icons/TooltipSvg.tsx","app/constants/data/sampleDataset.tsx","app/constants/data/DataLoadError.ts","app/text/siteText.ts","app/constants/sort/SortType.ts","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/constants/mui.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/constants/others.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/components/content/top-toolbar/items/file-reader/NullDialog.tsx","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components-style/content/top-toolbar/items/buttons/colorButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ColorButton.tsx","app/constants/debounce/debounce.ts","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/setDisplay.ts","app/constants/views-general/tooltip.ts","app/text/views-and-settings/common.ts","app/components-style/content/views/viewGridStyle.ts","app/text/settingsDrawerText.ts","app/components-style/content/data-drawer/settingsDrawerStyle.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-settings/parallelCoordinates.ts","app/components-style/content/data-drawer/settingsDrawerItemStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components-style/content/data-drawer/items/settingsTextStyle.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/helpers/basic/getInputPropsPositiveNumber.ts","app/components/content/data-drawer/items/OpacityInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinatesSettingsComponent.tsx","app/types/views/settings/ParallelCoordinatesSettings.ts","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-settings/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixSettingsComponent.tsx","app/types/views/settings/ScatterPlotMatrixSettings.ts","app/constants/views/glyphs.ts","app/constants/brushing-type/ParallelSetsBrushingType.ts","app/text/views-and-settings/glyphs.ts","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsSettingsComponent.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-settings/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsSettingsComponent.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/constants/views-general/defaultSettableColors.ts","app/text/views-and-settings/dataTable.ts","app/components-style/content/data-drawer/items/colorPickerStyle.ts","app/components/content/data-drawer/items/ColorPicker.tsx","app/components/content/views/data-table/DataTableSettingsComponent.tsx","app/types/views/settings/DataTableSettings.ts","app/constants/views/parallelSetsBundled.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseAction.ts","app/text/views-and-settings/parallelSetsBundled.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundledSettingsComponent.tsx","app/types/views/settings/ParallelSetsBundledSettings.ts","app/components/content/data-drawer/SettingsDrawer.tsx","app/constants/public-path.ts","app/components/content/top-toolbar/items/layout/LayoutDialog.tsx","app/components-style/content/views/gridItemStyle.ts","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/views/togglingYShift.ts","app/helpers/d3/categoryColor.ts","app/helpers/d3/tooltip.ts","app/constants/save/save.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/views/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/helpers/data/comparator.ts","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/constants/views-general/glyphs-general.ts","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTableBody.tsx","app/components/content/views/data-table/DataTable.tsx","lib/d3-sankey/src/align.js","lib/d3-sankey/src/constant.js","lib/d3-sankey/src/sankey.js","lib/d3-sankey/src/sankeyLinkHorizontal.js","app/helpers/data/lineShifts.ts","app/components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundled.tsx","app/constants/views-general/view.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/text/gridItemText.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/grid/items/ViewCloseButton.tsx","app/components-style/content/common/helpDialogStyle.ts","app/components/content/grid/items/ViewHelpButton.tsx","app/helpers/d3/saveSvg.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/grid/items/ViewSaveButton.tsx","app/components/content/grid/items/GlyphAxesText.tsx","app/components/content/grid/items/DataFilterButton.tsx","app/components/content/grid/GridItem.tsx","app/components/content/grid/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/loadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["AcceptableFileTypes","DataNullOptionType","HEADER_TEXT","SelectedKey","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","toLowerCase","dataToReadable","data","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getSpaced","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","Object","keys","filter","key","getLinkDataPointValuesWithLabel","filteredData","from","names","to","count","selected","reduce","acc","sel","getNodeDataPointValuesWithLabel","name","countSelected","getLabelledAttribute","label","getDisplayAttributesInParentheses","displayAttributes","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","CARD_COLORS","VIEW_COLORS","SETTINGS_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","SETTINGS_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","DataLoadState","ViewType","DATA_NULL_OPTION_TYPES","getAttributeKeys","dataset","getDatasetSample","getDefaultQuantitativeAttributesKeys","getQuantitativeAttributesKeys","every","isNaN","Number","getCategoryAttributesKeys","Set","size","getDefaultAllAttributesChecked","fromEntries","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","getDefaultNominalAttributesChecked","getNominalValueProperties","nominalValuePropertiesArr","containedIdx","findIndex","prev","newNominalValueProperties","sort","a","b","nvp","idx","order","getNominalValuesRecord","brushView","isBrushView","component","ScatterPlotMatrix","ScatterPlotGlyphs","ParallelCoordinates","DRAG_HANDLE","VIEW_DEFAULT_SIZE","height","VIEW_LIMITS","minW","minH","Glyphs","ParallelSetsBundled","DataTable","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT_QUANTITATIVE","i","x","y","DEFAULT_GRID_LAYOUT_NOMINAL","LAYOUT_OPT_2","LAYOUT_OPT_3","LAYOUT_OPT_4","LAYOUT_OPTIONS","BrushOffSvg","forwardRef","props","ref","style","userSelect","fill","flexShrink","viewBox","d","id","displayName","TooltipSvg","strokeWidth","SampleDataset","DataLoadError","SAMPLE_DATASET_OPTIONS","sampleDatasetIcons","flowers","LocalFlorist","birds","Twitter","cars","DirectionsCar","titanic","DirectionsBoat","parallelCars","AirportShuttle","sampleDatasets","flowerJson","birdJson","carJson","titanicJson","parallelCarsJson","SortType","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","SAVE_TEXT","VIEW_INFO_TEXT","brushing","settings","options","close","FILE_READER_TEXT","button","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFormat","nullDialog","confirm","optionsText","leave","change","optionsDescription","changeTo","LAYOUT_DIALOG_TEXT","topToolbarStyle","toolbar","separator","margin","borderLeft","left","middle","right","COMPONENT_TYPE","BUTTON_VARIANT","DRAWER_VARIANT","ANCHOR","CELL_PADDING","topToolbarButtonStyle","minWidth","ClickableButton","icon","onClick","disabled","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","Array","isArray","length","example","CsvParse","textCsv","parse","output","numValue","HTML","INPUT_TYPE","INPUT_PROPS","positiveNumber","inputMode","min","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","fileReaderStyle","dialogStyle","dialog","alert","innerContent","contentBox","toggleDialogGroup","marginBottom","toggleDialogButton","flexGrow","attHeader","fontWeight","paddingBottom","textInput","alignSelf","card","opacity","image","cardContent","itemText","SelectionDialog","isOpen","onClose","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","NullDialog","nullContainingAttributes","setDataset","att","optionsChosen","setOptionsChosen","replaceValue","setReplaceValue","getFixedDataset","useCallback","newValue","handleNullDialogConfirm","datasetFixed","forEach","handleToggleChange","handleReplaceChange","ToggleButtonGroup","exclusive","onChange","e","optType","ToggleButton","TextField","defaultValue","target","addSelected","FILE_INPUT_ID","FileReader","setDataLoadState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isNullDialogOpen","setIsNullDialogOpen","setNullContainingAttributes","rawDataset","setRawDataset","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionKey","Loaded","closeDialog","getDatasetFromFile","fileType","selectedFile","json","csv","JSON","handleFileChange","files","Loading","type","dataLoadErrorType","NoData","selectableDataset","document","getElementById","AutoGraph","Add","hidden","ON_VALUE","ToggleButtonSingle","setValue","handleChange","event","checked","openSettingsButtonStyle","OpenSettingsButton","IconButton","Settings","getColorInputStyle","getColorInputBoxStyle","minHeight","ml","colorInputStyle","inputBox","position","ColorButton","handleSetColor","tooltip","currentColor","setCurrentColor","debouncedColor","disableHoverListener","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","setIsLayoutDialogOpen","removeLayout","brushColor","setBrushColor","AddCircle","Dashboard","SkipNext","Brush","SVG","svg","g","circle","rect","path","div","class","transform","cx","cy","r","stroke","textAnchor","top","none","block","start","end","setDisplay","isVisible","displayClass","selectAll","TOOLTIP_CLASS","TOOLTIP","bottom","lr","SETTINGS_BASE_TEXT","more","empty","SETTINGS_TEXT","attributes","category","MARGIN_SETTINGS_TEXT","OPACITY_SETTINGS_TEXT","PALETTE_PICKER_TEXT","header","categoriesLabel","VIEW_NAMES","INFO_DIALOG_TEXT","descriptionBrushing","descriptionSettings","descriptionSettingsMore","viewGridStyle","pointerEvents","zIndex","SETTINGS_DRAWER_TEXT","settingsDrawerStyle","drawer","chevron","setting","footer","githubIcon","paddingRight","PARALLEL_COORDINATES_DEFAULT","margins","lineWidth","colorCategory","schemeCategory10","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_SETTINGS_TEXT","unavailable","settingsDrawerItemStyle","drawerSettings","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleCheckboxChange","eventChecked","newChecked","prevSettings","newSettings","handleMove","newAttributesKeys","onUpButton","onDownButton","FormControlLabel","ArrowDropUp","ArrowDropDown","Checkbox","CategorySelector","handleSelectCategoryChange","categoryAttribute","undefined","select","MenuItem","numberInputStyles","vertical","horizontal","textField","settingsTextStyle","MarginInput","currentMargins","setCurrentMargins","debouncedMargins","handleMarginChange","newMargin","oldMargins","newMargins","inputProps","getInputPropsPositiveNumber","max","minVal","maxVal","OpacityInput","opacities","currentOpacities","setCurrentOpacities","debouncedOpacities","handleOpacityChange","newOpacity","oldOpacities","newOpacities","NumberInput","valueKey","currentValue","setCurrentValue","handleChangeValue","getPalettePickerColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","currentColors","setCurrentColors","debouncedColors","newColor","oldColors","newColors","getInput","ParallelCoordinatesSettingsComponent","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","categoricalAttributes","getCurrentDisplayAttributes","currChecked","createParallelCoordinatesSettings","newQaKeys","defaultCategoryAttribute","newParallelCoordinates","getNewSettingsForAttributeChecker","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_SETTINGS_TEXT","sizes","ScatterPlotMatrixSettingsComponent","scatterPlotMatrixSettings","createScatterPlotMatrixSettings","newScatterPlotMatrix","ParallelSetsBrushingType","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","GLYPHS_TEXT","GLYPHS_SETTINGS_TEXT","sorting","Selector","settingsKey","handleSelectChange","toggleButtonsStyle","box","group","ToggleButtons","handleToggleButtonChange","newSetting","opt","GlyphsSettingsComponent","glyphsSettings","sortableAttributes","createGlyphsSettings","defaultSortAttribute","newGlyphs","sortAttribute","newSortableAttributes","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_SETTINGS_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsSettingsComponent","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsSettings","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","selectedBackgroundColor","selectedFontColor","DATA_TABLE_SETTINGS_TEXT","DATA_TABLE_TEXT","checkboxTooltip","desc","getColorPickerInputStyle","colorPickerStyle","ColorPicker","handleChangeColor","DataTableSettingsComponent","dataTableSettings","createDataTableSettings","newKeys","newDataTableSettings","BrushAction","MouseAction","PARALLEL_SETS_BUNDLED_DEFAULT","tabWidth","tabSpacing","tabGap","brushingType","fontColor","PARALLEL_SETS_BUNDLED_TEXT","PARALLEL_SETS_SETTINGS_TEXT","ParallelSetsBundledSettingsComponent","parallelSetsBundledSettings","nominalAttributesKeys","setNominalAttributesKeys","createParallelSetsBundledSettings","newCatKeys","newParallelSetsBundled","SettingsDrawer","views","settingsComponents","view","Drawer","anchor","ChevronRight","Link","href","GitHub","PUBLIC_IMAGE_PATH","PUBLIC_PATH","LAYOUT_IMAGES","imgName","BRUSHING_IMAGES","address","LayoutDialog","setLayout","lastLayout","layoutItems","Card","CardContent","CardMedia","alt","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","flexWrap","paddingLeft","textBox","whiteSpace","overflow","textOverflow","textIcon","GRID_HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getExtendedExtentInDomains","percentDown","percentUp","extentSize","p","finalExtent","TEXT_Y_SHIFTS","odd","even","TOGGLE_Y_SHIFT","Math","getTogglingYShift","_","getCategoryColor","onMouseOverTooltip","stringFunction","clientX","clientY","duration","html","onMouseOutTooltip","SAVE_ID","CONTAINER_SAVE_ID","CONTAINER_EMPTY","PARALLEL_COORDINATES_CLASS","SELECTED_CLASS","AXES_TEXT_CLASS","getParallelCoordinatesStyle","isBrushActive","font","getViewsNotDisplayStyle","refreshViews","registerCleanBrushing","setComponentBrushing","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","node","remove","extentInDomains","xScale","scalePoint","domain","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","onBrush","move","brushEvent","axisName","selection","brushExtent","BRUSH_WIDTH","brush","brushY","on","enter","append","attr","line","mouseOver","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","selLKey","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","clearBrush","brushSelection","makeBrush","descCompare","orderBy","getComparator","GLYPHS_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","onMouseClick","changedData","click","SCATTER_PLOT_GLYPHS_CLASS","AXIS_TEXT_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","linearExtentInDomains","radialExtentInDomains","makeGlyphs","rotate","axisX","axisY","getDataTableRowStyle","paddingTop","dataTableStyle","tableHead","tableHeadRow","tableBody","filterRow","filterCell","filterIcon","notDisplayed","checkboxAll","DataTableBody","handleSelectClick","TableBody","TableRow","hover","TableCell","showFilter","redrawTime","setOrder","setOrderBy","doResort","setDoResort","filterValues","setFilterValues","filteredDataset","includes","handleSelectAllClick","handleRequestSort","property","isAsc","handleFilterValueChange","createSortHandler","sortTooltipTitle","headCellId","getTableHead","indeterminate","allChecked","TableHead","checkAll","TableSortLabel","active","direction","orderedByActive","sortDirection","FilterListOutlined","TableContainer","Table","container","justify","n","sourceLinks","depth","constant","ascendingSourceBreadth","ascendingBreadth","source","ascendingTargetBreadth","y0","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","get","computeLinkBreadths","y1","link","targetLinks","Sankey","py","linkSort","x0","x1","dx","dy","align","iterations","sankey","apply","arguments","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeHeights","computeNodeBreadths","entries","Map","push","fixedValue","sum","next","add","columns","kx","layer","computeNodeLayers","c","ky","reorderLinks","initializeNodeBreadths","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","column","v","reorderNodeLinks","resolveCollisions","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","update","nodeId","nodeAlign","nodeSort","nodeWidth","nodePadding","horizontalSource","horizontalTarget","getCurrentWidth","currentCount","all","getStrokeWidth","isBrush","isOverlay","catAttributeValuesCounts","currentWidth","selectedFraction","getSelectionWidth","getYShift","valuesCount","yFormerShift","formerCount","slice","curr","getYFormerShift","yCatShift","getShift","TABS_CLASS","getParallelSetsBundledStyle","fontColorInner","mixBlendMode","nominalValuesRecord","setNominalValuesRecord","createParallelSetsBundled","displayPairs","getNeighborAttributes","pairWidth","valueCounts","arr","spacesAllMax","isLeft","half","displayPair","pairIdx","spacesPairMax","pairExtent","sankeyLayout","record","attFrom","attTo","toIdxStart","catAttributeOptions","flatMap","idxFrom","idxTo","filtered","getGraph","getPath","linkHorizontal","xShift","connectors","colorCategories","overlay","getViewRecord","s","f","View","dataProps","settingsCurr","overflowX","overflowY","GRID_ITEM_TEXT","inlineButton","inlineButtonStyles","buttonClose","buttonActive","ViewCloseButton","onRemove","Close","helpDialogStyle","iconedHeaderBox","brushContainer","ViewHelpButton","isDialogOpen","setIsDialogOpen","openDialog","Help","saveSvg","svgContainer","querySelector","containerClass","classList","cls","newStyleNodes","querySelectorAll","sheet","cssRules","rules","cssText","createElement","innerHTML","insertBefore","firstChild","svgEl","fileName","setAttribute","svgBlob","Blob","outerHTML","svgUrl","URL","createObjectURL","downloadLink","download","body","appendChild","removeChild","saveSvgToFile","console","error","getSaveIsDisabled","ConfirmationDialog","onConfirm","cancelText","ViewSaveButton","Save","GlyphAxesText","RotateRight","DataFilterButton","setShowFilter","FilterList","GridItem","isResizeFinished","rest","contextButton","isGlyphs","useSize","ReactGridLayout","WidthProvider","GridLayout","BaseViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","isLayoutDialogOpen","layout","viewProps","viewResizing","setViewResizing","setLastLayout","useWindowSize","windowWidth","windowHeight","updateLayout","newLayout","filteredLayout","addView","posY","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","ViewGrid","memo","emptyDataStyle","site","EmptyData","loadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","currentRedrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setDatasetAndRemoveBrushing","cleanAllBrushes","deletePrevSelection","clearBrushesOnButton","newComponent","setIsBrushingOnEndOfMoveAndRemoveBrushing","newIsBrushingOnEndOfMove","topToolbarComponent","appStyle","app","content","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.76dbbcb6.chunk.js","sourcesContent":["export const CATEGORY_LIMIT = 10\n\nexport enum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nexport enum DataNullOptionType {\n  leave = `leave`,\n  change = `change`,\n  filter = `filter`,\n}\n\nexport const DATA_NULL_OPTION_TYPES = Object.values(DataNullOptionType)\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface for properties of nominal value of attributes\n */\nexport interface NominalValueProperties {\n  name: string\n  attribute: keyof SelectableDataType\n  count: number\n  order: number\n  countSelected: number\n}\n\n/**\n * Interface for nominal value records\n * -- every attribute has array of possible values with additional info\n */\nexport interface NominalRecord {\n  [key: keyof SelectableDataType]: Array<NominalValueProperties>\n}\n\n/**\n * Interface for properties of pair of data, used for on graph\n * Also can include properties counts for third attribute values\n */\nexport type DataLink = {\n  source: number\n  target: number\n  catAttributeValuesCounts: number[] | undefined\n  selected: number[]\n  names: Array<string>\n  value: number\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\n/**\n * Interface that assigns attributes numerical extent.\n * Used for axes' range.\n */\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim().toLowerCase()\n\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","import { SelectableDataType, SelectedKey } from '../types/data/data'\nimport { MatrixItem } from '../types/data/MatrixData'\nimport { LinkDataPoint, NodeDataPoint } from '../types/d3-sankey'\n\nimport { otherCasesToWhitespaces } from './data/formatText'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getRotate = (rotate: number): string => `rotate(${rotate})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getSpaced = (...values: string[]): string => values.join(` `)\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n\nexport type FilterKeys = Pick<LinkDataPoint, `y0` | `y1` | `width`>\n\nexport const getLinkDataPointValuesWithLabel = (data: LinkDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    from: data.names[0],\n    to: data.names[1],\n    count: String(data.value),\n    selected: String(data.selected.reduce((acc, sel) => acc + sel, 0)),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n\nexport const getNodeDataPointValuesWithLabel = (data: NodeDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    attribute: otherCasesToWhitespaces(data.attribute),\n    name: data.name,\n    count: String(data.count),\n    selected: String(data.countSelected),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n\nexport const getLabelledAttribute = (label: string, attribute: keyof SelectableDataType): string =>\n  getSpaced(label, otherCasesToWhitespaces(attribute))\n\nexport const getDisplayAttributesInParentheses = (displayAttributes: Array<keyof SelectableDataType>): string =>\n  `(` + displayAttributes.map((attribute) => otherCasesToWhitespaces(attribute)).join(`; `) + `)`\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const DIALOG_COLORS = {\n  font: `#212121`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonHoverBackground: `#b3bede`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  buttonInlinedFontOn: `#3965c4`,\n  buttonInlinedBgOn: `#e9eeff`,\n  border: `rgba(0, 0, 0, 0.12)`,\n  colorBorder: `#42495d`,\n  buttonDialogBackground: `#363a46`,\n  buttonDialogHoverBackground: `#1f2528`,\n  buttonDialogFont: `#d6e1ff`,\n}\n\nexport const CARD_COLORS = {\n  background: `#f7f8fd`,\n  backgroundHover: `#dce1ef`,\n  border: `#b3bede`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const SETTINGS_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  filterIconFont: `#656d86`,\n  filterBackground: `#52586c`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { calc } from '../helpers/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const SETTINGS_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/stringGetters'\n\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/headerText'\n\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/stringGetters'\n\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { FOOTER_TEXT } from '../../text/footerText'\n\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n    <Box sx={footerStyle.text}>\n      &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n    </Box>\n  </Box>\n)\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { useEffect, useState } from 'react'\n\nexport const useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n  return debouncedValue\n}\n","export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n","export enum ViewType {\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  Glyphs = `glyphs`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  ParallelSetsBundled = `parallelSetsBundled`,\n  DataTable = `dataTable`,\n}\n\n/**\n * Any view with brushing extents (rectangles)\n */\nexport type brushViewType = `brushView`\nexport const brushView: brushViewType = `brushView`\n\nexport const isViewType = (viewType: string): viewType is ViewType => Object.values<string>(ViewType).includes(viewType)\n\n/**\n * True if the view have brushing with extents (rectangles)\n * @param component - component tested\n */\nexport const isBrushView = (component: ViewType | null): boolean =>\n  component === ViewType.ScatterPlotMatrix ||\n  component === ViewType.ScatterPlotGlyphs ||\n  component === ViewType.ParallelCoordinates\n","import {\n  CheckedForSelectableDataType,\n  DataLink,\n  ExtentForSelectableDataType,\n  NominalRecord,\n  NominalValueProperties,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\nimport { NodeDataPoint, SankeyGraph } from '../../types/d3-sankey'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultNominalAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => Object.fromEntries(getCategoryAttributesKeys(dataset).map((key) => [key, true]))\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n\nexport const getNominalValueProperties = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  attribute: keyof SelectableDataType,\n): Array<NominalValueProperties> =>\n  dataset\n    .reduce((nominalValuePropertiesArr, data) => {\n      const containedIdx = nominalValuePropertiesArr.findIndex((values) => values.name === String(data[attribute]))\n      if (containedIdx !== -1) {\n        const prev = nominalValuePropertiesArr[containedIdx]\n        nominalValuePropertiesArr[containedIdx] = {\n          ...prev,\n          count: prev.count + 1,\n          countSelected: prev.countSelected + (data.selected ? 1 : 0),\n        }\n        return nominalValuePropertiesArr\n      }\n      const newNominalValueProperties: Omit<NominalValueProperties, `order`> = {\n        name: String(data[attribute]),\n        attribute,\n        count: 1,\n        countSelected: data.selected ? 1 : 0,\n      }\n      nominalValuePropertiesArr = [...nominalValuePropertiesArr, newNominalValueProperties]\n      return nominalValuePropertiesArr\n    }, [] as Array<Omit<NominalValueProperties, `order`>>)\n    .sort((a, b) => (b.name < a.name ? 1 : b.name > a.name ? -1 : 0))\n    .map((nvp, idx) => ({ ...nvp, order: idx }))\n\nexport const getNominalValuesRecord = (dataset: ReadonlyArray<SelectableDataType>): NominalRecord =>\n  Object.fromEntries(\n    getCategoryAttributesKeys(dataset).map((attribute) => [attribute, getNominalValueProperties(dataset, attribute)]),\n  )\n\nexport const getNeighborAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): Array<[keyof SelectableDataType, keyof SelectableDataType]> =>\n  displayAttributes.slice(0, -1).map((att, idx) => [att, displayAttributes[idx + 1]])\n\nexport const getGraph = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  categoryAttribute: keyof SelectableDataType | undefined,\n  record: NominalRecord,\n  attFrom: keyof SelectableDataType,\n  attTo: keyof SelectableDataType,\n): SankeyGraph => {\n  const nodes: Array<NodeDataPoint> = [...record[attFrom], ...record[attTo]]\n  const toIdxStart = record[attFrom].length\n\n  const catAttributeOptions = categoryAttribute ? record[categoryAttribute].map((props) => props.name) : []\n\n  const links: DataLink[] = record[attFrom].flatMap((from, idxFrom) =>\n    record[attTo].map((to, idxTo) => {\n      const filtered = dataset.filter(\n        (data) => String(data[attFrom]) === String(from.name) && String(data[attTo]) === String(to.name),\n      )\n      return {\n        source: idxFrom,\n        target: idxTo + toIdxStart,\n        names: [from.name, to.name],\n        catAttributeValuesCounts: catAttributeOptions.length\n          ? catAttributeOptions.map(\n              (value) => filtered.filter((data) => String(data[categoryAttribute!]) === value).length,\n            )\n          : undefined,\n        selected: catAttributeOptions.length\n          ? catAttributeOptions.map(\n              (value) => filtered.filter((data) => data.selected && String(data[categoryAttribute!]) === value).length,\n            )\n          : [filtered.filter((data) => data.selected).length],\n        value: filtered.length,\n      }\n    }),\n  )\n\n  return { nodes, links }\n}\n","import { Dimensions } from '../../types/basic/dimensions'\nimport { GridLayoutItem } from '../../types/views/Grid'\nimport { ViewType } from '../views-general/ViewType'\n\nexport const GRID_HEADER_HEIGHT = 30\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 0,\n  height: 0,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ParallelSetsBundled]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n}\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.ParallelSetsBundled]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n}\n\nexport const DEFAULT_GRID_LAYOUT_QUANTITATIVE: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n\nexport const DEFAULT_GRID_LAYOUT_NOMINAL: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 25,\n    h: 20,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n\nexport const LAYOUT_OPT_2: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 30,\n    h: 16,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 30,\n    h: 14,\n    x: 17,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n\nexport const LAYOUT_OPT_3: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 16,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 20,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 11,\n    h: 10,\n    x: 14,\n    y: 20,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 14,\n    h: 14,\n    x: 0,\n    y: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\nexport const LAYOUT_OPT_4: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 15,\n    x: 11,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.ScatterPlotGlyphs,\n    w: 14,\n    h: 15,\n    x: 11,\n    y: 15,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n]\n\nexport const LAYOUT_OPTIONS = [\n  DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n  DEFAULT_GRID_LAYOUT_NOMINAL,\n  LAYOUT_OPT_2,\n  LAYOUT_OPT_3,\n  LAYOUT_OPT_4,\n]\n","import { forwardRef } from 'react'\nimport { Box } from '@mui/material'\n\nexport const BrushOffSvg = forwardRef((props, ref) => (\n  <Box ref={ref} style={{ height: 24 }} {...props}>\n    <svg\n      className=\"MuiSvgIcon-root MuiSvgIcon-fontSizeMedium\"\n      style={{\n        userSelect: `none`,\n        width: `1em`,\n        height: `1em`,\n        display: `inline-block`,\n        fill: `currentColor`,\n        flexShrink: 0,\n        fontSize: `1.5rem`,\n      }}\n      aria-hidden=\"true\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path\n        d=\"M7 14c-1.66 0-3 1.34-3 3 0 1.31-1.16 2-2 2 .92 1.22 2.49 2 4 2 2.21 0 4-1.79 4-4 0-1.66-1.34-3-3-3zm13.71-9.37-1.34-1.34a.9959.9959 0 0 0-1.41 0L9 12.25 11.75 15l8.96-8.96c.39-.39.39-1.02 0-1.41z\"\n        id=\"path2\"\n      />\n      <path\n        d=\"M 3.27,3.26 2,4.53 C 19.47,22 2,4.53 19.47,22 l 1.27,-1.27 c -17.47,-17.47 0,0 -17.47,-17.47 z\"\n        id=\"path4\"\n      />\n    </svg>\n  </Box>\n))\n\nBrushOffSvg.displayName = `ButtonOffSvg`\n","import { forwardRef } from 'react'\nimport { Box } from '@mui/material'\n\nexport const TooltipSvg = forwardRef((props, ref) => (\n  <Box ref={ref} style={{ height: 24 }} {...props}>\n    <svg\n      className=\"MuiSvgIcon-root MuiSvgIcon-fontSizeMedium\"\n      style={{\n        userSelect: `none`,\n        width: `1em`,\n        height: `1em`,\n        display: `inline-block`,\n        fill: `currentColor`,\n        flexShrink: 0,\n        fontSize: `1.5rem`,\n      }}\n      aria-hidden=\"true\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path\n        id=\"path2-2\"\n        style={{ strokeWidth: 1 }}\n        d=\"m 2.0292969,2.6826315 0.039063,15.5214845 c 0,1.091591 0.8902343,1.984375 1.9902344,1.984375 H 20.058594 c 1.1,0 2,-0.892784 2,-1.984375 V 6.2959128 c 0,-1.0915916 -0.900007,-1.988315 -2,-1.984375 L 3.7167969,4.3701315 Z M 5.1757812,8.3642721 H 12.84375 V 9.4170065 H 5.1757812 Z m 0,2.4999999 H 18.375 v 1.052734 H 5.1757812 Z m 0.1171876,2.5 h 8.8671872 v 1.052735 H 5.2929688 Z m -0.015625,2.5 H 17.130859 v 1.052735 H 5.2773438 Z\"\n      />\n    </svg>\n  </Box>\n))\n\nTooltipSvg.displayName = `TooltipSvg`\n","import { AirportShuttle, DirectionsBoat, DirectionsCar, LocalFlorist, Twitter } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport titanicJson from '../../../test-data/titanicData.json'\nimport parallelCarsJson from '../../../test-data/parallelCarsData.json'\n\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flowers = `flower`,\n  birds = `bird`,\n  cars = `car`,\n  titanic = `titanic`,\n  parallelCars = `parallelCars`,\n}\n\nexport const SAMPLE_DATASET_OPTIONS = Object.values(SampleDataset)\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flowers]: <LocalFlorist />,\n  [SampleDataset.birds]: <Twitter />,\n  [SampleDataset.cars]: <DirectionsCar />,\n  [SampleDataset.titanic]: <DirectionsBoat />,\n  [SampleDataset.parallelCars]: <AirportShuttle />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flowers]: flowerJson,\n  [SampleDataset.birds]: birdJson,\n  [SampleDataset.cars]: carJson,\n  [SampleDataset.titanic]: titanicJson,\n  [SampleDataset.parallelCars]: parallelCarsJson,\n}\n","export enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFormat = `unsupportedFileFormat`,\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataNullOptionType } from '../constants/data/data'\nimport { DataLoadError } from '../constants/data/DataLoadError'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display tooltips`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Set brushing at the end of the move only`,\n  labelBrushColor: `Brush color`,\n  addViewDialogTitle: `Add a view`,\n  labelDialogTitle: `Set predefined layout`,\n  noOption: `All view options are currently displayed.`,\n  settings: `Settings`,\n  filter: `Filter`,\n}\n\nexport const SAVE_TEXT = {\n  header: `Save to file`,\n  description: `Do you want to save the visualization to an SVG file?`,\n  save: `Save as SVG`,\n  confirm: `Save`,\n  cancel: `Cancel`,\n}\n\nexport const VIEW_INFO_TEXT = {\n  buttonLabel: `Show view information`,\n  dialog: {\n    brushing: `Brushing`,\n    settings: `Settings`,\n    options: `Options`,\n    close: `Close`,\n  },\n}\n\nexport const FILE_READER_TEXT = {\n  button: `Select a file`,\n  sampleDataLabel: `Try it on the sample data`,\n  sampleDataDialogTitle: `Select sample dataset`,\n  sampleDataDialogText: {\n    [SampleDataset.flowers]: `Flower dataset`,\n    [SampleDataset.birds]: `Bird dataset`,\n    [SampleDataset.cars]: `Car dataset`,\n    [SampleDataset.titanic]: `Titanic dataset`,\n    [SampleDataset.parallelCars]: `Car parallel dataset`,\n  },\n  alertDialog: {\n    [DataLoadError.unsupportedFile]: {\n      title: `File type not supported`,\n      description: `This file type is not supported. Use JSON or CSV file.`,\n    },\n    [DataLoadError.unsupportedFormat]: {\n      title: `File format not supported`,\n      description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n    },\n    confirm: `OK`,\n  },\n  nullDialog: {\n    title: `Data with null values occurred!`,\n    description: `This application provides only basic operations for modifying null data values. For better processing, use applications designed for this purpose.`,\n    confirm: `Confirm`,\n    optionsText: {\n      [DataNullOptionType.leave]: `Leave as is`,\n      [DataNullOptionType.filter]: `Filter`,\n      [DataNullOptionType.change]: `Change all`,\n    },\n    optionsDescription: {\n      [DataNullOptionType.leave]: `This option leaves the data as is. On numeric scales, null values will be cast to 0, in the table they will be displayed as null, for categorical data a separate category will be created.`,\n      [DataNullOptionType.filter]: `This option filters out all data with null values. These data will not be considered further in the application.`,\n      [DataNullOptionType.change]: `This option replaces all null values with the value entered below.`,\n    },\n    changeTo: `Change to`,\n    attribute: `Attribute:`,\n  },\n}\n\nexport const LAYOUT_DIALOG_TEXT = {\n  title: `Set a layout`,\n  alt: `Layout `,\n}\n","export enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/stringGetters'\n\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  middle: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n  right: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n}\n","/**\n * mui types\n */\nexport const COMPONENT_TYPE = {\n  image: `img` as `img`,\n  label: `label` as `label`,\n}\n\nexport const BUTTON_VARIANT = {\n  text: `text` as `text`,\n  outlined: `outlined` as `outlined`,\n  contained: `contained` as `contained`,\n}\n\nexport const DRAWER_VARIANT = {\n  permanent: `permanent` as `permanent`,\n  persistent: `persistent` as `persistent`,\n  temporary: `temporary` as `temporary`,\n}\n\nexport const ANCHOR = {\n  left: `left` as `left`,\n  top: `top` as `top`,\n  right: `right` as `right`,\n  bottom: `bottom` as `bottom`,\n}\n\nexport const CELL_PADDING = {\n  checkbox: `checkbox` as `checkbox`,\n  none: `none` as `none`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonHoverBackground,\n      },\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { BUTTON_VARIANT } from '../../../../../constants/mui'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant={BUTTON_VARIANT.contained} onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { InputBaseComponentProps } from '@mui/material/InputBase'\n\nexport const HTML = {\n  newLine: `<br/>`,\n}\n\nexport const INPUT_TYPE = {\n  color: `color`,\n  number: `number`,\n  file: `file`,\n}\n\nexport const INPUT_PROPS: Record<string, InputBaseComponentProps> = {\n  positiveNumber: { inputMode: `numeric`, min: 0 },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS, HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n\n  padding: isHighlighted ? px(8, 2) : 0,\n  borderRadius: px(10),\n})\n\nexport const fileReaderStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 6, 0, 2),\n    bgcolor: BUTTON_COLORS.buttonOnBackground,\n    color: BUTTON_COLORS.fontOn,\n    '&:hover': {\n      bgcolor: BUTTON_COLORS.buttonHoverBackground,\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, important, px } from '../../../helpers/stringGetters'\n\nimport { SITE_COLORS, ERROR_COLORS, BUTTON_COLORS, CARD_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  description: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n  innerContent: {\n    padding: px(0, 40, 10),\n  },\n  contentBox: {\n    height: px(120),\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  text: {\n    color: SITE_COLORS.font,\n  },\n  toggleDialogGroup: {\n    width: `100%`,\n    marginBottom: px(5),\n    display: `flex`,\n  },\n  toggleDialogButton: {\n    flexGrow: 1,\n    padding: px(6),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonDialogBackground,\n      color: BUTTON_COLORS.buttonDialogFont,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonDialogHoverBackground,\n      },\n    },\n  },\n  button: {\n    margin: px(0, 20, 20),\n  },\n  attHeader: {\n    fontSize: px(16),\n    fontWeight: `bold`,\n    paddingBottom: px(4),\n    color: SITE_COLORS.font,\n  },\n  textInput: {\n    minWidth: `95%`,\n    alignSelf: `center`,\n    '&.MuiFormControl-root': {\n      margin: px(20, 6, 6),\n    },\n    '& input': {\n      padding: px(8, 10, 6),\n    },\n  },\n  card: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    minWidth: px(400),\n    border: border(1, CARD_COLORS.border),\n    margin: px(2),\n    bgcolor: CARD_COLORS.background,\n    '&:hover': {\n      bgcolor: important(CARD_COLORS.backgroundHover),\n      '& img': {\n        opacity: 0.6,\n      },\n    },\n  },\n  image: {\n    width: 220,\n    height: 85,\n    borderRadius: px(2),\n  },\n  cardContent: {\n    padding: px(10),\n  },\n  itemText: {\n    fontSize: px(10),\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.description}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  TextField,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material'\n\nimport { SelectableDataType } from '../../../../../types/data/data'\n\nimport { getLabelledAttribute } from '../../../../../helpers/stringGetters'\n\nimport { DATA_NULL_OPTION_TYPES, DataNullOptionType } from '../../../../../constants/data/data'\nimport { BUTTON_VARIANT } from '../../../../../constants/mui'\n\nimport { FILE_READER_TEXT } from '../../../../../text/siteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface NullDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  nullContainingAttributes: Array<keyof SelectableDataType>\n  dataset: Array<SelectableDataType>\n  setDataset: (dataset: Array<SelectableDataType>) => void\n}\n\nexport const NullDialog: VoidFunctionComponent<NullDialogProps> = ({\n  isOpen,\n  onClose,\n  nullContainingAttributes,\n  dataset,\n  setDataset,\n}) => {\n  const [optionsChosen, setOptionsChosen] = useState<Record<keyof SelectableDataType, DataNullOptionType>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, DataNullOptionType.leave])),\n  )\n  const [replaceValue, setReplaceValue] = useState<Record<keyof SelectableDataType, string>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])),\n  )\n\n  useEffect(() => {\n    setOptionsChosen(Object.fromEntries(nullContainingAttributes.map((att) => [att, DataNullOptionType.leave])))\n    setReplaceValue(Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])))\n  }, [nullContainingAttributes])\n\n  const getFixedDataset = useCallback(\n    (dataset: SelectableDataType[], attribute: keyof SelectableDataType) => {\n      switch (optionsChosen[attribute]) {\n        case DataNullOptionType.filter:\n          return dataset.filter((data) => data[attribute] !== null)\n        case DataNullOptionType.change: {\n          const newValue = !isNaN(Number(replaceValue[attribute]))\n            ? Number(replaceValue[attribute])\n            : replaceValue[attribute]\n          return dataset.map((data) => ({\n            ...data,\n            [attribute]: data[attribute] === null ? newValue : data[attribute],\n          }))\n        }\n        case DataNullOptionType.leave:\n        default:\n          return dataset\n      }\n    },\n    [optionsChosen, replaceValue],\n  )\n\n  const handleNullDialogConfirm = useCallback(() => {\n    let datasetFixed: SelectableDataType[] = dataset\n    nullContainingAttributes.forEach((attribute) => {\n      datasetFixed = getFixedDataset(datasetFixed, attribute)\n    })\n    setDataset(datasetFixed)\n  }, [dataset, getFixedDataset, nullContainingAttributes, setDataset])\n\n  const handleToggleChange = useCallback(\n    (value: DataNullOptionType | null, attribute: keyof SelectableDataType) =>\n      setOptionsChosen((prev) => ({\n        ...prev,\n        [attribute]: value ? value : prev[attribute],\n      })),\n    [],\n  )\n  const handleReplaceChange = useCallback(\n    (value: string, attribute: keyof SelectableDataType) =>\n      setReplaceValue((prev) => ({\n        ...prev,\n        [attribute]: value,\n      })),\n    [],\n  )\n\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{FILE_READER_TEXT.nullDialog.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        <DialogContentText sx={dialogStyle.description}>{FILE_READER_TEXT.nullDialog.description}</DialogContentText>\n        {nullContainingAttributes.map((attribute) => {\n          const option = optionsChosen[attribute]\n          return (\n            <Box key={attribute} sx={dialogStyle.innerContent}>\n              <Typography sx={dialogStyle.attHeader}>\n                {getLabelledAttribute(FILE_READER_TEXT.nullDialog.attribute, attribute)}\n              </Typography>\n              <ToggleButtonGroup\n                sx={dialogStyle.toggleDialogGroup}\n                value={option}\n                exclusive\n                onChange={(e, value) => handleToggleChange(value, attribute)}\n              >\n                {DATA_NULL_OPTION_TYPES.map((optType, idx) => (\n                  <ToggleButton sx={dialogStyle.toggleDialogButton} value={optType} key={idx}>\n                    {FILE_READER_TEXT.nullDialog.optionsText[optType]}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n              <Box sx={dialogStyle.contentBox}>\n                <Typography sx={dialogStyle.text}>{FILE_READER_TEXT.nullDialog.optionsDescription[option]}</Typography>\n                {option === DataNullOptionType.change && (\n                  <TextField\n                    label={FILE_READER_TEXT.nullDialog.changeTo}\n                    sx={dialogStyle.textInput}\n                    defaultValue={replaceValue[attribute]}\n                    onChange={(e) => handleReplaceChange(e.target.value, attribute)}\n                  />\n                )}\n              </Box>\n            </Box>\n          )\n        })}\n      </DialogContent>\n      <DialogActions>\n        <Button variant={BUTTON_VARIANT.contained} onClick={handleNullDialogConfirm} sx={dialogStyle.button} autoFocus>\n          {FILE_READER_TEXT.nullDialog.confirm}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, ChangeEvent } from 'react'\nimport { Box, Button } from '@mui/material'\nimport { Add, AutoGraph } from '@mui/icons-material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\nimport { getAttributeKeys } from '../../../../../helpers/data/data'\n\nimport { AcceptableFileTypes } from '../../../../../constants/data/data'\nimport { DataLoadState } from '../../../../../constants/data/DataLoadState'\nimport {\n  SAMPLE_DATASET_OPTIONS,\n  SampleDataset,\n  sampleDatasetIcons,\n  sampleDatasets,\n} from '../../../../../constants/data/sampleDataset'\nimport { BUTTON_VARIANT, COMPONENT_TYPE } from '../../../../../constants/mui'\nimport { INPUT_TYPE } from '../../../../../constants/others'\nimport { DataLoadError } from '../../../../../constants/data/DataLoadError'\n\nimport { FILE_READER_TEXT } from '../../../../../text/siteText'\n\nimport {\n  fileReaderStyle,\n  getFileReaderBoxStyle,\n} from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\n\nimport { ClickableButton } from '../buttons/ClickableButton'\nimport { NullDialog } from './NullDialog'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: Array<DataType>): Array<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nconst FILE_INPUT_ID = `FILE_INPUT`\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isNullDialogOpen, setIsNullDialogOpen] = useState(false)\n  const [nullContainingAttributes, setNullContainingAttributes] = useState<Array<keyof SelectableDataType>>([])\n  const [rawDataset, setRawDataset] = useState<Array<SelectableDataType>>([])\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const handleListItemClick = useCallback(\n    (optionKey: SampleDataset) => {\n      setIsSampleDataDialogOpen(false)\n      const dataset = sampleDatasets[optionKey]\n      setDataset(addSelected(dataset))\n      setDataLoadState(DataLoadState.Loaded)\n    },\n    [setDataLoadState, setDataset],\n  )\n\n  const closeDialog = useCallback(() => {\n    setIsNullDialogOpen(false)\n    setRawDataset([])\n    setNullContainingAttributes([])\n  }, [])\n\n  const getDatasetFromFile = useCallback(\n    async (fileType: AcceptableFileTypes | string, selectedFile: File): Promise<DataType[] | null> => {\n      switch (fileType) {\n        case AcceptableFileTypes.json: {\n          const text = await selectedFile.text()\n          return JSON.parse(text)\n        }\n        case AcceptableFileTypes.csv: {\n          const textCsv = await selectedFile.text()\n          return CsvParse(textCsv)\n        }\n        default: {\n          return null\n        }\n      }\n    },\n    [],\n  )\n\n  const handleFileChange = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files?.length) {\n        setDataLoadState(DataLoadState.Loading)\n        const selectedFile = e.target.files[0]\n        const fileType = selectedFile.type\n        const dataset = await getDatasetFromFile(fileType, selectedFile)\n\n        if (dataset === null || !isArrayOfDataType(dataset)) {\n          const dataLoadErrorType = dataset === null ? DataLoadError.unsupportedFile : DataLoadError.unsupportedFormat\n          setDataLoadState(DataLoadState.NoData)\n          setAlertDialogText(FILE_READER_TEXT.alertDialog[dataLoadErrorType])\n          setIsAlertDialogOpen(true)\n          setDataset(null)\n          return\n        }\n\n        const selectableDataset = addSelected(dataset)\n        const nullContainingAttributes = getAttributeKeys(selectableDataset).filter((att) =>\n          dataset.some((data) => data[att] === null),\n        )\n        if (nullContainingAttributes.length) {\n          setNullContainingAttributes(nullContainingAttributes)\n          setRawDataset(selectableDataset)\n          setIsNullDialogOpen(true)\n          const fileEl = document.getElementById(FILE_INPUT_ID) as unknown as { value: null }\n          fileEl.value = null\n          return\n        }\n        setDataset(selectableDataset)\n        setDataLoadState(DataLoadState.Loaded)\n      }\n    },\n    [getDatasetFromFile, setDataLoadState, setDataset],\n  )\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={FILE_READER_TEXT.sampleDataDialogTitle}\n        options={SAMPLE_DATASET_OPTIONS.map((key) => ({\n          key,\n          label: FILE_READER_TEXT.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={FILE_READER_TEXT.alertDialog.confirm}\n        alert={true}\n      />\n      <NullDialog\n        isOpen={isNullDialogOpen}\n        onClose={() => {\n          setDataLoadState(DataLoadState.NoData)\n          closeDialog()\n        }}\n        nullContainingAttributes={nullContainingAttributes}\n        dataset={rawDataset}\n        setDataset={(dataset) => {\n          setDataset(dataset)\n          setDataLoadState(DataLoadState.Loaded)\n          closeDialog()\n        }}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={FILE_READER_TEXT.sampleDataLabel}\n        />\n        <Button sx={fileReaderStyle.button} variant={BUTTON_VARIANT.contained} component={COMPONENT_TYPE.label}>\n          <Add />\n          {FILE_READER_TEXT.button}\n          <input type={INPUT_TYPE.file} hidden id={FILE_INPUT_ID} onChange={handleFileChange} />\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction, useCallback } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\nconst ON_VALUE = `on`\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = useCallback(\n    (event: MouseEvent<HTMLElement>, checked: string[]) => {\n      if (checked.length && checked[0] === ON_VALUE) {\n        return setValue(true)\n      }\n      return setValue(false)\n    },\n    [setValue],\n  )\n  return (\n    <ToggleButtonGroup value={value ? [ON_VALUE] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={ON_VALUE} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    padding: px(4),\n    color: BUTTON_COLORS.buttonOnBackground,\n    '& svg': {\n      fontSize: px(30),\n    },\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { IconButton, Tooltip } from '@mui/material'\nimport { Settings } from '@mui/icons-material'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../../text/siteText'\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <IconButton disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Tooltip title={TOP_TOOLBAR_TEXT.settings}>\n      <Settings />\n    </Tooltip>\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const getColorInputStyle = (disabled?: boolean): SxProps => ({\n  display: `flex`,\n  '& .MuiSvgIcon-root': {\n    color: disabled ? BUTTON_COLORS.fontDisabled : BUTTON_COLORS.buttonOnBackground,\n  },\n})\n\nexport const getColorInputBoxStyle = (color: string, disabled?: boolean): SxProps => ({\n  bgcolor: disabled ? BUTTON_COLORS.fontDisabled : color,\n  minWidth: px(25),\n  minHeight: px(25),\n  borderRadius: px(5),\n  ml: px(2),\n  border: border(1, disabled ? BUTTON_COLORS.buttonDisableBackground : BUTTON_COLORS.colorBorder),\n})\n\nexport const colorInputStyle: Record<string, SxProps> = {\n  inputBox: {\n    position: `relative`,\n    '& input': {\n      width: `100%`,\n      opacity: 0,\n      position: `absolute`,\n      left: 0,\n    },\n  },\n}\n","import { useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Box, Tooltip } from '@mui/material'\n\nimport { useDebounce } from '../../../../../helpers/react/useDebounce'\n\nimport { COLOR_DEBOUNCE } from '../../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../../constants/others'\n\nimport {\n  colorInputStyle,\n  getColorInputBoxStyle,\n  getColorInputStyle,\n} from '../../../../../components-style/content/top-toolbar/items/buttons/colorButtonStyle'\n\nexport interface ColorButtonProps {\n  color: string\n  handleSetColor: (color: string) => void\n  tooltip: string\n  disabled?: boolean\n  icon: JSX.Element\n}\n\nexport const ColorButton: VoidFunctionComponent<ColorButtonProps> = ({\n  color,\n  handleSetColor,\n  tooltip,\n  disabled,\n  icon,\n}) => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n  useEffect(() => {\n    handleSetColor(debouncedColor)\n  }, [debouncedColor, handleSetColor])\n\n  return (\n    <Tooltip title={tooltip} disableHoverListener={disabled}>\n      <Box sx={colorInputStyle.inputBox}>\n        <input\n          disabled={disabled}\n          type={INPUT_TYPE.color}\n          value={color}\n          onChange={(e) => setCurrentColor(e.target.value)}\n        />\n        <Box sx={getColorInputStyle(disabled)}>\n          {icon}\n          <Box sx={getColorInputBoxStyle(color, disabled)} />\n        </Box>\n      </Box>\n    </Tooltip>\n  )\n}\n","export const TEXT_INPUT_DEBOUNCE = 400\n\nexport const BRUSH_DEBOUNCE = 10\n\nexport const COLOR_DEBOUNCE = 60\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box } from '@mui/material'\nimport { AddCircle, Brush, Dashboard, SkipNext } from '@mui/icons-material'\n\nimport { BrushOffSvg } from '../../../../icons/BrushOffSvg'\nimport { TooltipSvg } from '../../../../icons/TooltipSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\nimport { ColorButton } from './items/buttons/ColorButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: () => void\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsLayoutDialogOpen: Dispatch<SetStateAction<boolean>>\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  removeLayout: () => void\n\n  brushColor: string\n  setBrushColor: Dispatch<SetStateAction<string>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n  setIsLayoutDialogOpen,\n  removeLayout,\n  brushColor,\n  setBrushColor,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelAddView}\n      />\n      <ClickableButton\n        onClick={() => {\n          setIsLayoutDialogOpen(true)\n          removeLayout()\n        }}\n        icon={<Dashboard />}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDialogTitle}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ToggleButtonSingle\n        icon={<TooltipSvg />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.middle}>\n      <ColorButton\n        color={brushColor}\n        handleSetColor={(color) => setBrushColor(color)}\n        icon={<Brush />}\n        disabled={isToolsDisabled}\n        tooltip={TOP_TOOLBAR_TEXT.labelBrushColor}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<BrushOffSvg />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Constants to work with svg D3.js.\n */\nexport const SVG = {\n  elements: {\n    svg: `svg` as `svg`,\n    g: `g` as `g`,\n    circle: `circle` as `circle`,\n    rect: `rect` as `rect`,\n    path: `path` as `path`,\n    text: `text` as `text`,\n    div: `div` as `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    stroke: `stroke`,\n    strokeWidth: `stroke-width`,\n    textAnchor: `text-anchor`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n    start: `start`,\n    end: `end`,\n    middle: `middle`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from '../stringGetters'\n\nexport const setDisplay = (isVisible: boolean | undefined, displayClass: string): void => {\n  if (isVisible) {\n    selectAll(getClass(displayClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(displayClass)).style(SVG.style.display, SVG.values.none)\n}\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nexport const SETTINGS_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const SETTINGS_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...SETTINGS_BASE_TEXT,\n}\n\nexport const MARGIN_SETTINGS_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_SETTINGS_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER_TEXT = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.ParallelSetsBundled]: `Parallel Sets (bundled layout)`,\n  [ViewType.DataTable]: `Data Table`,\n}\n\ninterface InfoDialogText {\n  description: string\n  descriptionBrushing: string\n  descriptionSettings: string\n  descriptionSettingsMore: string\n}\n\nexport const INFO_DIALOG_TEXT: Record<ViewType, InfoDialogText> = {\n  [ViewType.ParallelCoordinates]: {\n    description: `Parallel coordinates are used to display the values of quantitative attributes. Each axis corresponds to one attribute and its range is from the minimum to the maximum of its values. The individual items are then displayed as a polyline between these axes. To use this method, the dataset must contain at least two numeric attributes.`,\n    descriptionBrushing: `Parallel coordinates use brushing on their axes. On them, you can drag to select the ranges that determine the selected items. Items that traverse all ranges are selected. Brushing is exclusive for parallel coordinates, so it deletes the previous selection from other views.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed on the axes or change their order. You can also specify the nominal attribute according to which the individual polylines will be colored.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the width of the polyline, the transparency when brushing or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    description: `Scatter plot matrix are used to display the values of quantitative attributes. Attributes are assigned the rows and columns of the matrix so that each has exactly one row and one column of the same index. In the matrix, the value of the attribute is plotted on the y-axis in each row and on the x-axis in each column, so it creates scatter plot in every cell. Items are displayed in each of this scatter plot as data points.  To use this method, the dataset must contain at least two numeric attributes.`,\n    descriptionBrushing: `Scatter plot matrix use brushing in one of its cells. In the cell, select desired points with rectangle selection, in other scatter plots, selected points will be highlighted. Brushing is exclusive for scatter plot matrix, so it deletes the previous selection from other views.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed in the matrix or change their order.  You can also specify the nominal attribute according to which the individual points will be colored.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the size of the point, horizontal or vertical spacing between cells, the transparency when brushing or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.Glyphs]: {\n    description: `Glyphs are used to display the values of quantitative attributes. An axis is created for each attribute and these axes are arranged in a circle, gradually from the upper axis in a clockwise direction. Values are plotted on these axes so that the minima are close to the center and the maxima far from it. Glyphs are then sorted by one attribute and displayed in lines (as in text). To use this method, the dataset must contain at least three numeric attributes.`,\n    descriptionBrushing: `Glyphs use brushing by clicking on them. After clicking on an unselected glyph, it is added to the selection, if it is already selected, it is removed. Brushing is not exclusive for glyphs, so the previous selection is used.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed on radial scales (on glyph), or change their order. You can also specify a nominal attribute to color individual glyphs and choose which attribute to use for sorting and whether to sort ascending or descending.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg, the size of the glyph, spacing between glyphs, the transparency when brushing or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    description: `Scatter plot glyphs are used to display the values of quantitative attributes. An axis is created for each attribute and these axes are arranged in a circle, gradually from the upper axis in a clockwise direction. Values are plotted on these axes so that the minima are close to the center and the maxima far from it. Two attributes are used for the x and y axes, and the glyphs are then positioned according to the values of these attributes. To use this method, the dataset must contain at least three numeric attributes.`,\n    descriptionBrushing: `Scatter chart glyphs use brushes in the form of a rectangular selection, glyphs are selected if their center is inside of it. Brushing is exclusive for scatter plot glyphs, so it deletes the previous selection from other views.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed on radial scales (on glyph), or change their order. You can select the attributes to be used for the x-axis and y-axis. You can also specify a nominal attribute to color individual glyphs.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the size of the glyph, the transparency when brushing or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.ParallelSetsBundled]: {\n    description: `Parallel sets (bundled) are used to display the ratios of nominal attribute values. Each axis corresponds to one nominal attribute and is divided into parts according to the possible values of the attribute. The length of the parts is then determined by the ratio of the values to the total number of items. From these parts, the curves lead to parts of adjacent axes, with thickness according to the ratio of items that have both of the values of the attributes, relative to the length of the part. To use this method, the dataset must contain at least two nominal attributes.`,\n    descriptionBrushing: `Parallel sets use brushing on their axes, by clicking on parts with specific values. When you click on this section, the highlighted ratios with this value will be displayed on each curve. If the part is already selected (line is brushed - colored), all items with this value are removed from the selection and are thus also removed from the ratios. This allows various Boolean operations by this brushing. Brushing is not exclusive for parallel sets, so the previous selection is used.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed on the axes or change their order. You can also specify the nominal attribute according to which the individual curves will be divided (with their value ratio) and colored, and you can choose if brushing will be displayed over the curves or in the top part.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the width of the tabs, horizontal spacing between tabs, vertical gaps between tabs, color of inner value font, the transparency when brushing or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.DataTable]: {\n    description: `The data table is used to display the values of all attributes. Items are displayed in rows, they can be filtered (the filter can be turned on in the view top bar), sorted by any atribute (by clicking on arrow next to label, also by selected) ascending or descending.`,\n    descriptionBrushing: `The table uses brushing by the check box in the row. The table also has a Select All checkbox, which selects/deselects all values that pass filters when clicked. Brushing is not exclusive for data table, so the previous selection is used.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed in the columns or change their order.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the table row height, selected background color and selected font color.`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { TOOLTIP } from '../../../constants/views-general/tooltip'\n\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","export const SETTINGS_DRAWER_TEXT = {\n  description: `This application uses React and D3.js.`,\n  openSource: `Source code is available at`,\n  github: `Github`,\n  hide: `Hide`,\n}\n\nexport const GITHUB_LINK = `https://github.com/stetizu1/table-data-visualization`\n","import { SxProps } from '@mui/system'\n\nimport { border, calc, px } from '../../../helpers/stringGetters'\n\nimport { SETTINGS_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const settingsDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: SETTINGS_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, SETTINGS_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  fill: {\n    flexGrow: 1,\n  },\n  header: {},\n  chevron: {\n    color: SETTINGS_DRAWER_COLORS.icon,\n  },\n  setting: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n  footer: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n  },\n  githubIcon: {\n    paddingRight: px(6),\n    fontSize: px(18),\n  },\n  text: {\n    color: SETTINGS_DRAWER_COLORS.icon,\n    fontSize: px(9),\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `center`,\n  },\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [10, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from settings.`,\n}\n\nexport const PARALLEL_COORDINATES_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...SETTINGS_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/stringGetters'\n\nimport { SETTINGS_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { SETTINGS_DRAWER_FONT } from '../../../styles/font'\n\nexport const settingsDrawerItemStyle: Record<string, SxProps> = {\n  drawerSettings: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: SETTINGS_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, SETTINGS_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, SETTINGS_DRAWER_COLORS.drawerItemBorder),\n      fontSize: SETTINGS_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: SETTINGS_DRAWER_FONT.labelFontSize,\n      color: SETTINGS_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: SETTINGS_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: SETTINGS_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<Opt extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: Opt) => Partial<Opt>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <Opt extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<Opt>): JSX.Element => {\n  const handleCheckboxChange = useCallback(\n    (eventChecked: boolean, key: keyof SelectableDataType) => {\n      const newChecked = { ...checked, [key]: eventChecked }\n      setChecked(newChecked)\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        const newSettings = getNewSettings(newChecked, prevSettings)\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            ...newSettings,\n          },\n        }\n      })\n    },\n    [checked, getNewSettings, handleChangeSettings, setChecked, setSettings, viewType],\n  )\n  const handleMove = useCallback(\n    (newAttributesKeys: Array<keyof SelectableDataType>) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setAttributesKeys(newAttributesKeys)\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n          },\n        }\n      })\n    },\n    [checked, handleChangeSettings, setAttributesKeys, setSettings, viewType],\n  )\n\n  const onUpButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  const onDownButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT } from '../../../../text/views-and-settings/common'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = useCallback(\n    (categoryAttribute: keyof SelectableDataType | -1) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n          },\n        }\n      })\n    },\n    [setSettings, viewType],\n  )\n\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{SETTINGS_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nimport { SETTINGS_DRAWER_FONT } from '../../../../styles/font'\n\nexport const settingsTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(SETTINGS_DRAWER_FONT.fontSize),\n    padding: px(6, 5, 3),\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_PROPS, INPUT_TYPE } from '../../../../constants/others'\n\nimport { MARGIN_SETTINGS_TEXT } from '../../../../text/views-and-settings/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  handleChangeSettings?: () => void\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({\n  margins,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentMargins, setCurrentMargins] = useState<MarginArray>(margins)\n  const debouncedMargins = useDebounce(currentMargins, TEXT_INPUT_DEBOUNCE)\n\n  const handleMarginChange = useCallback((newMargin: number, idx: number) => {\n    setCurrentMargins((oldMargins) => {\n      const newMargins: MarginArray = [...oldMargins]\n      newMargins[idx] = newMargin\n      return newMargins\n    })\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: debouncedMargins,\n        },\n      }\n    })\n  }, [debouncedMargins, handleChangeSettings, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={settingsTextStyle.text}>{MARGIN_SETTINGS_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.top}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.right}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.bottom}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.left}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { InputBaseComponentProps } from '@mui/material/InputBase'\n\nimport { INPUT_PROPS } from '../../constants/others'\n\nexport const getInputPropsPositiveNumber = ({ min, max }: { min?: number; max?: number }): InputBaseComponentProps => {\n  const minVal = min ? { min } : {}\n  const maxVal = max ? { max } : {}\n  return {\n    ...INPUT_PROPS.positiveNumber,\n    ...minVal,\n    ...maxVal,\n  }\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { getInputPropsPositiveNumber } from '../../../../helpers/basic/getInputPropsPositiveNumber'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { OPACITY_SETTINGS_TEXT } from '../../../../text/views-and-settings/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacities: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({\n  header,\n  opacities,\n  setSettings,\n  viewType,\n}) => {\n  const [currentOpacities, setCurrentOpacities] = useState<Opacity>(opacities)\n  const debouncedOpacities = useDebounce(currentOpacities, TEXT_INPUT_DEBOUNCE)\n\n  const handleOpacityChange = useCallback((newOpacity: number, idx: number) => {\n    setCurrentOpacities((oldOpacities) => {\n      const newOpacities: Opacity = [...oldOpacities]\n      newOpacities[idx] = newOpacity\n      return newOpacities\n    })\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: debouncedOpacities,\n        },\n      }\n    })\n  }, [debouncedOpacities, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={settingsTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_SETTINGS_TEXT.all}\n        type={INPUT_TYPE.number}\n        defaultValue={opacities[0]}\n        sx={numberInputStyles.textField}\n        inputProps={getInputPropsPositiveNumber({ max: 100 })}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_SETTINGS_TEXT.selected}\n          type={INPUT_TYPE.number}\n          defaultValue={opacities[1]}\n          sx={numberInputStyles.textField}\n          inputProps={getInputPropsPositiveNumber({ max: 100 })}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_SETTINGS_TEXT.notSelected}\n          type={INPUT_TYPE.number}\n          defaultValue={opacities[2]}\n          sx={numberInputStyles.textField}\n          inputProps={getInputPropsPositiveNumber({ max: 100 })}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { getInputPropsPositiveNumber } from '../../../../helpers/basic/getInputPropsPositiveNumber'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nexport interface NumberInputProps<Opt> {\n  viewType: ViewType\n  label: string\n  valueKey: keyof Opt\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <Opt,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<Opt>): JSX.Element => {\n  const [currentValue, setCurrentValue] = useState(value)\n  const debouncedValue = useDebounce(currentValue, TEXT_INPUT_DEBOUNCE)\n\n  const handleChangeValue = useCallback((newValue: number) => {\n    setCurrentValue(newValue)\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: debouncedValue,\n        },\n      }\n    })\n  }, [debouncedValue, setSettings, valueKey, viewType, handleChangeValue, handleChangeSettings])\n\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type={INPUT_TYPE.number}\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={getInputPropsPositiveNumber({ min, max })}\n        onChange={(e) => handleChangeValue(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nimport { SETTINGS_DRAWER_FONT } from '../../../../styles/font'\n\nexport const getPalettePickerColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(SETTINGS_DRAWER_FONT.fontSize),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useEffect, useCallback } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { PALETTE_PICKER_TEXT } from '../../../../text/views-and-settings/common'\n\nimport {\n  getPalettePickerColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({\n  colors,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentColors, setCurrentColors] = useState<ColorArray>(colors)\n  const debouncedColors = useDebounce(currentColors, COLOR_DEBOUNCE)\n\n  const handleSetColor = useCallback((newColor: string, idx: number) => {\n    if (newColor) {\n      setCurrentColors((oldColors) => {\n        const newColors: ColorArray = [...oldColors]\n        newColors[idx] = newColor\n        return newColors\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          colorCategory: debouncedColors,\n        },\n      }\n    })\n  }, [debouncedColors, setSettings, viewType, handleChangeSettings])\n\n  const getInput = useCallback(\n    (idx: number) => (\n      <Box sx={palettePickerStyle.col} key={idx}>\n        <label>{PALETTE_PICKER_TEXT.categoriesLabel[idx]}</label>\n        <Box sx={getPalettePickerColorInputStyle(colors, idx)}>\n          <input type={INPUT_TYPE.color} value={colors[idx]} onChange={(e) => handleSetColor(e.target.value, idx)} />\n        </Box>\n      </Box>\n    ),\n    [colors, handleSetColor],\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER_TEXT.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { PARALLEL_COORDINATES_SETTINGS_TEXT } from '../../../../text/views-and-settings/parallelCoordinates'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelCoordinatesSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesSettings(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ParallelCoordinates),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{PARALLEL_COORDINATES_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_SETTINGS_TEXT.category}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_SETTINGS_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_SETTINGS_TEXT.opacity}\n                  opacities={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>\n            {PARALLEL_COORDINATES_SETTINGS_TEXT.unavailable}\n          </Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `Scatter plot cannot be displayed, window is too small. Change the size, number of attributes displayed or margin to display scatter plot matrix`,\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from settings.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...SETTINGS_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_SETTINGS_TEXT } from '../../../../text/views-and-settings/scatterPlotMatrix'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createScatterPlotMatrixSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixSettings(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotMatrix),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{SCATTER_PLOT_MATRIX_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.category}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <Typography sx={settingsTextStyle.text}>{SCATTER_PLOT_MATRIX_SETTINGS_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.opacity}\n                  opacities={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>\n            {SCATTER_PLOT_MATRIX_SETTINGS_TEXT.unavailable}\n          </Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\n\nimport { SortType } from '../sort/SortType'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","export enum ParallelSetsBrushingType {\n  top = `top`,\n  overlay = `overlay`,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from settings.`,\n}\n\nexport const GLYPHS_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  sort: `Sort...`,\n  ...SETTINGS_TEXT,\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = useCallback(\n    (newValue: keyof SelectableDataType) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [handleChangeSettings, setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { important, px } from '../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  box: {\n    marginTop: important(0),\n  },\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = useCallback(\n    (newValue: T | null) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        const newSetting = newValue ? { [settingsKey]: newValue } : {}\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            ...newSetting,\n          },\n        }\n      })\n    },\n    [setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <Box sx={toggleButtonsStyle.box}>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SortType } from '../../../../constants/sort/SortType'\n\nimport { GLYPHS_SETTINGS_TEXT } from '../../../../text/views-and-settings/glyphs'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\n\nexport const GlyphsSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n}) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createGlyphsSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsSettings(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType, prevSettings: GlyphsSettings): Partial<GlyphsSettings> => {\n      const displayAttributes = getCurrentDisplayAttributes(newChecked)\n      const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n      const sortAttribute = newChecked[prevSettings.sortAttribute]\n        ? prevSettings.sortAttribute\n        : newSortableAttributes?.[0]\n      return { displayAttributes, sortAttribute }\n    },\n    [getCurrentDisplayAttributes, quantitativeAttributesKeys],\n  )\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{GLYPHS_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_SETTINGS_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_SETTINGS_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <Typography sx={settingsTextStyle.text}>{GLYPHS_SETTINGS_TEXT.sort}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_SETTINGS_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_SETTINGS_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_SETTINGS_TEXT.opacity}\n                  opacities={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>{GLYPHS_SETTINGS_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { SortType } from '../../../constants/sort/SortType'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 20, 30],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from settings.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...SETTINGS_TEXT,\n}\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  glyphSizeKey,\n  ScatterPlotGlyphsSettings,\n  xAttributeKey,\n  yAttributeKey,\n} from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { SCATTER_PLOT_GLYPHS_SETTINGS_TEXT } from '../../../../text/views-and-settings/scatterPlotGlyphs'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createScatterPlotGlyphsSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsSettings(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<ScatterPlotGlyphsSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotGlyphs),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.category}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.opacity}\n                  opacities={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>\n            {SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.unavailable}\n          </Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\n\nimport { DEFAULT_BRUSH_BG_COLOR_TABLE, DEFAULT_BRUSH_FONT_COLOR_TABLE } from '../views-general/defaultSettableColors'\n\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\nexport const DATA_TABLE_DEFAULT: Pick<\n  DataTableSettings,\n  `rowHeight` | `selectedBackgroundColor` | `selectedFontColor`\n> = {\n  rowHeight: 45,\n  selectedBackgroundColor: DEFAULT_BRUSH_BG_COLOR_TABLE,\n  selectedFontColor: DEFAULT_BRUSH_FONT_COLOR_TABLE,\n}\n","export const DEFAULT_BRUSH_COLOR = `#830606`\nexport const DEFAULT_BRUSH_BG_COLOR_TABLE = `#ffcfcf`\nexport const DEFAULT_BRUSH_FONT_COLOR_TABLE = `#111111`\nexport const DEFAULT_FONT_COLOR_PARALLEL_SETS = `#252525`\n","import { ViewType } from '../../constants/views-general/ViewType'\nimport { SortType } from '../../constants/sort/SortType'\n\nimport { SETTINGS_BASE_TEXT, VIEW_NAMES } from './common'\n\nexport const DATA_TABLE_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes him not valid. Please choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  selectedBackgroundColor: `Selected background color`,\n  selectedFontColor: `Selected font color`,\n  ...SETTINGS_BASE_TEXT,\n}\n\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascending`,\n  [SortType.desc]: `Sort descending`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from settings.`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const getColorPickerInputStyle = (color: string): SxProps => ({\n  bgcolor: color,\n  width: px(25),\n  borderRadius: px(5),\n  '& input': {\n    width: `100%`,\n    height: px(25),\n    opacity: 0,\n  },\n})\n\nexport const colorPickerStyle: Record<string, SxProps> = {\n  picker: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `center`,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport {\n  colorPickerStyle,\n  getColorPickerInputStyle,\n} from '../../../../components-style/content/data-drawer/items/colorPickerStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nexport interface ColorPickerProps<Opt> {\n  viewType: ViewType\n  color: string\n  settingsKey: keyof Opt\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const ColorPicker = <Opt,>({\n  viewType,\n  color,\n  settingsKey,\n  setSettings,\n  label,\n}: ColorPickerProps<Opt>): JSX.Element => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n\n  const handleChangeColor = useCallback((newColor: string) => {\n    if (newColor) {\n      setCurrentColor(newColor)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: debouncedColor,\n        },\n      }\n    })\n  }, [debouncedColor, setSettings, settingsKey, viewType])\n  return (\n    <Box sx={colorPickerStyle.picker}>\n      <Typography sx={settingsTextStyle.text}>{label}</Typography>\n      <Box sx={getColorPickerInputStyle(color)}>\n        <input type={INPUT_TYPE.color} value={color} onChange={(e) => handleChangeColor(e.target.value)} />\n      </Box>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  DataTableSettings,\n  rowHeightKey,\n  selectedBackgroundColorKey,\n  selectedFontColorKey,\n} from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_SETTINGS_TEXT } from '../../../../text/views-and-settings/dataTable'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const DataTableSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n}) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => attributesKeys.filter((key) => currChecked[key]),\n    [attributesKeys],\n  )\n\n  const createDataTableSettings = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableSettings(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{DATA_TABLE_SETTINGS_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  viewType={viewType}\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_SETTINGS_TEXT.rowHeight}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedBackgroundColor}\n                  settingsKey={selectedBackgroundColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_SETTINGS_TEXT.selectedBackgroundColor}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedFontColor}\n                  settingsKey={selectedFontColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_SETTINGS_TEXT.selectedFontColor}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>{DATA_TABLE_SETTINGS_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { VisualizationSettings } from './VisualizationSettings'\n\nexport const rowHeightKey = `rowHeight`\nexport const selectedBackgroundColorKey = `selectedBackgroundColor`\nexport const selectedFontColorKey = `selectedFontColor`\n\n/**\n * Settings for Data Table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n\n  /**\n   * Selected background color\n   */\n  [selectedBackgroundColorKey]: string\n\n  /**\n   * Selected font color\n   */\n  [selectedFontColorKey]: string\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { ParallelSetsBrushingType } from '../brushing-type/ParallelSetsBrushingType'\nimport { DEFAULT_FONT_COLOR_PARALLEL_SETS } from '../views-general/defaultSettableColors'\n\nexport const MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_SETS_BUNDLED_DEFAULT: Pick<\n  ParallelSetsBundledSettings,\n  `margins` | `opacity` | `colorCategory` | `tabWidth` | `tabSpacing` | `tabGap` | `brushingType` | `fontColor`\n> = {\n  margins: [5, 50, 10, 50],\n  opacity: [60, 70, 25],\n  colorCategory: schemeCategory10 as ColorArray,\n  tabWidth: 8,\n  tabSpacing: 3,\n  tabGap: 10,\n  brushingType: ParallelSetsBrushingType.top,\n  fontColor: DEFAULT_FONT_COLOR_PARALLEL_SETS,\n}\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseAction {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\nimport { SETTINGS_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_SETS_BUNDLED_TEXT = {\n  unavailable: `Parallel sets plot cannot be displayed with a single attribute. To generate a parallel sets plot, select multiple attributes from settings.`,\n}\n\nexport const PARALLEL_SETS_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelSetsBundled],\n  unavailable: `The parallel sets plot cannot be used while data has less than 2 nominal attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of connectors`,\n  tabWidth: `Width of the tabs`,\n  tabSpacing: `Spacing between tabs`,\n  tabGap: `Gap between tabs`,\n  brushing: `Brushing...`,\n  fontColor: `Inner font color`,\n  ...SETTINGS_TEXT,\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  ParallelSetsBundledSettings,\n  brushingTypeKey,\n  fontColorKey,\n  tabGapKey,\n  tabSpacingKey,\n  tabWidthKey,\n} from '../../../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { getCategoryAttributesKeys, getDefaultNominalAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport {\n  MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT,\n  PARALLEL_SETS_BUNDLED_DEFAULT,\n} from '../../../../constants/views/parallelSetsBundled'\nimport { ParallelSetsBrushingType } from '../../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_SETTINGS_TEXT } from '../../../../text/views-and-settings/parallelSetsBundled'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const ParallelSetsBundledSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n}) => {\n  const viewType = ViewType.ParallelSetsBundled\n  const parallelSetsBundledSettings = settings[viewType]\n\n  const [nominalAttributesKeys, setNominalAttributesKeys] = useState(getCategoryAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultNominalAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => nominalAttributesKeys.filter((key) => currChecked[key]),\n    [nominalAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelSetsBundledSettings = useCallback(() => {\n    const newChecked = getDefaultNominalAttributesChecked(dataset)\n    const newCatKeys = getCategoryAttributesKeys(dataset)\n    setChecked(newChecked)\n    setNominalAttributesKeys(newCatKeys)\n    setSettings((prev) => {\n      const newParallelSetsBundled: ParallelSetsBundledSettings = {\n        displayAttributes: newCatKeys.filter((key) => newChecked[key]),\n        categoryAttribute: newCatKeys[0],\n        ...PARALLEL_SETS_BUNDLED_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelSetsBundled]: newParallelSetsBundled }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelSetsBundledSettings(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (parallelSetsBundledSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{PARALLEL_SETS_SETTINGS_TEXT.header}</h1>\n        {nominalAttributesKeys.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={nominalAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_SETS_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setNominalAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelSetsBundledSettings.categoryAttribute!}\n              attributesKeys={nominalAttributesKeys}\n              setSettings={setSettings}\n              label={PARALLEL_SETS_SETTINGS_TEXT.category}\n            />\n            <Typography sx={settingsTextStyle.text}>{PARALLEL_SETS_SETTINGS_TEXT.brushing}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={parallelSetsBundledSettings.brushingType}\n              options={Object.values<ParallelSetsBrushingType>(ParallelSetsBrushingType)}\n              setSettings={setSettings}\n              settingsKey={brushingTypeKey}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_SETS_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelSetsBundledSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.tabWidth}\n                  valueKey={tabWidthKey}\n                  value={parallelSetsBundledSettings.tabWidth}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.tabSpacing}\n                  valueKey={tabSpacingKey}\n                  value={parallelSetsBundledSettings.tabSpacing}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.tabGap}\n                  valueKey={tabGapKey}\n                  value={parallelSetsBundledSettings.tabGap}\n                  setSettings={setSettings}\n                />\n                <Divider />\n                <ColorPicker\n                  viewType={viewType}\n                  color={parallelSetsBundledSettings.fontColor}\n                  settingsKey={fontColorKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.fontColor}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_SETS_SETTINGS_TEXT.opacity}\n                  opacities={parallelSetsBundledSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelSetsBundledSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>{PARALLEL_SETS_SETTINGS_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ParallelSetsBrushingType } from '../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const tabWidthKey = `tabWidth`\nexport const tabSpacingKey = `tabSpacing`\nexport const tabGapKey = `tabGap`\nexport const brushingTypeKey = `brushingType`\nexport const fontColorKey = `fontColor`\n\n/**\n * Settings for Parallel Sets Bundled view\n */\nexport interface ParallelSetsBundledSettings extends ViewVisualizationSettings {\n  /**\n   * Brushing - displayed from top top or overlay\n   */\n  [brushingTypeKey]: ParallelSetsBrushingType\n\n  /**\n   * Width of a tab\n   */\n  [tabWidthKey]: number\n\n  /**\n   * Spacing of tabs\n   */\n  [tabSpacingKey]: number\n\n  /**\n   * Gap between tabs (vertically)\n   */\n  [tabGapKey]: number\n\n  /**\n   * Font color\n   */\n  [fontColorKey]: string\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useMemo } from 'react'\nimport { Box, Divider, Drawer, IconButton, Link, Tooltip, Typography } from '@mui/material'\nimport { ChevronRight, GitHub } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { ANCHOR, DRAWER_VARIANT } from '../../../constants/mui'\n\nimport { SETTINGS_DRAWER_TEXT, GITHUB_LINK } from '../../../text/settingsDrawerText'\n\nimport { settingsDrawerStyle } from '../../../components-style/content/data-drawer/settingsDrawerStyle'\n\nimport { ParallelCoordinatesSettingsComponent } from '../views/parallel-coordinates/ParallelCoordinatesSettingsComponent'\nimport { ScatterPlotMatrixSettingsComponent } from '../views/scatter-plot-matrix/ScatterPlotMatrixSettingsComponent'\nimport { GlyphsSettingsComponent } from '../views/glyphs/GlyphsSettingsComponent'\nimport { ScatterPlotGlyphsSettingsComponent } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsSettingsComponent'\nimport { DataTableSettingsComponent } from '../views/data-table/DataTableSettingsComponent'\nimport { ParallelSetsBundledSettingsComponent } from '../views/parallel-sets-bundeled/ParallelSetsBundledSettingsComponent'\n\nexport interface SettingsDrawerProps {\n  isOpen: boolean\n  close: () => void\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const SettingsDrawer: VoidFunctionComponent<SettingsDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const settingsComponents = useMemo(\n    () =>\n      views.map((view, idx) => {\n        switch (view) {\n          case ViewType.Glyphs:\n            return (\n              <GlyphsSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelCoordinates:\n            return (\n              <ParallelCoordinatesSettingsComponent\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotMatrix:\n            return (\n              <ScatterPlotMatrixSettingsComponent\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotGlyphs:\n            return (\n              <ScatterPlotGlyphsSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.DataTable:\n            return (\n              <DataTableSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelSetsBundled:\n            return (\n              <ParallelSetsBundledSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          default:\n            return null\n        }\n      }),\n    [cleanSelectedIfViewWasBrushing, dataset, setSettings, settings, views],\n  )\n  return (\n    <Drawer variant={DRAWER_VARIANT.persistent} anchor={ANCHOR.right} open={isOpen} sx={settingsDrawerStyle.drawer}>\n      <Box sx={settingsDrawerStyle.header}>\n        <IconButton onClick={close}>\n          <Tooltip title={SETTINGS_DRAWER_TEXT.hide}>\n            <ChevronRight sx={settingsDrawerStyle.chevron} />\n          </Tooltip>\n        </IconButton>\n      </Box>\n      <Divider />\n      <Box sx={settingsDrawerStyle.setting}>{settingsComponents}</Box>\n      <Box sx={settingsDrawerStyle.fill} />\n      <Box sx={settingsDrawerStyle.footer}>\n        <Typography sx={settingsDrawerStyle.text}>{SETTINGS_DRAWER_TEXT.description}</Typography>\n        <Typography sx={settingsDrawerStyle.text}>{SETTINGS_DRAWER_TEXT.openSource}</Typography>\n        <Link href={GITHUB_LINK} sx={settingsDrawerStyle.text}>\n          <GitHub sx={settingsDrawerStyle.githubIcon} />\n          {SETTINGS_DRAWER_TEXT.github}\n        </Link>\n      </Box>\n    </Drawer>\n  )\n}\n","import { ViewType } from './views-general/ViewType'\n\nexport const PUBLIC_PATH = `/table-data-visualization/`\n\nexport const PUBLIC_IMAGE_PATH = PUBLIC_PATH + `images/`\n\nexport const LAYOUT_IMAGES = [`layout_0.png`, `layout_1.png`, `layout_2.png`, `layout_3.png`, `layout_4.png`].map(\n  (imgName) => PUBLIC_IMAGE_PATH + imgName,\n)\n\nexport const BRUSHING_IMAGES = Object.fromEntries(\n  [\n    [ViewType.ParallelCoordinates, `brushing_pc.png`],\n    [ViewType.ScatterPlotMatrix, `brushing_spm.png`],\n    [ViewType.Glyphs, `brushing_g.png`],\n    [ViewType.ScatterPlotGlyphs, `brushing_spg.png`],\n    [ViewType.DataTable, `brushing_dt.png`],\n    [ViewType.ParallelSetsBundled, `brushing_psb.png`],\n  ].map(([view, address]) => [view, PUBLIC_IMAGE_PATH + address]),\n)\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Card, CardContent, CardMedia, Dialog, DialogContent, DialogTitle, Divider, Typography } from '@mui/material'\n\nimport { GridLayoutItem } from '../../../../../types/views/Grid'\n\nimport { otherCasesToWhitespaces } from '../../../../../helpers/data/formatText'\n\nimport { LAYOUT_OPTIONS } from '../../../../../constants/layout/layout'\nimport { LAYOUT_IMAGES } from '../../../../../constants/public-path'\nimport { COMPONENT_TYPE } from '../../../../../constants/mui'\n\nimport { LAYOUT_DIALOG_TEXT } from '../../../../../text/siteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface LayoutDialogProps {\n  isOpen: boolean\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  onClose: () => void\n  lastLayout: GridLayoutItem[] | null\n}\n\nexport const LayoutDialog: VoidFunctionComponent<LayoutDialogProps> = ({ isOpen, onClose, setLayout, lastLayout }) => {\n  const handleClose = () => {\n    setLayout(lastLayout)\n    onClose()\n  }\n  return (\n    <Dialog onClose={handleClose} open={isOpen}>\n      <DialogTitle>{LAYOUT_DIALOG_TEXT.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        {LAYOUT_OPTIONS.map((layoutItems, idx) => (\n          <Card\n            key={idx}\n            onClick={() => {\n              setLayout(layoutItems)\n              onClose()\n            }}\n            sx={dialogStyle.card}\n          >\n            <CardContent sx={dialogStyle.cardContent}>\n              {layoutItems.map((item) => (\n                <Typography sx={dialogStyle.itemText} key={item.i}>\n                  {otherCasesToWhitespaces(item.i)}\n                </Typography>\n              ))}\n            </CardContent>\n            <CardMedia\n              component={COMPONENT_TYPE.image}\n              sx={dialogStyle.image}\n              image={LAYOUT_IMAGES[idx]}\n              alt={LAYOUT_DIALOG_TEXT.alt + idx}\n            />\n          </Card>\n        ))}\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { GRID_HEADER_HEIGHT } from '../../../constants/layout/layout'\n\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  right: {\n    display: `flex`,\n    flexWrap: `nowrap`,\n    paddingLeft: px(5),\n  },\n  textBox: {\n    padding: px(0, 8),\n    display: `flex`,\n    whiteSpace: `nowrap`,\n    overflow: `hidden`,\n    textOverflow: `ellipsis`,\n  },\n  text: {\n    padding: px(0, 5),\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `center`,\n    fontSize: px(12),\n  },\n  textIcon: {\n    fontSize: px(14),\n    padding: px(4),\n  },\n  header: {\n    height: GRID_HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","import { px } from '../../helpers/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { Extent } from '../../types/d3-types'\n\nexport const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: Extent, cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { DataEach } from '../../types/d3-types'\n\n/**\n * y shift for parallel coordinates/sets axes labels\n */\nconst TEXT_Y_SHIFTS = { odd: 9, even: 19 }\n\nexport const TOGGLE_Y_SHIFT = Math.max(...Object.values(TEXT_Y_SHIFTS))\n\nexport const getTogglingYShift: DataEach<unknown, SVGTextElement, number> = (_, idx) =>\n  idx % 2 === 0 ? -TEXT_Y_SHIFTS.odd : -TEXT_Y_SHIFTS.even // index 0 is first, so odd\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nconst SINGLE = `1` // on constant only one (first) color is used\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(SINGLE)\n","/**\n * tooltip and it's actions\n */\nimport { select } from 'd3'\nimport { MouseEvent } from 'react'\nimport { OnMouseEvent } from '../../types/d3-types'\n\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../constants/views-general/tooltip'\nimport { SVG } from '../../constants/svg'\nimport { HTML } from '../../constants/others'\n\nimport { getClass, px } from '../stringGetters'\n\nexport const onMouseOverTooltip =\n  <T>(stringFunction: (data: T) => string[]): OnMouseEvent<T> =>\n  ({ clientX, clientY }: MouseEvent, data: T): void => {\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n    tooltip\n      .html(stringFunction(data).join(HTML.newLine))\n      .style(SVG.style.left, px(clientX))\n      .style(SVG.style.top, px(clientY))\n  }\n\nexport const onMouseOutTooltip = (): null => {\n  select(getClass(TOOLTIP_CLASS)).transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n  return null\n}\n","import { ViewType } from '../views-general/ViewType'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.ParallelSetsBundled]: `psbSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n}\n\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.ParallelSetsBundled]: `C_psbSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n}\n\nexport const CONTAINER_EMPTY: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_E_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_E_spmSvgId`,\n  [ViewType.Glyphs]: `C_E_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_E_spgSvgId`,\n  [ViewType.ParallelSetsBundled]: `C_E_psbSvgId`,\n  [ViewType.DataTable]: `C_E_dataTableId`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Extent, DataEachG, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getTogglingYShift, TOGGLE_Y_SHIFT } from '../../../../helpers/views/togglingYShift'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-settings/parallelCoordinates'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  refreshViews,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TOGGLE_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(displayAttributes.map((attribute) => String(attribute)))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      if (displayAttributes.every((dimension) => selections[dimension] === null)) {\n        // check selections, if there is none in every line, false\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n        return\n      }\n      dataset.forEach((data) => {\n        data.selected = displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        })\n      })\n      refreshViews()\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, keyof SelectableDataType>> = {\n      [BrushAction.start]: () => setComponentBrushing(ViewType.ParallelCoordinates),\n      [BrushAction.move]: (brushEvent, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      },\n      [BrushAction.end]: (brushEvent, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      },\n    }\n    const brushExtent: Extent = [\n      [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n      [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n    ]\n\n    const brush = brushY<keyof SelectableDataType>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath: DataEachP<SelectableDataType, string | null> = (data) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n      .on(MouseAction.mouseOut, onMouseOutTooltip)\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    const getAxisTransform: DataEachG<keyof SelectableDataType, string> = (attribute) =>\n      getTranslate([xScale(String(attribute))!, 0])\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, getTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      Object.keys(selections).forEach((selLKey) => (selections[selLKey] = null))\n    })\n\n    // selected coloring\n    selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ParallelCoordinates]}>\n      {PARALLEL_COORDINATES_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\n\nimport { getTranslate } from '../stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\nexport const getScatterPlotMatrixStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    fontSize: PLOT_FONT.fontSize,\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { Extent, DataEachC, DataEachG, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/views/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { setDisplay } from '../../../../helpers/d3/setDisplay'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-settings/scatterPlotMatrix'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\ntype CellBrushing = { cell: MatrixPosition | null }\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  // selected coloring\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  setDisplay(isDetailsVisible, DUPLICATES_CLASS)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachC<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachC<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: CellBrushing = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) => (data.selected = isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, MatrixItem>> = {\n      [BrushAction.start]: (_, { rowIdx, colIdx, rowKey, colKey }) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      },\n      [BrushAction.move]: ({ selection }, matrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }, matrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [0, 0],\n      [rect.width, rect.height],\n    ]\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // selected coloring\n    selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    refreshViews,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return (\n      <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotMatrix]}>\n        {SCATTER_PLOT_MATRIX_TEXT.tooSmall}\n      </Box>\n    )\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotMatrixStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotMatrix]}>\n      {SCATTER_PLOT_MATRIX_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\n\nimport { SortType } from '../../constants/sort/SortType'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T extends SelectableDataType>(a: T, b: T, orderBy: keyof T) => {\n  if (a[orderBy] === true) return b[orderBy] === true ? 0 : 1\n  if (a[orderBy] === false) return b[orderBy] === false ? 0 : -1\n\n  return b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n}\n\nexport const getComparator = (sort: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sort === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataEachP, OnMouseEvent } from '../../../../types/d3-types'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { getAttributeValuesWithLabel, getClass, getEverything, getTranslate } from '../../../../helpers/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { GLYPHS_MIN_PERCENT_SHIFT } from '../../../../constants/views-general/glyphs-general'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-settings/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  refreshViews,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, GLYPHS_MIN_PERCENT_SHIFT)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform: DataEachP<SelectableDataType, string> = (data) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const onMouseClick: OnMouseEvent<SelectableDataType> = (_, changedData) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.Glyphs)\n      refreshViews()\n    }\n\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n          .on(MouseAction.click, onMouseClick)\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    // selected coloring, needed again\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive, brushColor)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.Glyphs]}>\n      {GLYPHS_TEXT.unavailable}\n    </Box>\n  )\n}\n","export const GLYPHS_MIN_PERCENT_SHIFT = 5\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important, px } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotGlyphsAxis`\nexport const AXIS_TEXT_CLASS = `scatterPlotGlyphsAxisText`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\nexport const getScatterPlotGlyphsStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotGlyphsAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n  '& .scatterPlotGlyphsAxisText': {\n    fill: PLOT_COLORS.fontColor,\n    fontSize: px(13),\n    fontWeight: `bold`,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisBottom, axisLeft, brush, lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { Extent, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getRotate,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { setDisplay } from '../../../../helpers/d3/setDisplay'\nimport { getExtendedExtentInDomains, getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { TOOLTIP_CLASS } from '../../../../constants/views-general/tooltip'\nimport { GLYPHS_MIN_PERCENT_SHIFT } from '../../../../constants/views-general/glyphs-general'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-settings/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  AXIS_TEXT_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nconst Y_AXIS_TEXT_SHIFT = 30\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  // selected coloring\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  setDisplay(isDetailsVisible, TOOLTIP_CLASS)\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const linearExtentInDomains = getExtentInDomains([xAttribute, yAttribute], dataset)\n    const radialExtentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, GLYPHS_MIN_PERCENT_SHIFT)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(linearExtentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(linearExtentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(radialExtentInDomains[attribute]),\n    )\n\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .append(SVG.elements.g)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n            .on(MouseAction.mouseOut, onMouseOutTooltip)\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data([xAttribute])\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n\n    const axisY = svg\n      .selectAll(AXIS_Y)\n      .data([yAttribute])\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n\n    axisX.call(axisBottom(xScale))\n    axisY.call(axisLeft(yScale))\n\n    // axis X label\n    axisX\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, innerWidth)\n      .attr(SVG.attributes.y, Y_AXIS_TEXT_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXIS_TEXT_CLASS)\n      .attr(SVG.attributes.textAnchor, SVG.values.end)\n    // axis Y label\n    axisY\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.transform, getRotate(-90))\n      .attr(SVG.attributes.y, -Y_AXIS_TEXT_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXIS_TEXT_CLASS)\n      .attr(SVG.attributes.textAnchor, SVG.values.end)\n\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) =>\n            (data.selected = isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType>> = {\n      [BrushAction.start]: () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      },\n      [BrushAction.move]: ({ selection }) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [-glyphSize / 2, -glyphSize / 2],\n      [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n    ]\n\n    const makeBrush = brush()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotGlyphs]}>\n      {SCATTER_PLOT_GLYPHS_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, important, px } from '../../../../helpers/stringGetters'\n\nimport { TABLE_COLORS } from '../../../../styles/colors'\n\nexport const getDataTableRowStyle = (\n  rowHeight: number,\n  selected: boolean,\n  selectedBackgroundColor: string,\n  selectedFontColor: string,\n): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? important(selectedBackgroundColor) : ``,\n  '& .MuiTableCell-root': {\n    color: selected ? important(selectedFontColor) : ``,\n  },\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    bgcolor: TABLE_COLORS.headerBackground,\n  },\n  tableHeadRow: {\n    height: 30,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  filterRow: {\n    bgcolor: TABLE_COLORS.filterBackground,\n  },\n  filterCell: {\n    padding: px(5),\n  },\n  filter: {\n    width: `90%`,\n    bgcolor: TABLE_COLORS.rowsBackground,\n    borderRadius: px(5),\n    '&.MuiFormControl-root': {\n      margin: 0,\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n  filterIcon: {\n    paddingLeft: px(12),\n    color: TABLE_COLORS.filterIconFont,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n  checkboxAll: {\n    display: `flex`,\n    height: calc(-10, `100%`),\n    padding: px(5),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Checkbox, TableBody, TableCell, TableRow } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable } from '../../../../helpers/data/formatText'\n\nimport { CELL_PADDING } from '../../../../constants/mui'\n\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableBodyProps {\n  displayAttributes: Array<keyof SelectableDataType>\n  sortedDataset: SelectableDataType[]\n  handleSelectClick: (data: SelectableDataType) => void\n  rowHeight: number\n  selectedBackgroundColor: string\n  selectedFontColor: string\n  redrawTime: number\n}\n\nexport const DataTableBody: VoidFunctionComponent<DataTableBodyProps> = ({\n  displayAttributes,\n  sortedDataset,\n  handleSelectClick,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n}) => (\n  <TableBody sx={dataTableStyle.tableBody}>\n    {sortedDataset.map((data, idx) => (\n      <TableRow\n        hover\n        onClick={() => handleSelectClick(data)}\n        key={idx}\n        sx={getDataTableRowStyle(rowHeight, data.selected, selectedBackgroundColor, selectedFontColor)}\n      >\n        <TableCell padding={CELL_PADDING.checkbox}>\n          <Checkbox checked={data.selected} />\n        </TableCell>\n        {displayAttributes.map((attribute) => (\n          <TableCell key={`${idx}-${attribute}`}>{dataToReadable(data[attribute])}</TableCell>\n        ))}\n      </TableRow>\n    ))}\n  </TableBody>\n)\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TextField,\n  Tooltip,\n} from '@mui/material'\nimport { FilterListOutlined } from '@mui/icons-material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { SelectableDataType, SelectedKey } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SortType } from '../../../../constants/sort/SortType'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { CELL_PADDING } from '../../../../constants/mui'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-settings/dataTable'\n\nimport { dataTableStyle } from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nimport { DataTableBody } from './DataTableBody'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {\n  showFilter: boolean\n}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  refreshViews,\n  setComponentBrushing,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n  showFilter,\n  redrawTime,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const [doResort, setDoResort] = useState(0)\n  const [filterValues, setFilterValues] = useState<{ [p: keyof SelectableDataType]: string }>(\n    Object.fromEntries(displayAttributes.map((key) => [key, ``])),\n  )\n\n  const filteredDataset = useMemo<SelectableDataType[]>(\n    () =>\n      [...dataset].filter((data) =>\n        displayAttributes.every((attribute) => String(data[attribute]).includes(filterValues[attribute])),\n      ),\n    [dataset, displayAttributes, filterValues],\n  )\n\n  const sortedDataset = useMemo(\n    () => filteredDataset.sort(getComparator(order, orderBy)),\n    // `doResort` is needed for resorting after changing select\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [filteredDataset, order, orderBy, doResort],\n  )\n\n  useEffect(\n    () => () => {\n      if (orderBy === SelectedKey) {\n        setDoResort((prev) => prev + 1) // reorder\n      }\n    },\n    [orderBy, redrawTime],\n  )\n\n  const handleSelectClick = useCallback(\n    (changedData: SelectableDataType) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing],\n  )\n\n  const handleSelectAllClick = useCallback(\n    (checked: boolean) => {\n      sortedDataset.forEach((data) => (data.selected = checked))\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing, sortedDataset],\n  )\n\n  const handleRequestSort = useCallback(\n    (property: keyof SelectableDataType) => {\n      const isAsc = orderBy === property && order === SortType.asc\n      setOrder(isAsc ? SortType.desc : SortType.asc)\n      setOrderBy(property)\n    },\n    [order, orderBy],\n  )\n\n  const handleFilterValueChange = useCallback((newValue: string, key: keyof SelectableDataType) => {\n    setFilterValues((prev) => ({\n      ...prev,\n      [key]: newValue,\n    }))\n  }, [])\n\n  const createSortHandler = useCallback(\n    (property: keyof SelectableDataType) => () => {\n      handleRequestSort(property)\n    },\n    [handleRequestSort],\n  )\n\n  const sortTooltipTitle = useCallback(\n    (headCellId: keyof SelectableDataType) =>\n      orderBy === headCellId\n        ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n        : DATA_TABLE_TEXT[SortType.asc],\n    [order, orderBy],\n  )\n\n  const getTableHead = useCallback(\n    (indeterminate: boolean, allChecked: boolean) => (\n      <TableHead sx={dataTableStyle.tableHead}>\n        <TableRow sx={dataTableStyle.tableHeadRow}>\n          <TableCell padding={CELL_PADDING.none}>\n            <Box sx={dataTableStyle.checkboxAll}>\n              <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                <Checkbox\n                  sx={dataTableStyle.checkAll}\n                  indeterminate={indeterminate && !allChecked}\n                  checked={allChecked}\n                  onChange={(event) => handleSelectAllClick(event.target.checked)}\n                />\n              </Tooltip>\n              <TableSortLabel\n                active={orderBy === SelectedKey}\n                direction={orderBy === SelectedKey ? order : SortType.asc}\n                onClick={createSortHandler(SelectedKey)}\n              />\n            </Box>\n          </TableCell>\n          {displayAttributes.map((attribute) => {\n            const orderedByActive = orderBy === attribute\n            return (\n              <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                <Tooltip title={sortTooltipTitle(attribute)}>\n                  <TableSortLabel\n                    active={orderedByActive}\n                    direction={orderedByActive ? order : SortType.asc}\n                    onClick={createSortHandler(attribute)}\n                  >\n                    {otherCasesToWhitespaces(attribute)}\n                  </TableSortLabel>\n                </Tooltip>\n              </TableCell>\n            )\n          })}\n        </TableRow>\n        {showFilter && (\n          <TableRow sx={dataTableStyle.filterRow}>\n            <TableCell padding={CELL_PADDING.none}>\n              <FilterListOutlined sx={dataTableStyle.filterIcon} />\n            </TableCell>\n            {displayAttributes.map((attribute, idx) => (\n              <TableCell sx={dataTableStyle.filterCell} key={`filter-${attribute}`}>\n                <TextField\n                  defaultValue={filterValues[idx]}\n                  sx={dataTableStyle.filter}\n                  onChange={(e) => handleFilterValueChange(e.target.value, attribute)}\n                />\n              </TableCell>\n            ))}\n          </TableRow>\n        )}\n      </TableHead>\n    ),\n    [\n      createSortHandler,\n      displayAttributes,\n      filterValues,\n      handleFilterValueChange,\n      handleSelectAllClick,\n      order,\n      orderBy,\n      showFilter,\n      sortTooltipTitle,\n    ],\n  )\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table sx={dataTableStyle.container}>\n          {getTableHead(\n            sortedDataset.some((data) => data.selected),\n            sortedDataset.every((data) => data.selected),\n          )}\n          <DataTableBody\n            displayAttributes={displayAttributes}\n            sortedDataset={sortedDataset}\n            handleSelectClick={handleSelectClick}\n            rowHeight={rowHeight}\n            selectedBackgroundColor={selectedBackgroundColor}\n            selectedFontColor={selectedFontColor}\n            redrawTime={redrawTime}\n          />\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import {min} from \"d3-array\";\n\nfunction targetDepth(d) {\n  return d.target.depth;\n}\n\nexport function left(node) {\n  return node.depth;\n}\n\nexport function right(node, n) {\n  return n - 1 - node.height;\n}\n\nexport function justify(node, n) {\n  return node.sourceLinks.length ? node.depth : n - 1;\n}\n\nexport function center(node) {\n  return node.targetLinks.length ? node.depth\n      : node.sourceLinks.length ? min(node.sourceLinks, targetDepth) - 1\n      : 0;\n}\n","export default function constant(x) {\n  return function() {\n    return x;\n  };\n}\n","import {max, min, sum} from \"d3-array\";\nimport {justify} from \"./align.js\";\nimport constant from \"./constant.js\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nfunction computeLinkBreadths({nodes}) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport default function Sankey() {\n  let x0 = 0, y0 = 0, x1 = 1, y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8, py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey() {\n    const graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeSort = function(_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function(_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks({nodes, links}) {\n    for (const [i, node] of nodes.entries()) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    }\n    const nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d]));\n    for (const [i, link] of links.entries()) {\n      link.index = i;\n      let {source, target} = link;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    }\n    if (linkSort != null) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({nodes}) {\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined\n          ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.depth = x;\n        for (const {target} of node.sourceLinks) {\n          next.add(target);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeHeights({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.height = x;\n        for (const {source} of node.targetLinks) {\n          next.add(source);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeLayers({nodes}) {\n    const x = max(nodes, d => d.depth) + 1;\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {source, value} of target.targetLinks) {\n          let v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {target, value} of source.sourceLinks) {\n          let v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({sourceLinks, targetLinks}) {\n    if (linkSort === undefined) {\n      for (const {source: {sourceLinks}} of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {target: {targetLinks}} of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  return sankey;\n}\n","import {linkHorizontal} from \"d3-shape\";\n\nfunction horizontalSource(d) {\n  return [d.source.x1, d.y0];\n}\n\nfunction horizontalTarget(d) {\n  return [d.target.x0, d.y1];\n}\n\nexport default function() {\n  return linkHorizontal()\n      .source(horizontalSource)\n      .target(horizontalTarget);\n}\n","import { LinkDataPoint } from '../../types/d3-sankey'\n\nconst getCurrentWidth = (currentCount: number, all: number, width: number | undefined) => {\n  if (!width || !currentCount) return 0\n  const fraction = currentCount / all\n  return width * fraction\n}\n\nconst getSelectionWidth = (all: number, selected: number, width: number, isBrush: boolean) => {\n  if (width === 0) return 0\n  const selectedFraction = selected / all\n  return width * (isBrush ? selectedFraction : 1 - selectedFraction)\n}\n\n/**\n Get a shift of previously processed values\n * @param valuesCount - list of values counts or undefined, if there is no color category selected\n * @param all - count of all values\n * @param width - width of all-values line\n * @param idx - index of current value\n */\nconst getYFormerShift = (valuesCount: number[] | undefined, all: number, width: number, idx: number) => {\n  if (!valuesCount) return 0\n  const formerCount = valuesCount.slice(0, idx).reduce((sum, curr) => sum + curr, 0)\n  const formerFraction = formerCount / all\n  return width * formerFraction\n}\n\nconst getShift = (\n  currentCount: number,\n  selected: number,\n  all: number,\n  width: number,\n  valuesCount: number[] | undefined,\n  idx: number,\n  isBrush: boolean,\n  isOverlay: boolean,\n): number => {\n  if (!currentCount) return 0\n\n  const currentWidth = getCurrentWidth(currentCount, all, width)\n\n  const yFormerShift = getYFormerShift(valuesCount, all, width, idx)\n  const yCatShift = -width / 2 + yFormerShift + currentWidth / 2\n\n  if (isOverlay) {\n    return yCatShift\n  }\n  const selectedFraction = selected / currentCount\n  const yBrushShift = (currentWidth * (isBrush ? -1 * (1 - selectedFraction) : selectedFraction)) / 2\n  return yCatShift + yBrushShift\n}\n\nexport const getStrokeWidth = (d: LinkDataPoint, idx: number, isBrush: boolean, isOverlay?: boolean): number => {\n  const currentCount = d.catAttributeValuesCounts ? d.catAttributeValuesCounts[idx] : d.value\n  const currentWidth = getCurrentWidth(currentCount, d.value, d.width)\n\n  if (!isBrush && isOverlay) return currentWidth\n  return getSelectionWidth(currentCount, d.selected[idx], currentWidth, isBrush)\n}\n\nexport const getYShift = (d: LinkDataPoint, idx: number, isBrush: boolean, isOverlay: boolean): number => {\n  const currentCount = d.catAttributeValuesCounts ? d.catAttributeValuesCounts[idx] : d.value\n  if (!d.width) return 0\n\n  return getShift(currentCount, d.selected[idx], d.value, d.width, d.catAttributeValuesCounts, idx, isBrush, isOverlay)\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SELECTED_CLASS = `parallelSetsBundledSelected`\nexport const TABS_CLASS = `psbTabs`\nexport const LINE_NOT_SELECTED_CLASS = `psbLine`\nexport const CONNECTORS_CLASS = `psbConnector`\nexport const INNER_TEXT_CLASS = `psbInnerText`\nexport const TABS_SELECTED_CLASS = `psbTabsSelected`\n\nexport const getParallelSetsBundledStyle = (\n  opacity: Opacity,\n  isBrushActive: boolean,\n  brushColor: string,\n  fontColorInner: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .psbConnector': {\n    fill: `none`,\n  },\n  '& .psbTabs': {\n    cursor: `pointer`,\n    '&.psbTabsSelected': {\n      fill: important(brushColor),\n    },\n  },\n  '& path': {\n    '&.parallelSetsBundledSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n    '&.psbLine': {\n      opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n      mixBlendMode: `multiply`,\n    },\n  },\n  '& .psbInnerText': {\n    fill: fontColorInner,\n  },\n})\n","import { useCallback, useEffect, useMemo, useRef, useState, VoidFunctionComponent } from 'react'\nimport { scaleOrdinal, select } from 'd3'\nimport { Box } from '@mui/material'\nimport { sankey, sankeyLinkHorizontal } from '../../../../../lib/d3-sankey'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ParallelSetsBundledSettings } from '../../../../types/views/settings/ParallelSetsBundledSettings'\nimport { DataLink, NominalValueProperties } from '../../../../types/data/data'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { NodeData, NodeDataPoint } from '../../../../types/d3-sankey'\nimport { DataEach, Extent, OnMouseEvent } from '../../../../types/d3-types'\n\nimport { getTogglingYShift, TOGGLE_Y_SHIFT } from '../../../../helpers/views/togglingYShift'\nimport {\n  getAttributeFormatted,\n  getEverything,\n  getLinkDataPointValuesWithLabel,\n  getNodeDataPointValuesWithLabel,\n  getSpaced,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { getGraph, getNeighborAttributes, getNominalValuesRecord } from '../../../../helpers/data/data'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\nimport { getStrokeWidth, getYShift } from '../../../../helpers/data/lineShifts'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelSetsBundled'\nimport { SVG } from '../../../../constants/svg'\nimport { AXES_TEXT_CLASS } from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ParallelSetsBrushingType } from '../../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_BUNDLED_TEXT } from '../../../../text/views-and-settings/parallelSetsBundled'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport {\n  CONNECTORS_CLASS,\n  getParallelSetsBundledStyle,\n  INNER_TEXT_CLASS,\n  LINE_NOT_SELECTED_CLASS,\n  SELECTED_CLASS,\n  TABS_CLASS,\n  TABS_SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle'\n\nexport interface ParallelSetsBundledProps extends VisualizationView, Brushable, ParallelSetsBundledSettings {}\n\nexport const CONNECTORS = `CONNECTORS`\nexport const TEXT = `TEXT`\nexport const AXES_TEXT = `AXES_TEXT`\nexport const TABS = `TABS`\n\nexport const TEXT_SHIFT = 2\n\nexport const ParallelSetsBundled: VoidFunctionComponent<ParallelSetsBundledProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  isBrushingActive,\n  colorCategory,\n  margins,\n  opacity,\n  brushColor,\n  redrawTime,\n  setComponentBrushing,\n  refreshViews,\n  tabWidth,\n  tabSpacing,\n  tabGap,\n  brushingType,\n  fontColor,\n  categoryAttribute,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const upperPadding = TOGGLE_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  const [nominalValuesRecord, setNominalValuesRecord] = useState(getNominalValuesRecord(dataset))\n  // redraw time needed because it is changing selected\n  useEffect(() => {\n    setNominalValuesRecord(getNominalValuesRecord(dataset))\n  }, [dataset, redrawTime, displayAttributes])\n\n  const createParallelSetsBundled = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const displayPairs = getNeighborAttributes(displayAttributes)\n    const pairWidth = (innerWidth - (displayAttributes.length - 2) * tabSpacing) / (displayAttributes.length - 1)\n    const valueCounts = displayAttributes.map((att) => nominalValuesRecord[att]).map((arr) => arr.length)\n    const spacesAllMax = Math.max(...valueCounts) - 1\n    const isLeft = (d: NodeData): boolean => Number(d.x0) < pairWidth / 2\n\n    const half = (displayAttributes.length - 1) / 2\n\n    // brushing\n    const onMouseClick: OnMouseEvent<NodeDataPoint> = (_, { attribute, name, count, countSelected }) => {\n      dataset.forEach((data) => {\n        if (String(data[attribute]) === name) {\n          data.selected = count !== countSelected\n        }\n      })\n\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.ParallelSetsBundled)\n      refreshViews()\n    }\n\n    displayPairs.forEach((displayPair, pairIdx) => {\n      const spacesPairMax = Math.max(valueCounts[pairIdx], valueCounts[pairIdx + 1]) - 1\n      const pairExtent: Extent = [\n        [0, 0],\n        [pairWidth, innerHeight - (spacesAllMax - spacesPairMax) * tabGap],\n      ]\n\n      const color = scaleOrdinal(colorCategory)\n      const sankeyLayout = sankey<NominalValueProperties, DataLink>()\n        .nodeWidth(tabWidth)\n        .nodePadding(tabGap)\n        .nodeSort((a, b) => a.order - b.order)\n        .extent(pairExtent)\n\n      const graph = getGraph(dataset, categoryAttribute, nominalValuesRecord, displayPair[0], displayPair[1])\n      const { nodes, links } = sankeyLayout(graph)\n      const getPath = sankeyLinkHorizontal()\n\n      const xShift = pairIdx * (pairWidth + tabSpacing)\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TABS)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, (node) =>\n          node.count === node.countSelected ? getSpaced(TABS_CLASS, TABS_SELECTED_CLASS) : TABS_CLASS,\n        )\n        .attr(SVG.attributes.x, (node) => Number(node.x0) + xShift)\n        .attr(SVG.attributes.y, (node) => Number(node.y0))\n        .attr(SVG.attributes.height, (node) => Number(node.y1) - Number(node.y0))\n        .attr(SVG.attributes.width, (node) => Number(node.x1) - Number(node.x0))\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getNodeDataPointValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .on(MouseAction.click, onMouseClick)\n\n      // connectors\n      const connectors = svg\n        .append(SVG.elements.g)\n        .attr(SVG.attributes.class, CONNECTORS_CLASS)\n        .attr(SVG.attributes.transform, getTranslate([pairIdx * (pairWidth + tabSpacing), 0]))\n        .selectAll(CONNECTORS)\n        .data(links)\n        .enter()\n\n      const colorCategories = categoryAttribute ? nominalValuesRecord[categoryAttribute].map((att) => att.name) : [`1`] // one category\n      const isOverlay = brushingType === ParallelSetsBrushingType.overlay\n      // for each value runs once\n      colorCategories.forEach((category, idx) => {\n        // base\n        connectors\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, LINE_NOT_SELECTED_CLASS)\n          .attr(SVG.attributes.d, getPath)\n          .attr(SVG.attributes.stroke, color(category))\n          .attr(SVG.attributes.strokeWidth, (link) => getStrokeWidth(link, idx, false, isOverlay))\n          .attr(SVG.attributes.transform, (link) => getTranslate([0, getYShift(link, idx, false, isOverlay)]))\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n\n        // brushing\n        connectors\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, SELECTED_CLASS)\n          .attr(SVG.attributes.d, getPath)\n          .attr(SVG.attributes.strokeWidth, (link) => getStrokeWidth(link, idx, true))\n          .attr(SVG.attributes.transform, (link) => getTranslate([0, getYShift(link, idx, true, isOverlay)]))\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n      })\n\n      const getTextVisible: DataEach<NodeData, SVGTextElement, number> = (node) => {\n        if (pairIdx === Math.floor(half)) return 1\n        if ((isLeft(node) && pairIdx > half) || (!isLeft(node) && pairIdx < half)) return 0\n        return 1\n      }\n\n      // line text\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TEXT)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.text)\n        .attr(SVG.attributes.class, INNER_TEXT_CLASS)\n        .attr(\n          SVG.attributes.x,\n          (node) => (isLeft(node) ? Number(node.x1) + TEXT_SHIFT : Number(node.x0) - TEXT_SHIFT) + xShift,\n        )\n        .attr(SVG.attributes.y, (node) => (Number(node.y1) + Number(node.y0)) / 2)\n        .attr(SVG.attributes.textAnchor, (node) => (isLeft(node) ? SVG.values.start : SVG.values.end))\n        .style(SVG.style.opacity, getTextVisible)\n        .text((node) => getAttributeFormatted(node.name))\n    })\n    // axis text\n    svg\n      .append(SVG.elements.g)\n      .selectAll(AXES_TEXT)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.textAnchor, SVG.values.middle)\n      .attr(SVG.attributes.x, (_, idx) => idx * (pairWidth + tabSpacing))\n      .attr(SVG.attributes.y, getTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n  }, [\n    displayAttributes,\n    innerWidth,\n    tabWidth,\n    nominalValuesRecord,\n    dataset,\n    setComponentBrushing,\n    refreshViews,\n    innerHeight,\n    tabGap,\n    colorCategory,\n    tabSpacing,\n    categoryAttribute,\n    brushingType,\n  ])\n\n  useEffect(\n    () => createParallelSetsBundled(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      innerWidth,\n      innerHeight,\n      colorCategory,\n      nominalValuesRecord,\n      tabWidth,\n      tabSpacing,\n      tabGap,\n      categoryAttribute,\n      brushingType,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelSetsBundledStyle(opacity, isBrushingActive, brushColor, fontColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelSetsBundled]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelSetsBundled]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ParallelSetsBundled]}>\n      {PARALLEL_SETS_BUNDLED_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { VisualizationView } from '../../types/views/VisualizationView'\nimport { Brushable } from '../../types/brushing/Brushable'\nimport { SettingsType } from '../../types/views/settings/Settings'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { ParallelCoordinates } from '../../components/content/views/parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from '../../components/content/views/scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from '../../components/content/views/glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from '../../components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from '../../components/content/views/data-table/DataTable'\nimport { ParallelSetsBundled } from '../../components/content/views/parallel-sets-bundeled/ParallelSetsBundled'\n\nimport { ViewType } from './ViewType'\n\nexport const VIEW_BORDER_SIZE = 5\n\ntype ViewElementFunction = (\n  props: Brushable & VisualizationView,\n  settings: SettingsType,\n  showFilter?: boolean,\n) => JSX.Element\n\nexport const getViewRecord: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.ParallelSetsBundled]: (p, s) => <ParallelSetsBundled {...p} {...(s as ParallelSetsBundledSettings)} />,\n  [ViewType.DataTable]: (p, s, f) => <DataTable {...p} {...(s as DataTableSettings)} showFilter={!!f} />,\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { VIEW_BORDER_SIZE, getViewRecord } from '../../../constants/views-general/view'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  viewType: ViewType\n  settings: Settings\n  brushColor: string\n  showFilter?: boolean\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({\n  width,\n  height,\n  viewType,\n  settings,\n  showFilter,\n  ...dataProps\n}) => {\n  const graph = getViewRecord[viewType]\n  const settingsCurr = settings[viewType]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr, showFilter)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","export const GRID_ITEM_TEXT = {\n  tooltipClose: `Close`,\n  glyphAxes: `Glyph axes from top, clockwise`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../styles/colors'\n\nconst inlineButton = {\n  margin: 0,\n  padding: px(0, 4),\n  minWidth: 0,\n}\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    ...inlineButton,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n  buttonClose: {\n    ...inlineButton,\n  },\n  buttonActive: {\n    color: BUTTON_COLORS.buttonInlinedFontOn,\n    bgcolor: BUTTON_COLORS.buttonInlinedBgOn,\n    borderRadius: px(5),\n  },\n}\n","import React, { VoidFunctionComponent } from 'react'\nimport { IconButton, Tooltip } from '@mui/material'\nimport { Close } from '@mui/icons-material'\n\nimport { GRID_ITEM_TEXT } from '../../../../text/gridItemText'\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\n\ninterface ViewCloseButtonProps {\n  onRemove: () => void\n}\n\nexport const ViewCloseButton: VoidFunctionComponent<ViewCloseButtonProps> = ({ onRemove }) => (\n  <IconButton onClick={onRemove} sx={inlineButtonStyles.buttonClose}>\n    <Tooltip title={GRID_ITEM_TEXT.tooltipClose}>\n      <Close />\n    </Tooltip>\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { DIALOG_COLORS } from '../../../styles/colors'\n\nexport const helpDialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(750),\n      width: px(750),\n      textAlign: `justify`,\n    },\n  },\n  iconedHeaderBox: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `flex-end`,\n    '& svg': {\n      fontSize: px(20),\n      opacity: 0.5,\n      paddingBottom: px(2),\n    },\n  },\n  header: {\n    fontWeight: `bold`,\n    fontSize: px(16),\n    paddingTop: px(10),\n  },\n  brushContainer: {\n    minWidth: px(0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    margin: px(2),\n  },\n  text: {\n    padding: px(10, 10, 5),\n    color: DIALOG_COLORS.font,\n  },\n  image: {\n    height: px(130),\n    width: px(238),\n  },\n}\n","import { useCallback, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  CardMedia,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport { Brush, Help, Settings } from '@mui/icons-material'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { BUTTON_VARIANT, COMPONENT_TYPE } from '../../../../constants/mui'\nimport { BRUSHING_IMAGES } from '../../../../constants/public-path'\n\nimport { VIEW_INFO_TEXT } from '../../../../text/siteText'\nimport { INFO_DIALOG_TEXT, VIEW_NAMES } from '../../../../text/views-and-settings/common'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\nimport { helpDialogStyle } from '../../../../components-style/content/common/helpDialogStyle'\n\nexport interface ViewHelpButtonProps {\n  viewType: ViewType\n}\n\nexport const ViewHelpButton: VoidFunctionComponent<ViewHelpButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const openDialog = useCallback(() => setIsDialogOpen(true), [])\n  const closeDialog = useCallback(() => setIsDialogOpen(false), [])\n\n  return (\n    <>\n      <Dialog onClose={closeDialog} open={isDialogOpen} sx={helpDialogStyle.dialog}>\n        <DialogTitle>{VIEW_NAMES[viewType]}</DialogTitle>\n        <Divider />\n        <DialogContent>\n          <DialogContentText sx={helpDialogStyle.text}>{INFO_DIALOG_TEXT[viewType].description}</DialogContentText>\n          <Box sx={helpDialogStyle.iconedHeaderBox}>\n            <Typography sx={helpDialogStyle.header}>{VIEW_INFO_TEXT.dialog.brushing}</Typography>\n            <Brush />\n          </Box>\n          <Divider />\n          <Box sx={helpDialogStyle.brushContainer}>\n            <CardMedia\n              component={COMPONENT_TYPE.image}\n              sx={helpDialogStyle.image}\n              image={BRUSHING_IMAGES[viewType]}\n              alt={viewType}\n            />\n            <DialogContentText sx={helpDialogStyle.text}>\n              {INFO_DIALOG_TEXT[viewType].descriptionBrushing}\n            </DialogContentText>\n          </Box>\n          <Box sx={helpDialogStyle.iconedHeaderBox}>\n            <Typography sx={helpDialogStyle.header}>{VIEW_INFO_TEXT.dialog.settings}</Typography>\n            <Settings />\n          </Box>\n          <Divider />\n          <DialogContentText sx={helpDialogStyle.text}>\n            {INFO_DIALOG_TEXT[viewType].descriptionSettings}\n          </DialogContentText>\n          <DialogContentText sx={helpDialogStyle.text}>\n            {INFO_DIALOG_TEXT[viewType].descriptionSettingsMore}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={closeDialog} variant={BUTTON_VARIANT.contained} autoFocus>\n            {VIEW_INFO_TEXT.dialog.close}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <IconButton onClick={openDialog} sx={inlineButtonStyles.button}>\n        <Tooltip title={VIEW_INFO_TEXT.buttonLabel}>\n          <Help />\n        </Tooltip>\n      </IconButton>\n    </>\n  )\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\nconst xmlnsSvg = `http://www.w3.org/2000/svg`\nconst preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\nconst options = { type: `image/svg+xml;charset=utf-8` }\nconst linkElement = `a`\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, xmlnsSvg)\n\n  const svgBlob = new Blob([preface, svgEl.outerHTML], options)\n  const svgUrl = URL.createObjectURL(svgBlob)\n\n  // create download link element, append, click and remove\n  const downloadLink = document.createElement(linkElement)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\ntype StyleNode = { sheet: CSSStyleSheet }\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n  const newStyleNodes = ([...document.querySelectorAll(`[data-emotion]`)] as unknown as Array<StyleNode>)\n    .flatMap(({ sheet }) => [...sheet.cssRules].map((rules) => rules.cssText))\n    .filter((sheet) => sheet.includes(`.${containerClass}`))\n    .map((sheet) => sheet.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n\nexport const getSaveIsDisabled = (viewType: ViewType): boolean =>\n  document.querySelector(`#${CONTAINER_EMPTY[viewType]}`) !== null &&\n  document.querySelector(`#${SAVE_ID[viewType]}`) === null\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { BUTTON_VARIANT } from '../../../../constants/mui'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant={BUTTON_VARIANT.contained} autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant={BUTTON_VARIANT.outlined}>\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useCallback, useState, VoidFunctionComponent } from 'react'\nimport { IconButton, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { getSaveIsDisabled, saveSvg } from '../../../../helpers/d3/saveSvg'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { SAVE_TEXT } from '../../../../text/siteText'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from '../../common/dialogs/ConfirmationDialog'\n\nexport interface ViewSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const ViewSaveButton: VoidFunctionComponent<ViewSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const openDialog = useCallback(() => setIsDialogOpen(true), [])\n  const closeDialog = useCallback(() => setIsDialogOpen(false), [])\n\n  const onConfirm = useCallback(() => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }, [viewType])\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={SAVE_TEXT.header}\n        description={SAVE_TEXT.description}\n        onConfirm={onConfirm}\n        onClose={closeDialog}\n        confirmText={SAVE_TEXT.confirm}\n        cancelText={SAVE_TEXT.cancel}\n      />\n      <IconButton onClick={openDialog} disabled={getSaveIsDisabled(viewType)} sx={inlineButtonStyles.button}>\n        <Tooltip title={SAVE_TEXT.save}>\n          <Save />\n        </Tooltip>\n      </IconButton>\n    </>\n  )\n}\n","import React, { VoidFunctionComponent } from 'react'\nimport { Tooltip, Typography } from '@mui/material'\nimport { RotateRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { getDisplayAttributesInParentheses } from '../../../../helpers/stringGetters'\n\nimport { GRID_ITEM_TEXT } from '../../../../text/gridItemText'\n\nimport { gridItemStyle } from '../../../../components-style/content/views/gridItemStyle'\n\nexport interface GlyphAxesTextProps {\n  displayAttributes: Array<keyof SelectableDataType>\n}\n\nexport const GlyphAxesText: VoidFunctionComponent<GlyphAxesTextProps> = ({ displayAttributes }) => (\n  <Typography sx={gridItemStyle.text}>\n    <Tooltip title={GRID_ITEM_TEXT.glyphAxes}>\n      <RotateRight sx={gridItemStyle.textIcon} />\n    </Tooltip>\n    {getDisplayAttributesInParentheses(displayAttributes)}\n  </Typography>\n)\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { FilterList } from '@mui/icons-material'\n\nimport { BUTTON_VARIANT } from '../../../../constants/mui'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../text/siteText'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\n\nexport interface DataFilterButtonProps {\n  showFilter?: boolean\n  setShowFilter: Dispatch<SetStateAction<boolean | undefined>>\n}\n\nexport const DataFilterButton: VoidFunctionComponent<DataFilterButtonProps> = ({ showFilter, setShowFilter }) => (\n  <Button variant={BUTTON_VARIANT.text} onClick={() => setShowFilter(!showFilter)} sx={inlineButtonStyles.button}>\n    <Tooltip title={TOP_TOOLBAR_TEXT.filter}>\n      <FilterList sx={showFilter ? inlineButtonStyles.buttonActive : {}} />\n    </Tooltip>\n  </Button>\n)\n","import React, { ComponentProps, useState, VoidFunctionComponent } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, Typography } from '@mui/material'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { DRAG_HANDLE, GRID_HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/layout/layout'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { View } from '../views/View'\nimport { ViewCloseButton } from './items/ViewCloseButton'\nimport { ViewHelpButton } from './items/ViewHelpButton'\nimport { ViewSaveButton } from './items/ViewSaveButton'\nimport { GlyphAxesText } from './items/GlyphAxesText'\nimport { DataFilterButton } from './items/DataFilterButton'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isResizeFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isResizeFinished, viewType, ...rest }) => {\n  const [showFilter, setShowFilter] = useState<boolean | undefined>(undefined)\n  const contextButton =\n    viewType !== ViewType.DataTable ? (\n      <ViewSaveButton viewType={viewType} />\n    ) : (\n      <DataFilterButton showFilter={showFilter} setShowFilter={setShowFilter} />\n    )\n\n  const isGlyphs = (viewType === ViewType.Glyphs || viewType === ViewType.ScatterPlotGlyphs) && rest.settings[viewType]\n\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Box sx={gridItemStyle.textBox}>\n            <Typography>{title}</Typography>\n            {isGlyphs && <GlyphAxesText displayAttributes={rest.settings[viewType]!.displayAttributes} />}\n          </Box>\n          <Box sx={gridItemStyle.right}>\n            <ViewHelpButton viewType={viewType} />\n            {contextButton}\n            <ViewCloseButton onRemove={onRemove} />\n          </Box>\n        </Box>\n        {isResizeFinished && (\n          <View\n            width={width}\n            height={height - GRID_HEADER_HEIGHT}\n            viewType={viewType}\n            {...rest}\n            showFilter={showFilter}\n          />\n        )}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import React, { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, memo, useEffect } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { useWindowSize } from 'react-use'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/stringGetters'\nimport { setDisplay } from '../../../helpers/d3/setDisplay'\n\nimport { brushView, brushViewType, isViewType, ViewType } from '../../../constants/views-general/ViewType'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/layout/layout'\nimport { TOOLTIP_CLASS } from '../../../constants/views-general/tooltip'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\nimport { VIEW_NAMES } from '../../../text/views-and-settings/common'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { SettingsDrawer } from '../data-drawer/SettingsDrawer'\nimport { LayoutDialog } from '../top-toolbar/items/layout/LayoutDialog'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: () => void\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType | brushViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isLayoutDialogOpen: boolean\n  setIsLayoutDialogOpen: Dispatch<SetStateAction<boolean>>\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  brushColor: string\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nconst BaseViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  isLayoutDialogOpen,\n  setIsLayoutDialogOpen,\n  layout,\n  setLayout,\n  ...viewProps\n}) => {\n  const [viewResizing, setViewResizing] = useState<ViewType | null>(null)\n  const [lastLayout, setLastLayout] = useState(layout)\n  const { width: windowWidth, height: windowHeight } = useWindowSize()\n\n  useEffect(\n    () => () => {\n      if (layout !== null) setLastLayout(layout)\n    },\n    [layout],\n  )\n\n  useEffect(\n    () => () => {\n      cleanSelectedIfViewWasBrushing(brushView)\n    },\n    [windowWidth, windowHeight, cleanSelectedIfViewWasBrushing],\n  )\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout || layout.length === 0) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout, layout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        return layout.filter((item) => item.i !== viewType)\n      })\n    },\n    [setLayout],\n  )\n\n  setDisplay(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <LayoutDialog\n        isOpen={isLayoutDialogOpen}\n        setLayout={setLayout}\n        onClose={() => setIsLayoutDialogOpen(false)}\n        lastLayout={lastLayout}\n      />\n      <SettingsDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        style={{ overflowX: `hidden` }}\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={(_, view) => setViewResizing(view.i as ViewType)}\n        onResizeStop={() => setViewResizing(null)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isResizeFinished={view.i !== viewResizing}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              viewType={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n\n// do not rerender if props not change\nexport const ViewGrid = memo(BaseViewGrid)\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/siteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => <Box sx={emptyDataStyle.site}>{EMPTY_DATA_TEXT.content}</Box>\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nexport const loadingStyle: Record<string, SxProps> = {\n  load: {\n    paddingTop: px(40),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/siteText'\n\nimport { loadingStyle } from '../../../components-style/content/no-data/loadingStyle'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={loadingStyle.load}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GridLayoutItem } from '../../../types/views/Grid'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\nimport { useDebounce } from '../../../helpers/react/useDebounce'\nimport { getCategoryAttributesKeys, getDefaultQuantitativeAttributesKeys } from '../../../helpers/data/data'\n\nimport { DataLoadState } from '../../../constants/data/DataLoadState'\nimport { brushView, brushViewType, isBrushView, ViewType } from '../../../constants/views-general/ViewType'\nimport { DEFAULT_GRID_LAYOUT_QUANTITATIVE, DEFAULT_GRID_LAYOUT_NOMINAL } from '../../../constants/layout/layout'\nimport { DEFAULT_BRUSH_COLOR } from '../../../constants/views-general/defaultSettableColors'\nimport { BRUSH_DEBOUNCE } from '../../../constants/debounce/debounce'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../grid/ViewGrid'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<(() => void)[]>([])\n  const [currentRedrawTime, setRedrawTime] = useState(Date.now())\n\n  const redrawTime = useDebounce(currentRedrawTime, BRUSH_DEBOUNCE) // used for less component re-renders\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isLayoutDialogOpen, setIsLayoutDialogOpen] = useState(false)\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[] | null>(null)\n  const [brushColor, setBrushColor] = useState<string>(DEFAULT_BRUSH_COLOR)\n\n  useEffect(() => {\n    if (!dataset || layout !== null) return\n    setLayout(\n      getCategoryAttributesKeys(dataset).length > getDefaultQuantitativeAttributesKeys(dataset).length\n        ? DEFAULT_GRID_LAYOUT_NOMINAL\n        : DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n    )\n  }, [dataset, layout])\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = useCallback((data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }, [])\n\n  const refreshViews = useCallback((): void => {\n    setRedrawTime(Date.now()) // redraw component\n  }, [])\n\n  const cleanAllBrushes = useCallback(\n    (deletePrevSelection = true) => {\n      if (dataset && deletePrevSelection) {\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n      }\n      cleanBrushingRef.current.forEach((f) => f())\n    },\n    [cleanBrushingRef, dataset, refreshViews],\n  )\n\n  const clearBrushesOnButton = useCallback(() => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }, [cleanAllBrushes])\n\n  const setComponentBrushing: SetComponentBrushing = useCallback(\n    (newComponent) => {\n      if (componentBrushingRef.current !== newComponent) {\n        cleanAllBrushes(isBrushView(newComponent))\n      }\n      setCurrentComponentBrushing(newComponent)\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const registerCleanBrushing = useCallback((cleanBrushing: () => void) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }, [])\n\n  const cleanSelectedIfViewWasBrushing = useCallback(\n    (component: ViewType | brushViewType) => {\n      if (\n        componentBrushingRef.current === component ||\n        (component === brushView && isBrushView(componentBrushingRef.current))\n      ) {\n        cleanAllBrushes()\n        setCurrentComponentBrushing(null)\n      }\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = useCallback(\n    (newIsBrushingOnEndOfMove: boolean) => {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n      setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n    },\n    [cleanAllBrushes],\n  )\n\n  const closeDrawer = useCallback(() => setDrawerOpen(false), [])\n  const openDrawer = useCallback(() => setDrawerOpen(true), [])\n\n  const topToolbarComponent = (\n    <TopToolbar\n      openDrawer={openDrawer}\n      isToolsDisabled={dataset === null}\n      isDetailsVisible={isDetailsVisible}\n      setIsDetailsVisible={setIsDetailsVisible}\n      isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n      isBrushingActive={componentBrushingRef.current !== null}\n      clearBrushes={clearBrushesOnButton}\n      setDataset={setDatasetAndRemoveBrushing}\n      setDataLoadState={setDataLoadState}\n      setIsLayoutDialogOpen={setIsLayoutDialogOpen}\n      removeLayout={() => setLayout([])}\n      setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n      brushColor={brushColor}\n      setBrushColor={setBrushColor}\n    />\n  )\n\n  if (dataLoadState === DataLoadState.NoData) {\n    return (\n      <>\n        {topToolbarComponent}\n        <EmptyData />\n      </>\n    )\n  }\n  if (dataLoadState === DataLoadState.Loading || !dataset) {\n    return (\n      <>\n        {topToolbarComponent}\n        <Loading />\n      </>\n    )\n  }\n\n  if (!layout) return null\n\n  return (\n    <>\n      {topToolbarComponent}\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={closeDrawer}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isLayoutDialogOpen={isLayoutDialogOpen}\n        setIsLayoutDialogOpen={setIsLayoutDialogOpen}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        brushColor={brushColor}\n        registerCleanBrushing={registerCleanBrushing}\n        setComponentBrushing={setComponentBrushing}\n        refreshViews={refreshViews}\n        redrawTime={redrawTime}\n        isBrushingActive={componentBrushingRef.current !== null}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      />\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}