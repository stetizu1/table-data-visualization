{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/text/HeaderText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/useHeaderStyle.ts","app/components/header/Header.tsx","app/text/FooterText.ts","app/components-style/footer/useFooterStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/constants/data/sampleDataset.tsx","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/text/SiteText.ts","app/components-style/content/top-toolbar/useTopToolbar.ts","app/components-style/content/top-toolbar/items/buttons/useTopToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/components-style/content/top-toolbar/items/file-reader/useFileReaderStyle.ts","app/components-style/content/top-toolbar/items/dialogs/useDialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/constants/views/ViewTypes.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/useOpenSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseActions.ts","app/constants/views/common.ts","app/constants/views/tooltip.ts","app/text/views-and-menus/common.ts","app/components-style/content/views/useViewGridStyle.ts","app/components-style/content/data-drawer/useDataDrawerStyle.ts","app/helpers/data/data.ts","app/constants/data/data.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/glyphs.ts","app/components-style/content/data-drawer/useDataDrawerMenuStyle.ts","app/components-style/content/data-drawer/items/useAttributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/useNumberInputStyles.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components/content/data-drawer/items/OpacityInput.tsx","app/components-style/content/data-drawer/items/usePalettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/glyphs/GlyphsSettings.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/parallel-coordinates/ParallelCoordinatesSettings.tsx","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixMenu.tsx","app/types/views/scatter-plot-matrix/ScatterPlotMatrixSettings.tsx","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-menus/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsMenu.tsx","app/types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings.ts","app/components/content/data-drawer/DataDrawer.tsx","app/components-style/content/views/useGridItemStyle.ts","app/constants/save/save.ts","app/helpers/d3/saveSvg.ts","app/components-style/content/data-drawer/items/useDrawerButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/data-drawer/items/DataSaveButton.tsx","app/components-style/content/views/useViewStyle.ts","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/d3/attributeGetters.ts","app/constants/html.ts","app/components-style/content/views/parallel-coordinates/useParallelCoordinatesStyle.ts","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot-matrix/useScatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/useGlyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components-style/content/views/scatter-plot-glyphs/useScatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/components/content/views/View.tsx","app/components/content/views/GridItem.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/useEmptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/useLoadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/useAppStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","DataLoadError","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","data","Object","keys","filter","key","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","VIEW_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","useHeaderStyle","makeStyles","headerContainer","background","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","style","FOOTER_TEXT","useFooterStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","SampleDataset","flower","bird","car","AcceptableFileTypes","sampleDatasetIcons","LocalFlorist","Air","DirectionsCar","sampleDatasets","flowerJson","birdJson","carJson","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","labelDetailsVisible","labelClearBrushes","labelAddView","labelBrushingOnEOM","addViewDialogTitle","noOption","fileReader","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFileFormat","saveText","header","save","confirm","cancel","useTopToolbar","toolbar","left","margin","separator","height","borderLeft","right","useTopToolbarButtonStyle","button","minWidth","ClickableButton","icon","onClick","disabled","label","classes","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","every","idx","CsvParse","textCsv","parse","output","fromEntries","toLowerCase","numValue","Number","isNaN","useFileReaderStyle","input","box","transition","highlight","borderRadius","useDialogStyle","alert","SelectionDialog","isOpen","onClose","options","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","clsx","DialogActions","autoFocus","addSelected","d","selected","ViewType","FileReader","setDataset","setDataLoadState","isHighlighted","useState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionsKeys","optionKey","Loaded","AutoGraph","type","onChange","e","a","target","files","Loading","selectedFile","fileType","json","csv","JSON","NoData","ToggleButtonSingle","setValue","onValue","ToggleButtonGroup","event","checked","ToggleButton","useOpenSettingsButtonStyle","settingsActive","settings","OpenSettingsButton","IconButton","size","Settings","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","Info","SkipNext","AutoFixOff","AddCircle","SVG","svg","g","circle","rect","path","div","class","transform","x","y","cx","cy","r","strokeWidth","fill","stroke","opacity","top","none","block","displayDetails","tooltipClass","selectAll","BrushAction","MouseActions","DRAG_HANDLE","VIEW_DEFAULT_SIZE","DEFAULT_VIEW_DIMENSIONS","Glyphs","w","h","ParallelCoordinates","ScatterPlotGlyphs","ScatterPlotMatrix","VIEW_LIMITS","minW","minH","DEFAULT_GRID_LAYOUT","i","TOOLTIP_CLASS","TOOLTIP","bottom","lr","MENU_TEXT","attributes","category","more","empty","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","PALETTE_PICKER","categoriesLabel","VIEW_NAMES","useViewGridStyle","tooltip","position","pointerEvents","zIndex","useDataDrawerStyle","drawer","flexShrink","chevron","menu","flexGrow","getAttributeKeys","getDatasetSample","getQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","getDefaultAttributesChecked","defaultQuantitativeAttributesKeys","getDefaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","GLYPHS_DEFAULT","glyphSize","glyphSpacing","margins","colorCategory","schemeCategory10","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","useDataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","minHeight","useAttributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleMove","newAttributesKeys","prev","prevSettings","displayAttributes","FormControlLabel","onUpButton","ArrowDropUp","onDownButton","ArrowDropDown","Checkbox","eventChecked","newChecked","newSettings","handleCheckboxChange","CategorySelector","TextField","categoryAttribute","undefined","select","MenuItem","Selector","settingsKey","newValue","useNumberInputStyles","vertical","horizontal","textField","MarginInput","handleMarginChange","newMargin","newMargins","defaultValue","inputProps","inputMode","min","NumberInput","valueKey","max","maxVal","OpacityInput","handleOpacityChange","newOpacity","newOpacities","usePalettePickerStyle","picker","row","col","c","c0","backgroundColor","colors","c1","c2","c3","c4","c5","c6","c7","c8","c9","PalettePicker","getInput","newColor","newColors","handleSetColor","GlyphsMenu","glyphsSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","sortableAttributes","categoricalAttributes","createGlyphsMenu","useCallback","newQaKeys","defaultSortAttribute","defaultCategoryAttribute","newGlyphs","sortAttribute","useEffect","currChecked","newSortableAttributes","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","PARALLEL_COORDINATES_DEFAULT","lineWidth","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","createScatterPlotMatrixMenu","newScatterPlotMatrix","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_MENU_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsMenu","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsMenu","newScatterPlotGlyphsSettings","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","useGridItemStyle","gridItem","borderColor","borderWidth","borderStyle","HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","SAVE_ID","saveSvg","document","querySelector","newStyleNodes","from","querySelectorAll","innerHTML","node","createElement","insertBefore","firstChild","svgEl","fileName","setAttribute","svgData","outerHTML","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","removeChild","saveSvgToFile","forEach","remove","useDrawerButtonStyles","ConfirmationDialog","onConfirm","cancelText","DataSaveButton","isDialogOpen","setIsDialogOpen","Save","useViewStyle","overflowX","overflowY","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getCategoryColor","HTML","useParallelCoordinatesStyle","font","line","hidden","strokeOpacity","notDisplayed","textAnchor","fontWeight","PARALLEL_COORDINATES","setDataSelected","registerCleanBrushing","setComponentBrushing","component","scaleOrdinal","upperPadding","innerWidth","innerHeight","createParallelCoordinates","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","brush","brushY","BRUSH_WIDTH","on","start","move","brushEvent","axisName","selection","end","enter","append","attr","mouseOver","clientX","clientY","duration","html","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","classed","id","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","useScatterPlotMatrixStyle","shapeRendering","axisLine","axisPath","cell","dataPoint","fillOpacity","duplicates","DATA_POINT","SPACING","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","index","plotMatrixItem","matrixItem","brushing","clearBrush","makeBrush","_","brushSelection","useGlyphsStyle","glyph","GLYPHS","glyphSizeWithSpacing","glyphsCountPerLine","Math","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","sortedDataset","sort","b","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","changedData","useScatterPlotGlyphsStyle","SCATTER_PLOT_GLYPHS","createScatterPlotGlyphs","s","View","dataProps","graph","settingsCurr","GridItem","onRemove","isDragFinished","rest","useSize","Close","ReactGridLayout","WidthProvider","GridLayout","ViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","viewProps","isGridChanging","setIsGridResizing","layout","setLayout","updateLayout","newLayout","filteredLayout","includes","addView","find","posY","reduce","removeView","availableViews","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","rowHeight","isResizable","useEmptyDataStyle","site","paddingTop","EmptyData","useLoadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","redrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setFunction","cleanAllBrushes","f","newComponent","newIsBrushingOnEndOfMove","useAppStyle","app","content","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.81df8628.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFileFormat = `unsupportedFileFormat`,\n}\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","const withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim()\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonOffBackground: `#363b46`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  buttonInlined: `#576e9f`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n  brushColor: `#830606`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n","import { calc } from '../helpers/d3/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const useHeaderStyle = makeStyles({\n  headerContainer: {\n    background: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { HEADER_TEXT } from '../../text/HeaderText'\n\nimport { useHeaderStyle } from '../../components-style/header/useHeaderStyle'\n\nexport const Header: FunctionComponent = () => {\n  const style = useHeaderStyle()\n  return (\n    <header className={style.headerContainer}>\n      <div className={style.title}>{HEADER_TEXT.title}</div>\n      <div className={style.description}>{HEADER_TEXT.description}</div>\n    </header>\n  )\n}\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const useFooterStyle = makeStyles({\n  footerContainer: {\n    background: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { FOOTER_TEXT } from '../../text/FooterText'\n\nimport { useFooterStyle } from '../../components-style/footer/useFooterStyle'\n\nexport const Footer: FunctionComponent = () => {\n  const style = useFooterStyle()\n  return (\n    <header className={style.footerContainer}>\n      <div className={style.text}>{FOOTER_TEXT.author},</div>\n      <div className={style.text}>\n        &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n      </div>\n    </header>\n  )\n}\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { Air, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flower = `flower`,\n  bird = `bird`,\n  car = `car`,\n}\n\nexport const sampleDatasetFiles: Record<SampleDataset, string> = {\n  [SampleDataset.flower]: `flowerData.json`,\n  [SampleDataset.bird]: `birdData.json`,\n  [SampleDataset.car]: `carData.json`,\n}\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flower]: <LocalFlorist />,\n  [SampleDataset.bird]: <Air />,\n  [SampleDataset.car]: <DirectionsCar />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flower]: flowerJson,\n  [SampleDataset.bird]: birdJson,\n  [SampleDataset.car]: carJson,\n}\n","import { Dispatch, FunctionComponent, SetStateAction, useState } from 'react'\nimport { AutoGraph } from '@mui/icons-material'\nimport clsx from 'clsx'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadError, DataLoadState } from '../../../../../constants/data/dataLoadState'\nimport { SampleDataset, sampleDatasetIcons, sampleDatasets } from '../../../../../constants/data/sampleDataset'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../../text/SiteText'\n\nimport { useFileReaderStyle } from '../../../../../components-style/content/top-toolbar/items/file-reader/useFileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\nimport { ClickableButton } from '../buttons/ClickableButton'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: ReadonlyArray<DataType>): ReadonlyArray<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nexport const FileReader: FunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const classes = useFileReaderStyle()\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const text = TOP_TOOLBAR_TEXT.fileReader\n  const optionsKeys = Object.values(SampleDataset)\n  const handleListItemClick = (optionKey: SampleDataset) => {\n    setIsSampleDataDialogOpen(false)\n    const dataset = sampleDatasets[optionKey]\n    setDataset(addSelected(dataset))\n    setDataLoadState(DataLoadState.Loaded)\n  }\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={text.sampleDataDialogTitle}\n        options={optionsKeys.map((key) => ({\n          key,\n          label: text.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={text.alertDialog.confirm}\n        alert={true}\n      />\n      <div className={clsx(isHighlighted && classes.highlight, classes.box)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={text.sampleDataLabel}\n        />\n        <input\n          className={classes.input}\n          type=\"file\"\n          onChange={async (e) => {\n            if (e.target.files?.length) {\n              setDataLoadState(DataLoadState.Loading)\n              const selectedFile = e.target.files[0]\n              const fileType = selectedFile.type\n              let dataset: DataType[] = []\n\n              switch (fileType) {\n                case AcceptableFileTypes.json: {\n                  const text = await selectedFile.text()\n                  dataset = JSON.parse(text)\n                  break\n                }\n                case AcceptableFileTypes.csv: {\n                  const textCsv = await selectedFile.text()\n                  dataset = CsvParse(textCsv)\n                  break\n                }\n                default: {\n                  setDataLoadState(DataLoadState.NoData)\n                  setAlertDialogText(text.alertDialog[DataLoadError.unsupportedFile])\n                  setIsAlertDialogOpen(true)\n                  return\n                }\n              }\n              if (!isArrayOfDataType(dataset)) {\n                setDataLoadState(DataLoadState.NoData)\n                setAlertDialogText(text.alertDialog[DataLoadError.unsupportedFileFormat])\n                setIsAlertDialogOpen(true)\n                return\n              }\n              setDataset(addSelected(dataset))\n              setDataLoadState(DataLoadState.Loaded)\n            }\n          }}\n        />\n      </div>\n    </>\n  )\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataLoadError } from '../constants/data/dataLoadState'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  addViewDialogTitle: `Add a view`,\n  noOption: `All view options are currently displayed.`,\n  fileReader: {\n    sampleDataLabel: `Try it on the sample data`,\n    sampleDataDialogTitle: `Select sample dataset`,\n    sampleDataDialogText: {\n      [SampleDataset.flower]: `Flower dataset`,\n      [SampleDataset.bird]: `Bird dataset`,\n      [SampleDataset.car]: `Car dataset`,\n    },\n    alertDialog: {\n      [DataLoadError.unsupportedFile]: {\n        title: `File type not supported`,\n        description: `This file type is not supported. Use JSON or CSV file.`,\n      },\n      [DataLoadError.unsupportedFileFormat]: {\n        title: `File format not supported`,\n        description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n      },\n      confirm: `OK`,\n    },\n  },\n  saveText: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    save: `Save`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\nimport { border, px } from '../../../helpers/d3/stringGetters'\n\nexport const useTopToolbar = makeStyles({\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    background: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  right: {\n    display: `flex`,\n  },\n})\n","import { makeStyles } from '@mui/styles'\n\nimport { important, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const useTopToolbarButtonStyle = makeStyles({\n  button: {\n    margin: important(px(0, 5)),\n    padding: important(px(4)),\n    minWidth: important(0),\n    '&.MuiButtonBase-root': {\n      background: important(BUTTON_COLORS.buttonOffBackground),\n    },\n    '&.Mui-selected:not(.Mui-disabled)': {\n      background: important(BUTTON_COLORS.buttonOnBackground),\n    },\n    '&.MuiButton-contained:not(.Mui-disabled)': {\n      background: important(BUTTON_COLORS.buttonOnBackground),\n      color: BUTTON_COLORS.fontOn,\n    },\n  },\n})\n","import { FunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { useTopToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/useTopToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: FunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => {\n  const classes = useTopToolbarButtonStyle()\n  return (\n    <Button variant=\"contained\" onClick={onClick} className={classes.button} disabled={disabled} aria-label={label}>\n      <Tooltip title={label}>{icon}</Tooltip>\n    </Button>\n  )\n}\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { makeStyles } from '@mui/styles'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const useFileReaderStyle = makeStyles({\n  input: {\n    width: px(220),\n  },\n  box: {\n    transition: `0.3s all ease`,\n    border: border(0, HIGHLIGHT_COLOR.border),\n    background: HIGHLIGHT_COLOR.backgroundGone,\n  },\n  highlight: {\n    border: border(2, HIGHLIGHT_COLOR.border),\n    background: HIGHLIGHT_COLOR.background,\n    padding: px(10, 0),\n    borderRadius: 10,\n  },\n})\n","import { makeStyles } from '@mui/styles'\nimport { important, px } from '../../../../../helpers/d3/stringGetters'\nimport { SITE_COLORS, ERROR_COLORS } from '../../../../../styles/colors'\n\nexport const useDialogStyle = makeStyles({\n  alert: {\n    color: important(ERROR_COLORS.font),\n  },\n  text: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n})\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { useDialogStyle } from '../../../../components-style/content/top-toolbar/items/dialogs/useDialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => {\n  const classes = useDialogStyle()\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{title}</DialogTitle>\n      <Divider />\n      <List>\n        {options.map((option) => (\n          <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n            <ListItemAvatar>\n              <Avatar>{option.icon}</Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={option.label} />\n          </ListItem>\n        ))}\n        {!options.length && <Typography className={classes.text}>{noOptionText}</Typography>}\n      </List>\n    </Dialog>\n  )\n}\n","import { FunctionComponent } from 'react'\nimport clsx from 'clsx'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { useDialogStyle } from '../../../../components-style/content/top-toolbar/items/dialogs/useDialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: FunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => {\n  const classes = useDialogStyle()\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        <DialogContentText className={clsx(alert && classes.alert)}>{description}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} autoFocus>\n          {confirmText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n}\n\nexport const isViewType = (viewType: string): viewType is ViewType =>\n  (Object.values(ViewType) as string[]).includes(viewType)\n","import { Dispatch, FunctionComponent, MouseEvent, SetStateAction } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { useTopToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/useTopToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\n\nexport const ToggleButtonSingle: FunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const classes = useTopToolbarButtonStyle()\n  const handleChange = (event: MouseEvent<HTMLElement>, checked: string[]) => {\n    if (checked.length && checked[0] === onValue) {\n      return setValue(true)\n    }\n    return setValue(false)\n  }\n  const onValue = `on`\n  return (\n    <ToggleButtonGroup value={value ? [onValue] : []} onChange={handleChange}>\n      <ToggleButton className={classes.button} value={onValue} aria-label={label} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { makeStyles } from '@mui/styles'\nimport { important, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const useOpenSettingsButtonStyle = makeStyles({\n  settingsActive: {\n    color: important(BUTTON_COLORS.buttonOnBackground),\n  },\n  settings: {\n    margin: important(px(0, 7, 0, 5)),\n  },\n})\n","import { FunctionComponent } from 'react'\nimport { Settings } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\nimport clsx from 'clsx'\n\nimport { useOpenSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/useOpenSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: FunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => {\n  const classes = useOpenSettingsButtonStyle()\n  return (\n    <IconButton\n      size=\"small\"\n      disabled={disabled}\n      onClick={open}\n      className={clsx(classes.settings, !disabled && classes.settingsActive)}\n    >\n      <Settings />\n    </IconButton>\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { AddCircle, AutoFixOff, SkipNext } from '@mui/icons-material'\nimport { Info } from '@mui/icons-material'\n\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { useTopToolbar } from '../../../components-style/content/top-toolbar/useTopToolbar'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n}\n\nexport const TopToolbar: FunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n}) => {\n  const classes = useTopToolbar()\n  return (\n    <div className={classes.toolbar}>\n      <div className={classes.left}>\n        <ToggleButtonSingle\n          icon={<Info />}\n          value={isDetailsVisible}\n          setValue={setIsDetailsVisible}\n          disabled={isToolsDisabled}\n          label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n        />\n        <ToggleButtonSingle\n          icon={<SkipNext />}\n          value={isBrushingOnEndOfMove}\n          setValue={setIsBrushingOnEndOfMove}\n          disabled={isToolsDisabled}\n          label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n        />\n        <div className={classes.separator} />\n        <ClickableButton\n          icon={<AutoFixOff />}\n          onClick={clearBrushes}\n          disabled={!isBrushingActive}\n          label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n        />\n        <ClickableButton\n          icon={<AddCircle />}\n          onClick={() => setIsAddViewDialogOpen(true)}\n          disabled={isToolsDisabled}\n          label={TOP_TOOLBAR_TEXT.labelAddView}\n        />\n      </div>\n      <div className={classes.right}>\n        <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n        <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n      </div>\n    </div>\n  )\n}\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n    strokeWidth: `stroke-width`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    strokeWidth: `stroke-width`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseActions {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { GridLayoutItem } from '../../types/views/Grid'\nimport { ViewType } from './ViewTypes'\n\nexport const VIEW_BORDER_SIZE = 5\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const HEADER_HEIGHT = 30\n\nexport const VIEW_DEFAULT_SIZE = {\n  width: 200,\n  height: 200,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, { w: number; h: number }> = {\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n  },\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n  },\n}\n\nexport const VIEW_LIMITS = {\n  minW: 4,\n  minH: 5,\n}\n\nexport const DEFAULT_GRID_LAYOUT: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n  },\n].map((item) => ({ ...item, VIEW_LIMITS }))\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\n\nexport const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n}\n","import { makeStyles } from '@mui/styles'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { TOOLTIP } from '../../../constants/views/tooltip'\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const useViewGridStyle = makeStyles({\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    background: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n})\n","import { makeStyles } from '@mui/styles'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const useDataDrawerStyle = makeStyles({\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      background: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n})\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n","export const CATEGORY_LIMIT = 10\n","import { schemeCategory10 } from 'd3'\nimport { GlyphsSettings } from '../../types/views/glyphs/GlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 40,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { calc, border, px, important } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const useDataDrawerMenuStyle = makeStyles({\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    background: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: 10,\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: important(0),\n      background: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: important(px(2, 0, 5)),\n    },\n  },\n})\n","import { makeStyles } from '@mui/styles'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\n\nexport const useAttributeCheckerStyle = makeStyles({\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: important(px(0, 5)),\n    padding: important(0),\n    minWidth: important(0),\n    height: important(px(15)),\n  },\n})\n","import { Dispatch, SetStateAction } from 'react'\nimport { Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings, SettingsType } from '../../views/Settings'\nimport { useAttributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/useAttributeCheckerStyle'\n\nexport interface AttributeCheckerProps<T extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: T) => Partial<T>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <T extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<T>): JSX.Element => {\n  const classes = useAttributeCheckerStyle()\n  const handleCheckboxChange = (eventChecked: boolean, key: keyof SelectableDataType) => {\n    const newChecked = { ...checked, [key]: eventChecked }\n    setChecked(newChecked)\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as T\n      const newSettings = getNewSettings(newChecked, prevSettings)\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          ...newSettings,\n        },\n      }\n    })\n  }\n  const handleMove = (newAttributesKeys: Array<keyof SelectableDataType>) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setAttributesKeys(newAttributesKeys)\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as T\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n        },\n      }\n    })\n  }\n  const onUpButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  const onDownButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <div className={classes.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} className={classes.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  className={classes.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </div>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: FunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = (categoryAttribute: keyof SelectableDataType | -1) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n        },\n      }\n    })\n  }\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface SelectorProps<T> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof T\n}\n\nexport const Selector = <T,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<T>): JSX.Element => {\n  const handleSelectChange = (newValue: keyof SelectableDataType) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: newValue,\n        },\n      }\n    })\n  }\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { makeStyles } from '@mui/styles'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const useNumberInputStyles = makeStyles({\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  text: {\n    fontSize: important(px(DATA_DRAWER_FONT.fontSize)),\n    padding: px(6, 5, 3),\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n})\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { useNumberInputStyles } from '../../../../components-style/content/data-drawer/items/useNumberInputStyles'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const MarginInput: FunctionComponent<MarginInputProps> = ({ margins, setSettings, viewType }) => {\n  const classes = useNumberInputStyles()\n  const handleMarginChange = (newMargin: number, idx: number) => {\n    const newMargins = [...margins]\n    newMargins[idx] = newMargin\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: newMargins,\n        },\n      }\n    })\n  }\n  return (\n    <div className={classes.vertical}>\n      <Typography className={classes.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <div className={classes.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type=\"number\"\n          defaultValue={margins[0]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type=\"number\"\n          defaultValue={margins[1]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </div>\n      <div className={classes.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type=\"number\"\n          defaultValue={margins[2]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type=\"number\"\n          defaultValue={margins[3]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </div>\n    </div>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { TextField } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { useNumberInputStyles } from '../../../../components-style/content/data-drawer/items/useNumberInputStyles'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface NumberInputProps<T> {\n  label: string\n  valueKey: keyof T\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  max?: number\n}\n\nexport const NumberInput = <T,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  max,\n}: NumberInputProps<T>): JSX.Element => {\n  const classes = useNumberInputStyles()\n  const handleValueChange = (newValue: number) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: newValue,\n        },\n      }\n    })\n  }\n  const maxVal = max ? { max } : {}\n  return (\n    <TextField\n      label={label}\n      type=\"number\"\n      defaultValue={value}\n      className={classes.textField}\n      inputProps={{ inputMode: `numeric`, min: 0, ...maxVal }}\n      onChange={(e) => handleValueChange(Number(e.target.value))}\n    />\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { useNumberInputStyles } from '../../../../components-style/content/data-drawer/items/useNumberInputStyles'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface OpacityInputProps {\n  header: string\n  opacity: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: FunctionComponent<OpacityInputProps> = ({ header, opacity, setSettings, viewType }) => {\n  const classes = useNumberInputStyles()\n  const handleOpacityChange = (newOpacity: number, idx: number) => {\n    const newOpacities = [...opacity]\n    newOpacities[idx] = newOpacity\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: newOpacities,\n        },\n      }\n    })\n  }\n  return (\n    <div className={classes.vertical}>\n      <Typography className={classes.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type=\"number\"\n        defaultValue={opacity[0]}\n        className={classes.textField}\n        inputProps={{ min: 0, max: 100 }}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <div className={classes.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type=\"number\"\n          defaultValue={opacity[1]}\n          className={classes.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type=\"number\"\n          defaultValue={opacity[2]}\n          className={classes.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </div>\n    </div>\n  )\n}\n","import { makeStyles } from '@mui/styles'\nimport { Theme } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\ninterface StyleProps {\n  colors: ColorArray\n}\nexport const usePalettePickerStyle = makeStyles<Theme, StyleProps>(() => ({\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: important(px(DATA_DRAWER_FONT.fontSize)),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n  c: {\n    '& input': {\n      width: `100%`,\n      height: px(20),\n      opacity: 0,\n    },\n  },\n  c0: {\n    backgroundColor: ({ colors }) => colors[0],\n  },\n  c1: {\n    backgroundColor: ({ colors }) => colors[1],\n  },\n  c2: {\n    backgroundColor: ({ colors }) => colors[2],\n  },\n  c3: {\n    backgroundColor: ({ colors }) => colors[3],\n  },\n  c4: {\n    backgroundColor: ({ colors }) => colors[4],\n  },\n  c5: {\n    backgroundColor: ({ colors }) => colors[5],\n  },\n  c6: {\n    backgroundColor: ({ colors }) => colors[6],\n  },\n  c7: {\n    backgroundColor: ({ colors }) => colors[7],\n  },\n  c8: {\n    backgroundColor: ({ colors }) => colors[8],\n  },\n  c9: {\n    backgroundColor: ({ colors }) => colors[9],\n  },\n}))\n","import { ChangeEvent, Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { Typography } from '@mui/material'\nimport clsx from 'clsx'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PALETTE_PICKER } from '../../../../text/views-and-menus/common'\n\nimport { usePalettePickerStyle } from '../../../../components-style/content/data-drawer/items/usePalettePickerStyle'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n}\n\nexport const PalettePicker: FunctionComponent<PalettePickerProps> = ({ colors, setSettings, viewType }) => {\n  const classes = usePalettePickerStyle({ colors })\n  const handleSetColor = (event: ChangeEvent<HTMLInputElement>, idx: number) => {\n    const newColor = event.target.value\n    if (newColor) {\n      const newColors = [...colors]\n      newColors[idx] = newColor\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            colorCategory: newColors,\n          },\n        }\n      })\n    }\n  }\n  const getInput = (idx: number, className: string) => (\n    <div className={classes.col}>\n      <label>{PALETTE_PICKER.categoriesLabel[idx]}</label>\n      <div className={clsx(classes.c, className)}>\n        <input type=\"color\" value={colors[idx]} onChange={(e) => handleSetColor(e, idx)} />\n      </div>\n    </div>\n  )\n  return (\n    <div className={classes.picker}>\n      <Typography className={classes.text}>{PALETTE_PICKER.header}</Typography>\n      <div className={classes.row}>\n        {getInput(0, classes.c0)}\n        {getInput(1, classes.c1)}\n        {getInput(2, classes.c2)}\n        {getInput(3, classes.c3)}\n        {getInput(4, classes.c4)}\n      </div>\n      <div className={classes.row}>\n        {getInput(5, classes.c5)}\n        {getInput(6, classes.c6)}\n        {getInput(7, classes.c7)}\n        {getInput(8, classes.c8)}\n        {getInput(9, classes.c9)}\n      </div>\n    </div>\n  )\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  sortAttributeKey,\n  GlyphsSettings,\n} from '../../../../types/views/glyphs/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const GlyphsMenu: FunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const classes = useDataDrawerMenuStyle()\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n    prevSettings: GlyphsSettings,\n  ): Partial<GlyphsSettings> => {\n    const displayAttributes = getCurrentDisplayAttributes(newChecked)\n    const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n    const sortAttribute = newChecked[prevSettings.sortAttribute]\n      ? prevSettings.sortAttribute\n      : newSortableAttributes?.[0]\n    return { displayAttributes, sortAttribute }\n  }\n\n  if (glyphsSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacity={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ParallelCoordinatesSettings } from '../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [20, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  lineWidthKey,\n  ParallelCoordinatesSettings,\n} from '../../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesMenu: FunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerMenuStyle()\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    const newChecked = getDefaultAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacity={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotMatrixSettings } from '../../types/views/scatter-plot-matrix/ScatterPlotMatrixSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory`\n> = {\n  margins: [25, 20, 25, 45],\n  pointSize: 4,\n  opacity: [70, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  ...MENU_TEXT,\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n} from '../../../../types/views/scatter-plot-matrix/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixMenu: FunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerMenuStyle()\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    const newChecked = getDefaultAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacity={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 35,\n  margins: [30, 30, 30, 30],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  sorting: `Sorted by`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  glyphSizeKey,\n  xAttributeKey,\n  yAttributeKey,\n} from '../../../../types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { SCATTER_PLOT_GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsMenu: FunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerMenuStyle()\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createScatterPlotGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n  ): Partial<ScatterPlotGlyphsSettings> => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n  const handleChangeSettings = () => cleanSelectedIfViewWasBrushing(viewType)\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{SCATTER_PLOT_GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.category}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_MENU_TEXT.opacity}\n                  opacity={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{SCATTER_PLOT_GLYPHS_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { Divider, Drawer, IconButton } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { useDataDrawerStyle } from '../../../components-style/content/data-drawer/useDataDrawerStyle'\n\nimport { Settings } from '../views/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot-matrix/ScatterPlotMatrixMenu'\nimport { ScatterPlotGlyphsMenu } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: FunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerStyle()\n  const menus = views.map((view, idx) => {\n    switch (view) {\n      case ViewType.Glyphs:\n        return (\n          <GlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ParallelCoordinates:\n        return (\n          <ParallelCoordinatesMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotMatrix:\n        return (\n          <ScatterPlotMatrixMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotGlyphs:\n        return (\n          <ScatterPlotGlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      default:\n        return null\n    }\n  })\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} className={classes.drawer}>\n      <div className={classes.header}>\n        <IconButton onClick={close}>\n          <ChevronRight className={classes.chevron} />\n        </IconButton>\n      </div>\n      <Divider />\n      <div className={classes.menu}>{menus.map((menu) => menu)}</div>\n    </Drawer>\n  )\n}\n","import { makeStyles } from '@mui/styles'\nimport { HEADER_HEIGHT } from '../../../constants/views/common'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const useGridItemStyle = makeStyles({\n  gridItem: {\n    height: `100%`,\n    backgroundColor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  text: {\n    padding: px(0, 8),\n  },\n  header: {\n    height: HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    backgroundColor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n})\n","import { ViewType } from '../views/ViewTypes'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { SAVE_ID } from '../../constants/save/save'\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, `http://www.w3.org/2000/svg`)\n  const svgData = svgEl.outerHTML\n  const preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\n  const svgBlob = new Blob([preface, svgData], { type: `image/svg+xml;charset=utf-8` })\n  const svgUrl = URL.createObjectURL(svgBlob)\n  const downloadLink = document.createElement(`a`)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)!\n  const newStyleNodes = Array.from(document.querySelectorAll(`style`))\n    .map((style) => style.innerHTML)\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n","import { makeStyles } from '@mui/styles'\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const useDrawerButtonStyles = makeStyles({\n  button: {\n    margin: important(0),\n    padding: important(0),\n    minWidth: important(0),\n    color: important(BUTTON_COLORS.buttonInlined),\n  },\n})\n","import { FunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: FunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant=\"contained\" autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant=\"outlined\">\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { FunctionComponent, useState } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { saveSvg } from '../../../../helpers/d3/saveSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../text/SiteText'\n\nimport { useDrawerButtonStyles } from '../../../../components-style/content/data-drawer/items/useDrawerButtonStyles'\n\nimport { ConfirmationDialog } from '../../common/dialogs/ConfirmationDialog'\n\nexport interface DataSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const DataSaveButton: FunctionComponent<DataSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const classes = useDrawerButtonStyles()\n  const onConfirm = () => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={TOP_TOOLBAR_TEXT.saveText.header}\n        description={TOP_TOOLBAR_TEXT.saveText.description}\n        onConfirm={onConfirm}\n        onClose={() => setIsDialogOpen(false)}\n        confirmText={TOP_TOOLBAR_TEXT.saveText.confirm}\n        cancelText={TOP_TOOLBAR_TEXT.saveText.cancel}\n      />\n      <Button\n        variant=\"text\"\n        onClick={() => setIsDialogOpen(true)}\n        className={classes.button}\n        aria-label={TOP_TOOLBAR_TEXT.saveText.save}\n      >\n        <Tooltip title={TOP_TOOLBAR_TEXT.saveText.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Dimensions } from '../../../types/basic/dimensions'\n\nexport const useViewStyle = makeStyles<Theme, Dimensions>(() => ({\n  box: {\n    width: ({ width }) => width,\n    height: ({ height }) => height,\n    overflowX: `hidden`,\n    overflowY: `auto`,\n  },\n}))\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","export const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: [[number, number], [number, number]], cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(`1`)\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport interface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useParallelCoordinatesStyle = makeStyles<Theme, StyleProps>(() => ({\n  svg: {\n    background: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  line: {\n    fill: `none`,\n    opacity: ({ opacity }) => opacity[0] / 100,\n  },\n  selected: {\n    stroke: important(PLOT_COLORS.brushColor),\n    opacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    strokeOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n  text: {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisLeft, brushY, D3BrushEvent, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataEachG } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { useParallelCoordinatesStyle } from '../../../../components-style/content/views/parallel-coordinates/useParallelCoordinatesStyle'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\nimport { SAVE_ID } from '../../../../constants/save/save'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\nconst TEXT_Y_SHIFT = 10\n\nconst PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\nconst AXES = `AXES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: FunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  setDataSelected,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useParallelCoordinatesStyle({ width, height, margin, opacity })\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      setDataSelected((data) =>\n        displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        }),\n      )\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const brush = brushY<keyof SelectableDataType>()\n      .extent([\n        [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n        [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n      ])\n      .on(BrushAction.start, () => {\n        setComponentBrushing(ViewType.ParallelCoordinates)\n      })\n      .on(BrushAction.move, (brushEvent: D3BrushEvent<SelectableDataType>, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      })\n      .on(BrushAction.end, (brushEvent: D3BrushEvent<SelectableDataType>, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      })\n\n    const getAxisTransform = (attribute: keyof SelectableDataType) => getTranslate([xScale(String(attribute))!, 0])\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath = (data: SelectableDataType) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, clsx(classes.line, PARALLEL_COORDINATES))\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n        tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n        tooltip\n          .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n          .style(SVG.style.left, px(clientX))\n          .style(SVG.style.top, px(clientY))\n      })\n      .on(MouseActions.mouseOut, () => {\n        tooltip.transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n      })\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, -TEXT_Y_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, classes.text)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n    classes,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={height} className={classes.svg} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{PARALLEL_COORDINATES_TEXT.unavailable}</div>\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport interface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useScatterPlotMatrixStyle = makeStyles<Theme, StyleProps>(() => ({\n  svg: {\n    fontSize: PLOT_FONT.fontSize,\n    background: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  x: {},\n  y: {},\n  axis: {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  rect: {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  axisLine: {\n    stroke: PLOT_COLORS.axisLines,\n  },\n  axisPath: {\n    display: `none`,\n  },\n  cell: {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  dataPoint: {\n    fillOpacity: ({ opacity }) => opacity[0] / 100,\n  },\n  selected: {\n    fill: important(PLOT_COLORS.brushColor),\n    fillOpacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    fillOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n  duplicates: {},\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  D3BrushEvent,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/scatter-plot-matrix/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { DataEachCircle, DataEachG } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { useScatterPlotMatrixStyle } from '../../../../components-style/content/views/scatter-plot-matrix/useScatterPlotMatrixStyle'\nimport { SAVE_ID } from '../../../../constants/save/save'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\nexport const DATA_POINT = `dataPoint`\nexport const AXIS_X = `axisX`\nexport const AXIS_Y = `axisY`\nexport const CELL = `cell`\nexport const CELL_DUPLICATES = `cell-dup`\nexport const SPACING = {\n  HORIZONTAL: 12,\n  VERTICAL: 12,\n}\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: FunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  setDataSelected,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useScatterPlotMatrixStyle({ width, height, margin, opacity })\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([SPACING.HORIZONTAL, rect.width - SPACING.HORIZONTAL]),\n      scaleLinear([rect.height - SPACING.HORIZONTAL, SPACING.HORIZONTAL]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.x, classes.axis))\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.y, classes.axis))\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachCircle<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachCircle<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, classes.rect)\n        .attr(SVG.attributes.x, SPACING.HORIZONTAL)\n        .attr(SVG.attributes.y, SPACING.VERTICAL)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, SPACING.HORIZONTAL))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, SPACING.VERTICAL))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, clsx(classes.dataPoint, DATA_POINT))\n        .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n          tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n          tooltip\n            .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n            .style(SVG.style.left, px(clientX))\n            .style(SVG.style.top, px(clientY))\n        })\n        .on(MouseActions.mouseOut, () => {\n          tooltip.transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n        })\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, classes.cell)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 3 * SPACING.HORIZONTAL)\n      .attr(SVG.attributes.y, 2.5 * SPACING.VERTICAL)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: { cell: MatrixPosition | null } = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        setDataSelected((data) => isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey]))))\n      }\n    }\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, (_: D3BrushEvent<SelectableDataType>, { rowIdx, colIdx, rowKey, colKey }: MatrixItem) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      })\n      .on(BrushAction.move, ({ selection }: D3BrushEvent<SelectableDataType>, matrixItem: MatrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      })\n      .on(BrushAction.end, ({ selection }: D3BrushEvent<SelectableDataType>, matrixItem: MatrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      })\n      .extent([\n        [0, 0],\n        [rect.width, rect.height],\n      ])\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.cell, classes.duplicates))\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n    classes,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, pointSize, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  selectAll(getClass(DATA_POINT))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, classes.duplicates)\n\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={height} className={classes.svg} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{SCATTER_PLOT_MATRIX_TEXT.unavailable}</div>\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\ninterface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useGlyphsStyle = makeStyles<Theme, StyleProps>(() => ({\n  svg: {\n    background: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  glyph: {\n    opacity: ({ opacity }) => opacity[0] / 100,\n    cursor: `crosshair`,\n  },\n  selected: {\n    fill: important(PLOT_COLORS.brushColor),\n    opacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    fillOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/glyphs/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { HTML } from '../../../../constants/html'\nimport { SAVE_ID } from '../../../../constants/save/save'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { useGlyphsStyle } from '../../../../components-style/content/views/glyphs/useGlyphsStyle'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `glyphsItems`\n\nexport const Glyphs: FunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  setDataSelected,\n  sortAttribute,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useGlyphsStyle({ width, height, margin, opacity })\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const sortedDataset = sortAttribute\n      ? [...dataset].sort((a, b) => Number(a[sortAttribute]) - Number(b[sortAttribute]))\n      : [...dataset]\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform = (data: SelectableDataType) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath = (data: SelectableDataType) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, clsx(classes.glyph, GLYPHS))\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n            tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n            tooltip\n              .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n              .style(SVG.style.left, px(clientX))\n              .style(SVG.style.top, px(clientY))\n          })\n          .on(MouseActions.mouseOut, () => {\n            tooltip.transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n          })\n          .on(MouseActions.click, (_: MouseEvent, changedData: SelectableDataType) => {\n            setComponentBrushing(ViewType.Glyphs)\n            const selected = dataset.map((data) => (data === changedData ? !data.selected : data.selected))\n            setDataSelected((data, idx) => selected[idx])\n            if (selected.every((value) => !value)) {\n              setComponentBrushing(null)\n            }\n          })\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    selectAll(getClass(GLYPHS))\n      .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n      .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n  }, [\n    dataset,\n    classes,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    sortAttribute,\n    color,\n    isBrushingActive,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, innerWidth, innerHeight, colorCategory],\n  )\n  // selected coloring\n  selectAll(getClass(GLYPHS))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={innerHeight + margin.height} className={classes.svg} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{GLYPHS_TEXT.unavailable}</div>\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\ninterface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useScatterPlotGlyphsStyle = makeStyles<Theme, StyleProps>(() => ({\n  svg: {\n    background: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  glyph: {\n    opacity: ({ opacity }) => opacity[0] / 100,\n  },\n  axis: {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: important(PLOT_COLORS.axisLinesDark),\n    },\n  },\n  selected: {\n    fill: important(PLOT_COLORS.brushColor),\n    opacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    fillOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n  duplicates: {},\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  axisBottom,\n  axisLeft,\n  brush,\n  D3BrushEvent,\n  lineRadial,\n  scaleLinear,\n  scaleOrdinal,\n  scaleRadial,\n  select,\n  selectAll,\n} from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\n\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { isInRanges } from '../../../../helpers/basic/range'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SAVE_ID } from '../../../../constants/save/save'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { useScatterPlotGlyphsStyle } from '../../../../components-style/content/views/scatter-plot-glyphs/useScatterPlotGlyphsStyle'\n\nconst SCATTER_PLOT_GLYPHS = `scatterPlotGlyphs`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: FunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  setDataSelected,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useScatterPlotGlyphsStyle({ width, height, margin, opacity })\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains([...displayAttributes, xAttribute, yAttribute], dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(extentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(extentInDomains[attribute]),\n    )\n\n    const getGlyphPath = (data: SelectableDataType) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    svg\n      .selectAll(SCATTER_PLOT_GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, clsx(classes.glyph, SCATTER_PLOT_GLYPHS))\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(\n            SVG.attributes.transform,\n            getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n          )\n          .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n            tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n            tooltip\n              .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n              .style(SVG.style.left, px(clientX))\n              .style(SVG.style.top, px(clientY))\n          })\n          .on(MouseActions.mouseOut, () => {\n            tooltip.transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n          })\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, classes.axis)\n    axisX.call(axisBottom(xScale))\n    svg\n      .selectAll(AXIS_Y)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, classes.axis)\n      .call(axisLeft(yScale))\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        setDataSelected((data) =>\n          isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))),\n        )\n      }\n    }\n\n    const makeBrush = brush()\n      .on(BrushAction.start, () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      })\n      .on(BrushAction.move, ({ selection }: D3BrushEvent<SelectableDataType>) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      })\n      .on(BrushAction.end, ({ selection }: D3BrushEvent<SelectableDataType>) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      })\n      .extent([\n        [-glyphSize / 2, -glyphSize / 2],\n        [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n      ])\n    svg.call(makeBrush)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    classes,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  selectAll(getClass(SCATTER_PLOT_GLYPHS))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, classes.duplicates)\n\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={height} className={classes.svg} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n        <div className={TOOLTIP_CLASS} />\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{SCATTER_PLOT_GLYPHS_TEXT.unavailable}</div>\n}\n","import { FunctionComponent } from 'react'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { ParallelCoordinatesSettings } from '../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../../types/views/scatter-plot-matrix/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../../types/views/glyphs/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { VIEW_BORDER_SIZE } from '../../../constants/views/common'\n\nimport { useViewStyle } from '../../../components-style/content/views/useViewStyle'\n\nimport { Settings, SettingsType } from './Settings'\nimport { ParallelCoordinates } from './parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from './scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from './glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from './scatter-plot-glyphs/ScatterPlotGlyphs'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  component: ViewType\n  settings: Settings\n}\n\ntype ViewElementFunction = (props: Brushable & VisualizationView, settings: SettingsType) => JSX.Element\n\nconst options: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n}\n\nexport const View: FunctionComponent<ViewProps> = ({ width, height, component, settings, ...dataProps }) => {\n  const graph = options[component]\n  const classes = useViewStyle({ width, height })\n  const settingsCurr = settings[component]\n  if (!settingsCurr) return null\n  return (\n    <div className={classes.box}>{graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr)}</div>\n  )\n}\n","import React, { FunctionComponent, ComponentProps } from 'react'\nimport { useSize } from 'react-use'\nimport { IconButton, Typography } from '@mui/material'\nimport { Close } from '@mui/icons-material'\nimport clsx from 'clsx'\n\nimport { DRAG_HANDLE, HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/views/common'\n\nimport { useGridItemStyle } from '../../../components-style/content/views/useGridItemStyle'\n\nimport { DataSaveButton } from '../data-drawer/items/DataSaveButton'\nimport { View } from './View'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isDragFinished: boolean\n}\n\nexport const GridItem: FunctionComponent<Props> = ({ onRemove, title, isDragFinished, ...rest }) => {\n  const classes = useGridItemStyle()\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <div className={classes.gridItem}>\n        <div className={clsx(DRAG_HANDLE, classes.header)}>\n          <Typography className={classes.text}>{title}</Typography>\n          <div>\n            <DataSaveButton viewType={rest.component} />\n            <IconButton onClick={onRemove}>\n              <Close />\n            </IconButton>\n          </div>\n        </div>\n        {isDragFinished && <View width={width} height={height - HEADER_HEIGHT} {...rest} />}\n      </div>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import { Dispatch, FunctionComponent, SetStateAction, useCallback, useState } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport clsx from 'clsx'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\n\nimport { getClass } from '../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../helpers/d3/displayDetails'\n\nimport { isViewType, ViewType } from '../../../constants/views/ViewTypes'\nimport {\n  COLUMNS_COUNT,\n  DEFAULT_GRID_LAYOUT,\n  DEFAULT_VIEW_DIMENSIONS,\n  DRAG_HANDLE,\n  ROW_HEIGHT,\n  VIEW_LIMITS,\n} from '../../../constants/views/common'\nimport { TOOLTIP_CLASS } from '../../../constants/views/tooltip'\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\nimport { VIEW_NAMES } from '../../../text/views-and-menus/common'\n\nimport { useViewGridStyle } from '../../../components-style/content/views/useViewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\nimport { Settings } from './Settings'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nexport const ViewGrid: FunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  ...viewProps\n}) => {\n  const classes = useViewGridStyle()\n  const [isGridChanging, setIsGridResizing] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[]>(DEFAULT_GRID_LAYOUT)\n\n  const views = layout.map((item) => item.i)\n\n  const updateLayout = useCallback((newLayout: LayoutArray) => {\n    if (!newLayout) return\n    const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n    setLayout(filteredLayout as GridLayoutItem[])\n  }, [])\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType], ...VIEW_LIMITS }]\n      })\n    },\n    [setIsAddViewDialogOpen],\n  )\n\n  const removeView = useCallback((viewType: ViewType) => {\n    setLayout((layout) => layout.filter((item) => item.i !== viewType))\n  }, [])\n\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  displayDetails(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <div>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <div className={clsx(classes.tooltip, TOOLTIP_CLASS)} />\n      <ReactGridLayout\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={() => setIsGridResizing(true)}\n        onResizeStop={() => setIsGridResizing(false)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <div key={view.i} data-grid={view}>\n            <GridItem\n              isDragFinished={!isGridChanging}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => removeView(view.i)}\n              component={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </div>\n        ))}\n      </ReactGridLayout>\n    </div>\n  )\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const useEmptyDataStyle = makeStyles({\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nimport { useEmptyDataStyle } from '../../../components-style/content/no-data/useEmptyDataStyle'\n\nexport const EmptyData: FunctionComponent = () => {\n  const classes = useEmptyDataStyle()\n  return <div className={classes.site}>{EMPTY_DATA_TEXT.content}</div>\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const useLoadingStyle = makeStyles({\n  load: {\n    paddingTop: px(40),\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { useLoadingStyle } from '../../../components-style/content/no-data/useLoadingStyle'\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nexport const Loading: FunctionComponent = () => {\n  const classes = useLoadingStyle()\n  return <div className={classes.load}>{EMPTY_DATA_TEXT.loading}</div>\n}\n","import { FunctionComponent, useState } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../views/ViewGrid'\nimport { Settings } from '../views/Settings'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\n\nexport const DataContext: FunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [redrawTime, setRedrawTime] = useState(Date.now())\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = (data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }\n\n  const setDataSelected = (setFunction: (data: SelectableDataType, idx: number) => boolean): void => {\n    if (dataset) {\n      dataset.forEach((data, idx) => {\n        data.selected = setFunction(data, idx)\n      })\n      setRedrawTime(Date.now()) // redraw component\n    }\n  }\n\n  const cleanAllBrushes = () => {\n    setDataSelected((data) => (data.selected = false))\n    cleanBrushingRef.current.forEach((f) => f())\n  }\n\n  const clearBrushesOnButton = () => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }\n\n  const setComponentBrushing: SetComponentBrushing = (newComponent) => {\n    if (componentBrushingRef.current !== newComponent) cleanAllBrushes()\n    setCurrentComponentBrushing(newComponent)\n  }\n\n  const registerCleanBrushing = (cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }\n\n  const cleanSelectedIfViewWasBrushing = (component: ViewType) => {\n    if (componentBrushingRef.current === component) {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n    }\n  }\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = (newIsBrushingOnEndOfMove: boolean) => {\n    cleanAllBrushes()\n    setCurrentComponentBrushing(null)\n    setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n  }\n\n  const isBrushingActive = componentBrushingRef.current !== null\n\n  const viewProps = {\n    registerCleanBrushing,\n    setComponentBrushing,\n    setDataSelected,\n    redrawTime,\n    isBrushingActive,\n    isBrushingOnEndOfMove,\n  }\n\n  const getViewGrid = () => {\n    if (dataLoadState === DataLoadState.NoData) {\n      return <EmptyData />\n    }\n    if (dataLoadState === DataLoadState.Loading || !dataset) {\n      return <Loading />\n    }\n    return (\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={() => setDrawerOpen(false)}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        {...viewProps}\n      />\n    )\n  }\n\n  return (\n    <>\n      <TopToolbar\n        openDrawer={() => setDrawerOpen(true)}\n        isToolsDisabled={dataset === null}\n        isDetailsVisible={isDetailsVisible}\n        setIsDetailsVisible={setIsDetailsVisible}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n        setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n        isBrushingActive={isBrushingActive}\n        clearBrushes={clearBrushesOnButton}\n        setDataset={setDatasetAndRemoveBrushing}\n        setDataLoadState={setDataLoadState}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n      />\n      {getViewGrid()}\n    </>\n  )\n}\n","import { makeStyles } from '@mui/styles'\n\nexport const useAppStyle = makeStyles({\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { useAppStyle } from './useAppStyle'\n\nexport const App: FunctionComponent = () => {\n  const style = useAppStyle()\n  return (\n    <div className={style.app}>\n      <Header />\n      <div className={style.content}>\n        <DataContext />\n      </div>\n      <Footer />\n    </div>\n  )\n}\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}