{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/constants/views/ViewTypes.ts","app/text/HeaderText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/FooterText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/constants/data/sampleDataset.tsx","app/constants/data/data.ts","app/text/SiteText.ts","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/helpers/data/data.ts","app/components/content/top-toolbar/items/file-reader/NullDialog.tsx","app/helpers/data/comparator.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components-style/content/top-toolbar/items/buttons/colorButtonStyle.ts","app/helpers/react/useDebounce.ts","app/components/content/top-toolbar/items/buttons/ColorButton.tsx","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/constants/views/common.ts","app/constants/views/tooltip.ts","app/text/views-and-menus/common.ts","app/components-style/content/views/viewGridStyle.ts","app/components-style/content/data-drawer/dataDrawerStyle.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseAction.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/glyphs.ts","app/components-style/content/data-drawer/dataDrawerMenuStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components-style/content/data-drawer/items/menuTextStyle.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components/content/data-drawer/items/OpacityInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/settings/ParallelCoordinatesSettings.tsx","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixMenu.tsx","app/types/views/settings/ScatterPlotMatrixSettings.tsx","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-menus/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsMenu.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/text/views-and-menus/dataTable.ts","app/components-style/content/data-drawer/items/colorPickerStyle.ts","app/components/content/data-drawer/items/ColorPicker.tsx","app/components/content/views/data-table/DataTableMenu.tsx","app/types/views/settings/DataTableSettings.ts","app/components/content/data-drawer/DataDrawer.tsx","app/components-style/content/views/gridItemStyle.ts","app/constants/save/save.ts","app/helpers/d3/saveSvg.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/common/DataSaveButton.tsx","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/d3/attributeGetters.ts","app/constants/html.ts","app/helpers/d3/tooltip.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/constants/form.ts","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTable.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/components/content/views/GridItem.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/loadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","DataLoadError","ViewType","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","dataToReadable","data","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","VIEW_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","SampleDataset","flower","bird","car","OptionType","sampleDatasetIcons","LocalFlorist","Air","DirectionsCar","sampleDatasets","flowerJson","birdJson","carJson","AcceptableFileTypes","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","header","save","confirm","cancel","FILE_READER_TEXT","button","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFileFormat","nullDialog","optionsText","leave","filter","change","optionsDescription","changeTo","topToolbarStyle","toolbar","separator","height","margin","borderLeft","left","middle","right","topToolbarButtonStyle","minWidth","ClickableButton","icon","onClick","disabled","label","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","keys","Object","every","key","idx","CsvParse","textCsv","parse","output","fromEntries","toLowerCase","numValue","Number","isNaN","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","fileReaderStyle","dialogStyle","dialog","alert","innerContent","contentBox","toggleDialogGroup","marginBottom","toggleDialogButton","flexGrow","attHeader","fontWeight","paddingBottom","numInput","alignSelf","SelectionDialog","isOpen","onClose","options","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","getAttributeKeys","getDatasetSample","getQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","size","getDefaultAllAttributesChecked","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","getDefaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","NullDialog","nullContainingAttributes","setDataset","useState","optionsChosen","setOptionsChosen","replaceValue","setReplaceValue","useEffect","fill","ToggleButtonGroup","exclusive","onChange","e","prev","newOpts","handleToggleChange","opt","ToggleButton","TextField","type","defaultValue","newVals","handleNumberChange","target","forEach","att","addSelected","d","selected","SortType","FILE_INPUT_ID","FileReader","setDataLoadState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isNullDialogOpen","setIsNullDialogOpen","setNullContainingAttributes","rawDataset","setRawDataset","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionsKeys","closeDialog","optionKey","Loaded","NoData","AutoGraph","component","Add","hidden","id","a","files","Loading","selectedFile","fileType","json","csv","JSON","selectableDataset","document","getElementById","ToggleButtonSingle","setValue","onValue","event","checked","openSettingsButtonStyle","settings","OpenSettingsButton","IconButton","Settings","getColorInputStyle","getColorInputBoxStyle","minHeight","ml","colorInputStyle","inputBox","position","opacity","useDebounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","ColorButton","handleSetColor","tooltip","currentColor","setCurrentColor","debouncedColor","disableHoverListener","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","brushColor","setBrushColor","Info","SkipNext","AutoFixOff","AddCircle","Brush","SVG","svg","g","circle","rect","path","div","class","transform","x","y","cx","cy","r","strokeWidth","stroke","top","none","block","displayDetails","tooltipClass","selectAll","style","DRAG_HANDLE","VIEW_DEFAULT_SIZE","VIEW_LIMITS","ParallelCoordinates","minW","minH","ScatterPlotMatrix","Glyphs","ScatterPlotGlyphs","DataTable","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT","i","TOOLTIP_CLASS","TOOLTIP","bottom","lr","MENU_BASE_TEXT","more","empty","MENU_TEXT","attributes","category","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","PALETTE_PICKER_TEXT","categoriesLabel","VIEW_NAMES","viewGridStyle","pointerEvents","zIndex","dataDrawerStyle","drawer","flexShrink","chevron","menu","descCompare","b","orderBy","BrushAction","MouseAction","getComparator","sort","desc","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","margins","colorCategory","schemeCategory10","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","dataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleMove","newAttributesKeys","prevSettings","displayAttributes","FormControlLabel","onUpButton","ArrowDropUp","onDownButton","ArrowDropDown","Checkbox","eventChecked","newChecked","newSettings","handleCheckboxChange","CategorySelector","categoryAttribute","undefined","select","MenuItem","Selector","settingsKey","newValue","numberInputStyles","vertical","horizontal","textField","menuTextStyle","MarginInput","handleMarginChange","newMargin","newMargins","inputProps","inputMode","min","NumberInput","valueKey","max","minVal","maxVal","OpacityInput","handleOpacityChange","newOpacity","newOpacities","getPalettePickerColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","currentColors","setCurrentColors","debouncedColors","getInput","newColor","oldColors","newColors","toggleButtonsStyle","group","ToggleButtons","GlyphsMenu","glyphsSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","sortableAttributes","categoricalAttributes","createGlyphsMenu","useCallback","newQaKeys","defaultSortAttribute","defaultCategoryAttribute","newGlyphs","sortAttribute","currChecked","newSortableAttributes","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","PARALLEL_COORDINATES_DEFAULT","lineWidth","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","sizes","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","createScatterPlotMatrixMenu","newScatterPlotMatrix","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_MENU_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsMenu","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsMenu","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","selectedBackgroundColor","selectedFontColor","DATA_TABLE_MENU_TEXT","DATA_TABLE_TEXT","checkboxTooltip","getColorPickerInputStyle","colorPickerStyle","ColorPicker","DataTableMenu","dataTableSettings","createDataTableMenu","newKeys","newDataTableSettings","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","SAVE_ID","CONTAINER_SAVE_ID","saveSvg","svgContainer","querySelector","containerClass","from","classList","cls","includes","newStyleNodes","querySelectorAll","flatMap","sheet","cssRules","rules","cssText","node","createElement","innerHTML","insertBefore","firstChild","svgEl","fileName","setAttribute","svgData","outerHTML","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","removeChild","saveSvgToFile","remove","console","error","inlineButtonStyles","ConfirmationDialog","onConfirm","cancelText","DataSaveButton","isDialogOpen","setIsDialogOpen","Save","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getCategoryColor","TEXT_Y_SHIFTS","odd","even","TOGGLE_TEXT_Y_SHIFT","Math","getTextTogglingYShift","_","HTML","onMouseOverTooltip","clientX","clientY","duration","html","getAttributeValuesWithLabel","onMouseOutTooltip","PARALLEL_COORDINATES_CLASS","getParallelCoordinatesStyle","isBrushActive","font","textAnchor","getViewsNotDisplayStyle","refreshViews","registerCleanBrushing","setComponentBrushing","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","onBrush","start","move","brushEvent","axisName","selection","end","brushExtent","BRUSH_WIDTH","brush","brushY","on","enter","append","attr","line","mouseOver","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","selLKey","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","brushing","clearBrush","brushSelection","makeBrush","GLYPHS_CLASS","SELECTED_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","onMouseClick","changedData","SCATTER_PLOT_GLYPHS_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","makeGlyphs","FORM","getDataTableRowStyle","paddingTop","dataTableStyle","tableHead","tableBody","notDisplayed","order","setOrder","setOrderBy","createSortHandler","property","isAsc","handleRequestSort","numSelected","someSelected","allSelected","TableContainer","Table","TableHead","TableRow","TableCell","checkAll","indeterminate","headCellId","orderedByActive","sortDirection","TableSortLabel","active","direction","TableBody","hover","handleSelectClick","s","View","dataProps","graph","settingsCurr","overflowX","overflowY","GridItem","onRemove","isResizeFinished","rest","useSize","Close","ReactGridLayout","WidthProvider","GridLayout","ViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","layout","setLayout","viewProps","viewResizing","setViewResizing","updateLayout","newLayout","filteredLayout","addView","find","posY","reduce","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","emptyDataStyle","site","EmptyData","loadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","redrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","cleanAllBrushes","deletePrevSelection","f","newComponent","newIsBrushingOnEndOfMove","appStyle","app","content","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.d375c3b0.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFileFormat = `unsupportedFileFormat`,\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  DataTable = `DataTable`,\n}\n\nexport const isViewType = (viewType: string): viewType is ViewType =>\n  (Object.values(ViewType) as string[]).includes(viewType)\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim()\n\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface for Selectable data type with index (for sorting etc.)\n */\nexport interface IndexedSelectableDataType extends SelectableDataType {\n  index: number\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonHoverBackground: `#b3bede`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  border: `rgba(0, 0, 0, 0.12)`,\n  colorBorder: `#42495d`,\n  buttonDialogBackground: `#363a46`,\n  buttonDialogHoverBackground: `#1f2528`,\n  buttonDialogFont: `#d6e1ff`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { calc } from '../helpers/d3/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/HeaderText'\n\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { FOOTER_TEXT } from '../../text/FooterText'\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n    <Box sx={footerStyle.text}>\n      &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n    </Box>\n  </Box>\n)\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { Air, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flower = `flower`,\n  bird = `bird`,\n  car = `car`,\n}\n\nexport const sampleDatasetFiles: Record<SampleDataset, string> = {\n  [SampleDataset.flower]: `flowerData.json`,\n  [SampleDataset.bird]: `birdData.json`,\n  [SampleDataset.car]: `carData.json`,\n}\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flower]: <LocalFlorist />,\n  [SampleDataset.bird]: <Air />,\n  [SampleDataset.car]: <DirectionsCar />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flower]: flowerJson,\n  [SampleDataset.bird]: birdJson,\n  [SampleDataset.car]: carJson,\n}\n","export const CATEGORY_LIMIT = 10\n\nexport enum OptionType {\n  leave = `leave`,\n  change = `change`,\n  filter = `filter`,\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataLoadError } from '../constants/data/dataLoadState'\nimport { OptionType } from '../constants/data/data'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  labelBrushColor: `Brush color`,\n  addViewDialogTitle: `Add a view`,\n  noOption: `All view options are currently displayed.`,\n  saveText: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    save: `Save`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n}\n\nexport const FILE_READER_TEXT = {\n  button: `Select a file`,\n  sampleDataLabel: `Try it on the sample data`,\n  sampleDataDialogTitle: `Select sample dataset`,\n  sampleDataDialogText: {\n    [SampleDataset.flower]: `Flower dataset`,\n    [SampleDataset.bird]: `Bird dataset`,\n    [SampleDataset.car]: `Car dataset`,\n  },\n  alertDialog: {\n    [DataLoadError.unsupportedFile]: {\n      title: `File type not supported`,\n      description: `This file type is not supported. Use JSON or CSV file.`,\n    },\n    [DataLoadError.unsupportedFileFormat]: {\n      title: `File format not supported`,\n      description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n    },\n    confirm: `OK`,\n  },\n  nullDialog: {\n    title: `Data with null values occurred!`,\n    description: `This application provides only basic operations for modifying null data values. For better processing, use applications designed for this purpose.`,\n    confirm: `Confirm`,\n    optionsText: {\n      [OptionType.leave]: `Leave as is`,\n      [OptionType.filter]: `Filter`,\n      [OptionType.change]: `Change all`,\n    },\n    optionsDescription: {\n      [OptionType.leave]: `This option leaves the data as is. On numeric scales, null values will be cast to 0, in the table they will be displayed as null, for categorical data a separate category will be created.`,\n      [OptionType.filter]: `This option filters out all data with null values. These data will not be considered further in the application.`,\n      [OptionType.change]: `This option replaces all null values with the value entered below.`,\n    },\n    changeTo: `Change to`,\n    attribute: `Attribute:`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState } from 'react'\nimport { Add, AutoGraph } from '@mui/icons-material'\nimport { Box, Button } from '@mui/material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadError, DataLoadState } from '../../../../../constants/data/dataLoadState'\nimport { SampleDataset, sampleDatasetIcons, sampleDatasets } from '../../../../../constants/data/sampleDataset'\n\nimport { FILE_READER_TEXT } from '../../../../../text/SiteText'\n\nimport {\n  fileReaderStyle,\n  getFileReaderBoxStyle,\n} from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\nimport { ClickableButton } from '../buttons/ClickableButton'\nimport { getAttributeKeys } from '../../../../../helpers/data/data'\nimport { NullDialog } from './NullDialog'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: Array<DataType>): Array<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nconst FILE_INPUT_ID = `FILE_INPUT`\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isNullDialogOpen, setIsNullDialogOpen] = useState(false)\n  const [nullContainingAttributes, setNullContainingAttributes] = useState<Array<keyof SelectableDataType>>([])\n  const [rawDataset, setRawDataset] = useState<Array<SelectableDataType>>([])\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const optionsKeys = Object.values(SampleDataset)\n  const handleListItemClick = (optionKey: SampleDataset) => {\n    setIsSampleDataDialogOpen(false)\n    const dataset = sampleDatasets[optionKey]\n    setDataset(addSelected(dataset))\n    setDataLoadState(DataLoadState.Loaded)\n  }\n\n  const closeDialog = () => {\n    setIsNullDialogOpen(false)\n    setRawDataset([])\n    setNullContainingAttributes([])\n  }\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={FILE_READER_TEXT.sampleDataDialogTitle}\n        options={optionsKeys.map((key) => ({\n          key,\n          label: FILE_READER_TEXT.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={FILE_READER_TEXT.alertDialog.confirm}\n        alert={true}\n      />\n      <NullDialog\n        isOpen={isNullDialogOpen}\n        onClose={() => {\n          setDataLoadState(DataLoadState.NoData)\n          closeDialog()\n        }}\n        nullContainingAttributes={nullContainingAttributes}\n        dataset={rawDataset}\n        setDataset={(dataset) => {\n          setDataset(dataset)\n          setDataLoadState(DataLoadState.Loaded)\n          closeDialog()\n        }}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={FILE_READER_TEXT.sampleDataLabel}\n        />\n        <Button sx={fileReaderStyle.button} variant=\"contained\" component=\"label\">\n          <Add />\n          {FILE_READER_TEXT.button}\n          <input\n            type=\"file\"\n            hidden\n            id={FILE_INPUT_ID}\n            onChange={async (e) => {\n              if (e.target.files?.length) {\n                setDataLoadState(DataLoadState.Loading)\n                const selectedFile = e.target.files[0]\n                const fileType = selectedFile.type\n                let dataset: DataType[] = []\n\n                switch (fileType) {\n                  case AcceptableFileTypes.json: {\n                    const text = await selectedFile.text()\n                    dataset = JSON.parse(text)\n                    break\n                  }\n                  case AcceptableFileTypes.csv: {\n                    const textCsv = await selectedFile.text()\n                    dataset = CsvParse(textCsv)\n                    break\n                  }\n                  default: {\n                    setDataLoadState(DataLoadState.NoData)\n                    setAlertDialogText(FILE_READER_TEXT.alertDialog[DataLoadError.unsupportedFile])\n                    setDataset(null)\n                    setIsAlertDialogOpen(true)\n                    return\n                  }\n                }\n                if (!isArrayOfDataType(dataset)) {\n                  setDataLoadState(DataLoadState.NoData)\n                  setAlertDialogText(FILE_READER_TEXT.alertDialog[DataLoadError.unsupportedFileFormat])\n                  setDataset(null)\n                  setIsAlertDialogOpen(true)\n                  return\n                }\n                const selectableDataset = addSelected(dataset)\n                const nullContainingAttributes = getAttributeKeys(selectableDataset).filter((att) =>\n                  dataset.some((data) => data[att] === null),\n                )\n                if (nullContainingAttributes.length) {\n                  setNullContainingAttributes(nullContainingAttributes)\n                  setRawDataset(selectableDataset)\n                  setIsNullDialogOpen(true)\n                  const fileEl = document.getElementById(FILE_INPUT_ID) as unknown as { value: null }\n                  fileEl.value = null\n                  return\n                }\n                setDataset(selectableDataset)\n                setDataLoadState(DataLoadState.Loaded)\n              }\n            }}\n          />\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  middle: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n  right: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonHoverBackground,\n      },\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant=\"contained\" onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS, HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n\n  padding: isHighlighted ? px(8, 2) : 0,\n  borderRadius: px(10),\n})\n\nexport const fileReaderStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 6, 0, 2),\n    bgcolor: BUTTON_COLORS.buttonOnBackground,\n    color: BUTTON_COLORS.fontOn,\n    '&:hover': {\n      bgcolor: BUTTON_COLORS.buttonHoverBackground,\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS, ERROR_COLORS, BUTTON_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  description: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n  innerContent: {\n    padding: px(0, 40, 10),\n  },\n  contentBox: {\n    height: px(120),\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  text: {\n    color: SITE_COLORS.font,\n  },\n  toggleDialogGroup: {\n    width: `100%`,\n    marginBottom: px(5),\n    display: `flex`,\n  },\n  toggleDialogButton: {\n    flexGrow: 1,\n    padding: px(6),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonDialogBackground,\n      color: BUTTON_COLORS.buttonDialogFont,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonDialogHoverBackground,\n      },\n    },\n  },\n  button: {\n    margin: px(0, 20, 20),\n  },\n  attHeader: {\n    fontSize: px(16),\n    fontWeight: `bold`,\n    paddingBottom: px(4),\n    color: SITE_COLORS.font,\n  },\n  numInput: {\n    minWidth: `95%`,\n    alignSelf: `center`,\n    '&.MuiFormControl-root': {\n      margin: px(20, 6, 6),\n    },\n    '& input': {\n      padding: px(8, 10, 6),\n    },\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.description}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n","import { useEffect, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  TextField,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material'\n\nimport { SelectableDataType } from '../../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../../helpers/data/formatText'\n\nimport { OptionType } from '../../../../../constants/data/data'\n\nimport { FILE_READER_TEXT } from '../../../../../text/SiteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface NullDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  nullContainingAttributes: Array<keyof SelectableDataType>\n  dataset: Array<SelectableDataType>\n  setDataset: (dataset: Array<SelectableDataType>) => void\n}\n\nexport const NullDialog: VoidFunctionComponent<NullDialogProps> = ({\n  isOpen,\n  onClose,\n  nullContainingAttributes,\n  dataset,\n  setDataset,\n}) => {\n  const [optionsChosen, setOptionsChosen] = useState<Array<OptionType>>([])\n  const [replaceValue, setReplaceValue] = useState<Array<number>>([])\n\n  useEffect(() => {\n    setOptionsChosen(Array(nullContainingAttributes.length).fill(OptionType.leave))\n    setReplaceValue(Array(nullContainingAttributes.length).fill(0))\n  }, [nullContainingAttributes])\n\n  const handleNullDialogConfirm = () => {\n    optionsChosen.forEach((option, idx) => {\n      switch (option) {\n        case OptionType.filter:\n          dataset = dataset.filter((data) => data[nullContainingAttributes[idx]] !== null)\n          break\n        case OptionType.change:\n          dataset = dataset.map((data) => {\n            const att = nullContainingAttributes[idx]\n            return {\n              ...data,\n              [att]: data[att] === null ? Number(replaceValue[idx]) : data[att],\n            }\n          })\n          break\n        case OptionType.leave:\n          break\n      }\n    })\n    setDataset(dataset)\n  }\n\n  const handleToggleChange = (val: OptionType, idx: number) => {\n    setOptionsChosen((prev) => {\n      const newOpts = [...prev]\n      newOpts[idx] = val\n      return newOpts\n    })\n  }\n  const handleNumberChange = (val: number, idx: number) => {\n    setReplaceValue((prev) => {\n      const newVals = [...prev]\n      newVals[idx] = val\n      return newVals\n    })\n  }\n  const options = Object.values(OptionType)\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{FILE_READER_TEXT.nullDialog.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        <DialogContentText sx={dialogStyle.description}>{FILE_READER_TEXT.nullDialog.description}</DialogContentText>\n        {nullContainingAttributes.map((attribute, idx) => {\n          const option = optionsChosen[idx]\n          return (\n            <Box key={attribute} sx={dialogStyle.innerContent}>\n              <Typography sx={dialogStyle.attHeader}>{`${\n                FILE_READER_TEXT.nullDialog.attribute\n              } ${otherCasesToWhitespaces(attribute)}`}</Typography>\n              <ToggleButtonGroup\n                sx={dialogStyle.toggleDialogGroup}\n                value={option}\n                exclusive\n                onChange={(e, value) => handleToggleChange(value, idx)}\n              >\n                {options.map((opt, idx) => (\n                  <ToggleButton sx={dialogStyle.toggleDialogButton} value={opt} key={idx}>\n                    {FILE_READER_TEXT.nullDialog.optionsText[opt]}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n              <Box sx={dialogStyle.contentBox}>\n                <Typography sx={dialogStyle.text}>{FILE_READER_TEXT.nullDialog.optionsDescription[option]}</Typography>\n                {option === OptionType.change && (\n                  <TextField\n                    label={FILE_READER_TEXT.nullDialog.changeTo}\n                    type=\"number\"\n                    sx={dialogStyle.numInput}\n                    defaultValue={replaceValue[idx]}\n                    onChange={(e) => handleNumberChange(Number(e.target.value), idx)}\n                  />\n                )}\n              </Box>\n            </Box>\n          )\n        })}\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"contained\" onClick={handleNullDialogConfirm} sx={dialogStyle.button} autoFocus>\n          {FILE_READER_TEXT.nullDialog.confirm}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T>(a: T, b: T, orderBy: keyof T) =>\n  b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n\nexport enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n\nexport const getComparator = (sort: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sort === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = (event: MouseEvent<HTMLElement>, checked: string[]) => {\n    if (checked.length && checked[0] === onValue) {\n      return setValue(true)\n    }\n    return setValue(false)\n  }\n  const onValue = `on`\n  return (\n    <ToggleButtonGroup value={value ? [onValue] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={onValue} aria-label={label} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    color: BUTTON_COLORS.buttonOnBackground,\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Settings } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\n\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <IconButton size=\"small\" disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Settings />\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const getColorInputStyle = (disabled?: boolean): SxProps => ({\n  display: `flex`,\n  '& .MuiSvgIcon-root': {\n    color: disabled ? BUTTON_COLORS.fontDisabled : BUTTON_COLORS.buttonOnBackground,\n  },\n})\n\nexport const getColorInputBoxStyle = (color: string, disabled?: boolean): SxProps => ({\n  bgcolor: disabled ? BUTTON_COLORS.fontDisabled : color,\n  minWidth: px(25),\n  minHeight: px(25),\n  borderRadius: px(5),\n  ml: px(2),\n  border: border(1, disabled ? BUTTON_COLORS.buttonDisableBackground : BUTTON_COLORS.colorBorder),\n})\n\nexport const colorInputStyle: Record<string, SxProps> = {\n  inputBox: {\n    position: `relative`,\n    '& input': {\n      width: `100%`,\n      opacity: 0,\n      position: `absolute`,\n      left: 0,\n    },\n  },\n}\n","import { useEffect, useState } from 'react'\n\nexport const useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n  return debouncedValue\n}\n","import { useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Box, Tooltip } from '@mui/material'\n\nimport {\n  colorInputStyle,\n  getColorInputBoxStyle,\n  getColorInputStyle,\n} from '../../../../../components-style/content/top-toolbar/items/buttons/colorButtonStyle'\nimport { useDebounce } from '../../../../../helpers/react/useDebounce'\n\nexport interface ColorButtonProps {\n  color: string\n  handleSetColor: (color: string) => void\n  tooltip: string\n  disabled?: boolean\n  icon: JSX.Element\n}\n\nexport const ColorButton: VoidFunctionComponent<ColorButtonProps> = ({\n  color,\n  handleSetColor,\n  tooltip,\n  disabled,\n  icon,\n}) => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, 60)\n  useEffect(() => {\n    handleSetColor(debouncedColor)\n  }, [debouncedColor, handleSetColor])\n\n  return (\n    <Tooltip title={tooltip} disableHoverListener={disabled}>\n      <Box sx={colorInputStyle.inputBox}>\n        <input disabled={disabled} type=\"color\" value={color} onChange={(e) => setCurrentColor(e.target.value)} />\n        <Box sx={getColorInputStyle(disabled)}>\n          {icon}\n          <Box sx={getColorInputBoxStyle(color, disabled)} />\n        </Box>\n      </Box>\n    </Tooltip>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { AddCircle, AutoFixOff, Brush, SkipNext } from '@mui/icons-material'\nimport { Info } from '@mui/icons-material'\n\nimport { Box } from '@mui/material'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\nimport { ColorButton } from './items/buttons/ColorButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n\n  brushColor: string\n  setBrushColor: Dispatch<SetStateAction<string>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n  brushColor,\n  setBrushColor,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ToggleButtonSingle\n        icon={<Info />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<AutoFixOff />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n      />\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelAddView}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.middle}>\n      <ColorButton\n        color={brushColor}\n        handleSetColor={(color) => setBrushColor(color)}\n        icon={<Brush />}\n        disabled={isToolsDisabled}\n        tooltip={TOP_TOOLBAR_TEXT.labelBrushColor}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n    strokeWidth: `stroke-width`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    strokeWidth: `stroke-width`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","import { GridLayoutItem } from '../../types/views/Grid'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { ViewType } from './ViewTypes'\n\nexport const DEFAULT_BRUSH_COLOR = `#830606`\nexport const DEFAULT_BRUSH_BG_COLOR_TABLE = `#ffcfcf`\nexport const DEFAULT_BRUSH_FONT_COLOR_TABLE = `#111111`\n\nexport const VIEW_BORDER_SIZE = 5\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const HEADER_HEIGHT = 30\n\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 200,\n  height: 200,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n}\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n}\n\nexport const DEFAULT_GRID_LAYOUT: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\n\nexport const MENU_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER_TEXT = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.DataTable]: `Data Table`,\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { TOOLTIP } from '../../../constants/views/tooltip'\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const dataDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n}\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseAction {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { schemeCategory10 } from 'd3'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { SortType } from '../../helpers/data/comparator'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const dataDrawerMenuStyle: Record<string, SxProps> = {\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<Opt extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: Opt) => Partial<Opt>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <Opt extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<Opt>): JSX.Element => {\n  const handleCheckboxChange = (eventChecked: boolean, key: keyof SelectableDataType) => {\n    const newChecked = { ...checked, [key]: eventChecked }\n    setChecked(newChecked)\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as Opt\n      const newSettings = getNewSettings(newChecked, prevSettings)\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          ...newSettings,\n        },\n      }\n    })\n  }\n  const handleMove = (newAttributesKeys: Array<keyof SelectableDataType>) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setAttributesKeys(newAttributesKeys)\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as Opt\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n        },\n      }\n    })\n  }\n  const onUpButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  const onDownButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = (categoryAttribute: keyof SelectableDataType | -1) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n        },\n      }\n    })\n  }\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = (newValue: keyof SelectableDataType) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: newValue,\n        },\n      }\n    })\n  }\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const menuTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n    padding: px(6, 5, 3),\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({ margins, setSettings, viewType }) => {\n  const handleMarginChange = (newMargin: number, idx: number) => {\n    const newMargins = [...margins]\n    newMargins[idx] = newMargin\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: newMargins,\n        },\n      }\n    })\n  }\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type=\"number\"\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type=\"number\"\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type=\"number\"\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type=\"number\"\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface NumberInputProps<Opt> {\n  viewType: ViewType\n  label: string\n  valueKey: keyof Opt\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <Opt,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<Opt>): JSX.Element => {\n  const handleValueChange = (newValue: number) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: newValue,\n        },\n      }\n    })\n  }\n  const minVal = min ? { min } : { min: 0 }\n  const maxVal = max ? { max } : {}\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type=\"number\"\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={{ inputMode: `numeric`, ...minVal, ...maxVal }}\n        onChange={(e) => handleValueChange(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacity: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({ header, opacity, setSettings, viewType }) => {\n  const handleOpacityChange = (newOpacity: number, idx: number) => {\n    const newOpacities = [...opacity]\n    newOpacities[idx] = newOpacity\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: newOpacities,\n        },\n      }\n    })\n  }\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type=\"number\"\n        defaultValue={opacity[0]}\n        sx={numberInputStyles.textField}\n        inputProps={{ min: 0, max: 100 }}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type=\"number\"\n          defaultValue={opacity[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type=\"number\"\n          defaultValue={opacity[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const getPalettePickerColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useEffect } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PALETTE_PICKER_TEXT } from '../../../../text/views-and-menus/common'\n\nimport {\n  getPalettePickerColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({ colors, setSettings, viewType }) => {\n  const [currentColors, setCurrentColors] = useState<ColorArray>(colors)\n  const debouncedColors = useDebounce(currentColors, 60)\n\n  const handleSetColor = (newColor: string, idx: number) => {\n    if (newColor) {\n      setCurrentColors((oldColors) => {\n        const newColors: ColorArray = [...oldColors]\n        newColors[idx] = newColor\n        return newColors\n      })\n    }\n  }\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          colorCategory: debouncedColors,\n        },\n      }\n    })\n  }, [debouncedColors, setSettings, viewType])\n\n  const getInput = (idx: number) => (\n    <Box sx={palettePickerStyle.col} key={idx}>\n      <label>{PALETTE_PICKER_TEXT.categoriesLabel[idx]}</label>\n      <Box sx={getPalettePickerColorInputStyle(colors, idx)}>\n        <input type=\"color\" value={colors[idx]} onChange={(e) => handleSetColor(e.target.value, idx)} />\n      </Box>\n    </Box>\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER_TEXT.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = (newValue: T) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: newValue,\n        },\n      }\n    })\n  }\n  return (\n    <Box>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { SortType } from '../../../../helpers/data/comparator'\n\nexport const GlyphsMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n    prevSettings: GlyphsSettings,\n  ): Partial<GlyphsSettings> => {\n    const displayAttributes = getCurrentDisplayAttributes(newChecked)\n    const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n    const sortAttribute = newChecked[prevSettings.sortAttribute]\n      ? prevSettings.sortAttribute\n      : newSortableAttributes?.[0]\n    return { displayAttributes, sortAttribute }\n  }\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacity={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SortType } from '../../../helpers/data/comparator'\n\nimport { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [10, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacity={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `Scatter plot cannot be displayed, window is too small. Change the size, number of attributes displayed or margin to display scatter plot matrix`,\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <Typography sx={menuTextStyle.text}>{SCATTER_PLOT_MATRIX_MENU_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacity={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 10, 20],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport { glyphSizeKey, xAttributeKey, yAttributeKey } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { SCATTER_PLOT_GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createScatterPlotGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n  ): Partial<ScatterPlotGlyphsSettings> => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n  const handleChangeSettings = () => cleanSelectedIfViewWasBrushing(viewType)\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_MENU_TEXT.opacity}\n                  opacity={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { DEFAULT_BRUSH_BG_COLOR_TABLE, DEFAULT_BRUSH_FONT_COLOR_TABLE } from './common'\n\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\nexport const DATA_TABLE_DEFAULT: Pick<\n  DataTableSettings,\n  `rowHeight` | `selectedBackgroundColor` | `selectedFontColor`\n> = {\n  rowHeight: 45,\n  selectedBackgroundColor: DEFAULT_BRUSH_BG_COLOR_TABLE,\n  selectedFontColor: DEFAULT_BRUSH_FONT_COLOR_TABLE,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { SortType } from '../../helpers/data/comparator'\nimport { MENU_BASE_TEXT, VIEW_NAMES } from './common'\n\nexport const DATA_TABLE_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes him not valid. Please choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  selectedBackgroundColor: `Selected background color`,\n  selectedFontColor: `Selected font color`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascendant`,\n  [SortType.desc]: `Sort descendant`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from the menu.`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const getColorPickerInputStyle = (color: string): SxProps => ({\n  bgcolor: color,\n  width: px(25),\n  borderRadius: px(5),\n  '& input': {\n    width: `100%`,\n    height: px(25),\n    opacity: 0,\n  },\n})\n\nexport const colorPickerStyle: Record<string, SxProps> = {\n  picker: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `center`,\n  },\n}\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport {\n  colorPickerStyle,\n  getColorPickerInputStyle,\n} from '../../../../components-style/content/data-drawer/items/colorPickerStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface ColorPickerProps<Opt> {\n  viewType: ViewType\n  color: string\n  settingsKey: keyof Opt\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const ColorPicker = <Opt,>({\n  viewType,\n  color,\n  settingsKey,\n  setSettings,\n  label,\n}: ColorPickerProps<Opt>): JSX.Element => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, 60)\n\n  const handleSetColor = (newColor: string) => {\n    if (newColor) {\n      setCurrentColor(newColor)\n    }\n  }\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: debouncedColor,\n        },\n      }\n    })\n  }, [debouncedColor, setSettings, settingsKey, viewType])\n  return (\n    <Box sx={colorPickerStyle.picker}>\n      <Typography sx={menuTextStyle.text}>{label}</Typography>\n      <Box sx={getColorPickerInputStyle(color)}>\n        <input type=\"color\" value={color} onChange={(e) => handleSetColor(e.target.value)} />\n      </Box>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  DataTableSettings,\n  rowHeightKey,\n  selectedBackgroundColorKey,\n  selectedFontColorKey,\n} from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_MENU_TEXT } from '../../../../text/views-and-menus/dataTable'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const DataTableMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    attributesKeys.filter((key) => currChecked[key])\n\n  const createDataTableMenu = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{DATA_TABLE_MENU_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  viewType={viewType}\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.rowHeight}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedBackgroundColor}\n                  settingsKey={selectedBackgroundColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedBackgroundColor}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedFontColor}\n                  settingsKey={selectedFontColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedFontColor}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{DATA_TABLE_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { VisualizationSettings } from './VisualizationSettings'\n\nexport const rowHeightKey = `rowHeight`\nexport const selectedBackgroundColorKey = `selectedBackgroundColor`\nexport const selectedFontColorKey = `selectedFontColor`\n\n/**\n * Settings for Data Table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n\n  /**\n   * Selected background color\n   */\n  [selectedBackgroundColorKey]: string\n  /**\n   * Selected font color\n   */\n  [selectedFontColorKey]: string\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, Divider, Drawer, IconButton } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { dataDrawerStyle } from '../../../components-style/content/data-drawer/dataDrawerStyle'\n\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot-matrix/ScatterPlotMatrixMenu'\nimport { ScatterPlotGlyphsMenu } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsMenu'\nimport { DataTableMenu } from '../views/data-table/DataTableMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: VoidFunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const menus = views.map((view, idx) => {\n    switch (view) {\n      case ViewType.Glyphs:\n        return (\n          <GlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ParallelCoordinates:\n        return (\n          <ParallelCoordinatesMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotMatrix:\n        return (\n          <ScatterPlotMatrixMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotGlyphs:\n        return (\n          <ScatterPlotGlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.DataTable:\n        return (\n          <DataTableMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      default:\n        return null\n    }\n  })\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} sx={dataDrawerStyle.drawer}>\n      <Box sx={dataDrawerStyle.header}>\n        <IconButton onClick={close}>\n          <ChevronRight sx={dataDrawerStyle.chevron} />\n        </IconButton>\n      </Box>\n      <Divider />\n      <Box sx={dataDrawerStyle.menu}>{menus.map((menu) => menu)}</Box>\n    </Drawer>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { HEADER_HEIGHT } from '../../../constants/views/common'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  text: {\n    padding: px(0, 8),\n  },\n  header: {\n    height: HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","import { ViewType } from '../views/ViewTypes'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n}\n\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, `http://www.w3.org/2000/svg`)\n  const svgData = svgEl.outerHTML\n  const preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\n  const svgBlob = new Blob([preface, svgData], { type: `image/svg+xml;charset=utf-8` })\n  const svgUrl = URL.createObjectURL(svgBlob)\n  const downloadLink = document.createElement(`a`)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\ntype StyleNode = { sheet: CSSStyleSheet }\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    // eslint-disable-next-line no-console\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n  const newStyleNodes = ([...document.querySelectorAll(`[data-emotion]`)] as unknown as Array<StyleNode>)\n    .flatMap(({ sheet }) => [...sheet.cssRules].map((rules) => rules.cssText))\n    .filter((sheet) => sheet.includes(`.${containerClass}`))\n    .map((sheet) => sheet.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n","import { SxProps } from '@mui/system'\nimport { BUTTON_COLORS } from '../../../styles/colors'\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    margin: 0,\n    padding: 0,\n    minWidth: 0,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant=\"contained\" autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant=\"outlined\">\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useState, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { saveSvg } from '../../../helpers/d3/saveSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { inlineButtonStyles } from '../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from './dialogs/ConfirmationDialog'\n\nexport interface DataSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const DataSaveButton: VoidFunctionComponent<DataSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const onConfirm = () => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={TOP_TOOLBAR_TEXT.saveText.header}\n        description={TOP_TOOLBAR_TEXT.saveText.description}\n        onConfirm={onConfirm}\n        onClose={() => setIsDialogOpen(false)}\n        confirmText={TOP_TOOLBAR_TEXT.saveText.confirm}\n        cancelText={TOP_TOOLBAR_TEXT.saveText.cancel}\n      />\n      <Button\n        variant=\"text\"\n        onClick={() => setIsDialogOpen(true)}\n        sx={inlineButtonStyles.button}\n        aria-label={TOP_TOOLBAR_TEXT.saveText.save}\n      >\n        <Tooltip title={TOP_TOOLBAR_TEXT.saveText.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { BrushExtent } from '../../types/d3-types'\n\nexport const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: BrushExtent, cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\nimport { DataEach } from '../../types/d3-types'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(`1`)\n\nconst TEXT_Y_SHIFTS = { odd: 9, even: 19 }\nexport const TOGGLE_TEXT_Y_SHIFT = Math.max(...Object.values(TEXT_Y_SHIFTS))\n\nexport const getTextTogglingYShift: DataEach<keyof SelectableDataType, SVGTextElement, number> = (_, idx) =>\n  idx % 2 === 0 ? -TEXT_Y_SHIFTS.odd : -TEXT_Y_SHIFTS.even // index 0 is first, so odd\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","/**\n * tooltip and it's actions\n */\nimport { select } from 'd3'\n\nimport { OnMouseEvent } from '../../types/d3-types'\nimport { SelectableDataType } from '../../types/data/data'\n\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../constants/views/tooltip'\nimport { SVG } from '../../constants/svg'\nimport { HTML } from '../../constants/html'\n\nimport { getAttributeValuesWithLabel, getClass, px } from './stringGetters'\n\nexport const onMouseOverTooltip: OnMouseEvent<SelectableDataType> = ({ clientX, clientY }, data) => {\n  const tooltip = select(getClass(TOOLTIP_CLASS))\n  tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n  tooltip\n    .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n    .style(SVG.style.left, px(clientX))\n    .style(SVG.style.top, px(clientY))\n}\n\nexport const onMouseOutTooltip: OnMouseEvent<SelectableDataType> = () => {\n  select(getClass(TOOLTIP_CLASS)).transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushExtent, DataEachG, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getCategoryColor, getTextTogglingYShift, TOGGLE_TEXT_Y_SHIFT } from '../../../../helpers/d3/attributeGetters'\nimport { getAttributeFormatted, getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  refreshViews,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TOGGLE_TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      dataset.forEach((data) => {\n        data.selected = displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        })\n      })\n      refreshViews()\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, keyof SelectableDataType>> = {\n      [BrushAction.start]: () => setComponentBrushing(ViewType.ParallelCoordinates),\n      [BrushAction.move]: (brushEvent, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      },\n      [BrushAction.end]: (brushEvent, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n      [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n    ]\n\n    const brush = brushY<keyof SelectableDataType>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath: DataEachP<SelectableDataType, string | null> = (data) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseAction.mouseOver, onMouseOverTooltip)\n      .on(MouseAction.mouseOut, onMouseOutTooltip)\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    const getAxisTransform: DataEachG<keyof SelectableDataType, string> = (attribute) =>\n      getTranslate([xScale(String(attribute))!, 0])\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, getTextTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      Object.keys(selections).forEach((selLKey) => (selections[selLKey] = null))\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{PARALLEL_COORDINATES_TEXT.unavailable}</Box>\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\nexport const getScatterPlotMatrixStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    fontSize: PLOT_FONT.fontSize,\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { BrushExtent, DataEachC, DataEachG, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\ntype CellBrushing = { cell: MatrixPosition | null }\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  // selected coloring\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, DUPLICATES_CLASS)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachC<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachC<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseAction.mouseOver, onMouseOverTooltip)\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: CellBrushing = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) => (data.selected = isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, MatrixItem>> = {\n      [BrushAction.start]: (_, { rowIdx, colIdx, rowKey, colKey }) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      },\n      [BrushAction.move]: ({ selection }, matrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }, matrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [0, 0],\n      [rect.width, rect.height],\n    ]\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    refreshViews,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.tooSmall}</Box> // rect not big enough\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotMatrixStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { DataEachP, OnMouseEvent } from '../../../../types/d3-types'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  refreshViews,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform: DataEachP<SelectableDataType, string> = (data) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const onMouseClick: OnMouseEvent<SelectableDataType> = (_, changedData) => {\n      const idx = dataset.indexOf(changedData)\n      dataset[idx].selected = !dataset[idx].selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.Glyphs)\n      refreshViews()\n    }\n\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseAction.mouseOver, onMouseOverTooltip)\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n          .on(MouseAction.click, onMouseClick)\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    // selected coloring, needed again\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive, brushColor)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{GLYPHS_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotAxis`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\nexport const getScatterPlotGlyphsStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisBottom, axisLeft, brush, lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\n\nimport { getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { BrushExtent, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\nimport { TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  // selected coloring\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, TOOLTIP_CLASS)\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains([...displayAttributes, xAttribute, yAttribute], dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(extentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(extentInDomains[attribute]),\n    )\n\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseAction.mouseOver, onMouseOverTooltip)\n            .on(MouseAction.mouseOut, onMouseOutTooltip)\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n    axisX.call(axisBottom(xScale))\n    svg\n      .selectAll(AXIS_Y)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .call(axisLeft(yScale))\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) =>\n            (data.selected = isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType>> = {\n      [BrushAction.start]: () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      },\n      [BrushAction.move]: ({ selection }) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [-glyphSize / 2, -glyphSize / 2],\n      [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n    ]\n\n    const makeBrush = brush()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_GLYPHS_TEXT.unavailable}</Box>\n}\n","interface FormType {\n  checkbox: `checkbox`\n}\n\nexport const FORM: FormType = {\n  checkbox: `checkbox`,\n}\n","import { SxProps } from '@mui/system'\nimport { TABLE_COLORS } from '../../../../styles/colors'\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nexport const getDataTableRowStyle = (\n  rowHeight: number,\n  selected: boolean,\n  selectedBackgroundColor: string,\n  selectedFontColor: string,\n): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? important(selectedBackgroundColor) : ``,\n  '& .MuiTableCell-root': {\n    color: selected ? important(selectedFontColor) : ``,\n  },\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    height: 30,\n    bgcolor: TABLE_COLORS.headerBackground,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n}\n","import { useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Tooltip,\n} from '@mui/material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable, otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator, SortType } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { FORM } from '../../../../constants/form'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-menus/dataTable'\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  refreshViews,\n  setComponentBrushing,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(order, orderBy)),\n    [sortableDataset, order, orderBy],\n  )\n\n  const handleSelectClick = (changedData: SelectableDataType) => {\n    const idx = dataset.indexOf(changedData)\n    dataset[idx].selected = !dataset[idx].selected\n    if (dataset.every((data) => !data.selected)) {\n      setComponentBrushing(null)\n      return\n    }\n    setComponentBrushing(ViewType.DataTable)\n    refreshViews()\n  }\n\n  const handleSelectAllClick = (checked: boolean) => {\n    if (!checked) {\n      setComponentBrushing(null)\n      return\n    }\n    setComponentBrushing(ViewType.DataTable)\n    dataset.forEach((data) => (data.selected = true))\n    refreshViews()\n  }\n\n  const handleRequestSort = (property: keyof SelectableDataType) => {\n    const isAsc = orderBy === property && order === SortType.asc\n    setOrder(isAsc ? SortType.desc : SortType.asc)\n    setOrderBy(property)\n  }\n\n  const createSortHandler = (property: keyof SelectableDataType) => () => {\n    handleRequestSort(property)\n  }\n  const sortTooltipTitle = (headCellId: keyof SelectableDataType) =>\n    orderBy === headCellId\n      ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n      : DATA_TABLE_TEXT[SortType.asc]\n\n  const numSelected = dataset.filter((data) => data.selected).length\n  const someSelected = numSelected > 0 && numSelected < dataset.length\n  const allSelected = numSelected === dataset.length\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHead sx={dataTableStyle.tableHead}>\n            <TableRow>\n              <TableCell padding={FORM.checkbox}>\n                <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                  <Checkbox\n                    sx={dataTableStyle.checkAll}\n                    indeterminate={someSelected}\n                    checked={allSelected}\n                    onChange={(event) => handleSelectAllClick(event.target.checked)}\n                  />\n                </Tooltip>\n              </TableCell>\n              {displayAttributes.map((attribute) => {\n                const orderedByActive = orderBy === attribute\n                return (\n                  <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                    <Tooltip title={sortTooltipTitle(attribute)}>\n                      <TableSortLabel\n                        active={orderedByActive}\n                        direction={orderedByActive ? order : SortType.asc}\n                        onClick={createSortHandler(attribute)}\n                      >\n                        {otherCasesToWhitespaces(attribute)}\n                      </TableSortLabel>\n                    </Tooltip>\n                  </TableCell>\n                )\n              })}\n            </TableRow>\n          </TableHead>\n          <TableBody sx={dataTableStyle.tableBody}>\n            {sortedDataset.map((data, idx) => {\n              const selected = data.selected\n              return (\n                <TableRow\n                  hover\n                  onClick={() => handleSelectClick(data)}\n                  key={idx}\n                  sx={getDataTableRowStyle(rowHeight, selected, selectedBackgroundColor, selectedFontColor)}\n                >\n                  <TableCell padding={FORM.checkbox}>\n                    <Checkbox checked={selected} />\n                  </TableCell>\n                  {displayAttributes.map((attribute) => (\n                    <TableCell key={`${idx}-${attribute}`}>{dataToReadable(data[attribute])}</TableCell>\n                  ))}\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { ParallelCoordinatesSettings } from '../../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../../types/views/settings/DataTableSettings'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { VIEW_BORDER_SIZE } from '../../../constants/views/common'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nimport { Settings, SettingsType } from '../../../types/views/settings/Settings'\nimport { ParallelCoordinates } from './parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from './scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from './glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from './scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from './data-table/DataTable'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  component: ViewType\n  settings: Settings\n  brushColor: string\n}\n\ntype ViewElementFunction = (props: Brushable & VisualizationView, settings: SettingsType) => JSX.Element\n\nconst options: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.DataTable]: (p, s) => <DataTable {...p} {...(s as DataTableSettings)} />,\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({ width, height, component, settings, ...dataProps }) => {\n  const graph = options[component]\n  const settingsCurr = settings[component]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","import React, { VoidFunctionComponent, ComponentProps } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, IconButton, Typography } from '@mui/material'\nimport { Close } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { DRAG_HANDLE, HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/views/common'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { DataSaveButton } from '../common/DataSaveButton'\nimport { View } from './View'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isResizeFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isResizeFinished, ...rest }) => {\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Typography sx={gridItemStyle.text}>{title}</Typography>\n          <Box>\n            {rest.component !== ViewType.DataTable && <DataSaveButton viewType={rest.component} />}\n            <IconButton onClick={onRemove}>\n              <Close />\n            </IconButton>\n          </Box>\n        </Box>\n        {isResizeFinished && <View width={width} height={height - HEADER_HEIGHT} {...rest} />}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../helpers/d3/displayDetails'\n\nimport { isViewType, ViewType } from '../../../constants/views/ViewTypes'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/views/common'\nimport { TOOLTIP_CLASS } from '../../../constants/views/tooltip'\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\nimport { VIEW_NAMES } from '../../../text/views-and-menus/common'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[]>>\n  brushColor: string\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nexport const ViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  layout,\n  setLayout,\n  ...viewProps\n}) => {\n  const [viewResizing, setViewResizing] = useState<ViewType | null>(null)\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => layout.filter((item) => item.i !== viewType))\n    },\n    [setLayout],\n  )\n\n  displayDetails(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={(_, view) => setViewResizing(view.i as ViewType)}\n        onResizeStop={() => setViewResizing(null)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isResizeFinished={view.i !== viewResizing}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              component={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => <Box sx={emptyDataStyle.site}>{EMPTY_DATA_TEXT.content}</Box>\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const loadingStyle: Record<string, SxProps> = {\n  load: {\n    paddingTop: px(40),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { loadingStyle } from '../../../components-style/content/no-data/loadingStyle'\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={loadingStyle.load}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid, ViewGridProps } from '../views/ViewGrid'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\nimport { GridLayoutItem } from '../../../types/views/Grid'\nimport { DEFAULT_BRUSH_COLOR, DEFAULT_GRID_LAYOUT } from '../../../constants/views/common'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [redrawTime, setRedrawTime] = useState(Date.now())\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[]>(DEFAULT_GRID_LAYOUT)\n  const [brushColor, setBrushColor] = useState<string>(DEFAULT_BRUSH_COLOR)\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = (data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }\n\n  const refreshViews = (): void => {\n    setRedrawTime(Date.now()) // redraw component\n  }\n\n  const cleanAllBrushes = (deletePrevSelection = true) => {\n    if (dataset && deletePrevSelection) {\n      dataset.forEach((data) => (data.selected = false))\n      refreshViews()\n    }\n    cleanBrushingRef.current.forEach((f) => f())\n  }\n\n  const clearBrushesOnButton = () => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }\n\n  const setComponentBrushing: SetComponentBrushing = (newComponent) => {\n    if (componentBrushingRef.current !== newComponent) {\n      cleanAllBrushes(newComponent !== ViewType.DataTable && newComponent !== ViewType.Glyphs)\n    }\n    setCurrentComponentBrushing(newComponent)\n  }\n\n  const registerCleanBrushing = (cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }\n\n  const cleanSelectedIfViewWasBrushing = (component: ViewType) => {\n    if (componentBrushingRef.current === component) {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n    }\n  }\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = (newIsBrushingOnEndOfMove: boolean) => {\n    cleanAllBrushes()\n    setCurrentComponentBrushing(null)\n    setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n  }\n\n  const isBrushingActive = componentBrushingRef.current !== null\n\n  const viewProps: Pick<\n    ViewGridProps,\n    | `registerCleanBrushing`\n    | `setComponentBrushing`\n    | `refreshViews`\n    | `redrawTime`\n    | `isBrushingActive`\n    | `isBrushingOnEndOfMove`\n  > = {\n    registerCleanBrushing,\n    setComponentBrushing,\n    refreshViews,\n    redrawTime,\n    isBrushingActive,\n    isBrushingOnEndOfMove,\n  }\n\n  const getViewGrid = () => {\n    if (dataLoadState === DataLoadState.NoData) {\n      return <EmptyData />\n    }\n    if (dataLoadState === DataLoadState.Loading || !dataset) {\n      return <Loading />\n    }\n    return (\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={() => setDrawerOpen(false)}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        brushColor={brushColor}\n        {...viewProps}\n      />\n    )\n  }\n\n  return (\n    <>\n      <TopToolbar\n        openDrawer={() => setDrawerOpen(true)}\n        isToolsDisabled={dataset === null}\n        isDetailsVisible={isDetailsVisible}\n        setIsDetailsVisible={setIsDetailsVisible}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n        setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n        isBrushingActive={isBrushingActive}\n        clearBrushes={clearBrushesOnButton}\n        setDataset={setDatasetAndRemoveBrushing}\n        setDataLoadState={setDataLoadState}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        brushColor={brushColor}\n        setBrushColor={setBrushColor}\n      />\n      {getViewGrid()}\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}