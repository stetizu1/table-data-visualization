{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/constants/views/ViewTypes.ts","app/text/HeaderText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/FooterText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/constants/data/sampleDataset.tsx","app/constants/data/data.ts","app/text/SiteText.ts","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/helpers/data/data.ts","app/components/content/top-toolbar/items/file-reader/NullDialog.tsx","app/helpers/data/comparator.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components-style/content/top-toolbar/items/buttons/colorButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ColorButton.tsx","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/constants/views/common.ts","app/constants/views/tooltip.ts","app/text/views-and-menus/common.ts","app/components-style/content/views/viewGridStyle.ts","app/components-style/content/data-drawer/dataDrawerStyle.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseAction.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/glyphs.ts","app/components-style/content/data-drawer/dataDrawerMenuStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components-style/content/data-drawer/items/menuTextStyle.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components/content/data-drawer/items/OpacityInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/settings/ParallelCoordinatesSettings.tsx","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixMenu.tsx","app/types/views/settings/ScatterPlotMatrixSettings.tsx","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-menus/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsMenu.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/text/views-and-menus/dataTable.ts","app/components-style/content/data-drawer/items/colorPickerStyle.ts","app/components/content/data-drawer/items/ColorPicker.tsx","app/components/content/views/data-table/DataTableMenu.tsx","app/types/views/settings/DataTableSettings.ts","app/components/content/data-drawer/DataDrawer.tsx","app/components-style/content/views/gridItemStyle.ts","app/constants/save/save.ts","app/helpers/d3/saveSvg.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/common/DataSaveButton.tsx","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/d3/attributeGetters.ts","app/constants/html.ts","app/helpers/d3/tooltip.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/constants/form.ts","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTable.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/components/content/views/GridItem.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/loadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","DataLoadError","ViewType","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","dataToReadable","data","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","VIEW_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","SampleDataset","flower","bird","car","OptionType","sampleDatasetIcons","LocalFlorist","Air","DirectionsCar","sampleDatasets","flowerJson","birdJson","carJson","AcceptableFileTypes","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","header","save","confirm","cancel","FILE_READER_TEXT","button","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFileFormat","nullDialog","optionsText","leave","filter","change","optionsDescription","changeTo","topToolbarStyle","toolbar","separator","height","margin","borderLeft","left","middle","right","topToolbarButtonStyle","minWidth","ClickableButton","icon","onClick","disabled","label","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","keys","Object","every","key","idx","CsvParse","textCsv","parse","output","fromEntries","toLowerCase","numValue","Number","isNaN","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","fileReaderStyle","dialogStyle","dialog","alert","innerContent","contentBox","toggleDialogGroup","marginBottom","toggleDialogButton","flexGrow","attHeader","fontWeight","paddingBottom","numInput","alignSelf","SelectionDialog","isOpen","onClose","options","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","getAttributeKeys","getDatasetSample","getQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","size","getDefaultAllAttributesChecked","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","getDefaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","NullDialog","nullContainingAttributes","setDataset","useState","optionsChosen","setOptionsChosen","replaceValue","setReplaceValue","useEffect","fill","ToggleButtonGroup","exclusive","onChange","e","prev","newOpts","handleToggleChange","opt","ToggleButton","TextField","type","defaultValue","newVals","handleNumberChange","target","forEach","att","addSelected","d","selected","SortType","FileReader","setDataLoadState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isNullDialogOpen","setIsNullDialogOpen","setNullContainingAttributes","rawDataset","setRawDataset","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionsKeys","optionKey","Loaded","NoData","AutoGraph","component","Add","hidden","a","files","Loading","selectedFile","fileType","json","csv","JSON","selectableDataset","ToggleButtonSingle","setValue","onValue","event","checked","openSettingsButtonStyle","settings","OpenSettingsButton","IconButton","Settings","getColorInputStyle","getColorInputBoxStyle","minHeight","ml","colorInputStyle","inputBox","position","opacity","ColorButton","handleSetColor","tooltip","disableHoverListener","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","brushColor","setBrushColor","Info","SkipNext","AutoFixOff","AddCircle","Brush","SVG","svg","g","circle","rect","path","div","class","transform","x","y","cx","cy","r","strokeWidth","stroke","top","none","block","displayDetails","tooltipClass","selectAll","style","DRAG_HANDLE","VIEW_DEFAULT_SIZE","VIEW_LIMITS","ParallelCoordinates","minW","minH","ScatterPlotMatrix","Glyphs","ScatterPlotGlyphs","DataTable","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT","i","TOOLTIP_CLASS","TOOLTIP","bottom","lr","MENU_BASE_TEXT","more","empty","MENU_TEXT","attributes","category","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","PALETTE_PICKER_TEXT","categoriesLabel","VIEW_NAMES","viewGridStyle","pointerEvents","zIndex","dataDrawerStyle","drawer","flexShrink","chevron","menu","descCompare","b","orderBy","BrushAction","MouseAction","getComparator","sort","desc","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","margins","colorCategory","schemeCategory10","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","dataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleMove","newAttributesKeys","prevSettings","displayAttributes","FormControlLabel","onUpButton","ArrowDropUp","onDownButton","ArrowDropDown","Checkbox","eventChecked","newChecked","newSettings","handleCheckboxChange","CategorySelector","categoryAttribute","undefined","select","MenuItem","Selector","settingsKey","newValue","numberInputStyles","vertical","horizontal","textField","menuTextStyle","MarginInput","handleMarginChange","newMargin","newMargins","inputProps","inputMode","min","NumberInput","valueKey","max","minVal","maxVal","OpacityInput","handleOpacityChange","newOpacity","newOpacities","getPalettePickerColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","getInput","newColor","newColors","toggleButtonsStyle","group","ToggleButtons","GlyphsMenu","glyphsSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","sortableAttributes","categoricalAttributes","createGlyphsMenu","useCallback","newQaKeys","defaultSortAttribute","defaultCategoryAttribute","newGlyphs","sortAttribute","currChecked","newSortableAttributes","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","PARALLEL_COORDINATES_DEFAULT","lineWidth","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","sizes","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","createScatterPlotMatrixMenu","newScatterPlotMatrix","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_MENU_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsMenu","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsMenu","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","selectedBackgroundColor","selectedFontColor","DATA_TABLE_MENU_TEXT","DATA_TABLE_TEXT","checkboxTooltip","getColorPickerInputStyle","colorPickerStyle","ColorPicker","DataTableMenu","dataTableSettings","createDataTableMenu","newKeys","newDataTableSettings","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","SAVE_ID","CONTAINER_SAVE_ID","saveSvg","svgContainer","document","querySelector","containerClass","from","classList","cls","includes","newStyleNodes","querySelectorAll","flatMap","sheet","cssRules","rules","cssText","node","createElement","innerHTML","insertBefore","firstChild","svgEl","fileName","setAttribute","svgData","outerHTML","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","removeChild","saveSvgToFile","remove","console","error","inlineButtonStyles","ConfirmationDialog","onConfirm","cancelText","DataSaveButton","isDialogOpen","setIsDialogOpen","Save","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getCategoryColor","TEXT_Y_SHIFTS","odd","even","TOGGLE_TEXT_Y_SHIFT","Math","getTextTogglingYShift","_","HTML","onMouseOverTooltip","clientX","clientY","duration","html","getAttributeValuesWithLabel","onMouseOutTooltip","PARALLEL_COORDINATES_CLASS","getParallelCoordinatesStyle","isBrushActive","font","textAnchor","getViewsNotDisplayStyle","refreshViews","registerCleanBrushing","setComponentBrushing","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","onBrush","start","move","brushEvent","axisName","selection","end","brushExtent","BRUSH_WIDTH","brush","brushY","on","enter","append","attr","line","mouseOver","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","selLKey","id","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","brushing","clearBrush","brushSelection","makeBrush","GLYPHS_CLASS","SELECTED_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","onMouseClick","changedData","SCATTER_PLOT_GLYPHS_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","makeGlyphs","FORM","getDataTableRowStyle","paddingTop","dataTableStyle","tableHead","tableBody","notDisplayed","order","setOrder","setOrderBy","createSortHandler","property","isAsc","handleRequestSort","numSelected","someSelected","allSelected","TableContainer","Table","TableHead","TableRow","TableCell","checkAll","indeterminate","headCellId","orderedByActive","sortDirection","TableSortLabel","active","direction","TableBody","hover","handleSelectClick","s","View","dataProps","graph","settingsCurr","overflowX","overflowY","GridItem","onRemove","isResizeFinished","rest","useSize","Close","ReactGridLayout","WidthProvider","GridLayout","ViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","layout","setLayout","viewProps","viewResizing","setViewResizing","updateLayout","newLayout","filteredLayout","addView","find","posY","reduce","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","emptyDataStyle","site","EmptyData","loadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","redrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","cleanAllBrushes","deletePrevSelection","f","newComponent","newIsBrushingOnEndOfMove","appStyle","app","content","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5a98ddfe.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFileFormat = `unsupportedFileFormat`,\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  DataTable = `DataTable`,\n}\n\nexport const isViewType = (viewType: string): viewType is ViewType =>\n  (Object.values(ViewType) as string[]).includes(viewType)\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim()\n\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface for Selectable data type with index (for sorting etc.)\n */\nexport interface IndexedSelectableDataType extends SelectableDataType {\n  index: number\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonHoverBackground: `#b3bede`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  border: `rgba(0, 0, 0, 0.12)`,\n  colorBorder: `#42495d`,\n  buttonDialogBackground: `#363a46`,\n  buttonDialogHoverBackground: `#1f2528`,\n  buttonDialogFont: `#d6e1ff`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { calc } from '../helpers/d3/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/HeaderText'\n\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { FOOTER_TEXT } from '../../text/FooterText'\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n    <Box sx={footerStyle.text}>\n      &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n    </Box>\n  </Box>\n)\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { Air, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flower = `flower`,\n  bird = `bird`,\n  car = `car`,\n}\n\nexport const sampleDatasetFiles: Record<SampleDataset, string> = {\n  [SampleDataset.flower]: `flowerData.json`,\n  [SampleDataset.bird]: `birdData.json`,\n  [SampleDataset.car]: `carData.json`,\n}\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flower]: <LocalFlorist />,\n  [SampleDataset.bird]: <Air />,\n  [SampleDataset.car]: <DirectionsCar />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flower]: flowerJson,\n  [SampleDataset.bird]: birdJson,\n  [SampleDataset.car]: carJson,\n}\n","export const CATEGORY_LIMIT = 10\n\nexport enum OptionType {\n  leave = `leave`,\n  change = `change`,\n  filter = `filter`,\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataLoadError } from '../constants/data/dataLoadState'\nimport { OptionType } from '../constants/data/data'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  labelBrushColor: `Brush color`,\n  addViewDialogTitle: `Add a view`,\n  noOption: `All view options are currently displayed.`,\n  saveText: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    save: `Save`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n}\n\nexport const FILE_READER_TEXT = {\n  button: `Select a file`,\n  sampleDataLabel: `Try it on the sample data`,\n  sampleDataDialogTitle: `Select sample dataset`,\n  sampleDataDialogText: {\n    [SampleDataset.flower]: `Flower dataset`,\n    [SampleDataset.bird]: `Bird dataset`,\n    [SampleDataset.car]: `Car dataset`,\n  },\n  alertDialog: {\n    [DataLoadError.unsupportedFile]: {\n      title: `File type not supported`,\n      description: `This file type is not supported. Use JSON or CSV file.`,\n    },\n    [DataLoadError.unsupportedFileFormat]: {\n      title: `File format not supported`,\n      description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n    },\n    confirm: `OK`,\n  },\n  nullDialog: {\n    title: `Data with null values occurred!`,\n    description: `This application provides only basic operations for modifying null data values. For better processing, use applications designed for this purpose.`,\n    confirm: `Confirm`,\n    optionsText: {\n      [OptionType.leave]: `Leave as is`,\n      [OptionType.filter]: `Filter`,\n      [OptionType.change]: `Change all`,\n    },\n    optionsDescription: {\n      [OptionType.leave]: `This option leaves the data as is. On numeric scales, null values will be cast to 0, in the table they will be displayed as null, for categorical data a separate category will be created.`,\n      [OptionType.filter]: `This option filters out all data with null values. These data will not be considered further in the application.`,\n      [OptionType.change]: `This option replaces all null values with the value entered below.`,\n    },\n    changeTo: `Change to`,\n    attribute: `Attribute:`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState } from 'react'\nimport { Add, AutoGraph } from '@mui/icons-material'\nimport { Box, Button } from '@mui/material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadError, DataLoadState } from '../../../../../constants/data/dataLoadState'\nimport { SampleDataset, sampleDatasetIcons, sampleDatasets } from '../../../../../constants/data/sampleDataset'\n\nimport { FILE_READER_TEXT } from '../../../../../text/SiteText'\n\nimport {\n  fileReaderStyle,\n  getFileReaderBoxStyle,\n} from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\nimport { ClickableButton } from '../buttons/ClickableButton'\nimport { getAttributeKeys } from '../../../../../helpers/data/data'\nimport { NullDialog } from './NullDialog'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: Array<DataType>): Array<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isNullDialogOpen, setIsNullDialogOpen] = useState(false)\n  const [nullContainingAttributes, setNullContainingAttributes] = useState<Array<keyof SelectableDataType>>([])\n  const [rawDataset, setRawDataset] = useState<Array<SelectableDataType>>([])\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const optionsKeys = Object.values(SampleDataset)\n  const handleListItemClick = (optionKey: SampleDataset) => {\n    setIsSampleDataDialogOpen(false)\n    const dataset = sampleDatasets[optionKey]\n    setDataset(addSelected(dataset))\n    setDataLoadState(DataLoadState.Loaded)\n  }\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={FILE_READER_TEXT.sampleDataDialogTitle}\n        options={optionsKeys.map((key) => ({\n          key,\n          label: FILE_READER_TEXT.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={FILE_READER_TEXT.alertDialog.confirm}\n        alert={true}\n      />\n      <NullDialog\n        isOpen={isNullDialogOpen}\n        onClose={() => {\n          setIsNullDialogOpen(false)\n          setDataLoadState(DataLoadState.NoData)\n        }}\n        nullContainingAttributes={nullContainingAttributes}\n        dataset={rawDataset}\n        setDataset={(dataset) => {\n          setIsNullDialogOpen(false)\n          setDataset(dataset)\n          setDataLoadState(DataLoadState.Loaded)\n        }}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={FILE_READER_TEXT.sampleDataLabel}\n        />\n        <Button sx={fileReaderStyle.button} variant=\"contained\" component=\"label\">\n          <Add />\n          {FILE_READER_TEXT.button}\n          <input\n            type=\"file\"\n            hidden\n            onChange={async (e) => {\n              if (e.target.files?.length) {\n                setDataLoadState(DataLoadState.Loading)\n                const selectedFile = e.target.files[0]\n                const fileType = selectedFile.type\n                let dataset: DataType[] = []\n\n                switch (fileType) {\n                  case AcceptableFileTypes.json: {\n                    const text = await selectedFile.text()\n                    dataset = JSON.parse(text)\n                    break\n                  }\n                  case AcceptableFileTypes.csv: {\n                    const textCsv = await selectedFile.text()\n                    dataset = CsvParse(textCsv)\n                    break\n                  }\n                  default: {\n                    setDataLoadState(DataLoadState.NoData)\n                    setAlertDialogText(FILE_READER_TEXT.alertDialog[DataLoadError.unsupportedFile])\n                    setDataset(null)\n                    setIsAlertDialogOpen(true)\n                    return\n                  }\n                }\n                if (!isArrayOfDataType(dataset)) {\n                  setDataLoadState(DataLoadState.NoData)\n                  setAlertDialogText(FILE_READER_TEXT.alertDialog[DataLoadError.unsupportedFileFormat])\n                  setDataset(null)\n                  setIsAlertDialogOpen(true)\n                  return\n                }\n                const selectableDataset = addSelected(dataset)\n                const nullContainingAttributes = getAttributeKeys(selectableDataset).filter((att) =>\n                  dataset.some((data) => data[att] === null),\n                )\n                if (nullContainingAttributes.length) {\n                  setNullContainingAttributes(nullContainingAttributes)\n                  setRawDataset(selectableDataset)\n                  setIsNullDialogOpen(true)\n                  return\n                }\n                setDataset(selectableDataset)\n                setDataLoadState(DataLoadState.Loaded)\n              }\n            }}\n          />\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  middle: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n  right: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonHoverBackground,\n      },\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant=\"contained\" onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS, HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n\n  padding: isHighlighted ? px(8, 2) : 0,\n  borderRadius: px(10),\n})\n\nexport const fileReaderStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 6, 0, 2),\n    bgcolor: BUTTON_COLORS.buttonOnBackground,\n    color: BUTTON_COLORS.fontOn,\n    '&:hover': {\n      bgcolor: BUTTON_COLORS.buttonHoverBackground,\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS, ERROR_COLORS, BUTTON_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  description: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n  innerContent: {\n    padding: px(0, 40, 10),\n  },\n  contentBox: {\n    height: px(120),\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  text: {\n    color: SITE_COLORS.font,\n  },\n  toggleDialogGroup: {\n    width: `100%`,\n    marginBottom: px(5),\n    display: `flex`,\n  },\n  toggleDialogButton: {\n    flexGrow: 1,\n    padding: px(6),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonDialogBackground,\n      color: BUTTON_COLORS.buttonDialogFont,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonDialogHoverBackground,\n      },\n    },\n  },\n  button: {\n    margin: px(0, 20, 20),\n  },\n  attHeader: {\n    fontSize: px(16),\n    fontWeight: `bold`,\n    paddingBottom: px(4),\n    color: SITE_COLORS.font,\n  },\n  numInput: {\n    minWidth: `95%`,\n    alignSelf: `center`,\n    '&.MuiFormControl-root': {\n      margin: px(20, 6, 6),\n    },\n    '& input': {\n      padding: px(8, 10, 6),\n    },\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.description}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n","import { useEffect, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  TextField,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material'\n\nimport { SelectableDataType } from '../../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../../helpers/data/formatText'\n\nimport { OptionType } from '../../../../../constants/data/data'\n\nimport { FILE_READER_TEXT } from '../../../../../text/SiteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface NullDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  nullContainingAttributes: Array<keyof SelectableDataType>\n  dataset: Array<SelectableDataType>\n  setDataset: (dataset: Array<SelectableDataType>) => void\n}\n\nexport const NullDialog: VoidFunctionComponent<NullDialogProps> = ({\n  isOpen,\n  onClose,\n  nullContainingAttributes,\n  dataset,\n  setDataset,\n}) => {\n  const [optionsChosen, setOptionsChosen] = useState<Array<OptionType>>([])\n  const [replaceValue, setReplaceValue] = useState<Array<number>>([])\n\n  useEffect(() => {\n    setOptionsChosen(Array(nullContainingAttributes.length).fill(OptionType.leave))\n    setReplaceValue(Array(nullContainingAttributes.length).fill(0))\n  }, [nullContainingAttributes])\n\n  const handleNullDialogConfirm = () => {\n    optionsChosen.forEach((option, idx) => {\n      switch (option) {\n        case OptionType.filter:\n          dataset = dataset.filter((data) => data[nullContainingAttributes[idx]] !== null)\n          break\n        case OptionType.change:\n          dataset = dataset.map((data) => {\n            const att = nullContainingAttributes[idx]\n            return {\n              ...data,\n              [att]: data[att] === null ? Number(replaceValue[idx]) : data[att],\n            }\n          })\n          break\n        case OptionType.leave:\n          break\n      }\n    })\n    setDataset(dataset)\n  }\n\n  const handleToggleChange = (val: OptionType, idx: number) => {\n    setOptionsChosen((prev) => {\n      const newOpts = [...prev]\n      newOpts[idx] = val\n      return newOpts\n    })\n  }\n  const handleNumberChange = (val: number, idx: number) => {\n    setReplaceValue((prev) => {\n      const newVals = [...prev]\n      newVals[idx] = val\n      return newVals\n    })\n  }\n  const options = Object.values(OptionType)\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{FILE_READER_TEXT.nullDialog.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        <DialogContentText sx={dialogStyle.description}>{FILE_READER_TEXT.nullDialog.description}</DialogContentText>\n        {nullContainingAttributes.map((attribute, idx) => {\n          const option = optionsChosen[idx]\n          return (\n            <Box key={attribute} sx={dialogStyle.innerContent}>\n              <Typography sx={dialogStyle.attHeader}>{`${\n                FILE_READER_TEXT.nullDialog.attribute\n              } ${otherCasesToWhitespaces(attribute)}`}</Typography>\n              <ToggleButtonGroup\n                sx={dialogStyle.toggleDialogGroup}\n                value={option}\n                exclusive\n                onChange={(e, value) => handleToggleChange(value, idx)}\n              >\n                {options.map((opt, idx) => (\n                  <ToggleButton sx={dialogStyle.toggleDialogButton} value={opt} key={idx}>\n                    {FILE_READER_TEXT.nullDialog.optionsText[opt]}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n              <Box sx={dialogStyle.contentBox}>\n                <Typography sx={dialogStyle.text}>{FILE_READER_TEXT.nullDialog.optionsDescription[option]}</Typography>\n                {option === OptionType.change && (\n                  <TextField\n                    label={FILE_READER_TEXT.nullDialog.changeTo}\n                    type=\"number\"\n                    sx={dialogStyle.numInput}\n                    defaultValue={replaceValue[idx]}\n                    onChange={(e) => handleNumberChange(Number(e.target.value), idx)}\n                  />\n                )}\n              </Box>\n            </Box>\n          )\n        })}\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"contained\" onClick={handleNullDialogConfirm} sx={dialogStyle.button} autoFocus>\n          {FILE_READER_TEXT.nullDialog.confirm}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T>(a: T, b: T, orderBy: keyof T) =>\n  b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n\nexport enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n\nexport const getComparator = (sort: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sort === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = (event: MouseEvent<HTMLElement>, checked: string[]) => {\n    if (checked.length && checked[0] === onValue) {\n      return setValue(true)\n    }\n    return setValue(false)\n  }\n  const onValue = `on`\n  return (\n    <ToggleButtonGroup value={value ? [onValue] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={onValue} aria-label={label} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    color: BUTTON_COLORS.buttonOnBackground,\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Settings } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\n\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <IconButton size=\"small\" disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Settings />\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const getColorInputStyle = (disabled?: boolean): SxProps => ({\n  display: `flex`,\n  '& .MuiSvgIcon-root': {\n    color: disabled ? BUTTON_COLORS.fontDisabled : BUTTON_COLORS.buttonOnBackground,\n  },\n})\n\nexport const getColorInputBoxStyle = (color: string, disabled?: boolean): SxProps => ({\n  bgcolor: disabled ? BUTTON_COLORS.fontDisabled : color,\n  minWidth: px(25),\n  minHeight: px(25),\n  borderRadius: px(5),\n  ml: px(2),\n  border: border(1, disabled ? BUTTON_COLORS.buttonDisableBackground : BUTTON_COLORS.colorBorder),\n})\n\nexport const colorInputStyle: Record<string, SxProps> = {\n  inputBox: {\n    position: `relative`,\n    '& input': {\n      width: `100%`,\n      opacity: 0,\n      position: `absolute`,\n      left: 0,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box, Tooltip } from '@mui/material'\n\nimport {\n  colorInputStyle,\n  getColorInputBoxStyle,\n  getColorInputStyle,\n} from '../../../../../components-style/content/top-toolbar/items/buttons/colorButtonStyle'\n\nexport interface ColorButtonProps {\n  color: string\n  handleSetColor: (color: string) => void\n  tooltip: string\n  disabled?: boolean\n  icon: JSX.Element\n}\n\nexport const ColorButton: VoidFunctionComponent<ColorButtonProps> = ({\n  color,\n  handleSetColor,\n  tooltip,\n  disabled,\n  icon,\n}) => (\n  <Tooltip title={tooltip} disableHoverListener={disabled}>\n    <Box sx={colorInputStyle.inputBox}>\n      <input disabled={disabled} type=\"color\" value={color} onChange={(e) => handleSetColor(e.target.value)} />\n      <Box sx={getColorInputStyle(disabled)}>\n        {icon}\n        <Box sx={getColorInputBoxStyle(color, disabled)} />\n      </Box>\n    </Box>\n  </Tooltip>\n)\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { AddCircle, AutoFixOff, Brush, SkipNext } from '@mui/icons-material'\nimport { Info } from '@mui/icons-material'\n\nimport { Box } from '@mui/material'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\nimport { ColorButton } from './items/buttons/ColorButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n\n  brushColor: string\n  setBrushColor: Dispatch<SetStateAction<string>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n  brushColor,\n  setBrushColor,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ToggleButtonSingle\n        icon={<Info />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<AutoFixOff />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n      />\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelAddView}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.middle}>\n      <ColorButton\n        color={brushColor}\n        handleSetColor={(color) => setBrushColor(color)}\n        icon={<Brush />}\n        disabled={isToolsDisabled}\n        tooltip={TOP_TOOLBAR_TEXT.labelBrushColor}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n    strokeWidth: `stroke-width`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    strokeWidth: `stroke-width`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","import { GridLayoutItem } from '../../types/views/Grid'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { ViewType } from './ViewTypes'\n\nexport const DEFAULT_BRUSH_COLOR = `#830606`\nexport const DEFAULT_BRUSH_BG_COLOR_TABLE = `#ffcfcf`\nexport const DEFAULT_BRUSH_FONT_COLOR_TABLE = `#111111`\n\nexport const VIEW_BORDER_SIZE = 5\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const HEADER_HEIGHT = 30\n\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 200,\n  height: 200,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n}\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n}\n\nexport const DEFAULT_GRID_LAYOUT: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\n\nexport const MENU_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER_TEXT = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.DataTable]: `Data Table`,\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { TOOLTIP } from '../../../constants/views/tooltip'\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const dataDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n}\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseAction {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { schemeCategory10 } from 'd3'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { SortType } from '../../helpers/data/comparator'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const dataDrawerMenuStyle: Record<string, SxProps> = {\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<Opt extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: Opt) => Partial<Opt>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <Opt extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<Opt>): JSX.Element => {\n  const handleCheckboxChange = (eventChecked: boolean, key: keyof SelectableDataType) => {\n    const newChecked = { ...checked, [key]: eventChecked }\n    setChecked(newChecked)\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as Opt\n      const newSettings = getNewSettings(newChecked, prevSettings)\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          ...newSettings,\n        },\n      }\n    })\n  }\n  const handleMove = (newAttributesKeys: Array<keyof SelectableDataType>) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setAttributesKeys(newAttributesKeys)\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as Opt\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n        },\n      }\n    })\n  }\n  const onUpButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  const onDownButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = (categoryAttribute: keyof SelectableDataType | -1) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n        },\n      }\n    })\n  }\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = (newValue: keyof SelectableDataType) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: newValue,\n        },\n      }\n    })\n  }\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const menuTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n    padding: px(6, 5, 3),\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({ margins, setSettings, viewType }) => {\n  const handleMarginChange = (newMargin: number, idx: number) => {\n    const newMargins = [...margins]\n    newMargins[idx] = newMargin\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: newMargins,\n        },\n      }\n    })\n  }\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type=\"number\"\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type=\"number\"\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type=\"number\"\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type=\"number\"\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface NumberInputProps<Opt> {\n  viewType: ViewType\n  label: string\n  valueKey: keyof Opt\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <Opt,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<Opt>): JSX.Element => {\n  const handleValueChange = (newValue: number) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: newValue,\n        },\n      }\n    })\n  }\n  const minVal = min ? { min } : { min: 0 }\n  const maxVal = max ? { max } : {}\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type=\"number\"\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={{ inputMode: `numeric`, ...minVal, ...maxVal }}\n        onChange={(e) => handleValueChange(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacity: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({ header, opacity, setSettings, viewType }) => {\n  const handleOpacityChange = (newOpacity: number, idx: number) => {\n    const newOpacities = [...opacity]\n    newOpacities[idx] = newOpacity\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: newOpacities,\n        },\n      }\n    })\n  }\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type=\"number\"\n        defaultValue={opacity[0]}\n        sx={numberInputStyles.textField}\n        inputProps={{ min: 0, max: 100 }}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type=\"number\"\n          defaultValue={opacity[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type=\"number\"\n          defaultValue={opacity[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const getPalettePickerColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PALETTE_PICKER_TEXT } from '../../../../text/views-and-menus/common'\n\nimport {\n  getPalettePickerColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({ colors, setSettings, viewType }) => {\n  const handleSetColor = (newColor: string, idx: number) => {\n    if (newColor) {\n      const newColors = [...colors]\n      newColors[idx] = newColor\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            colorCategory: newColors,\n          },\n        }\n      })\n    }\n  }\n  const getInput = (idx: number) => (\n    <Box sx={palettePickerStyle.col} key={idx}>\n      <label>{PALETTE_PICKER_TEXT.categoriesLabel[idx]}</label>\n      <Box sx={getPalettePickerColorInputStyle(colors, idx)}>\n        <input type=\"color\" value={colors[idx]} onChange={(e) => handleSetColor(e.target.value, idx)} />\n      </Box>\n    </Box>\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER_TEXT.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = (newValue: T) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: newValue,\n        },\n      }\n    })\n  }\n  return (\n    <Box>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { SortType } from '../../../../helpers/data/comparator'\n\nexport const GlyphsMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n    prevSettings: GlyphsSettings,\n  ): Partial<GlyphsSettings> => {\n    const displayAttributes = getCurrentDisplayAttributes(newChecked)\n    const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n    const sortAttribute = newChecked[prevSettings.sortAttribute]\n      ? prevSettings.sortAttribute\n      : newSortableAttributes?.[0]\n    return { displayAttributes, sortAttribute }\n  }\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacity={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SortType } from '../../../helpers/data/comparator'\n\nimport { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [10, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacity={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `Scatter plot cannot be displayed, window is too small. Change the size, number of attributes displayed or margin to display scatter plot matrix`,\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <Typography sx={menuTextStyle.text}>{SCATTER_PLOT_MATRIX_MENU_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacity={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 10, 20],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport { glyphSizeKey, xAttributeKey, yAttributeKey } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { SCATTER_PLOT_GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createScatterPlotGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n  ): Partial<ScatterPlotGlyphsSettings> => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n  const handleChangeSettings = () => cleanSelectedIfViewWasBrushing(viewType)\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_MENU_TEXT.opacity}\n                  opacity={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { DEFAULT_BRUSH_BG_COLOR_TABLE, DEFAULT_BRUSH_FONT_COLOR_TABLE } from './common'\n\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\nexport const DATA_TABLE_DEFAULT: Pick<\n  DataTableSettings,\n  `rowHeight` | `selectedBackgroundColor` | `selectedFontColor`\n> = {\n  rowHeight: 45,\n  selectedBackgroundColor: DEFAULT_BRUSH_BG_COLOR_TABLE,\n  selectedFontColor: DEFAULT_BRUSH_FONT_COLOR_TABLE,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { SortType } from '../../helpers/data/comparator'\nimport { MENU_BASE_TEXT, VIEW_NAMES } from './common'\n\nexport const DATA_TABLE_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes him not valid. Please choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  selectedBackgroundColor: `Selected background color`,\n  selectedFontColor: `Selected font color`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascendant`,\n  [SortType.desc]: `Sort descendant`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from the menu.`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const getColorPickerInputStyle = (color: string): SxProps => ({\n  bgcolor: color,\n  width: px(25),\n  borderRadius: px(5),\n  '& input': {\n    width: `100%`,\n    height: px(25),\n    opacity: 0,\n  },\n})\n\nexport const colorPickerStyle: Record<string, SxProps> = {\n  picker: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `center`,\n  },\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport {\n  colorPickerStyle,\n  getColorPickerInputStyle,\n} from '../../../../components-style/content/data-drawer/items/colorPickerStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface ColorPickerProps<Opt> {\n  viewType: ViewType\n  color: string\n  settingsKey: keyof Opt\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const ColorPicker = <Opt,>({\n  viewType,\n  color,\n  settingsKey,\n  setSettings,\n  label,\n}: ColorPickerProps<Opt>): JSX.Element => {\n  const handleSetColor = (newColor: string) => {\n    if (newColor) {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newColor,\n          },\n        }\n      })\n    }\n  }\n  return (\n    <Box sx={colorPickerStyle.picker}>\n      <Typography sx={menuTextStyle.text}>{label}</Typography>\n      <Box sx={getColorPickerInputStyle(color)}>\n        <input type=\"color\" value={color} onChange={(e) => handleSetColor(e.target.value)} />\n      </Box>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  DataTableSettings,\n  rowHeightKey,\n  selectedBackgroundColorKey,\n  selectedFontColorKey,\n} from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_MENU_TEXT } from '../../../../text/views-and-menus/dataTable'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const DataTableMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    attributesKeys.filter((key) => currChecked[key])\n\n  const createDataTableMenu = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{DATA_TABLE_MENU_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  viewType={viewType}\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.rowHeight}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedBackgroundColor}\n                  settingsKey={selectedBackgroundColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedBackgroundColor}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedFontColor}\n                  settingsKey={selectedFontColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedFontColor}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{DATA_TABLE_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { VisualizationSettings } from './VisualizationSettings'\n\nexport const rowHeightKey = `rowHeight`\nexport const selectedBackgroundColorKey = `selectedBackgroundColor`\nexport const selectedFontColorKey = `selectedFontColor`\n\n/**\n * Settings for Data Table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n\n  /**\n   * Selected background color\n   */\n  [selectedBackgroundColorKey]: string\n  /**\n   * Selected font color\n   */\n  [selectedFontColorKey]: string\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, Divider, Drawer, IconButton } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { dataDrawerStyle } from '../../../components-style/content/data-drawer/dataDrawerStyle'\n\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot-matrix/ScatterPlotMatrixMenu'\nimport { ScatterPlotGlyphsMenu } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsMenu'\nimport { DataTableMenu } from '../views/data-table/DataTableMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: VoidFunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const menus = views.map((view, idx) => {\n    switch (view) {\n      case ViewType.Glyphs:\n        return (\n          <GlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ParallelCoordinates:\n        return (\n          <ParallelCoordinatesMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotMatrix:\n        return (\n          <ScatterPlotMatrixMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotGlyphs:\n        return (\n          <ScatterPlotGlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.DataTable:\n        return (\n          <DataTableMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      default:\n        return null\n    }\n  })\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} sx={dataDrawerStyle.drawer}>\n      <Box sx={dataDrawerStyle.header}>\n        <IconButton onClick={close}>\n          <ChevronRight sx={dataDrawerStyle.chevron} />\n        </IconButton>\n      </Box>\n      <Divider />\n      <Box sx={dataDrawerStyle.menu}>{menus.map((menu) => menu)}</Box>\n    </Drawer>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { HEADER_HEIGHT } from '../../../constants/views/common'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  text: {\n    padding: px(0, 8),\n  },\n  header: {\n    height: HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","import { ViewType } from '../views/ViewTypes'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n}\n\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, `http://www.w3.org/2000/svg`)\n  const svgData = svgEl.outerHTML\n  const preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\n  const svgBlob = new Blob([preface, svgData], { type: `image/svg+xml;charset=utf-8` })\n  const svgUrl = URL.createObjectURL(svgBlob)\n  const downloadLink = document.createElement(`a`)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\ntype StyleNode = { sheet: CSSStyleSheet }\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    // eslint-disable-next-line no-console\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n  const newStyleNodes = ([...document.querySelectorAll(`[data-emotion]`)] as unknown as Array<StyleNode>)\n    .flatMap(({ sheet }) => [...sheet.cssRules].map((rules) => rules.cssText))\n    .filter((sheet) => sheet.includes(`.${containerClass}`))\n    .map((sheet) => sheet.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n","import { SxProps } from '@mui/system'\nimport { BUTTON_COLORS } from '../../../styles/colors'\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    margin: 0,\n    padding: 0,\n    minWidth: 0,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant=\"contained\" autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant=\"outlined\">\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useState, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { saveSvg } from '../../../helpers/d3/saveSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { inlineButtonStyles } from '../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from './dialogs/ConfirmationDialog'\n\nexport interface DataSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const DataSaveButton: VoidFunctionComponent<DataSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const onConfirm = () => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={TOP_TOOLBAR_TEXT.saveText.header}\n        description={TOP_TOOLBAR_TEXT.saveText.description}\n        onConfirm={onConfirm}\n        onClose={() => setIsDialogOpen(false)}\n        confirmText={TOP_TOOLBAR_TEXT.saveText.confirm}\n        cancelText={TOP_TOOLBAR_TEXT.saveText.cancel}\n      />\n      <Button\n        variant=\"text\"\n        onClick={() => setIsDialogOpen(true)}\n        sx={inlineButtonStyles.button}\n        aria-label={TOP_TOOLBAR_TEXT.saveText.save}\n      >\n        <Tooltip title={TOP_TOOLBAR_TEXT.saveText.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { BrushExtent } from '../../types/d3-types'\n\nexport const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: BrushExtent, cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\nimport { DataEach } from '../../types/d3-types'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(`1`)\n\nconst TEXT_Y_SHIFTS = { odd: 9, even: 19 }\nexport const TOGGLE_TEXT_Y_SHIFT = Math.max(...Object.values(TEXT_Y_SHIFTS))\n\nexport const getTextTogglingYShift: DataEach<keyof SelectableDataType, SVGTextElement, number> = (_, idx) =>\n  idx % 2 === 0 ? -TEXT_Y_SHIFTS.odd : -TEXT_Y_SHIFTS.even // index 0 is first, so odd\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","/**\n * tooltip and it's actions\n */\nimport { select } from 'd3'\n\nimport { OnMouseEvent } from '../../types/d3-types'\nimport { SelectableDataType } from '../../types/data/data'\n\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../constants/views/tooltip'\nimport { SVG } from '../../constants/svg'\nimport { HTML } from '../../constants/html'\n\nimport { getAttributeValuesWithLabel, getClass, px } from './stringGetters'\n\nexport const onMouseOverTooltip: OnMouseEvent<SelectableDataType> = ({ clientX, clientY }, data) => {\n  const tooltip = select(getClass(TOOLTIP_CLASS))\n  tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n  tooltip\n    .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n    .style(SVG.style.left, px(clientX))\n    .style(SVG.style.top, px(clientY))\n}\n\nexport const onMouseOutTooltip: OnMouseEvent<SelectableDataType> = () => {\n  select(getClass(TOOLTIP_CLASS)).transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushExtent, DataEachG, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getCategoryColor, getTextTogglingYShift, TOGGLE_TEXT_Y_SHIFT } from '../../../../helpers/d3/attributeGetters'\nimport { getAttributeFormatted, getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  refreshViews,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TOGGLE_TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      dataset.forEach((data) => {\n        data.selected = displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        })\n      })\n      refreshViews()\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, keyof SelectableDataType>> = {\n      [BrushAction.start]: () => setComponentBrushing(ViewType.ParallelCoordinates),\n      [BrushAction.move]: (brushEvent, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      },\n      [BrushAction.end]: (brushEvent, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n      [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n    ]\n\n    const brush = brushY<keyof SelectableDataType>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath: DataEachP<SelectableDataType, string | null> = (data) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseAction.mouseOver, onMouseOverTooltip)\n      .on(MouseAction.mouseOut, onMouseOutTooltip)\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    const getAxisTransform: DataEachG<keyof SelectableDataType, string> = (attribute) =>\n      getTranslate([xScale(String(attribute))!, 0])\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, getTextTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      Object.keys(selections).forEach((selLKey) => (selections[selLKey] = null))\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{PARALLEL_COORDINATES_TEXT.unavailable}</Box>\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\nexport const getScatterPlotMatrixStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    fontSize: PLOT_FONT.fontSize,\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { BrushExtent, DataEachC, DataEachG, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\ntype CellBrushing = { cell: MatrixPosition | null }\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  // selected coloring\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, DUPLICATES_CLASS)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachC<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachC<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseAction.mouseOver, onMouseOverTooltip)\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: CellBrushing = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) => (data.selected = isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, MatrixItem>> = {\n      [BrushAction.start]: (_, { rowIdx, colIdx, rowKey, colKey }) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      },\n      [BrushAction.move]: ({ selection }, matrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }, matrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [0, 0],\n      [rect.width, rect.height],\n    ]\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    refreshViews,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.tooSmall}</Box> // rect not big enough\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotMatrixStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { DataEachP, OnMouseEvent } from '../../../../types/d3-types'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  refreshViews,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform: DataEachP<SelectableDataType, string> = (data) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const onMouseClick: OnMouseEvent<SelectableDataType> = (_, changedData) => {\n      const idx = dataset.indexOf(changedData)\n      dataset[idx].selected = !dataset[idx].selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.Glyphs)\n      refreshViews()\n    }\n\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseAction.mouseOver, onMouseOverTooltip)\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n          .on(MouseAction.click, onMouseClick)\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    // selected coloring, needed again\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive, brushColor)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{GLYPHS_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotAxis`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\nexport const getScatterPlotGlyphsStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisBottom, axisLeft, brush, lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\n\nimport { getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { BrushExtent, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\nimport { TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  // selected coloring\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, TOOLTIP_CLASS)\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains([...displayAttributes, xAttribute, yAttribute], dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(extentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(extentInDomains[attribute]),\n    )\n\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseAction.mouseOver, onMouseOverTooltip)\n            .on(MouseAction.mouseOut, onMouseOutTooltip)\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n    axisX.call(axisBottom(xScale))\n    svg\n      .selectAll(AXIS_Y)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .call(axisLeft(yScale))\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) =>\n            (data.selected = isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType>> = {\n      [BrushAction.start]: () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      },\n      [BrushAction.move]: ({ selection }) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [-glyphSize / 2, -glyphSize / 2],\n      [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n    ]\n\n    const makeBrush = brush()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_GLYPHS_TEXT.unavailable}</Box>\n}\n","interface FormType {\n  checkbox: `checkbox`\n}\n\nexport const FORM: FormType = {\n  checkbox: `checkbox`,\n}\n","import { SxProps } from '@mui/system'\nimport { TABLE_COLORS } from '../../../../styles/colors'\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nexport const getDataTableRowStyle = (\n  rowHeight: number,\n  selected: boolean,\n  selectedBackgroundColor: string,\n  selectedFontColor: string,\n): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? important(selectedBackgroundColor) : ``,\n  '& .MuiTableCell-root': {\n    color: selected ? important(selectedFontColor) : ``,\n  },\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    height: 30,\n    bgcolor: TABLE_COLORS.headerBackground,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n}\n","import { useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Tooltip,\n} from '@mui/material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable, otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator, SortType } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { FORM } from '../../../../constants/form'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-menus/dataTable'\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  refreshViews,\n  setComponentBrushing,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(order, orderBy)),\n    [sortableDataset, order, orderBy],\n  )\n\n  const handleSelectClick = (changedData: SelectableDataType) => {\n    const idx = dataset.indexOf(changedData)\n    dataset[idx].selected = !dataset[idx].selected\n    if (dataset.every((data) => !data.selected)) {\n      setComponentBrushing(null)\n      return\n    }\n    setComponentBrushing(ViewType.DataTable)\n    refreshViews()\n  }\n\n  const handleSelectAllClick = (checked: boolean) => {\n    if (!checked) {\n      setComponentBrushing(null)\n      return\n    }\n    setComponentBrushing(ViewType.DataTable)\n    dataset.forEach((data) => (data.selected = true))\n    refreshViews()\n  }\n\n  const handleRequestSort = (property: keyof SelectableDataType) => {\n    const isAsc = orderBy === property && order === SortType.asc\n    setOrder(isAsc ? SortType.desc : SortType.asc)\n    setOrderBy(property)\n  }\n\n  const createSortHandler = (property: keyof SelectableDataType) => () => {\n    handleRequestSort(property)\n  }\n  const sortTooltipTitle = (headCellId: keyof SelectableDataType) =>\n    orderBy === headCellId\n      ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n      : DATA_TABLE_TEXT[SortType.asc]\n\n  const numSelected = dataset.filter((data) => data.selected).length\n  const someSelected = numSelected > 0 && numSelected < dataset.length\n  const allSelected = numSelected === dataset.length\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHead sx={dataTableStyle.tableHead}>\n            <TableRow>\n              <TableCell padding={FORM.checkbox}>\n                <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                  <Checkbox\n                    sx={dataTableStyle.checkAll}\n                    indeterminate={someSelected}\n                    checked={allSelected}\n                    onChange={(event) => handleSelectAllClick(event.target.checked)}\n                  />\n                </Tooltip>\n              </TableCell>\n              {displayAttributes.map((attribute) => {\n                const orderedByActive = orderBy === attribute\n                return (\n                  <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                    <Tooltip title={sortTooltipTitle(attribute)}>\n                      <TableSortLabel\n                        active={orderedByActive}\n                        direction={orderedByActive ? order : SortType.asc}\n                        onClick={createSortHandler(attribute)}\n                      >\n                        {otherCasesToWhitespaces(attribute)}\n                      </TableSortLabel>\n                    </Tooltip>\n                  </TableCell>\n                )\n              })}\n            </TableRow>\n          </TableHead>\n          <TableBody sx={dataTableStyle.tableBody}>\n            {sortedDataset.map((data, idx) => {\n              const selected = data.selected\n              return (\n                <TableRow\n                  hover\n                  onClick={() => handleSelectClick(data)}\n                  key={idx}\n                  sx={getDataTableRowStyle(rowHeight, selected, selectedBackgroundColor, selectedFontColor)}\n                >\n                  <TableCell padding={FORM.checkbox}>\n                    <Checkbox checked={selected} />\n                  </TableCell>\n                  {displayAttributes.map((attribute) => (\n                    <TableCell key={`${idx}-${attribute}`}>{dataToReadable(data[attribute])}</TableCell>\n                  ))}\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { ParallelCoordinatesSettings } from '../../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../../types/views/settings/DataTableSettings'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { VIEW_BORDER_SIZE } from '../../../constants/views/common'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nimport { Settings, SettingsType } from '../../../types/views/settings/Settings'\nimport { ParallelCoordinates } from './parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from './scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from './glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from './scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from './data-table/DataTable'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  component: ViewType\n  settings: Settings\n  brushColor: string\n}\n\ntype ViewElementFunction = (props: Brushable & VisualizationView, settings: SettingsType) => JSX.Element\n\nconst options: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.DataTable]: (p, s) => <DataTable {...p} {...(s as DataTableSettings)} />,\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({ width, height, component, settings, ...dataProps }) => {\n  const graph = options[component]\n  const settingsCurr = settings[component]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","import React, { VoidFunctionComponent, ComponentProps } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, IconButton, Typography } from '@mui/material'\nimport { Close } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { DRAG_HANDLE, HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/views/common'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { DataSaveButton } from '../common/DataSaveButton'\nimport { View } from './View'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isResizeFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isResizeFinished, ...rest }) => {\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Typography sx={gridItemStyle.text}>{title}</Typography>\n          <Box>\n            {rest.component !== ViewType.DataTable && <DataSaveButton viewType={rest.component} />}\n            <IconButton onClick={onRemove}>\n              <Close />\n            </IconButton>\n          </Box>\n        </Box>\n        {isResizeFinished && <View width={width} height={height - HEADER_HEIGHT} {...rest} />}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../helpers/d3/displayDetails'\n\nimport { isViewType, ViewType } from '../../../constants/views/ViewTypes'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/views/common'\nimport { TOOLTIP_CLASS } from '../../../constants/views/tooltip'\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\nimport { VIEW_NAMES } from '../../../text/views-and-menus/common'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[]>>\n  brushColor: string\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nexport const ViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  layout,\n  setLayout,\n  ...viewProps\n}) => {\n  const [viewResizing, setViewResizing] = useState<ViewType | null>(null)\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => layout.filter((item) => item.i !== viewType))\n    },\n    [setLayout],\n  )\n\n  displayDetails(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={(_, view) => setViewResizing(view.i as ViewType)}\n        onResizeStop={() => setViewResizing(null)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isResizeFinished={view.i !== viewResizing}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              component={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => <Box sx={emptyDataStyle.site}>{EMPTY_DATA_TEXT.content}</Box>\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const loadingStyle: Record<string, SxProps> = {\n  load: {\n    paddingTop: px(40),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { loadingStyle } from '../../../components-style/content/no-data/loadingStyle'\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={loadingStyle.load}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid, ViewGridProps } from '../views/ViewGrid'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\nimport { GridLayoutItem } from '../../../types/views/Grid'\nimport { DEFAULT_BRUSH_COLOR, DEFAULT_GRID_LAYOUT } from '../../../constants/views/common'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [redrawTime, setRedrawTime] = useState(Date.now())\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[]>(DEFAULT_GRID_LAYOUT)\n  const [brushColor, setBrushColor] = useState<string>(DEFAULT_BRUSH_COLOR)\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = (data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }\n\n  const refreshViews = (): void => {\n    setRedrawTime(Date.now()) // redraw component\n  }\n\n  const cleanAllBrushes = (deletePrevSelection = true) => {\n    if (dataset && deletePrevSelection) {\n      dataset.forEach((data) => (data.selected = false))\n      refreshViews()\n    }\n    cleanBrushingRef.current.forEach((f) => f())\n  }\n\n  const clearBrushesOnButton = () => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }\n\n  const setComponentBrushing: SetComponentBrushing = (newComponent) => {\n    if (componentBrushingRef.current !== newComponent) {\n      cleanAllBrushes(newComponent !== ViewType.DataTable && newComponent !== ViewType.Glyphs)\n    }\n    setCurrentComponentBrushing(newComponent)\n  }\n\n  const registerCleanBrushing = (cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }\n\n  const cleanSelectedIfViewWasBrushing = (component: ViewType) => {\n    if (componentBrushingRef.current === component) {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n    }\n  }\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = (newIsBrushingOnEndOfMove: boolean) => {\n    cleanAllBrushes()\n    setCurrentComponentBrushing(null)\n    setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n  }\n\n  const isBrushingActive = componentBrushingRef.current !== null\n\n  const viewProps: Pick<\n    ViewGridProps,\n    | `registerCleanBrushing`\n    | `setComponentBrushing`\n    | `refreshViews`\n    | `redrawTime`\n    | `isBrushingActive`\n    | `isBrushingOnEndOfMove`\n  > = {\n    registerCleanBrushing,\n    setComponentBrushing,\n    refreshViews,\n    redrawTime,\n    isBrushingActive,\n    isBrushingOnEndOfMove,\n  }\n\n  const getViewGrid = () => {\n    if (dataLoadState === DataLoadState.NoData) {\n      return <EmptyData />\n    }\n    if (dataLoadState === DataLoadState.Loading || !dataset) {\n      return <Loading />\n    }\n    return (\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={() => setDrawerOpen(false)}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        brushColor={brushColor}\n        {...viewProps}\n      />\n    )\n  }\n\n  return (\n    <>\n      <TopToolbar\n        openDrawer={() => setDrawerOpen(true)}\n        isToolsDisabled={dataset === null}\n        isDetailsVisible={isDetailsVisible}\n        setIsDetailsVisible={setIsDetailsVisible}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n        setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n        isBrushingActive={isBrushingActive}\n        clearBrushes={clearBrushesOnButton}\n        setDataset={setDatasetAndRemoveBrushing}\n        setDataLoadState={setDataLoadState}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        brushColor={brushColor}\n        setBrushColor={setBrushColor}\n      />\n      {getViewGrid()}\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}