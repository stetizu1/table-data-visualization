{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/constants/views/ViewTypes.ts","app/text/HeaderText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/FooterText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/constants/data/sampleDataset.tsx","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/text/SiteText.ts","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/helpers/data/comparator.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/constants/views/common.ts","app/constants/views/tooltip.ts","app/text/views-and-menus/common.ts","app/components-style/content/views/viewGridStyle.ts","app/components-style/content/data-drawer/dataDrawerStyle.ts","app/helpers/data/data.ts","app/constants/data/data.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseActions.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/glyphs.ts","app/components-style/content/data-drawer/dataDrawerMenuStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components-style/content/data-drawer/items/menuTextStyle.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components/content/data-drawer/items/OpacityInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/settings/ParallelCoordinatesSettings.tsx","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixMenu.tsx","app/types/views/settings/ScatterPlotMatrixSettings.tsx","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-menus/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsMenu.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/text/views-and-menus/dataTable.ts","app/components/content/views/data-table/DataTableMenu.tsx","app/types/views/settings/DataTableSettings.ts","app/components/content/data-drawer/DataDrawer.tsx","app/components-style/content/views/gridItemStyle.ts","app/constants/save/save.ts","app/helpers/d3/saveSvg.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/common/DataSaveButton.tsx","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/d3/attributeGetters.ts","app/constants/html.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/constants/form.ts","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTable.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/components/content/views/GridItem.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/loadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","DataLoadError","ViewType","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","data","Object","keys","filter","key","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","VIEW_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","SampleDataset","flower","bird","car","AcceptableFileTypes","sampleDatasetIcons","LocalFlorist","Air","DirectionsCar","sampleDatasets","flowerJson","birdJson","carJson","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","labelDetailsVisible","labelClearBrushes","labelAddView","labelBrushingOnEOM","addViewDialogTitle","noOption","fileReader","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFileFormat","saveText","header","save","confirm","cancel","topToolbarStyle","toolbar","left","margin","separator","height","borderLeft","right","topToolbarButtonStyle","button","minWidth","ClickableButton","icon","onClick","disabled","label","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","every","idx","CsvParse","textCsv","parse","output","fromEntries","toLowerCase","numValue","Number","isNaN","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","dialogStyle","dialog","alert","SelectionDialog","isOpen","onClose","options","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","addSelected","d","selected","SortType","FileReader","setDataset","setDataLoadState","useState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionsKeys","optionKey","Loaded","AutoGraph","type","onChange","e","a","target","files","Loading","selectedFile","fileType","json","csv","JSON","NoData","ToggleButtonSingle","setValue","onValue","ToggleButtonGroup","event","checked","ToggleButton","openSettingsButtonStyle","settings","OpenSettingsButton","IconButton","size","Settings","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","Info","SkipNext","AutoFixOff","AddCircle","SVG","svg","g","circle","rect","path","div","class","transform","x","y","cx","cy","r","strokeWidth","fill","stroke","opacity","top","none","block","displayDetails","tooltipClass","selectAll","style","DRAG_HANDLE","VIEW_DEFAULT_SIZE","VIEW_LIMITS","ParallelCoordinates","minW","minH","ScatterPlotMatrix","Glyphs","ScatterPlotGlyphs","DataTable","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT","i","TOOLTIP_CLASS","TOOLTIP","bottom","lr","MENU_BASE_TEXT","more","empty","MENU_TEXT","attributes","category","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","PALETTE_PICKER","categoriesLabel","VIEW_NAMES","viewGridStyle","tooltip","position","pointerEvents","zIndex","dataDrawerStyle","drawer","flexShrink","chevron","menu","flexGrow","getAttributeKeys","getDatasetSample","getQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","getDefaultAllAttributesChecked","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","getDefaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","descCompare","b","orderBy","BrushAction","MouseActions","getComparator","sort","desc","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","margins","colorCategory","schemeCategory10","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","dataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","minHeight","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleMove","newAttributesKeys","prev","prevSettings","displayAttributes","FormControlLabel","onUpButton","ArrowDropUp","onDownButton","ArrowDropDown","Checkbox","eventChecked","newChecked","newSettings","handleCheckboxChange","CategorySelector","TextField","categoryAttribute","undefined","select","MenuItem","Selector","settingsKey","newValue","numberInputStyles","vertical","horizontal","textField","menuTextStyle","MarginInput","handleMarginChange","newMargin","newMargins","defaultValue","inputProps","inputMode","min","NumberInput","valueKey","max","minVal","maxVal","OpacityInput","handleOpacityChange","newOpacity","newOpacities","getColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","getInput","newColor","newColors","handleSetColor","toggleButtonsStyle","group","ToggleButtons","exclusive","opt","GlyphsMenu","glyphsSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","sortableAttributes","categoricalAttributes","createGlyphsMenu","useCallback","newQaKeys","defaultSortAttribute","defaultCategoryAttribute","newGlyphs","sortAttribute","useEffect","currChecked","newSortableAttributes","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","PARALLEL_COORDINATES_DEFAULT","lineWidth","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","sizes","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","createScatterPlotMatrixMenu","newScatterPlotMatrix","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_MENU_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsMenu","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsMenu","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","DATA_TABLE_MENU_TEXT","DATA_TABLE_TEXT","checkboxTooltip","DataTableMenu","dataTableSettings","createDataTableMenu","newKeys","newDataTableSettings","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","SAVE_ID","CONTAINER_SAVE_ID","saveSvg","svgContainer","document","querySelector","containerClass","from","classList","cls","includes","newStyleNodes","querySelectorAll","innerHTML","node","createElement","insertBefore","firstChild","svgEl","fileName","setAttribute","svgData","outerHTML","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","removeChild","saveSvgToFile","forEach","remove","console","error","inlineButtonStyles","ConfirmationDialog","onConfirm","cancelText","DataSaveButton","isDialogOpen","setIsDialogOpen","Save","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getCategoryColor","HTML","PARALLEL_COORDINATES_CLASS","getParallelCoordinatesStyle","isBrushActive","font","textAnchor","fontWeight","getViewsNotDisplayStyle","setDataSelected","registerCleanBrushing","setComponentBrushing","component","scaleOrdinal","upperPadding","innerWidth","innerHeight","createParallelCoordinates","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","brush","brushY","BRUSH_WIDTH","on","start","move","brushEvent","axisName","selection","end","enter","append","attr","line","mouseOver","clientX","clientY","duration","html","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","classed","id","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","brushing","clearBrush","makeBrush","_","brushSelection","GLYPHS_CLASS","SELECTED_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","Math","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","changedData","SCATTER_PLOT_GLYPHS_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","makeGlyphs","FORM","getDataTableRowStyle","paddingTop","paddingBottom","dataTableStyle","tableHead","tableBody","notDisplayed","order","setOrder","setOrderBy","createSortHandler","property","isAsc","handleRequestSort","numSelected","someSelected","allSelected","TableContainer","Table","TableHead","TableRow","TableCell","checkAll","indeterminate","headCellId","orderedByActive","sortDirection","TableSortLabel","active","direction","TableBody","dataCopy","hover","s","View","dataProps","graph","settingsCurr","overflowX","overflowY","GridItem","onRemove","isDragFinished","rest","useSize","Close","ReactGridLayout","WidthProvider","GridLayout","ViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","layout","setLayout","viewProps","isGridChanging","setIsGridResizing","updateLayout","newLayout","filteredLayout","addView","find","posY","reduce","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","emptyDataStyle","site","EmptyData","loadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","redrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setFunction","cleanAllBrushes","deletePrevSelection","f","newComponent","newIsBrushingOnEndOfMove","appStyle","app","content","App","ReactDOM","render","getElementById"],"mappings":"81vGAAYA,EAMAC,ECNAC,E,iDCACC,EACL,0BADKA,EAEC,iDCARC,EAAgB,wCAETC,EAA0B,SAACC,GAAD,OACrCC,OAAOD,GAAME,QAAQJ,EAArB,eAAmDK,WAAnD,SAAwEC,QCF7DC,EAAW,WCCXC,EAAK,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAiCA,EAAOC,KAAI,SAACC,GAAD,gBAAYA,EAAZ,SAAqBC,KAAhC,MAEtCC,EAAO,SAACL,EAAYM,GAAb,qBAA8CN,EAA9C,gBAAwDM,EAAxD,MAEPC,EAAY,SAACJ,GAAD,gBAAqCA,EAArC,gBAEZK,EAAS,SAACC,EAAeC,GAAhB,gBAA6CD,EAA7C,oBAA8DC,IAIvEC,EAAe,SAACC,GAAD,0BAAsDA,EAAU,GAAhE,aAAuEA,EAAU,GAAjF,MAEfC,EAAW,SAACC,GAAD,iBAAmCA,IAE9CC,EAAwB,SAACC,GAAD,OACnCvB,EAAwBE,OAAOqB,KAEpBC,EAAkC,SAACC,GAAD,OAA8BH,EAAsBG,EAAKC,SAE3FC,EAA8B,SAACC,GAAD,OACzCC,OAAOC,KAAKF,GACTG,QAAO,SAACC,GAAD,OAASA,IAAQ1B,KACxBG,KAAI,SAACc,GAAD,YAAe,CAACD,EAAsBC,GAAvB,UAAmCK,EAAKL,UAAxC,gBAA8DZ,KAA9D,UC1BXsB,EACA,UADAA,EAEN,UAGMC,EACA,UADAA,EAEN,UAGMC,EACA,UADAA,EAEN,UAFMA,EAGJ,yBAGIC,EACa,UADbA,EAES,UAFTA,EAGQ,UAHRA,EAIJ,sBAJIA,EAKH,2BALGA,EAME,sBANFA,EAOG,UAPHA,EAQJ,sBAGIC,EACI,UADJA,EAEJ,UAGIC,EACA,UADAA,EAEJ,UAFIA,EAGN,UAHMA,EAIU,UAJVA,EAKgB,UALhBA,EAMM,UANNA,EAOL,UAGKC,EACK,2BADLA,EAED,UAFCA,EAGO,iBAHPA,EAIC,UAJDA,EAKD,UALCA,EAMG,UANHA,GAOH,UAPGA,GAQA,UARAA,GASK,qBAGLC,GACN,UAGMC,GACN,UAGMC,GACJ,UADIA,GAEA,wBAFAA,GAGI,sBAGJC,GACA,UADAA,GAEM,UAFNA,GAGM,UAHNA,GAII,qBCtEJC,GAAc,CACzBC,cAAejC,EAAK,EAAD,SACnBkC,oBAAqBlC,EAAK,EAAD,UAGdmC,GAAc,CACzBC,SAAUpC,EAAK,EAAD,UAGHqC,GACK,GADLA,GAEG,QAFHA,GAGD,GAGCC,GACD,GAGCC,GAAqBD,GAAqB,ECf1CE,GAAuC,CAClDC,gBAAiB,CACfC,QAASrB,EACTsB,QAAShD,EAAG,GAAI,GAChBiD,MAAM,OACNC,QAAQ,OACRC,cAAc,MACdC,WAAW,WACXC,eAAe,gBACf3C,MAAOgB,GAET4B,MAAO,CACLb,SAAUJ,GAAYC,cACtBU,QAAShD,EAAG,EAAG,KAEjBuD,YAAa,CACXP,QAAShD,EAAG,EAAG,IACfyC,SAAUJ,GAAYE,sB,QChBbiB,GAAgC,kBAC3C,gBAACC,EAAA,EAAD,CAAKC,GAAIb,GAAYC,gBAArB,UACE,eAACW,EAAA,EAAD,CAAKC,GAAIb,GAAYS,MAArB,SAA6B/D,IAC7B,eAACkE,EAAA,EAAD,CAAKC,GAAIb,GAAYU,YAArB,SAAmChE,QCV1BoE,GACJ,gCADIA,GAEJ,UAFIA,GAGN,YCGMC,GAAuC,CAClDC,gBAAiB,CACfd,QAASpB,EACTjB,MAAOiB,EACPqB,QAAShD,EAAG,GAAI,GAChBiD,MAAM,OACNC,QAAQ,OACRC,cAAc,SACdC,WAAW,WACXC,eAAe,YAEjB3D,KAAM,CACJsD,QAAShD,EAAG,EAAG,IACfyC,SAAUD,GAAYC,WCbbqB,GAAgC,kBAC3C,gBAACL,EAAA,EAAD,CAAKC,GAAIE,GAAYC,gBAArB,UACE,gBAACJ,EAAA,EAAD,CAAKC,GAAIE,GAAYlE,KAArB,UAA4BiE,GAA5B,OACA,gBAACF,EAAA,EAAD,CAAKC,GAAIE,GAAYlE,KAArB,kBACUiE,GADV,KACgCA,U,0BCRvBI,GAAgB,SAAItD,GAC/B,IAAMuD,EAAWC,iBAAUxD,GAE3B,OADAuD,EAASE,QAAUzD,EACZuD,I,SbLG5E,K,iBAAAA,E,kBAAAA,E,iBAAAA,M,cAMAC,K,kCAAAA,E,+CAAAA,M,cCNAC,K,gBAAAA,E,0CAAAA,E,sCAAAA,E,sCAAAA,E,uBAAAA,M,KAQL,I,SaDK6E,G,sHAAAA,K,gBAAAA,E,YAAAA,E,WAAAA,Q,KAMkD,sBAC3DA,GAAcC,OAD6C,mCAE3DD,GAAcE,KAF6C,iCAG3DF,GAAcG,IAH6C,gBAAvD,I,MCkBFC,GDZQC,IAAsD,sBAChEL,GAAcC,OAAS,eAACK,GAAA,EAAD,KADyC,gBAEhEN,GAAcE,KAAO,eAACK,GAAA,EAAD,KAF2C,gBAGhEP,GAAcG,IAAM,eAACK,GAAA,EAAD,KAH4C,IAMtDC,IAAiD,sBAC3DT,GAAcC,OAASS,IADoC,gBAE3DV,GAAcE,KAAOS,IAFsC,gBAG3DX,GAAcG,IAAMS,IAHuC,IEtBjDC,GACH,8HADGA,GAEH,aAGGC,GAAmB,CAC9BC,oBAAoB,kBACpBC,kBAAkB,gBAClBC,aAAa,aACbC,mBAAmB,2CACnBC,mBAAmB,aACnBC,SAAS,4CACTC,WAAY,CACVC,gBAAgB,4BAChBC,sBAAsB,wBACtBC,sBAAoB,sBACjBxB,GAAcC,OADG,kCAEjBD,GAAcE,KAFG,gCAGjBF,GAAcG,IAHG,mBAKpBsB,aAAW,sBACRvG,EAAcwG,gBAAkB,CAC/BvC,MAAM,0BACNC,YAAY,2DAHL,gBAKRlE,EAAcyG,sBAAwB,CACrCxC,MAAM,4BACNC,YAAY,4JAPL,qCAYbwC,SAAU,CACRC,OAAO,eACPzC,YAAY,wDACZ0C,KAAK,OACLC,QAAQ,OACRC,OAAO,WCnCEC,GAA2C,CACtDC,QAAS,CACPpD,MAAM,OACND,QAAShD,EAAG,GAAI,GAChBkD,QAAQ,OACRG,eAAe,gBACfD,WAAW,UACXL,QAASnB,EACTlB,MAAOkB,GAET0E,KAAM,CACJpD,QAAQ,OACRqD,OAAQvG,EAAG,EAAG,IACdoD,WAAW,UAEboD,UAAW,CACTC,OAAO,OACPF,OAAQvG,EAAG,EAAG,GACd0G,WAAYlG,EAAO,EAAGoB,IAExB+E,MAAO,CACLzD,QAAQ,S,oBCrBC0D,GAAiD,CAC5DC,OAAQ,CACNN,OAAQvG,EAAG,EAAG,GACdgD,QAAShD,EAAG,GACZ8G,SAAU,EACV,uBAAwB,CACtB/D,QAASlB,EACTnB,MAAOmB,EACPrB,OAAQA,EAAO,EAAGqB,IAEpB,0CAA2C,CACzCkB,QAASlB,EACTnB,MAAOmB,EACP,4CAA6C,CAC3CkB,QAASlB,EACTnB,MAAOmB,MCNFkF,GAAsD,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,MAA5B,OACjE,eAACC,GAAA,EAAD,CAAQC,QAAQ,YAAYJ,QAASA,EAASvD,GAAIkD,GAAsBC,OAAQK,SAAUA,EAA1F,SACE,eAACI,GAAA,EAAD,CAAShE,MAAO6D,EAAhB,SAAwBH,O,kDCbfO,GAAc,SAAC9G,GAAD,MACzB,kBAAOA,GAAsB,kBAAOA,GAAsB,mBAAOA,GAAiC,OAAVA,GAE7E+G,GAAoB,SAACC,GAChC,GAAIC,MAAMC,QAAQF,IAAYA,EAAQG,OAAS,EAAG,CAChD,IAAMC,EAAUJ,EAAQ,GAClBlG,EAAOD,OAAOC,KAAKsG,GACzB,OAAOJ,EAAQK,OACb,SAACzG,GAAD,OAAUC,OAAOC,KAAKF,GAAMyG,OAAM,SAACrG,EAAKsG,GAAN,OAActG,IAAQF,EAAKwG,OAASzG,OAAOrB,OAAOoB,GAAMyG,MAAMP,OAGpG,OAAO,GAGIS,GAAW,SAACC,GAAD,OACtBC,iBAAMD,EAAS,CAAEE,OAAO,YAAcjI,KAAI,SAACmB,GAAD,OACxCC,OAAO8G,YACL9G,OAAOC,KAAKF,GAAMnB,KAAI,SAACuB,GACrB,IAAMhB,EAAQY,EAAKI,GACnB,GAAI,SAAAhB,EAAM4H,eAAiC,KAAL5H,EAAc,MAAO,CAACgB,EAAK,MACjE,GAAI,SAAAhB,EAAM4H,cAA0B,MAAO,CAAC5G,GAAK,GACjD,GAAI,UAAAhB,EAAM4H,cAA2B,MAAO,CAAC5G,GAAK,GAClD,IAAM6G,EAAWC,OAAO9H,EAAMb,QAAN,UACxB,OAAK4I,MAAMF,GACJ,CAAC7G,EAAKhB,GADgB,CAACgB,EAAK6G,WCrB9BG,GAAwB,SAACC,GAAD,MAAsC,CACzEC,WAAW,gBACXnI,OAAwBA,EAAhBkI,EAAuB,EAAoC,EAAjCvG,IAClCY,QAAS2F,EAAgBvG,GAA6BA,GAEtDa,QAAS0F,EAAgB1I,EAAG,GAAI,GAAK,EACrC4I,aAAc5I,EAAG,IACjB,UAAW,CACTiD,MAAOjD,EAAG,Q,yFCTD6I,GAAuC,CAClDC,OAAQ,CACN,mBAAoB,CAClBhC,SAAU9G,EAAG,OAGjB+I,MAAO,CACLrI,MAAOwB,IAETxC,KAAM,CACJsD,QAAShD,EAAG,GAAI,GAAI,IACpBU,MAAOuB,KCcE+G,GAAkB,gBAC7BC,EAD6B,EAC7BA,OACAC,EAF6B,EAE7BA,QACA5F,EAH6B,EAG7BA,MACA6F,EAJ6B,EAI7BA,QACAC,EAL6B,EAK7BA,oBACAC,EAN6B,EAM7BA,aAN6B,OAQ7B,gBAACC,GAAA,EAAD,CAAQJ,QAASA,EAASK,KAAMN,EAAQvF,GAAImF,GAAYC,OAAxD,UACE,eAACU,GAAA,EAAD,UAAclG,IACd,eAACmG,GAAA,EAAD,IACA,gBAACC,GAAA,EAAD,WACGP,EAAQjJ,KAAI,SAACyJ,GAAD,OACX,gBAACC,GAAA,EAAD,CAAU/C,QAAM,EAACI,QAAS,kBAAMmC,EAAoBO,EAAOlI,MAA3D,UACE,eAACoI,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,UAASH,EAAO3C,SAElB,eAAC+C,GAAA,EAAD,CAAcC,QAASL,EAAOxC,UAJsCxH,OAAOgK,EAAOlI,UAOpF0H,EAAQvB,QAAU,eAACqC,GAAA,EAAD,CAAYvG,GAAImF,GAAYnJ,KAA5B,SAAmC2J,W,8BCnChDa,GAAmE,SAAC,GAAD,IAC9EjB,EAD8E,EAC9EA,OACAC,EAF8E,EAE9EA,QACA5F,EAH8E,EAG9EA,MACAC,EAJ8E,EAI9EA,YACA4G,EAL8E,EAK9EA,YAL8E,IAM9EpB,aAN8E,gBAQ9E,gBAACO,GAAA,EAAD,CAAQJ,QAASA,EAASK,KAAMN,EAAhC,UACE,eAACO,GAAA,EAAD,UAAclG,IACd,eAACmG,GAAA,EAAD,IACA,eAACW,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,CAAmB3G,GAAIqF,EAAQF,GAAYE,MAAQ,GAAnD,SAAwDxF,MAE1D,eAAC+G,GAAA,EAAD,UACE,eAAClD,GAAA,EAAD,CAAQH,QAASiC,EAASqB,WAAS,EAAnC,SACGJ,UTFIK,GAAc,SAACnJ,GAAD,OACzBA,EAAKnB,KAAI,SAACuK,GAAD,oBAAC,gBAAYA,GAAb,IAAgBC,UAAU,S,SAEhCnG,K,wBAAAA,E,gBAAAA,Q,KAKE,I,SU7BKoG,GV6BCC,GAAqD,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,iBAAkBpC,EAAoB,EAApBA,cACjG,EAA4DqC,oBAAS,GAArE,oBAAOC,EAAP,KAA+BC,EAA/B,KAEA,EAAkDF,oBAAS,GAA3D,oBAAOG,EAAP,KAA0BC,EAA1B,KACA,EAA8CJ,mBAAwD,MAAtG,oBAAOK,EAAP,KAAwBC,EAAxB,KAEM3L,EAAOuF,GAAiBO,WACxB8F,EAAchK,OAAOrB,OAAOkE,IAQlC,OACE,uCACE,eAAC,GAAD,CACE8E,OAAQ+B,EACR9B,QAAS,kBAAM+B,GAA0B,IACzC3H,MAAO5D,EAAKgG,sBACZyD,QAASmC,EAAYpL,KAAI,SAACuB,GAAD,MAAU,CACjCA,MACA0F,MAAOzH,EAAKiG,qBAAqBlE,GACjCuF,KAAMxC,GAAmB/C,OAE3B2H,oBAlBsB,SAACmC,GAC3BN,GAA0B,GAE1BJ,EAAWL,GADK5F,GAAe2G,KAE/BT,EAAiB1L,EAAcoM,WAgB7B,eAAC,GAAD,CACEvC,OAAQiC,EACRhC,QAAS,kBAAMiC,GAAqB,IACpC7H,MAAK,OAAE8H,QAAF,IAAEA,OAAF,EAAEA,EAAiB9H,MACxBC,YAAW,OAAE6H,QAAF,IAAEA,OAAF,EAAEA,EAAiB7H,YAC9B4G,YAAazK,EAAKkG,YAAYM,QAC9B6C,OAAO,IAET,gBAACtF,EAAA,EAAD,CAAKC,GAAI+E,GAAsBC,GAA/B,UACE,eAAC,GAAD,CACEzB,QAAS,kBAAMgE,GAA0B,IACzCjE,KAAM,eAACyE,GAAA,EAAD,IACNtE,MAAOzH,EAAK+F,kBAEd,wBACEiG,KAAK,OACLC,SAAQ,yCAAE,WAAOC,GAAP,0BAAAC,EAAA,mEACJD,EAAEE,OAAOC,aADL,QACJ,EAAgBnE,OADZ,iBAENkD,EAAiB1L,EAAc4M,SACzBC,EAAeL,EAAEE,OAAOC,MAAM,GAC9BG,EAAWD,EAAaP,KAC1BjE,EAAsB,GALpB,KAOEyE,EAPF,cAQC3H,GAAoB4H,KARrB,SAaC5H,GAAoB6H,IAbrB,oCASiBH,EAAavM,OAT9B,eASIA,EATJ,OAUF+H,EAAU4E,KAAKnE,MAAMxI,GAVnB,8CAcoBuM,EAAavM,OAdjC,eAcIuI,EAdJ,OAeFR,EAAUO,GAASC,GAfjB,oCAmBF6C,EAAiB1L,EAAckN,QAC/BjB,EAAmB3L,EAAKkG,YAAYvG,EAAcwG,kBAClDgF,EAAW,MACXM,GAAqB,GAtBnB,8BA0BD3D,GAAkBC,GA1BjB,wBA2BJqD,EAAiB1L,EAAckN,QAC/BjB,EAAmB3L,EAAKkG,YAAYvG,EAAcyG,wBAClD+E,EAAW,MACXM,GAAqB,GA9BjB,2BAiCNN,EAAWL,GAAY/C,IACvBqD,EAAiB1L,EAAcoM,QAlCzB,4CAAF,+D,oBWjELe,GAA+D,SAAC,GAMtE,IALLvF,EAKI,EALJA,KACAvG,EAII,EAJJA,MACA+L,EAGI,EAHJA,SACArF,EAEI,EAFJA,MACAD,EACI,EADJA,SAQMuF,EAAO,KACb,OACE,eAACC,GAAA,EAAD,CAAmBjM,MAAOA,EAAQ,CAACgM,GAAW,GAAId,SAR/B,SAACgB,EAAgCC,GACpD,OAAIA,EAAQhF,QAAUgF,EAAQ,KAAOH,EAC5BD,GAAS,GAEXA,GAAS,IAIhB,SACE,eAACK,GAAA,EAAD,CAAcnJ,GAAIkD,GAAsBC,OAAQpG,MAAOgM,EAAS,aAAYtF,EAAOD,SAAUA,EAA7F,SACE,eAACI,GAAA,EAAD,CAAShE,MAAO6D,EAAhB,SAAwBH,S,oBC3BnB8F,GAAmD,CAC9DC,SAAU,CACRxG,OAAQvG,EAAG,EAAG,GAAI,EAAG,GACrBU,MAAOmB,EACP,kBAAmB,CACjBnB,MAAOmB,KCCAmL,GAAqE,SAAC,GAAD,IAAG9F,EAAH,EAAGA,SAAUqC,EAAb,EAAaA,KAAb,OAChF,eAAC0D,GAAA,EAAD,CAAYC,KAAK,QAAQhG,SAAUA,EAAUD,QAASsC,EAAM7F,GAAIoJ,GAAwBC,SAAxF,SACE,eAACI,GAAA,EAAD,OCkBSC,GAAqD,SAAC,GAAD,IAChEC,EADgE,EAChEA,WACAC,EAFgE,EAEhEA,gBACAC,EAHgE,EAGhEA,iBACAC,EAJgE,EAIhEA,oBACAC,EALgE,EAKhEA,sBACAC,EANgE,EAMhEA,yBACAC,EAPgE,EAOhEA,iBACAC,EARgE,EAQhEA,aACA/C,EATgE,EAShEA,WACAC,EAVgE,EAUhEA,iBACA+C,EAXgE,EAWhEA,uBAXgE,OAahE,gBAACpK,EAAA,EAAD,CAAKC,GAAI0C,GAAgBC,QAAzB,UACE,gBAAC5C,EAAA,EAAD,CAAKC,GAAI0C,GAAgBE,KAAzB,UACE,eAAC,GAAD,CACEU,KAAM,eAAC8G,GAAA,EAAD,IACNrN,MAAO8M,EACPf,SAAUgB,EACVtG,SAAUoG,EACVnG,MAAOlC,GAAiBC,sBAE1B,eAAC,GAAD,CACE8B,KAAM,eAAC+G,GAAA,EAAD,IACNtN,MAAOgN,EACPjB,SAAUkB,EACVxG,SAAUoG,EACVnG,MAAOlC,GAAiBI,qBAE1B,eAAC5B,EAAA,EAAD,CAAKC,GAAI0C,GAAgBI,YACzB,eAAC,GAAD,CACEQ,KAAM,eAACgH,GAAA,EAAD,IACN/G,QAAS2G,EACT1G,UAAWyG,EACXxG,MAAOlC,GAAiBE,oBAE1B,eAAC,GAAD,CACE6B,KAAM,eAACiH,GAAA,EAAD,IACNhH,QAAS,kBAAM4G,GAAuB,IACtC3G,SAAUoG,EACVnG,MAAOlC,GAAiBG,kBAG5B,gBAAC3B,EAAA,EAAD,CAAKC,GAAI0C,GAAgBO,MAAzB,UACE,eAAC,GAAD,CAAYkE,WAAYA,EAAYC,iBAAkBA,EAAkBpC,cAAe4E,IACvF,eAAC,GAAD,CAAoB/D,KAAM8D,EAAYnG,SAAUoG,W,uCC/BzCY,GACD,CACRC,IAAI,MACJC,EAAE,IACFC,OAAO,SACPC,KAAK,OACLC,KAAK,OACL7O,KAAK,OACL8O,IAAI,OARKN,GAUC,CACVO,MAAM,QACNhE,EAAE,IACFiE,UAAU,YACVC,EAAE,IACFC,EAAE,IACF3L,MAAM,QACNwD,OAAO,SACPoI,GAAG,KACHC,GAAG,KACHC,EAAE,IACFC,YAAY,gBArBHd,GAuBJ,CACLe,KAAK,OACLC,OAAO,SACPC,QAAQ,UACR7I,KAAK,OACL8I,IAAI,MACJlM,QAAQ,WA7BCgL,GA+BH,CACNmB,KAAK,OACLC,MAAM,SCxEGC,GAAiB,SAAChC,EAAuCiC,GAChEjC,EACFkC,aAAU5O,EAAS2O,IAAeE,MAAMxB,GAAUhL,QAASgL,GAAWoB,OAGxEG,aAAU5O,EAAS2O,IAAeE,MAAMxB,GAAUhL,QAASgL,GAAWmB,OCL3DM,GAAW,cAIXC,GAAgC,CAC3C3M,MAAO,IACPwD,OAAQ,KAMGoJ,IAA8E,sBACxFvQ,EAASwQ,oBAAsB,CAC9BC,KAAM,EACNC,KAAM,IAHiF,gBAKxF1Q,EAAS2Q,kBAAoB,CAC5BF,KAAM,EACNC,KAAM,IAPiF,gBASxF1Q,EAAS4Q,OAAS,CACjBH,KAAM,EACNC,KAAM,IAXiF,gBAaxF1Q,EAAS6Q,kBAAoB,CAC5BJ,KAAM,EACNC,KAAM,IAfiF,gBAiBxF1Q,EAAS8Q,UAAY,CACpBL,KAAM,EACNC,KAAM,KAnBiF,IAuB9EK,IAAsG,sBAChH/Q,EAASwQ,oBADuG,cAE/GQ,EAAG,GACHC,EAAG,IACAV,GAAYvQ,EAASwQ,uBAJuF,gBAMhHxQ,EAAS2Q,kBANuG,cAO/GK,EAAG,GACHC,EAAG,IACAV,GAAYvQ,EAAS2Q,qBATuF,gBAWhH3Q,EAAS4Q,OAXuG,cAY/GI,EAAG,GACHC,EAAG,IACAV,GAAYvQ,EAAS4Q,UAduF,gBAgBhH5Q,EAAS6Q,kBAhBuG,cAiB/GG,EAAG,GACHC,EAAG,IACAV,GAAYvQ,EAAS6Q,qBAnBuF,gBAqBhH7Q,EAAS8Q,UArBuG,cAsB/GE,EAAG,GACHC,EAAG,IACAV,GAAYvQ,EAAS8Q,aAxBuF,IA4BtGI,GAAwC,CAAC,cAElDC,EAAGnR,EAASwQ,oBACZQ,EAAG,GACHC,EAAG,GACH5B,EAAG,EACHC,EAAG,GACAiB,GAAYvQ,EAASwQ,sBAPyB,cAUjDW,EAAGnR,EAAS2Q,kBACZK,EAAG,GACHC,EAAG,GACH5B,EAAG,GACHC,EAAG,GACAiB,GAAYvQ,EAAS2Q,oBAfyB,cAkBjDQ,EAAGnR,EAAS4Q,OACZI,EAAG,GACHC,EAAG,GACH5B,EAAG,EACHC,EAAG,IACAiB,GAAYvQ,EAAS4Q,UC5FfQ,GAAa,gBAEbC,GACF,EADEA,GAEA,EAFAA,GAGH,IAHGA,GAIF,IAJEA,GAKF,CACPvB,IAAK,EACLwB,OAAQ,GACRC,GAAI,GCRKC,GAAiB,CAC5BC,KAAK,eACLC,MAAM,SAGKC,GAAS,cACpBC,WAAW,sBACXC,SAAS,cACNL,IAGQM,GACJ,SADIA,GAEP,MAFOA,GAGL,QAHKA,GAIJ,SAJIA,GAKN,OAGMC,GACP,sBADOA,GAEF,WAFEA,GAGC,eAGDC,GAAiB,CAC5BtL,OAAO,kBACPuL,gBAAiB,CAAC,KAAD,gDAGNC,IAAoC,sBAC9ClS,EAASwQ,oBADqC,wCAE9CxQ,EAAS2Q,kBAFqC,uCAG9C3Q,EAAS4Q,OAHqC,0BAI9C5Q,EAAS6Q,kBAJqC,uCAK9C7Q,EAAS8Q,UALqC,kBC3BpCqB,GAAyC,CACpDC,QAAS,CACPC,SAAS,QACT3O,QAAShD,EAAG2Q,GAAgBvB,IAAKuB,GAAgBE,GAAIF,GAAgBC,QACrE7N,QAASf,EACTtB,MAAOsB,EACP4G,aAAc5I,EAAG,GACjB4R,cAAc,OACdzC,QAAS,EACT0C,OAAQ,K,oBCTCC,GAA2C,CACtDC,OAAQ,CACN9O,MAAOjD,EAAG,KACVgS,WAAY,EACZ,qBAAsB,CACpBjP,QAAShB,EACTkB,MAAOjD,EAAG,KACVoD,WAAW,WACX5C,OAAQA,EAAO,EAAGuB,IAEpB,OAAQ,CACNkB,MAAM,QAER,sBAAuB,CACrBD,QAAShD,EAAG,GAAI,GAAI,KAGxBgG,OAAQ,GACRiM,QAAS,CACPvR,MAAOqB,GAETmQ,KAAM,CACJjP,MAAM,OACNC,QAAQ,OACRC,cAAc,SACdgP,SAAU,I,wCCnBDC,GAAmB,SAAC3K,GAAD,OAC9BnG,OAAOC,KAHgB,SAACkG,GAAD,OAAgDA,EAAQ,GAGnE4K,CAAiB5K,IAAUjG,QAAO,SAACC,GAAD,OAASA,IAAQ1B,MAMpDuS,GAAgC,SAC3C7K,GAD2C,OAG3C2K,GAAiB3K,GAASjG,QAAO,SAACC,GAAD,OAASgG,EAAQK,OAAM,SAACzG,GAAD,OAAWmH,MAAMD,OAAOlH,EAAKI,YAE1E8Q,GAA4B,SACvC9K,GAGA,OADa2K,GAAiB3K,GAClBjG,QAAO,SAACC,GAElB,OADqB,IAAI+Q,IAAI/K,EAAQvH,KAAI,SAACmB,GAAD,OAAUA,EAAKI,OACpCyL,KC7BM,ODiCjBuF,GAAiC,SAC5ChL,GAEA,IAAMlG,EAAO6Q,GAAiB3K,GAC9B,OAAOnG,OAAO8G,YAAY7G,EAAKrB,KAAI,SAACuB,GAAD,MAAS,CAACA,GAAK,QAGvCiR,GAA0C,SACrDjL,GAEA,IAAMkL,EA7B4C,SAClDlL,GADkD,OAEd2K,GAAiB3K,GAASjG,QAAO,SAACC,GAAD,MAAS,kBAAOgG,EAAQ,GAAGhG,MA2BtDmR,CAAqCnL,GACzEoL,EAAqCP,GAA8B7K,GAEzE,OAAOnG,OAAO8G,YACZyK,EAAmC3S,KAAI,SAACuB,GAAD,MAAS,CAACA,EAAKkR,EAAkCG,MAAK,SAACC,GAAD,OAAQA,IAAOtR,WZ3C1GuR,GAAc,SAAInH,EAAMoH,EAAMC,GAAhB,OAClBD,EAAEC,GAAWrH,EAAEqH,IAAY,EAAID,EAAEC,GAAWrH,EAAEqH,GAAW,EAAI,I,SAEnDvI,K,UAAAA,E,aAAAA,Q,KAKL,I,ScZKwI,GCAAC,GfYCC,GAAgB,SAACC,EAAgBJ,GAAjB,OAC3BI,IAAS3I,GAAS4I,KAAO,SAAC1H,EAAGoH,GAAJ,OAAUD,GAAYnH,EAAGoH,EAAGC,IAAW,SAACrH,EAAGoH,GAAJ,OAAWD,GAAYnH,EAAGoH,EAAGC,KgBNlFM,GAGT,CACFC,SAAU9I,GAAS+I,IACnBC,UAAW,GACXC,aAAc,EACdC,QAAS,CAAC,GAAI,GAAI,GAAI,IACtB1E,QAAS,CAAC,GAAI,GAAI,IAClB2E,cAAeC,MCbJC,GACC,kIAGDC,GAAgB,cAC3BjO,OAAQwL,GAAWlS,EAAS4Q,QAC5BgE,QAAQ,YACRC,YAAY,iJACZR,UAAU,aACVC,aAAa,gBACbzE,QAAQ,qBACL8B,ICRQmD,GAA+C,CAC1DC,WAAY,CACVpR,MAAO5C,GAAM,GAAF,QACX2C,QAAShD,EAAG,IACZkD,QAAQ,OACRC,cAAc,SACdmR,UAAU,OACVvR,QAAShB,EACTwS,aAAc/T,EAAO,EAAGuB,GACxB,OAAQ,CACNwS,aAAc/T,EAAO,EAAGuB,GACxBU,SAAUC,GACVO,MAAM,QAER,OAAQ,CACNsD,OAAQvG,EAAG,EAAG,EAAG,IAEnB,UAAW,CACTyC,SAAUC,GACVhC,MAAOqB,GAET,8BAA+B,CAC7BiB,QAAShD,EAAG,EAAG,KAEjB,uBAAwB,CACtBgD,QAAS,GAEX,UAAW,CACTwR,UAAWxU,EAAG,MAGlByU,yBAA0B,CACxBzR,QAAShD,EAAG,IACZyC,SAAUC,GACVhC,MAAOwB,IAETwS,UAAW,CACT,kBAAmB,CACjB9L,aAAc,GAEhB,wBAAyB,CACvB+L,UAAW,EACX5R,QAAShB,EACT,iBAAkB,CAChB4S,UAAW,IAGf,iCAAkC,CAChCpO,OAAQvG,EAAG,EAAG,EAAG,GACjB,iBAAkB,CAChBuG,OAAQvG,EAAG,EAAG,EAAG,KAGrB,8BAA+B,CAC7BgD,QAAS,EACT,gBAAiB,CACfA,QAAShD,EAAG,EAAG,O,wCC3DV4U,GAAiD,CAC5DC,QAAS,CACP3R,QAAQ,OACRC,cAAc,UAEhB2R,QAAS,CACPvO,OAAQvG,EAAG,EAAG,GACdgD,QAAS,EACT8D,SAAU,EACVL,OAAQ,KCcCsO,GAAmB,YAUc,IAT5CC,EAS2C,EAT3CA,SACAC,EAQ2C,EAR3CA,eACAC,EAO2C,EAP3CA,qBACAC,EAM2C,EAN3CA,eACAC,EAK2C,EAL3CA,YACAjO,EAI2C,EAJ3CA,MACAyF,EAG2C,EAH3CA,QACAyI,EAE2C,EAF3CA,WACAC,EAC2C,EAD3CA,kBAkBMC,EAAa,SAACC,GACdN,GAAsBA,IAC1BI,EAAkBE,GAClBJ,GAAY,SAACK,GACX,IAAMC,EAAeD,EAAKT,GAC1B,OAAO,6BACFS,GADL,mBAEGT,EAFH,6BAGOU,GAHP,IAIIC,kBAAmBH,EAAkBhU,QAAO,SAACC,GAAD,OAASmL,EAAQnL,cAiBrE,OACE,uCACE,iCAAQ0F,IACP8N,EAAe/U,KAAI,SAACuB,EAAKsG,GAAN,OAClB,eAAC6N,GAAA,EAAD,CACEd,QACE,uCACE,gBAACrR,EAAA,EAAD,CAAKC,GAAIkR,GAAsBC,QAA/B,UACE,eAACzN,GAAA,EAAD,CAAQH,QAAS,kBApBZ,SAACc,GAClB,IAAMyN,EAAiB,aAAOP,GADI,EAEsB,CAACO,EAAkBzN,GAAMyN,EAAkBzN,EAAM,IAAvGyN,EAAkBzN,EAAM,GAFQ,KAEJyN,EAAkBzN,GAFd,KAGlCwN,EAAWC,GAiBwBK,CAAW9N,IAAMb,SAAkB,IAARa,EAAWrE,GAAIkR,GAAsBE,QAAvF,SACE,eAACgB,GAAA,EAAD,MAEF,eAAC1O,GAAA,EAAD,CACEH,QAAS,kBAlBJ,SAACc,GACpB,IAAMyN,EAAiB,aAAOP,GADM,EAEoB,CAACO,EAAkBzN,GAAMyN,EAAkBzN,EAAM,IAAvGyN,EAAkBzN,EAAM,GAFU,KAENyN,EAAkBzN,GAFZ,KAGpCwN,EAAWC,GAekBO,CAAahO,IAC5Bb,SAAUa,IAAQkN,EAAerN,OAAS,EAC1ClE,GAAIkR,GAAsBE,QAH5B,SAKE,eAACkB,GAAA,EAAD,SAGJ,eAACC,GAAA,EAAD,CAAUrJ,QAASA,EAAQnL,GAAMkK,SAAU,SAACC,GAAD,OA7D1B,SAACsK,EAAuBzU,GACnD,IAAM0U,EAAU,6BAAQvJ,GAAR,mBAAkBnL,EAAMyU,IACxCb,EAAWc,GACPjB,GAAsBA,IAC1BE,GAAY,SAACK,GACX,IAAMC,EAAeD,EAAKT,GACpBoB,EAAcjB,EAAegB,EAAYT,GAC/C,OAAO,6BACFD,GADL,mBAEGT,EAFH,6BAGOU,GACAU,QAkDmDC,CAAqBzK,EAAEE,OAAOc,QAASnL,SAG7F0F,MAAO1H,EAAwBgC,IAlBjC,gBAmBgBuT,EAnBhB,YAmB4BjN,W,oBCjFvBuO,GAAiE,SAAC,GAMxE,IALLtB,EAKI,EALJA,SACAvU,EAII,EAJJA,MACAwU,EAGI,EAHJA,eACAG,EAEI,EAFJA,YACAjO,EACI,EADJA,MAcA,OACE,gBAACoP,GAAA,EAAD,CAAW9V,MAAK,OAAEA,QAAF,IAAEA,KAAU,EAAGkL,SAAU,SAACC,GAAD,OAbP4K,EAayC5K,EAAEE,OAAOrL,WAZpF2U,GAAY,SAACK,GACX,IAAMC,EAAeD,EAAKT,GAC1B,OAAO,6BACFS,GADL,mBAEGT,EAFH,6BAGOU,GAHP,IAIIc,mBAA0C,IAAvBA,OAA2BC,EAAYD,SAP/B,IAACA,GAa0DE,QAAM,EAACvP,MAAOA,EAA1G,UACG8N,EAAe/U,KAAI,SAACuB,EAAKsG,GAAN,OAClB,eAAC4O,GAAA,EAAD,CAAUlW,MAAOgB,EAAjB,SACGhC,EAAwBgC,IAD3B,mBAAuCuT,EAAvC,YAAmDjN,OAIrD,eAAC4O,GAAA,EAAD,CAAUlW,OAAQ,EAAlB,SAAsBwQ,GAAUD,YC1BzB4F,GAAW,YAQgB,IAPtC5B,EAOqC,EAPrCA,SACAvU,EAMqC,EANrCA,MACAwU,EAKqC,EALrCA,eACAG,EAIqC,EAJrCA,YACAjO,EAGqC,EAHrCA,MACA0P,EAEqC,EAFrCA,YACA3B,EACqC,EADrCA,qBAeA,OACE,eAACqB,GAAA,EAAD,CACE9V,MAAOA,EACPkL,SAAU,SAACC,GAAD,OAhBckL,EAgBYlL,EAAEE,OAAOrL,MAf3CyU,GAAsBA,SAC1BE,GAAY,SAACK,GACX,IAAMC,EAAeD,EAAKT,GAC1B,OAAO,6BACFS,GADL,mBAEGT,EAFH,6BAGOU,GAHP,mBAIKmB,EAAcC,SARI,IAACA,GAiBxBJ,QAAM,EACNvP,MAAOA,EAJT,SAMG8N,EAAe/U,KAAI,SAACuB,EAAKsG,GAAN,OAClB,eAAC4O,GAAA,EAAD,CAAUlW,MAAOgB,EAAjB,SACGhC,EAAwBgC,IAD3B,UAA8BoV,EAA9B,YAA6C7B,EAA7C,YAAyDjN,UC/CpDgP,GAA6C,CACxDC,SAAU,CACR9T,QAAQ,OACRC,cAAc,UAEhB8T,WAAY,CACV/T,QAAQ,OACRC,cAAc,OAEhB+T,UAAW,CACT,wBAAyB,CACvB3Q,OAAQvG,EAAG,EAAG,EAAG,IAEnB,UAAW,CACTgD,QAAShD,EAAG,EAAG,GAAI,MCdZmX,GAAyC,CACpDzX,KAAM,CACJ+C,SAAUzC,EAAG0C,IACbM,QAAShD,EAAG,EAAG,EAAG,KCaToX,GAAuD,SAAC,GAAwC,IAAtCvD,EAAqC,EAArCA,QAASuB,EAA4B,EAA5BA,YAAaJ,EAAe,EAAfA,SACrFqC,EAAqB,SAACC,EAAmBvP,GAC7C,IAAMwP,EAAU,aAAO1D,GACvB0D,EAAWxP,GAAOuP,EAElBlC,GAAY,SAACK,GACX,IAAMC,EAAeD,EAAKT,GAC1B,OAAO,6BACFS,GADL,mBAEGT,EAFH,6BAGOU,GAHP,IAII7B,QAAS0D,UAKjB,OACE,gBAAC9T,EAAA,EAAD,CAAKC,GAAIqT,GAAkBC,SAA3B,UACE,eAAC/M,GAAA,EAAD,CAAYvG,GAAIyT,GAAczX,KAA9B,SAAqC0R,KACrC,gBAAC3N,EAAA,EAAD,CAAKC,GAAIqT,GAAkBE,WAA3B,UACE,eAACV,GAAA,EAAD,CACEpP,MAAOiK,GACP1F,KAAK,SACL8L,aAAc3D,EAAQ,GACtBnQ,GAAIqT,GAAkBG,UACtBO,WAAY,CAAEC,UAAU,UAAYC,IAAK,GACzChM,SAAU,SAACC,GAAD,OAAOyL,EAAmB9O,OAAOqD,EAAEE,OAAOrL,OAAQ,MAE9D,eAAC8V,GAAA,EAAD,CACEpP,MAAOiK,GACP1F,KAAK,SACL8L,aAAc3D,EAAQ,GACtBnQ,GAAIqT,GAAkBG,UACtBO,WAAY,CAAEC,UAAU,UAAYC,IAAK,GACzChM,SAAU,SAACC,GAAD,OAAOyL,EAAmB9O,OAAOqD,EAAEE,OAAOrL,OAAQ,SAGhE,gBAACgD,EAAA,EAAD,CAAKC,GAAIqT,GAAkBE,WAA3B,UACE,eAACV,GAAA,EAAD,CACEpP,MAAOiK,GACP1F,KAAK,SACL8L,aAAc3D,EAAQ,GACtBnQ,GAAIqT,GAAkBG,UACtBO,WAAY,CAAEC,UAAU,UAAYC,IAAK,GACzChM,SAAU,SAACC,GAAD,OAAOyL,EAAmB9O,OAAOqD,EAAEE,OAAOrL,OAAQ,MAE9D,eAAC8V,GAAA,EAAD,CACEpP,MAAOiK,GACP1F,KAAK,SACL8L,aAAc3D,EAAQ,GACtBnQ,GAAIqT,GAAkBG,UACtBO,WAAY,CAAEC,UAAU,UAAYC,IAAK,GACzChM,SAAU,SAACC,GAAD,OAAOyL,EAAmB9O,OAAOqD,EAAEE,OAAOrL,OAAQ,aCpDzDmX,GAAc,YASc,IARvCzQ,EAQsC,EARtCA,MACA1G,EAOsC,EAPtCA,MACAoX,EAMsC,EANtCA,SACAzC,EAKsC,EALtCA,YACAJ,EAIsC,EAJtCA,SACA2C,EAGsC,EAHtCA,IACAG,EAEsC,EAFtCA,IACA5C,EACsC,EADtCA,qBAeM6C,EAASJ,EAAM,CAAEA,OAAQ,CAAEA,IAAK,GAChCK,EAASF,EAAM,CAAEA,OAAQ,GAC/B,OACE,eAACrU,EAAA,EAAD,UACE,eAAC8S,GAAA,EAAD,CACEpP,MAAOA,EACPuE,KAAK,SACL8L,aAAc/W,EACdiD,GAAIqT,GAAkBG,UACtBO,WAAU,2BAAIC,UAAU,WAAeK,GAAWC,GAClDrM,SAAU,SAACC,GAAD,OAvBWkL,EAuBcvO,OAAOqD,EAAEE,OAAOrL,OAtBnDyU,GAAsBA,SAC1BE,GAAY,SAACK,GACX,IAAMC,EAAeD,EAAKT,GAC1B,OAAO,6BACFS,GADL,mBAEGT,EAFH,6BAGOU,GAHP,mBAIKmC,EAAWf,SARM,IAACA,QCThBmB,GAAyD,SAAC,GAAgD,IAA9CjS,EAA6C,EAA7CA,OAAQmJ,EAAqC,EAArCA,QAASiG,EAA4B,EAA5BA,YAAaJ,EAAe,EAAfA,SAC/FkD,EAAsB,SAACC,EAAoBpQ,GAC/C,IAAMqQ,EAAY,aAAOjJ,GACzBiJ,EAAarQ,GAAOoQ,EAEpB/C,GAAY,SAACK,GACX,IAAMC,EAAeD,EAAKT,GAC1B,OAAO,6BACFS,GADL,mBAEGT,EAFH,6BAGOU,GAHP,IAIIvG,QAASiJ,UAKjB,OACE,gBAAC3U,EAAA,EAAD,CAAKC,GAAIqT,GAAkBC,SAA3B,UACE,eAAC/M,GAAA,EAAD,CAAYvG,GAAIyT,GAAczX,KAA9B,SAAqCsG,IACrC,eAACuQ,GAAA,EAAD,CACEpP,MAAOkK,GACP3F,KAAK,SACL8L,aAAcrI,EAAQ,GACtBzL,GAAIqT,GAAkBG,UACtBO,WAAY,CAAEE,IAAK,EAAGG,IAAK,KAC3BnM,SAAU,SAACC,GAAD,OAAOsM,EAAoB3P,OAAOqD,EAAEE,OAAOrL,OAAQ,MAE/D,gBAACgD,EAAA,EAAD,CAAKC,GAAIqT,GAAkBE,WAA3B,UACE,eAACV,GAAA,EAAD,CACEpP,MAAOkK,GACP3F,KAAK,SACL8L,aAAcrI,EAAQ,GACtBzL,GAAIqT,GAAkBG,UACtBO,WAAY,CAAEE,IAAK,EAAGG,IAAK,KAC3BnM,SAAU,SAACC,GAAD,OAAOsM,EAAoB3P,OAAOqD,EAAEE,OAAOrL,OAAQ,MAE/D,eAAC8V,GAAA,EAAD,CACEpP,MAAOkK,GACP3F,KAAK,SACL8L,aAAcrI,EAAQ,GACtBzL,GAAIqT,GAAkBG,UACtBO,WAAY,CAAEE,IAAK,EAAGG,IAAK,KAC3BnM,SAAU,SAACC,GAAD,OAAOsM,EAAoB3P,OAAOqD,EAAEE,OAAOrL,OAAQ,aCzD1D4X,GAAqB,SAACC,EAAoBC,GAArB,MAAiD,CACjFxV,QAASuV,EAAOC,GAChB,UAAW,CACTtV,MAAM,OACNwD,OAAQzG,EAAG,IACXmP,QAAS,KAIAqJ,GAA8C,CACzDC,OAAQ,CACNlS,OAAQvG,EAAG,EAAG,IAEhBN,KAAM,CACJ+C,SAAUzC,EAAG0C,KAEfgW,IAAK,CACHxV,QAAQ,OACRC,cAAc,OAEhBwV,IAAK,CACHzV,QAAQ,OACRC,cAAc,SACdF,MAAM,QCPG2V,GAA2D,SAAC,GAAuC,IAArCN,EAAoC,EAApCA,OAAQlD,EAA4B,EAA5BA,YAAaJ,EAAe,EAAfA,SAkBxF6D,EAAW,SAAC9Q,GAAD,OACf,gBAACtE,EAAA,EAAD,CAAKC,GAAI8U,GAAmBG,IAA5B,UACE,iCAAQrH,GAAeC,gBAAgBxJ,KACvC,eAACtE,EAAA,EAAD,CAAKC,GAAI2U,GAAmBC,EAAQvQ,GAApC,SACE,wBAAO2D,KAAK,QAAQjL,MAAO6X,EAAOvQ,GAAM4D,SAAU,SAACC,GAAD,OArBjC,SAACe,EAAsC5E,GAC5D,IAAM+Q,EAAWnM,EAAMb,OAAOrL,MAC9B,GAAIqY,EAAU,CACZ,IAAMC,EAAS,aAAOT,GACtBS,EAAUhR,GAAO+Q,EACjB1D,GAAY,SAACK,GACX,IAAMC,EAAeD,EAAKT,GAC1B,OAAO,6BACFS,GADL,mBAEGT,EAFH,6BAGOU,GAHP,IAII5B,cAAeiF,UAUsCC,CAAepN,EAAG7D,UAHzCA,IAOxC,OACE,gBAACtE,EAAA,EAAD,CAAKC,GAAI8U,GAAmBC,OAA5B,UACE,eAACxO,GAAA,EAAD,CAAYvG,GAAI8U,GAAmB9Y,KAAnC,SAA0C4R,GAAetL,SACzD,eAACvC,EAAA,EAAD,CAAKC,GAAI8U,GAAmBE,IAA5B,SAAkC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGxY,KAAI,SAAC6H,GAAD,OAAS8Q,EAAS9Q,QACxE,eAACtE,EAAA,EAAD,CAAKC,GAAI8U,GAAmBE,IAA5B,SAAkC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGxY,KAAI,SAAC6H,GAAD,OAAS8Q,EAAS9Q,YChDjEkR,GAA8C,CACzDC,MAAO,CACLjW,MAAM,OACNC,QAAQ,QAEV2D,OAAQ,CACNsL,SAAU,EACVnP,QAAShD,EAAG,EAAG,GACf,iBAAkB,CAChB+C,QAASlB,KCIFsX,GAAgB,YAMmB,IAL9CnE,EAK6C,EAL7CA,SACAvU,EAI6C,EAJ7CA,MACA0I,EAG6C,EAH7CA,QACAiM,EAE6C,EAF7CA,YACAyB,EAC6C,EAD7CA,YAcA,OACE,eAACpT,EAAA,EAAD,UACE,eAACiJ,GAAA,EAAD,CACEhJ,GAAIuV,GAAmBC,MACvBzY,MAAOA,EACP2Y,WAAS,EACTzN,SAAU,SAACC,EAAGnL,GAAJ,OAlBkBqW,EAkBqBrW,OAjBrD2U,GAAY,SAACK,GACX,IAAMC,EAAeD,EAAKT,GAC1B,OAAO,6BACFS,GADL,mBAEGT,EAFH,6BAGOU,GAHP,mBAIKmB,EAAcC,SAPU,IAACA,GAc9B,SAMG3N,EAAQjJ,KAAI,SAACmZ,EAAKtR,GAAN,OACX,eAAC8E,GAAA,EAAD,CAAcnJ,GAAIuV,GAAmBpS,OAAQpG,MAAO4Y,EAApD,SACGA,GAD2DtR,WCR3DuR,GAA+C,SAAC,GAAwC,IAAtC7R,EAAqC,EAArCA,QAASsF,EAA4B,EAA5BA,SAAUqI,EAAkB,EAAlBA,YAC1EJ,EAAW1V,EAAS4Q,OACpBqJ,EAAiBxM,EAASiI,GAChC,EAAoEjK,mBAASuH,GAA8B7K,IAA3G,oBAAO+R,EAAP,KAAmCC,EAAnC,KACA,EAA8B1O,mBAAuC2H,GAAwCjL,IAA7G,oBAAOmF,EAAP,KAAgByI,EAAhB,KAEMqE,EAAqBF,EAA2BhY,QAAO,SAACC,GAAD,OAASmL,EAAQnL,MACxEkY,EAAwBpH,GAA0B9K,GAKlDmS,EAAmBC,uBAAY,WAAO,IAAD,IACnC1D,EAAazD,GAAwCjL,GACrDqS,EAAYxH,GAA8B7K,GAC1CsS,EAAoB,UAAGD,EAAUtY,QAAO,SAACC,GAAD,OAAS0U,EAAW1U,aAAxC,aAAG,EAA6C,GACpEuY,EAAwB,UAAGzH,GAA0B9K,UAA7B,aAAG,EAAqC,GACtE4N,EAAWc,GACXsD,EAA8BK,GAC9B1E,GAAY,SAACK,GACX,IAAMwE,EAAyB,cAC7BtE,kBAAmBmE,EAAUtY,QAAO,SAACC,GAAD,OAAS0U,EAAW1U,MACxDyY,cAAeH,EACfvD,kBAAmBwD,GAChBxG,IAEL,OAAO,6BAAKiC,GAAZ,mBAAmBnW,EAAS4Q,OAAS+J,SAEtC,CAAC7E,EAAa3N,IAGjB0S,qBAAU,kBAAMP,MAAoB,CAACnS,IAcrC,OAAI8R,EAEA,gBAAC9V,EAAA,EAAD,CAAKC,GAAI0Q,GAAoBC,WAA7B,UACE,8BAAKJ,GAAiBjO,SACrBwT,EAA2B5R,QhBjFM,EgBkFhC,uCACE,eAAC,GAAD,CACEoN,SAAUA,EACVC,eAAgBuE,EAChBrE,eArB8B,SACxCgB,EACAT,GAEA,IA5BmC0E,EA4B7BzE,GA5B6ByE,EA4BmBjE,EA3BtDqD,EAA2BhY,QAAO,SAACC,GAAD,OAAS2Y,EAAY3Y,OA4BjD4Y,EAAwBb,EAA2BhY,QAAO,SAACC,GAAD,OAAS0U,EAAW1U,MAIpF,MAAO,CAAEkU,oBAAmBuE,cAHN/D,EAAWT,EAAawE,eAC1CxE,EAAawE,cADK,OAElBG,QAFkB,IAElBA,OAFkB,EAElBA,EAAwB,KAclBjF,YAAaA,EACbjO,MAAO8M,GAAiB/C,WACxBtE,QAASA,EACTyI,WAAYA,EACZC,kBAAmBmE,IAErB,eAAC,GAAD,CACEzE,SAAUA,EACVvU,MAAO8Y,EAAe/C,kBACtBvB,eAAgB0E,EAChBvE,YAAaA,EACbjO,MAAO8M,GAAiB9C,WAE1B,eAAC,GAAD,CACE6D,SAAUA,EACVvU,MAAO8Y,EAAeW,cACtBjF,eAAgByE,EAChBtE,YAAaA,EACbjO,MAAO8M,GAAiBC,QACxB2C,YCzGe,kBD2GjB,eAAC,GAAD,CACE7B,SAAUA,EACVvU,MAAO8Y,EAAe9F,SACtBtK,QAAS7H,OAAOrB,OAAiB0K,IACjCyK,YAAaA,EACbyB,YC/GU,aDiHZ,gBAACyD,GAAA,EAAD,CAAW5W,GAAI0Q,GAAoBM,UAAnC,UACE,eAAC6F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxQ,GAAA,EAAD,UAAagK,GAAiBlD,SAEhC,gBAAC2J,GAAA,EAAD,WACE,eAAC,GAAD,CAAa7G,QAAS0F,EAAe1F,QAASuB,YAAaA,EAAaJ,SAAUA,IAClF,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACEhJ,MAAO8Y,EAAe5F,UACtBkE,SCzHO,YD0HPzC,YAAaA,EACbjO,MAAO8M,GAAiBN,UACxBqB,SAAUA,IAEZ,eAAC,GAAD,CACEvU,MAAO8Y,EAAe3F,aACtBiE,SC/HU,eDgIVzC,YAAaA,EACbjO,MAAO8M,GAAiBL,aACxBoB,SAAUA,IAEZ,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACEzD,OAAQiO,GAAiB9E,QACzBA,QAASoK,EAAepK,QACxBiG,YAAaA,EACbJ,SAAUA,IAEZ,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CAAe6O,OAAQiB,EAAezF,cAAesB,YAAaA,EAAaJ,SAAUA,aAK/F,eAACvR,EAAA,EAAD,CAAKC,GAAI0Q,GAAoBK,yBAA7B,SAAwDR,GAAiBE,iBAK1E,MEzJIwG,GAGT,CACF9G,QAAS,CAAC,GAAI,GAAI,GAAI,IACtB+G,UAAW,EACXzL,QAAS,CAAC,GAAI,GAAI,IAClB2E,cAAeC,MCVJ8G,GACC,4JAGDC,GAA8B,cACzC9U,OAAQwL,GAAWlS,EAASwQ,qBAC5BqE,YAAY,gKACZhF,QAAQ,mBACRyL,UAAU,cACP3J,ICmBQ8J,GAA4D,SAAC,GAKnE,IAJLtT,EAII,EAJJA,QACAsF,EAGI,EAHJA,SACAqI,EAEI,EAFJA,YACA4F,EACI,EADJA,+BAEMhG,EAAW1V,EAASwQ,oBACpBmL,EAA8BlO,EAASiI,GAE7C,EAAoEjK,mBAASuH,GAA8B7K,IAA3G,oBAAO+R,EAAP,KAAmCC,EAAnC,KACA,EAA8B1O,mBAAuC2H,GAAwCjL,IAA7G,oBAAOmF,EAAP,KAAgByI,EAAhB,KAEMsE,EAAwBpH,GAA0B9K,GAMlDyT,EAAgCrB,uBAAY,WAAO,IAAD,EAChD1D,EAAazD,GAAwCjL,GACrDqS,EAAYxH,GAA8B7K,GAC1CuS,EAAwB,UAAGzH,GAA0B9K,UAA7B,aAAG,EAAqC,GACtE4N,EAAWc,GACXsD,EAA8BK,GAC9B1E,GAAY,SAACK,GACX,IAAM0F,EAAmD,cACvDxF,kBAAmBmE,EAAUtY,QAAO,SAACC,GAAD,OAAS0U,EAAW1U,MACxD+U,kBAAmBwD,GAChBW,IAEL,OAAO,6BAAKlF,GAAZ,mBAAmBnW,EAASwQ,oBAAsBqL,SAEnD,CAAC/F,EAAa3N,IAGjB0S,qBAAU,kBAAMe,MAAiC,CAACzT,IAMlD,OAAIwT,EAEA,gBAACxX,EAAA,EAAD,CAAKC,GAAI0Q,GAAoBC,WAA7B,UACE,8BAAKyG,GAA+B9U,SACnCwT,EAA2B5R,QFxEoB,EEyE9C,uCACE,eAAC,GAAD,CACEoN,SAAUA,EACVC,eAAgBuE,EAChBtE,qBAAsB,kBAAM8F,EAA+BhG,IAC3DG,eAd8B,SAACgB,GAAD,MAA+C,CACvFR,mBAxBmCyE,EAwBYjE,EAvB/CqD,EAA2BhY,QAAO,SAACC,GAAD,OAAS2Y,EAAY3Y,QADrB,IAAC2Y,GAsCzBhF,YAAaA,EACbjO,MAAO2T,GAA+B5J,WACtCtE,QAASA,EACTyI,WAAYA,EACZC,kBAAmBmE,IAErB,eAAC,GAAD,CACEzE,SAAUA,EACVvU,MAAOwa,EAA4BzE,kBACnCvB,eAAgB0E,EAChBvE,YAAaA,EACbjO,MAAO2T,GAA+B3J,WAExC,gBAACmJ,GAAA,EAAD,CAAW5W,GAAI0Q,GAAoBM,UAAnC,UACE,eAAC6F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxQ,GAAA,EAAD,UAAa6Q,GAA+B/J,SAE9C,gBAAC2J,GAAA,EAAD,WACE,eAAC,GAAD,CACE7G,QAASoH,EAA4BpH,QACrCuB,YAAaA,EACbJ,SAAUA,IAEZ,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACEhJ,MAAOwa,EAA4BL,UACnC/C,SC3GO,YD4GPzC,YAAaA,EACbjO,MAAO2T,GAA+BF,UACtC5F,SAAUA,IAEZ,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACEzD,OAAQ8U,GAA+B3L,QACvCA,QAAS8L,EAA4B9L,QACrCiG,YAAaA,EACbJ,SAAUA,IAEZ,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACE6O,OAAQ2C,EAA4BnH,cACpCsB,YAAaA,EACbJ,SAAUA,aAMlB,eAACvR,EAAA,EAAD,CAAKC,GAAI0Q,GAAoBK,yBAA7B,SAAwDqG,GAA+B3G,iBAKxF,MElIIiH,GAGT,CACFvH,QAAS,CAAC,GAAI,GAAI,GAAI,IACtBwH,UAAW,EACXC,kBAAmB,GACnBC,gBAAiB,GACjBpM,QAAS,CAAC,GAAI,GAAI,IAClB2E,cAAeC,MCZJyH,GACF,kJADEA,GAEC,kIAGDC,GAA6B,cACxCzV,OAAQwL,GAAWlS,EAAS2Q,mBAC5ByL,MAAM,QACNvH,YAAY,+JACZhF,QAAQ,yBACRkM,UAAU,aACVC,kBAAkB,qBAClBC,gBAAgB,oBACbtK,ICqBQ0K,GAA0D,SAAC,GAKjE,IAJLlU,EAII,EAJJA,QACAsF,EAGI,EAHJA,SACAqI,EAEI,EAFJA,YACA4F,EACI,EADJA,+BAEMhG,EAAW1V,EAAS2Q,kBACpB2L,EAA4B7O,EAASiI,GAE3C,EAAoEjK,mBAASuH,GAA8B7K,IAA3G,oBAAO+R,EAAP,KAAmCC,EAAnC,KACA,EAA8B1O,mBAAuC2H,GAAwCjL,IAA7G,oBAAOmF,EAAP,KAAgByI,EAAhB,KAEMsE,EAAwBpH,GAA0B9K,GAMlDoU,EAA8BhC,uBAAY,WAAO,IAAD,EAC9C1D,EAAazD,GAAwCjL,GACrDqS,EAAYxH,GAA8B7K,GAC1CuS,EAAwB,UAAGzH,GAA0B9K,UAA7B,aAAG,EAAqC,GACtE4N,EAAWc,GACXsD,EAA8BK,GAC9B1E,GAAY,SAACK,GACX,IAAMqG,EAA+C,cACnDnG,kBAAmBmE,EAAUtY,QAAO,SAACC,GAAD,OAAS0U,EAAW1U,MACxD+U,kBAAmBwD,GAChBoB,IAEL,OAAO,6BAAK3F,GAAZ,mBAAmBnW,EAAS2Q,kBAAoB6L,SAEjD,CAAC1G,EAAa3N,IAGjB0S,qBAAU,kBAAM0B,MAA+B,CAACpU,IAMhD,OAAImU,EAEA,gBAACnY,EAAA,EAAD,CAAKC,GAAI0Q,GAAoBC,WAA7B,UACE,8BAAKoH,GAA8BzV,SAClCwT,EAA2B5R,QF9EmB,EE+E7C,uCACE,eAAC,GAAD,CACEoN,SAAUA,EACVC,eAAgBuE,EAChBtE,qBAAsB,kBAAM8F,EAA+BhG,IAC3DG,eAd8B,SAACgB,GAAD,MAA+C,CACvFR,mBAxBmCyE,EAwBYjE,EAvB/CqD,EAA2BhY,QAAO,SAACC,GAAD,OAAS2Y,EAAY3Y,QADrB,IAAC2Y,GAsCzBhF,YAAaA,EACbjO,MAAOsU,GAA8BvK,WACrCtE,QAASA,EACTyI,WAAYA,EACZC,kBAAmBmE,IAErB,eAAC,GAAD,CACEzE,SAAUA,EACVvU,MAAOmb,EAA0BpF,kBACjCvB,eAAgB0E,EAChBvE,YAAaA,EACbjO,MAAOsU,GAA8BtK,WAEvC,gBAACmJ,GAAA,EAAD,CAAW5W,GAAI0Q,GAAoBM,UAAnC,UACE,eAAC6F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxQ,GAAA,EAAD,UAAawR,GAA8B1K,SAE7C,gBAAC2J,GAAA,EAAD,WACE,eAAC,GAAD,CACE7G,QAAS+H,EAA0B/H,QACnCuB,YAAaA,EACbJ,SAAUA,IAEZ,eAACvL,GAAA,EAAD,IACA,eAACQ,GAAA,EAAD,CAAYvG,GAAIyT,GAAczX,KAA9B,SAAqC+b,GAA8BC,QACnE,eAAC,GAAD,CACEjb,MAAOmb,EAA0BP,UACjCxD,SClHO,YDmHPzC,YAAaA,EACbjO,MAAOsU,GAA8BJ,UACrCrG,SAAUA,IAEZ,eAAC,GAAD,CACEvU,MAAOmb,EAA0BN,kBACjCzD,SCxHe,oBDyHfzC,YAAaA,EACbjO,MAAOsU,GAA8BH,kBACrCtG,SAAUA,EACVE,qBAAsB,kBAAM8F,EAA+BhG,MAE7D,eAAC,GAAD,CACEvU,MAAOmb,EAA0BL,gBACjC1D,SC/Ha,kBDgIbzC,YAAaA,EACbjO,MAAOsU,GAA8BF,gBACrCvG,SAAUA,EACVE,qBAAsB,kBAAM8F,EAA+BhG,MAE7D,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACEzD,OAAQyV,GAA8BtM,QACtCA,QAASyM,EAA0BzM,QACnCiG,YAAaA,EACbJ,SAAUA,IAEZ,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACE6O,OAAQsD,EAA0B9H,cAClCsB,YAAaA,EACbJ,SAAUA,aAMlB,eAACvR,EAAA,EAAD,CAAKC,GAAI0Q,GAAoBK,yBAA7B,SAAwDgH,GAA8BtH,iBAKvF,MEzJI4H,GAGT,CACFpI,UAAW,GACXE,QAAS,CAAC,GAAI,GAAI,GAAI,IACtB1E,QAAS,CAAC,GAAI,GAAI,IAClB2E,cAAeC,MCVJiI,GACC,8JAGDC,GAA6B,cACxCjW,OAAQwL,GAAWlS,EAAS6Q,mBAC5B+L,WAAW,gBACXC,WAAW,gBACXhI,YAAY,+JACZR,UAAU,aACVxE,QAAQ,qBACL8B,ICmBQmL,GAA0D,SAAC,GAKjE,IAJL3U,EAII,EAJJA,QACAsF,EAGI,EAHJA,SACAqI,EAEI,EAFJA,YACA4F,EACI,EADJA,+BAEMhG,EAAW1V,EAAS6Q,kBACpBkM,EAA4BtP,EAASiI,GACrCsH,EAAWC,mBAAQ,kCAAMjK,GAA8B7K,UAApC,aAAM,EAAyC,KAAI,CAACA,IACvE+U,EAAWD,mBAAQ,kCAAMjK,GAA8B7K,UAApC,aAAM,EAAyC,KAAI,CAACA,IAC7E,EAAoEsD,mBAASuH,GAA8B7K,IAA3G,oBAAO+R,EAAP,KAAmCC,EAAnC,KACA,EAA8B1O,mBAAuC2H,GAAwCjL,IAA7G,oBAAOmF,EAAP,KAAgByI,EAAhB,KAEMsE,EAAwBpH,GAA0B9K,GAKlDgV,EAA8B5C,uBAAY,WAAO,IAAD,EAC9C1D,EAAazD,GAAwCjL,GACrDqS,EAAYxH,GAA8B7K,GAC1CuS,EAAwB,UAAGzH,GAA0B9K,UAA7B,aAAG,EAAqC,GACtE4N,EAAWc,GACXsD,EAA8BK,GAC9B1E,GAAY,SAACK,GACX,IAAMiH,EAAuD,cAC3D/G,kBAAmBmE,EAAUtY,QAAO,SAACC,GAAD,OAAS0U,EAAW1U,MACxD+U,kBAAmBwD,EACnBkC,WAAYI,EACZH,WAAYK,GACTT,IAEL,OAAO,6BAAKtG,GAAZ,mBAAmBnW,EAAS6Q,kBAAoBuM,SAEjD,CAACtH,EAAakH,EAAUE,EAAU/U,IAGrC0S,qBAAU,kBAAMsC,MAA+B,CAAChV,IAEhD,IAKMyN,EAAuB,kBAAM8F,EAA+BhG,IAElE,OAAIqH,EAEA,gBAAC5Y,EAAA,EAAD,CAAKC,GAAI0Q,GAAoBC,WAA7B,UACE,8BAAK4H,GAA8BjW,SAClCwT,EAA2B5R,QF/EmB,EEgF7C,uCACE,eAAC,GAAD,CACEoN,SAAUA,EACVC,eAAgBuE,EAChBrE,eAhB8B,SACxCgB,GADwC,MAEA,CACxCR,mBA3BmCyE,EA2BYjE,EA1B/CqD,EAA2BhY,QAAO,SAACC,GAAD,OAAS2Y,EAAY3Y,QADrB,IAAC2Y,GAyCzBhF,YAAaA,EACbjO,MAAO8U,GAA8B/K,WACrCtE,QAASA,EACTyI,WAAYA,EACZC,kBAAmBmE,IAErB,eAAC,GAAD,CACEzE,SAAUA,EACVvU,MAAO4b,EAA0BH,WACjCjH,eAAgBuE,EAChBpE,YAAaA,EACbjO,MAAO8U,GAA8BC,WACrCrF,YC/FY,aDgGZ3B,qBAAsBA,IAExB,eAAC,GAAD,CACEF,SAAUA,EACVvU,MAAO4b,EAA0BF,WACjClH,eAAgBuE,EAChBpE,YAAaA,EACbjO,MAAO8U,GAA8BE,WACrCtF,YCvGY,aDwGZ3B,qBAAsBA,IAExB,eAAC,GAAD,CACEF,SAAUA,EACVvU,MAAO4b,EAA0B7F,kBACjCvB,eAAgB0E,EAChBvE,YAAaA,EACbjO,MAAO8U,GAA8B9K,WAEvC,gBAACmJ,GAAA,EAAD,CAAW5W,GAAI0Q,GAAoBM,UAAnC,UACE,eAAC6F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxQ,GAAA,EAAD,UAAagS,GAA8BlL,SAE7C,gBAAC2J,GAAA,EAAD,WACE,eAAC,GAAD,CACE7G,QAASwI,EAA0BxI,QACnCuB,YAAaA,EACbJ,SAAUA,IAEZ,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACEhJ,MAAO4b,EAA0B1I,UACjCkE,SCjIO,YDkIPzC,YAAaA,EACbjO,MAAO8U,GAA8BtI,UACrCqB,SAAUA,IAEZ,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACEzD,OAAQiW,GAA8B9M,QACtCA,QAASkN,EAA0BlN,QACnCiG,YAAaA,EACbJ,SAAUA,IAEZ,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACE6O,OAAQ+D,EAA0BvI,cAClCsB,YAAaA,EACbJ,SAAUA,aAMlB,eAACvR,EAAA,EAAD,CAAKC,GAAI0Q,GAAoBK,yBAA7B,SAAwDwH,GAA8B9H,iBAKvF,ME5JIwI,GAA2D,CACtEC,UAAW,ICDAC,GAAoB,cAC/B7W,OAAQwL,GAAWlS,EAAS8Q,WAC5B+D,YAAY,iHACZjD,WAAW,kBACX0L,UAAU,oBACP9L,IAGQgM,IAAe,IAC1BC,gBAAgB,cADU,gBAEzBpS,GAAS+I,IAFgB,kCAGzB/I,GAAS4I,KAHgB,yLCQfyJ,GAAkD,SAAC,GAAwC,IAAtCvV,EAAqC,EAArCA,QAASsF,EAA4B,EAA5BA,SAAUqI,EAAkB,EAAlBA,YAC7EJ,EAAW1V,EAAS8Q,UACpB6M,EAAoBlQ,EAASiI,GACnC,EAA4CjK,mBAASqH,GAAiB3K,IAAtE,oBAAOwN,EAAP,KAAuBK,EAAvB,KACA,EAA8BvK,mBAAuC0H,GAA+BhL,IAApG,oBAAOmF,EAAP,KAAgByI,EAAhB,KAKM6H,EAAsBrD,uBAAY,WACtC,IAAM1D,EAAa1D,GAA+BhL,GAC5C0V,EAAU/K,GAAiB3K,GACjC4N,EAAWc,GACXb,EAAkB6H,GAClB/H,GAAY,SAACK,GACX,IAAM2H,EAAuC,cAC3CzH,kBAAmBwH,EAAQ3b,QAAO,SAACC,GAAD,OAAS0U,EAAW1U,OACnDkb,IAEL,OAAO,6BAAKlH,GAAZ,mBAAmBnW,EAAS8Q,UAAYgN,SAEzC,CAAChI,EAAa3N,IAGjB0S,qBAAU,kBAAM+C,MAAuB,CAACzV,IAMxC,OAAIwV,EAEA,gBAACxZ,EAAA,EAAD,CAAKC,GAAI0Q,GAAoBC,WAA7B,UACE,8BAAKwI,GAAqB7W,SACzBiP,EAAerN,QFpDsB,EEqDpC,uCACE,eAAC,GAAD,CACEoN,SAAUA,EACVC,eAAgBA,EAChBE,eAb8B,SAACgB,GAAD,MAA2E,CACnHR,mBArBmCyE,EAqBYjE,EApB/ClB,EAAezT,QAAO,SAACC,GAAD,OAAS2Y,EAAY3Y,QADT,IAAC2Y,GAkCzBhF,YAAaA,EACbjO,MAAO0V,GAAqB3L,WAC5BtE,QAASA,EACTyI,WAAYA,EACZC,kBAAmBA,IAErB,gBAACgF,GAAA,EAAD,CAAW5W,GAAI0Q,GAAoBM,UAAnC,UACE,eAAC6F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxQ,GAAA,EAAD,UAAa4S,GAAqB9L,SAEpC,eAAC2J,GAAA,EAAD,UACE,eAAC,GAAD,CACEja,MAAOwc,EAAkBL,UACzB/E,SCvEO,YDwEPzC,YAAaA,EACbjO,MAAO0V,GAAqBD,UAC5B5H,SAAUA,YAMlB,eAACvR,EAAA,EAAD,CAAKC,GAAI0Q,GAAoBK,yBAA7B,SAAwDoI,GAAqB1I,iBAK9E,ME3DIkJ,GAAqD,SAAC,GAQ5D,IAPLpU,EAOI,EAPJA,OACAqU,EAMI,EANJA,MACA7V,EAKI,EALJA,QACA8V,EAII,EAJJA,MACAxQ,EAGI,EAHJA,SACAqI,EAEI,EAFJA,YACA4F,EACI,EADJA,+BAEMwC,EAAQD,EAAMrd,KAAI,SAACud,EAAM1V,GAC7B,OAAQ0V,GACN,KAAKne,EAAS4Q,OACZ,OACE,eAAC,GAAD,CACEzI,QAASA,EACTsF,SAAUA,EACVqI,YAAaA,EACb4F,+BAAgCA,GAC3BjT,GAGX,KAAKzI,EAASwQ,oBACZ,OACE,eAAC,GAAD,CACErI,QAASA,EACTsF,SAAUA,EACVqI,YAAaA,EACb4F,+BAAgCA,GAC3BjT,GAGX,KAAKzI,EAAS2Q,kBACZ,OACE,eAAC,GAAD,CACExI,QAASA,EACTsF,SAAUA,EACVqI,YAAaA,EACb4F,+BAAgCA,GAC3BjT,GAGX,KAAKzI,EAAS6Q,kBACZ,OACE,eAAC,GAAD,CACE1I,QAASA,EACTsF,SAAUA,EACVqI,YAAaA,EACb4F,+BAAgCA,GAC3BjT,GAGX,KAAKzI,EAAS8Q,UACZ,OACE,eAAC,GAAD,CACE3I,QAASA,EACTsF,SAAUA,EACVqI,YAAaA,EACb4F,+BAAgCA,GAC3BjT,GAGX,QACE,OAAO,SAGb,OACE,gBAAC2V,GAAA,EAAD,CAAQrW,QAAQ,aAAasW,OAAO,QAAQpU,KAAMN,EAAQvF,GAAIoO,GAAgBC,OAA9E,UACE,eAACtO,EAAA,EAAD,CAAKC,GAAIoO,GAAgB9L,OAAzB,SACE,eAACiH,GAAA,EAAD,CAAYhG,QAASqW,EAArB,SACE,eAACM,GAAA,EAAD,CAAcla,GAAIoO,GAAgBG,cAGtC,eAACxI,GAAA,EAAD,IACA,eAAChG,EAAA,EAAD,CAAKC,GAAIoO,GAAgBI,KAAzB,SAAgCsL,EAAMtd,KAAI,SAACgS,GAAD,OAAUA,W,oBC/F7C2L,GAAyC,CACpDC,SAAU,CACRrX,OAAO,OACP1D,QAASjB,EACTic,YAAajc,EACbkc,YAAa,EACbC,YAAY,SAEdve,KAAM,CACJsD,QAAShD,EAAG,EAAG,IAEjBgG,OAAQ,CACNS,OAAQyX,GACRhb,QAAQ,OACRE,WAAW,SACXC,eAAe,gBACf8a,OAAO,aACPpb,QAASjB,EACTic,YAAajc,EACbsc,kBAAmB,EACnBC,kBAAkB,QAClBrb,QAAS,I,UCzBAsb,IAAiC,sBAC3Chf,EAASwQ,oBADkC,2BAE3CxQ,EAAS2Q,kBAFkC,4BAG3C3Q,EAAS4Q,OAHkC,8BAI3C5Q,EAAS6Q,kBAJkC,4BAK3C7Q,EAAS8Q,UALkC,mBAQjCmO,IAA2C,sBACrDjf,EAASwQ,oBAD4C,6BAErDxQ,EAAS2Q,kBAF4C,8BAGrD3Q,EAAS4Q,OAH4C,gCAIrD5Q,EAAS6Q,kBAJ4C,8BAKrD7Q,EAAS8Q,UAL4C,qBCO3CoO,GAAU,SAACxJ,GACtB,IAAMyJ,EAAeC,SAASC,cAAT,WAA2BJ,GAAkBvJ,KAC5D7G,EAAMuQ,SAASC,cAAT,WAA2BL,GAAQtJ,KAC/C,GAAKyJ,GAAiBtQ,EAAtB,CAMA,IAAMyQ,EAAiBlX,MAAMmX,KAAKJ,EAAaK,WAAWtd,QAAO,SAACud,GAAD,OAAUA,EAAIC,SAAJ,aAAwB,GAE7FC,EAAgBvX,MAAMmX,KAAKH,SAASQ,iBAAT,UAC9B1d,QAAO,SAACoK,GAAD,OAAOA,EAAEuT,UAAUH,SAAZ,WAAyBJ,OACvC1e,KAAI,SAACwP,GAAD,OAAWA,EAAMyP,UAAUvf,QAAhB,WAA4Bgf,EAA5B,YACf1e,KAAI,SAACwP,GACJ,IAAM0P,EAAOV,SAASW,cAAT,SAGb,OAFAD,EAAKD,UAAYzP,EACjBvB,EAAImR,aAAaF,EAAMjR,EAAIoR,YACpBH,MAhCgB,SAACI,EAAgBC,GAC5CD,EAAME,aAAN,sCACA,IAAMC,EAAUH,EAAMI,UAEhBC,EAAU,IAAIC,KAAK,CADZ,4CACsBH,GAAU,CAAEjU,KAAK,gCAC9CqU,EAASC,IAAIC,gBAAgBJ,GAC7BK,EAAexB,SAASW,cAAT,KACrBa,EAAaC,KAAOJ,EACpBG,EAAaE,SAAWX,EACxBf,SAAS2B,KAAKC,YAAYJ,GAC1BA,EAAaK,QACb7B,SAAS2B,KAAKG,YAAYN,GAuB1BO,CAActS,EAAK6G,GAEnBiK,EAAcyB,SAAQ,SAACtB,GAAD,OAAUA,EAAKuB,iBAjBnCC,QAAQC,MAAR,qDCnBSC,GAA8C,CACzDja,OAAQ,CACNN,OAAQ,EACRvD,QAAS,EACT8D,SAAU,EACVpG,MAAOmB,ICKEkf,GAAoE,SAAC,GAAD,IAC/E9X,EAD+E,EAC/EA,OACA3F,EAF+E,EAE/EA,MACAC,EAH+E,EAG/EA,YACAyd,EAJ+E,EAI/EA,UACA9X,EAL+E,EAK/EA,QACAiB,EAN+E,EAM/EA,YACA8W,EAP+E,EAO/EA,WAP+E,OAS/E,gBAAC3X,GAAA,EAAD,CAAQJ,QAASA,EAASK,KAAMN,EAAhC,UACE,eAACO,GAAA,EAAD,UAAclG,IACd,eAACmG,GAAA,EAAD,IACA,eAACW,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,UAAoB9G,MAEtB,gBAAC+G,GAAA,EAAD,WACE,eAAClD,GAAA,EAAD,CAAQH,QAAS+Z,EAAW3Z,QAAQ,YAAYkD,WAAS,EAAzD,SACGJ,IAEH,eAAC/C,GAAA,EAAD,CAAQH,QAASiC,EAAS7B,QAAQ,WAAlC,SACG4Z,WCfIC,GAA6D,SAAC,GAAkB,IAAhBlM,EAAe,EAAfA,SAC3E,EAAwCjK,oBAAS,GAAjD,oBAAOoW,EAAP,KAAqBC,EAArB,KAMA,OACE,uCACE,eAAC,GAAD,CACEnY,OAAQkY,EACR7d,MAAO2B,GAAiBc,SAASC,OACjCzC,YAAa0B,GAAiBc,SAASxC,YACvCyd,UAXY,WAChBxC,GAAQxJ,GACRoM,GAAgB,IAUZlY,QAAS,kBAAMkY,GAAgB,IAC/BjX,YAAalF,GAAiBc,SAASG,QACvC+a,WAAYhc,GAAiBc,SAASI,SAExC,eAACiB,GAAA,EAAD,CACEC,QAAQ,OACRJ,QAAS,kBAAMma,GAAgB,IAC/B1d,GAAIod,GAAmBja,OACvB,aAAY5B,GAAiBc,SAASE,KAJxC,SAME,eAACqB,GAAA,EAAD,CAAShE,MAAO2B,GAAiBc,SAASE,KAA1C,SACE,eAACob,GAAA,EAAD,Y,2BCrCGC,GAAb,cAIE,WAAqBlS,EAAsBzI,EAAwBiK,EAAyBtK,GAAe,0BAAtF8I,MAAqF,KAA/DzI,QAA+D,KAAvCiK,SAAuC,KAAdtK,OAAc,KAHjGrD,WAGiG,OAFjGwD,YAEiG,OADjG8a,cACiG,EACxGC,KAAKve,MAAQue,KAAK7a,MAAQ6a,KAAKlb,KAC/Bkb,KAAK/a,OAAS+a,KAAKpS,IAAMoS,KAAK5Q,OAC9B4Q,KAAKD,SAAWvhB,EAAGwhB,KAAKpS,IAAKoS,KAAK7a,MAAO6a,KAAK5Q,OAAQ4Q,KAAKlb,SCXlDmb,GAAa,SAACC,EAA8C7S,EAAYC,GACnF,MAAyB,CAAC4S,EAAO,GAAG,GAAIA,EAAO,GAAG,GAAIA,EAAO,GAAG,GAAIA,EAAO,GAAG,IAC9E,OADA,MACa7S,GAAMA,GADnB,YACqCC,GAAMA,GAD3C,MCCW6S,GAAqB,SAChCC,EACAna,GAFgC,OAIhCnG,OAAO8G,YACLwZ,EAAQ1hB,KAAI,SAACuB,GACX,IAAMogB,EAAmBC,aAAOra,GAAS,SAACgD,GAAD,OAAOlC,OAAOkC,EAAEhJ,OACzD,QAA4BgV,IAAxBoL,EAAiB,GAAkB,MAAM,IAAIE,MAAJ,sCAC7C,MAAO,CAACtgB,EAAKogB,QCNNG,GACX,SAACxL,EAAyD9V,GAA1D,OACA,SAACW,GAAD,OACsBX,EAApB8V,EAA0B7W,OAAO0B,EAAKmV,IAA6B,Q,S9CT3DrD,K,cAAAA,E,aAAAA,E,WAAAA,Q,cCAAC,K,sBAAAA,E,oBAAAA,E,eAAAA,Q,K8CAL,I,GAAM6O,GACH,QCQGC,GAA0B,sBAI1BC,GAA8B,SAAChT,EAAkBiT,GAAnB,MAAwD,CACjG,QAAS,CACPrf,QAASf,EACTqgB,KAAK,mBAEP,SAAU,CACRpT,KAAK,OACLE,QAAUiT,EAAmCjT,EAAQ,GAAK,IAAhCA,EAAQ,GAAK,IACvC,gCAAiC,CAC/BA,QAASA,EAAQ,GAAK,IACtBD,OAAQ3O,EAAUyB,MAGtB,iCAAkC,CAChCsgB,WAAW,SACXC,WAAW,OACXtT,KAAMjN,EACNS,SAAUE,MC1BD6f,GAA0B,SAACvf,EAAewD,EAAgBF,GAAhC,MAA6D,CAClGtD,MAAOA,EAAQsD,EAAOtD,MACtBwD,OAAQA,EAASF,EAAOE,OACxBzD,QAASuD,EAAOgb,WCkDLzR,GAAuE,SAAC,GAe9E,IAdL7M,EAcI,EAdJA,MACAwD,EAaI,EAbJA,OACAgB,EAYI,EAZJA,QACAkO,EAWI,EAXJA,kBACAa,EAUI,EAVJA,kBACAiM,EASI,EATJA,gBACAC,EAQI,EARJA,sBACAC,EAOI,EAPJA,qBACAhV,EAMI,EANJA,iBACAF,EAKI,EALJA,sBACAqG,EAII,EAJJA,cACA8G,EAGI,EAHJA,UACA/G,EAEI,EAFJA,QACA1E,EACI,EADJA,QAEM5I,EAASgW,mBAAQ,+BAAU+E,GAAV,aAAoBzN,MAAU,CAACA,IAChD+O,EAAY3e,iBAAoB,MAChCvD,EAAQmiB,aAAa/O,GACrBgP,EA1Ba,GA0BiBlgB,GAC7BmgB,EAA4B9f,EAAQsD,EAAOtD,MAA/B+f,EAAsCvc,EAASF,EAAOE,OAASqc,EAE5EG,EAA4BpJ,uBAAY,WAC5C,IAAMuF,EAAOwD,EAAU1e,QACjBiK,EAAMuI,aAAO0I,GACnBjR,EAAIsB,UpFtEqB,KoFsEMkR,SAE/B,IAAMuC,EAAkBvB,GAAmBhM,EAAmBlO,GACxD0b,EAASC,aAAW,CAAC,EAAGL,IAAaM,OAAqB1N,ECrFQzV,KAAI,SAACojB,GAAD,OAAO3jB,OAAO2jB,ODsFpFC,EAAU5N,EAAkBzV,KAAI,SAACc,GAAD,OACpCwiB,aAAY,CAACR,EAAa,IAAIK,OAAOH,EAAgBliB,OAGjDyiB,EpDvCsC,SAC9C9N,GAD8C,OAEdrU,OAAO8G,YAAYuN,EAAkBzV,KAAI,SAACuB,GAAD,MAAS,CAACA,EAAK,UoDqCnEiiB,CAAiC/N,GAE9CgO,EAAuB,WAC3BlB,GAAgB,SAACphB,GAAD,OACdsU,EAAkB7N,OAAM,SAAC8b,EAAW7b,GAClC,IAAM8b,EAAgBJ,EAAWG,GACjC,GAAsB,OAAlBC,EAAwB,OAAO,EACnC,INjGgBC,EAAgBC,EMiG1BC,EAAcT,EAAQxb,GAAKQ,OAAOlH,EAAKuiB,KAC7C,ONlGgBE,EMkGCE,INlGeD,EMkGFF,GNlGsD,IAAMC,EAASC,EAAM,UM4GzGE,EAAQC,eACXpC,OAAO,CACN,EA9DaqC,IACC,GA8Dd,CA/DaA,GA+DEnB,EA9DD,KAgEfoB,GAAGjR,GAAYkR,OAAO,WACrB1B,EAAqBrjB,EAASwQ,wBAE/BsU,GAAGjR,GAAYmR,MAAM,SAACC,EAA8CC,GAC9D/W,IACHgW,EAAWe,GAAYD,EAAWE,UAClCd,QAGHS,GAAGjR,GAAYuR,KAAK,SAACH,EAA8CC,GAElE,OADAf,EAAWe,GAAYD,EAAWE,UAC9B9O,EAAkB7C,MAAK,SAACrR,GAAD,OAA6B,OAApBgiB,EAAWhiB,MACtCkiB,KArBXhO,EAAkB+K,SAAQ,SAACjf,GAAD,OAAUgiB,EAAWhiB,GAAO,aACtDkhB,EAAqB,UAkCjBjR,EAAUgF,aAAO7V,EAAS6P,KAEhCvC,EACGsB,UAzF0B,wBA0F1BpO,KAAKoG,GACLkd,QACAC,OAAO1W,GAAaK,MACpBsW,KAAK3W,GAAezD,GAZC,SAACpJ,GAAD,OACtByjB,eACEnP,EAAkBzV,KAAI,SAACc,EAAW+G,GAAZ,MAAoB,CAACob,EAAOxjB,OAAOqB,IAAcuiB,EAAQxb,GAAKQ,OAAOlH,EAAKL,aAWjG6jB,KAAK3W,GAAeO,MAAOyT,IAC3B2C,KAAK3W,GAAec,YAAa4L,GAEjCwJ,GAAGhR,GAAa2R,WAAW,WAAmC1jB,GAA8B,IAA9D2jB,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,QACtCvT,EAAQ/I,aAAauc,SAASvU,IAAgBjB,MAAMxB,GAAUiB,QAASwB,IACvEe,EACGyT,KAAK/jB,EAA4BC,GAAMjB,KAAK6hB,KAC5CvS,MAAMxB,GAAU5H,KAAMtG,EAAGglB,IACzBtV,MAAMxB,GAAUkB,IAAKpP,EAAGilB,OAE5Bb,GAAGhR,GAAagS,UAAU,WACzB1T,EAAQ/I,aAAauc,SAASvU,IAAiBjB,MAAMxB,GAAUiB,QAASwB,OAEzEjB,MAAMxB,GAAUgB,OAAQ8S,GAAiBxL,EAAmB9V,IAG/D,IAAM2kB,EAAgBlX,EACnBsB,UAhHG,QAiHHpO,KAAKsU,GACLgP,QACAC,OAAO1W,GAAaE,GACpByW,KAAK3W,GAAeQ,WAtCE,SAAC1N,GAAD,OAAyCL,EAAa,CAACwiB,EAAOxjB,OAAOqB,IAAc,OAuCzGskB,MAtCkD,SAACtkB,EAAW+G,EAAKwd,GAAjB,OACnD7O,aAAO6O,EAASxd,IAAMyd,KAAKC,aAASlC,EAAQxb,QAsC3Cyd,KAAKvB,GAGRoB,EACGT,OAAO1W,GAAaxO,MACpBmlB,KAAK3W,GAAeU,GA7HN,IA8HdlP,KAAKqB,GACL8jB,KAAK3W,GAAeO,MFtKC,+BEwKxBiU,GAAsB,WACpB2C,EAAcC,MAAK,SAACtkB,EAAW+G,EAAKwd,GAClC,IAAMG,EAAOhP,aAAO6O,EAASxd,IAC7Bmc,eAASyB,MAAMD,WAGlB,CACDje,EACAsb,EACAC,EACAP,EACAE,EACAnM,EACAb,EACA+M,EACAjV,EACAmN,EACAla,IAYF,OATAyZ,qBACE,kBAAM8I,MAEN,CAACtN,EAAmBa,EAAmBuM,EAAYC,EAAapI,EAAWnN,EAAuBqG,IAIpGrE,aAAU5O,EAASqhB,KAA6B0D,QFpMvB,+BEoM+C,SAACnb,GAAD,OAAQA,EAAyBC,YAErGiL,EAAkB/N,Q9B5MgC,E8B8MlD,eAACnE,EAAA,EAAD,CACEC,GAAIye,GAA4BhT,EAASxB,GACzCkY,GAAItH,GAAkBjf,EAASwQ,qBAFjC,SAIE,sBAAK7M,MAAOA,EAAOwD,OAAQA,EAAQof,GAAIvH,GAAQhf,EAASwQ,qBAAxD,SACE,oBACEgW,IAAKlD,EACL3f,MAAO8f,EACPtc,OAAQuc,EACRtU,UAAW/N,EAAa,CAAC4F,EAAOD,KAAMC,EAAO6I,IAAM0T,UAMtD,eAACrf,EAAA,EAAD,CAAKC,GAAI8e,GAAwBvf,EAAOwD,EAAQF,GAAhD,SAA0DsU,ME5NtDkL,GAAY,SAACxkB,GAAD,OACvBA,EAAKrB,KAAI,SAACiB,EAAQ6kB,GAAT,OAAoBzkB,EAAKrB,KAAI,SAAC+lB,EAAQC,GAAT,MAAqB,CAAEF,SAAQE,SAAQ/kB,SAAQ8kB,gBAAYE,QAEtFC,GAAmB,SAACxe,EAAgBye,GAAjB,OAA6Cze,EAAS,EAAIye,GAE7EC,GACX,SAAChY,EAAkBiY,GAAnB,OACA,gBAAGP,EAAH,EAAGA,OAAQE,EAAX,EAAWA,OAAX,OACEvlB,EAAa,EAAE4lB,EAASP,GAAU1X,EAAKrL,MAAOijB,EAAS5X,EAAK7H,WCJnD+f,GAAgB,yBAChBC,GAAgB,8BAChBC,GAAU,wBAKVC,GAA4B,SAACxX,EAAkBxB,GAAnB,MAA2D,CAClG,QAAS,CACPlL,SAAUE,GACVI,QAASf,EACTqgB,KAAK,mBAEP,2BAA4B,CAC1BuE,eAAe,aACf,SAAU,CACR1X,OAAQlN,GAEV,SAAU,CACRkB,QAAQ,SAGZ,2BAA4B,CAC1B0jB,eAAe,aACf3X,KAAK,OACLC,OAAQlN,IAEV,2BAA4B,CAC1B,SAAU,CACRugB,WAAW,OACXtT,KAAK,UAGT,4BAA6B,CAC3B4X,YAAclZ,EAAsCwB,EAAQ,GAAK,IAAhCA,EAAQ,GAAK,IAC9C,8BAA+B,CAC7BF,KAAM1O,EAAUyB,IAChB6kB,YAAa1X,EAAQ,GAAK,MAG9B,iCAAkC,CAChCA,QAAS,KCqBA2X,GACR,EADQA,GAER,EAGQ7W,GAAmE,SAAC,GAkB1E,IAjBLhN,EAiBI,EAjBJA,MACAwD,EAgBI,EAhBJA,OACAgB,EAeI,EAfJA,QACAgb,EAcI,EAdJA,gBACA9M,EAaI,EAbJA,kBACAa,EAYI,EAZJA,kBACAkM,EAWI,EAXJA,sBACAC,EAUI,EAVJA,qBACAhV,EASI,EATJA,iBACAJ,EAQI,EARJA,iBACAE,EAOI,EAPJA,sBACAqG,EAMI,EANJA,cACAuH,EAKI,EALJA,UACAC,EAII,EAJJA,kBACAC,EAGI,EAHJA,gBACA1H,EAEI,EAFJA,QACA1E,EACI,EADJA,QAEM5I,EAASgW,mBAAQ,+BAAU+E,GAAV,aAAoBzN,MAAU,CAACA,IAChD+O,EAAY3e,iBAAoB,MAChCvD,EAAQmiB,aAAa/O,GAEpBiP,EAA4B9f,EAAQsD,EAAOtD,MAA/B+f,EAAsCvc,EAASF,EAAOE,OAEnEsgB,EAA0BlN,uBAAY,WAC1C,IAAMuF,EAAOwD,EAAU1e,QACjBiK,EAAMuI,aAAO0I,GACnBjR,EAAIsB,UxF5FqB,KwF4FMkR,SAE/B,IAAMqG,EAAkBrR,EAAkB/N,OACpC0G,EAAmB,CACvBrL,MAAO8f,EAAaiE,EACpBvgB,OAAQuc,EAAcgE,GAExB,KAAIZ,GAAiB9X,EAAKrL,MAAOqY,GAAqB,GAAK8K,GAAiB9X,EAAK7H,OAAQ8U,GAAmB,GAA5G,CAGA,IAAM2H,EAAkBvB,GAAmBhM,EAAmBlO,GAE9D,EAAyB,CACvB+b,aAAY,CAAClI,EAAmBhN,EAAKrL,MAAQqY,IAC7CkI,aAAY,CAAClV,EAAK7H,OAAS8U,EAAiBA,KAFvC4H,EAAP,KAAe8D,EAAf,KAKA,EAAuB,CAACC,aAAW/D,GAASsC,aAASwB,IAA9CE,EAAP,KAAcC,EAAd,KACAD,EAAME,MAAMP,IAASQ,SAAStE,GAC9BoE,EAAMC,MAAMP,IAASQ,UAAUvE,GAE/B,IAAMwE,EACJ,SAAC1b,EAAgC6Z,GAAjC,OACA,SAAC1kB,EAAWuX,EAAOgN,GACjB1Z,EAAEwX,OAAOH,EAAgBliB,IACzB0V,aAAO6O,EAAShN,IAAQiN,KAAKE,KAQjCvX,EACGsB,UAxEY,UAyEZpO,KAAKsU,GACLgP,QACAC,OAAO1W,GAAaE,GACpByW,KAAK3W,GAAeO,MAAOiY,IAC3B7B,KAAK3W,GAAeQ,WAZ4C,SAAC1N,EAAW+G,GAAZ,OACjEpH,EAAa,EAAEqmB,EAAkB,EAAIjf,GAAOuG,EAAKrL,MAAO,OAYvDqiB,KAAKiC,EAAQpE,EAAQgE,IAGxBhZ,EACGsB,UAjFY,UAkFZpO,KAAKsU,GACLgP,QACAC,OAAO1W,GAAaE,GACpByW,KAAK3W,GAAeO,MAAOiY,IAC3B7B,KAAK3W,GAAeQ,WApB4C,SAAC1N,EAAW+G,GAAZ,OACjEpH,EAAa,CAAC,EAAGoH,EAAMuG,EAAK7H,YAoB3B6e,KAAKiC,EAAQN,EAAQG,IAExB,IAAM1V,EAAUgF,aAAO7V,EAAS6P,KAC1B8W,EAAwC,SAACC,EAAY1f,EAAKwd,GAE9DpC,EAAOE,OAAOH,EAAgBuE,EAAWtmB,SACzC8lB,EAAO5D,OAAOH,EAAgBuE,EAAWxB,SAEzC,IAAMyB,EAAOhR,aAAO6O,EAASxd,IAK7B2f,EACG9C,OAAO1W,GAAaI,MACpBuW,KAAK3W,GAAeO,MD7JN,yBC8JdoW,KAAK3W,GAAeS,EAAG2M,GACvBuJ,KAAK3W,GAAeU,EAAG2M,GACvBsJ,KAAK3W,GAAejL,MAAOmjB,GAAiB9X,EAAKrL,MAAOqY,IACxDuJ,KAAK3W,GAAezH,OAAQ2f,GAAiB9X,EAAK7H,OAAQ8U,IAG7DmM,EACGjY,UAhHc,cAiHdpO,KAAKoG,GACLkd,QACAC,OAAO1W,GAAaG,QACpBwW,KAAK3W,GAAeW,IAlBmC,SAACxN,GAAD,OAAU8hB,EAAO5a,OAAOlH,EAAKomB,EAAWtmB,aAmB/F0jB,KAAK3W,GAAeY,IAlBmC,SAACzN,GAAD,OAAU4lB,EAAO1e,OAAOlH,EAAKomB,EAAWxB,aAmB/FpB,KAAK3W,GAAea,EAAGsM,GACvBwJ,KAAK3W,GAAeO,MAAO+X,IAC3BpC,GAAGhR,GAAa2R,WAAW,WAAmC1jB,GAA8B,IAA9D2jB,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,QACtCvT,EAAQ/I,aAAauc,SAASvU,IAAgBjB,MAAMxB,GAAUiB,QAASwB,IACvEe,EACGyT,KAAK/jB,EAA4BC,GAAMjB,KAAK6hB,KAC5CvS,MAAMxB,GAAU5H,KAAMtG,EAAGglB,IACzBtV,MAAMxB,GAAUkB,IAAKpP,EAAGilB,OAE5Bb,GAAGhR,GAAagS,UAAU,WACzB1T,EAAQ/I,aAAauc,SAASvU,IAAiBjB,MAAMxB,GAAUiB,QAASwB,OAEzEjB,MAAMxB,GAAUe,KAAM+S,GAAiBxL,EAAmB9V,KAGzDgnB,EAAOvZ,EACVsB,UAnIU,QAoIVpO,KAAK0kB,GAAUpQ,IACfgP,QACAC,OAAO1W,GAAaE,GACpByW,KAAK3W,GAAeO,MD9LJ,yBC+LhBoW,KAAK3W,GAAeQ,UAAW4X,GAAyBhY,EAAM0Y,EAAkB,IAChF1B,KAAKkC,GAGRE,EACGlmB,QAAO,SAACimB,GAAD,OAAgBA,EAAWzB,SAAWyB,EAAWvB,UACxDtB,OAAO1W,GAAaxO,MACpBmlB,KAAK3W,GAAeS,EAAG,IAAM2M,GAC7BuJ,KAAK3W,GAAeU,EAAG2M,EAAkB3Y,IACzClD,KAAKuB,GAER,IAAM0mB,EAA4C,CAChDD,KAAM,MAGFE,EAAa,WACjBF,EAAKpC,MAAK,SAAC7a,EAAG1C,EAAKwd,GACjBtB,eAAQ0B,MAAMjP,aAAO6O,EAASxd,SAI5B4b,EAAuB,SAAC,EAAgCc,GAAiC,IAA/DtjB,EAA8D,EAA9DA,OAAQ8kB,EAAsD,EAAtDA,OAClCxB,GACFhC,GAAgB,SAACphB,GAAD,OAAUogB,GAAWgD,EAAWtB,EAAO5a,OAAOlH,EAAKF,KAAW8lB,EAAO1e,OAAOlH,EAAK4kB,UAI/F4B,EAAY5D,eACfG,GAAGjR,GAAYkR,OAAO,SAACyD,EAAD,GAA0F,IAAlD9B,EAAiD,EAAjDA,OAAQE,EAAyC,EAAzCA,OAAQ/kB,EAAiC,EAAjCA,OAAQ8kB,EAAyB,EAAzBA,OACrFtD,EAAqBrjB,EAAS2Q,mBACzB0X,EAASD,MAAQC,EAASD,KAAK1B,SAAWA,GAAU2B,EAASD,KAAKxB,SAAWA,IAChF0B,IACAD,EAASD,KAAO,CAAE1B,SAAQE,UAC1B/C,EAAOE,OAAOH,EAAgB/hB,IAC9B8lB,EAAO5D,OAAOH,EAAgB+C,QAGjC7B,GAAGjR,GAAYmR,MAAM,WAAkDmD,GAA4B,IAA3EhD,EAA0E,EAA1EA,UAClBhX,GAEHkW,EAAqB8D,EADEhD,MAI1BL,GAAGjR,GAAYuR,KAAK,WAAkD+C,GAA4B,IAC3FM,EAD0F,EAA1EtD,UAEtBd,EAAqB8D,EAAYM,GAC5BA,GACHpF,EAAqB,SAGxBb,OAAO,CACN,CAAC,EAAG,GACJ,CAACxT,EAAKrL,MAAOqL,EAAK7H,UAGtBic,GAAsB,WACpBkF,IACAD,EAASD,KAAO,QAGlBA,EAAKlC,KAAKqC,GAGV1Z,EACGsB,UAvMqB,mBAwMrBpO,KAAK0kB,GAAUpQ,IACfgP,QACAC,OAAO1W,GAAaE,GACpByW,KAAK3W,GAAeO,MAAOgY,IAC3B5B,KAAK3W,GAAeQ,UAAW4X,GAAyBhY,EAAM0Y,EAAkB,IAChF1B,KAAKkC,MACP,CACD/f,EACAsb,EACAC,EACA1H,EACAC,EACAkH,EACAjM,EACAb,EACAgN,EACAD,EACAjV,EACA4N,EACA3a,IAuBF,OApBAyZ,qBACE,kBAAM4M,MAEN,CACEpR,EACAa,EACAuM,EACAC,EACA3H,EACAC,EACAC,EACA9N,EACAqG,IAIJrE,aAAU5O,EAAS2lB,KAAmBZ,QDrSb,6BCqSqC,SAACnb,GAAD,OAAQA,EAAyBC,YAE/F6E,GAAehC,EAAkBkZ,IAG/BL,GAAiBrD,EAAapN,EAAkB/N,OAAQ0T,GAAqB,GAC7E8K,GAAiBpD,EAAcrN,EAAkB/N,OAAQ2T,GAAmB,EAErE,eAAC9X,EAAA,EAAD,CAAKC,GAAI8e,GAAwBvf,EAAOwD,EAAQF,GAAhD,SAA0DiV,KAC/D7F,EAAkB/N,Q9BxT+B,E8B0TjD,eAACnE,EAAA,EAAD,CAAKC,GAAIijB,GAA0BxX,EAASxB,GAAmBkY,GAAItH,GAAkBjf,EAAS2Q,mBAA9F,SACE,sBAAKhN,MAAOA,EAAOwD,OAAQA,EAAQof,GAAIvH,GAAQhf,EAAS2Q,mBAAxD,SACE,oBAAG6V,IAAKlD,EAAWlU,UAAW/N,EAAa,CAAC4F,EAAOD,KAAMC,EAAO6I,YAKjE,eAAC3L,EAAA,EAAD,CAAKC,GAAI8e,GAAwBvf,EAAOwD,EAAQF,GAAhD,SAA0DiV,MC9TtDwM,GAAY,SACZC,GAAc,iBAEdC,GAAiB,SAAC/Y,EAAkBiT,GAAnB,MAAwD,CACpF,QAAS,CACPrf,QAASf,EACTqgB,KAAK,mBAEP,YAAa,CACXlT,QAAUiT,EAAmCjT,EAAQ,GAAK,IAAhCA,EAAQ,GAAK,IACvCgP,OAAO,UACP,mBAAoB,CAClBlP,KAAM1O,EAAUyB,IAChBmN,QAASA,EAAQ,GAAK,QCsBfe,GAA6C,SAAC,GAgBpD,IAfLzI,EAeI,EAfJA,QACAxE,EAcI,EAdJA,MACAwD,EAaI,EAbJA,OACAkP,EAYI,EAZJA,kBACAa,EAWI,EAXJA,kBACA7I,EAUI,EAVJA,iBACAgV,EASI,EATJA,qBACAF,EAQI,EARJA,gBACAvI,EAOI,EAPJA,cACAzG,EAMI,EANJA,SACAK,EAKI,EALJA,cACAH,EAII,EAJJA,UACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,QACA1E,EACI,EADJA,QAEM5I,EAASgW,mBAAQ,+BAAU+E,GAAV,aAAoBzN,MAAU,CAACA,IAChD+O,EAAY3e,iBAAoB,MAEhCkkB,EAAkB5L,mBAA8B,+BAAU9U,KAAU,CAACA,IACrE2gB,EAAgB7L,mBACpB,kBAAM4L,EAAgB7U,KAAKD,GAAcI,EAAUyG,MACnD,CAACiO,EAAiBjO,EAAezG,IAG7B/S,EAAQmiB,aAAa/O,GAErBiP,EAAa9f,EAAQsD,EAAOtD,MAC5BolB,EAAuB1U,EAAYC,EACnC0U,EAAqBC,KAAKC,MAAMzF,EAAasF,GAC7CI,EAAuBF,KAAKG,KAAKjhB,EAAQG,OAAS0gB,GAClDtF,EAAcyF,EAAuBJ,EACrCM,EAAchV,EAAY,EAGhClE,aAAU5O,EAASmnB,KAAepC,QAAQqC,IAAgB,SAACxd,GAAD,OAAQA,EAAyBC,YAE3F,IAAMke,EAAe/O,uBAAY,WAC/B,IAAMuF,EAAOwD,EAAU1e,QACjBiK,EAAMuI,aAAO0I,GACnBjR,EAAIsB,U1FvEqB,K0FuEMkR,SAE/B,MAAyB,CACvB6C,aAAY,CAAC,EAAGT,IAAaM,OAAO,CAAC,EAAGiF,IACxC9E,aAAY,CAACR,EAAa,IAAIK,OAAO,CAAC,EAAGoF,KAFpCtF,EAAP,KAAe8D,EAAf,KAKM/D,EX1EgC,SACxCtB,EACAna,EACAohB,GAHwC,IAIxCC,EAJwC,uDAI5B,EAJ4B,OAMxCxnB,OAAO8G,YACLwZ,EAAQ1hB,KAAI,SAACuB,GACX,IAAMogB,EAAmBC,aAAOra,GAAS,SAACgD,GAAD,OAAOlC,OAAOkC,EAAEhJ,OACzD,QAA4BgV,IAAxBoL,EAAiB,GAAkB,MAAM,IAAIE,MAAJ,sCAC7C,IAAMgH,EAAalH,EAAiB,GAAKA,EAAiB,GACpDmH,EAAI,EAAGH,EAAc,IAAOE,EAAaD,EAAY,IAAOC,GAC5DE,EAAgC,CAACpH,EAAiB,GAAKmH,EAAE,GAAInH,EAAiB,GAAKmH,EAAE,IAC3F,MAAO,CAACvnB,EAAKwnB,OW6DSC,CAA2BvT,EAAmBlO,EAAS,GAEzE0hB,EAAsBC,eACtBC,EAAe1T,EAAkBzV,KAAI,SAACc,GAAD,OACzCsoB,aAAY,CAAC,EAAGX,IAActF,OAAOH,EAAgBliB,OAIjDuoB,EAAe,SAACloB,GACpB,IAAM0G,EAAMqgB,EAAcoB,QAAQnoB,GAClC,OAAOV,EAAa,CAClBwiB,EAAOpb,EAAMugB,GAAsBK,EACnC1B,EAAOwB,EAAuBF,KAAKC,MAAMzgB,EAAMugB,IAAuBK,KAGpEc,EAAe,SAACpoB,GAAD,OACnB8nB,EACExT,EAAkBzV,KAAI,SAACuB,EAAKsG,GAAN,MAAc,CACjC,EAAIwgB,KAAKmB,GAAK3hB,EAAO4N,EAAkB/N,OACxCyhB,EAAathB,GAAKQ,OAAOlH,EAAKI,WAI9BiQ,EAAUgF,aAAO7V,EAAS6P,KAChCvC,EACGsB,UA3EK,UA4ELpO,KAAKoG,GACLkd,QACAW,MAAK,SAACjkB,EAAM0G,EAAKwd,GAChB7O,aAAO6O,EAASxd,IACb6c,OAAO1W,GAAaE,GACpBqB,UAAUvB,GAAaK,MACvBlN,KAAK,CAACA,IACNsjB,QACAC,OAAO1W,GAAaK,MACpBsW,KAAK3W,GAAeO,MAAOuZ,IAC3BnD,KAAK3W,GAAezD,EAAGgf,GACvB5E,KAAK3W,GAAeQ,UAAW6a,GAC/BnF,GAAGhR,GAAa2R,WAAW,WAAmC1jB,GAA8B,IAA9D2jB,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,QACtCvT,EAAQ/I,aAAauc,SAASvU,IAAgBjB,MAAMxB,GAAUiB,QAASwB,IACvEe,EACGyT,KAAK/jB,EAA4BC,GAAMjB,KAAK6hB,KAC5CvS,MAAMxB,GAAU5H,KAAMtG,EAAGglB,IACzBtV,MAAMxB,GAAUkB,IAAKpP,EAAGilB,OAE5Bb,GAAGhR,GAAagS,UAAU,WACzB1T,EAAQ/I,aAAauc,SAASvU,IAAiBjB,MAAMxB,GAAUiB,QAASwB,OAEzEyT,GAAGhR,GAAamN,OAAO,SAACuH,EAAe6B,GACtC,IAAMjf,EAAWjD,EAAQvH,KAAI,SAACmB,GAAD,OAAWA,IAASsoB,GAAetoB,EAAKqJ,SAAWrJ,EAAKqJ,YACjFA,EAAS5C,OAAM,SAACrH,GAAD,OAAYA,KAC7BkiB,EAAqB,OAGvBA,EAAqBrjB,EAAS4Q,QAC9BuS,GAAgB,SAACphB,EAAM0G,GAAP,OAAe2C,EAAS3C,UAEzC2H,MAAMxB,GAAUe,KAAM+S,GAAiBxL,EAAmB9V,OAEjE+O,aAAU5O,EAASmnB,KAAepC,QAAQqC,IAAgB,SAACxd,GAAD,OAAQA,EAAyBC,cAC1F,CACDjD,EACA2gB,EACArF,EACAC,EACAP,EACAE,EACA2F,EACAG,EACAE,EACAhT,EACAa,EACA9V,IASF,OANAyZ,qBACE,kBAAMyO,MAEN,CAACjT,EAAmBa,EAAmB0D,EAAezG,EAAUsP,EAAYC,EAAalP,IAGvF6B,EAAkB/N,QtDtKkB,EsDwKpC,eAACnE,EAAA,EAAD,CAAKC,GAAIwkB,GAAe/Y,EAASxB,GAAmBkY,GAAItH,GAAkBjf,EAAS4Q,QAAnF,SACE,sBAAKjN,MAAOA,EAAOwD,OAAQuc,EAAczc,EAAOE,OAAQof,GAAIvH,GAAQhf,EAAS4Q,QAA7E,SACE,oBAAG4V,IAAKlD,EAAWlU,UAAW/N,EAAa,CAAC4F,EAAOD,KAAMC,EAAO6I,YAKjE,eAAC3L,EAAA,EAAD,CAAKC,GAAI8e,GAAwBvf,EAAOwD,EAAQF,GAAhD,SAA0DyN,MC9KtD4V,GAAyB,oBAEzBlD,GAAU,kBACVD,GAAgB,8BAEhBoD,GAA4B,SAAC1a,EAAkBxB,GAAnB,MAA2D,CAClG,QAAS,CACP5K,QAASf,EACTqgB,KAAK,mBAEP,uBAAwB,CACtBlT,QAAUxB,EAAsCwB,EAAQ,GAAK,IAAhCA,EAAQ,GAAK,IAC1C,8BAA+B,CAC7BF,KAAM1O,EAAUyB,IAChBmN,QAASA,EAAQ,GAAK,MAG1B,iCAAkC,CAChCA,QAAS,GAEX,qBAAsB,CACpByX,eAAe,aACf,eAAgB,CACd1X,OAAQlN,MC+BDmO,GAAmE,SAAC,GAkB1E,IAjBLlN,EAiBI,EAjBJA,MACAwD,EAgBI,EAhBJA,OACAgB,EAeI,EAfJA,QACAgb,EAcI,EAdJA,gBACA9M,EAaI,EAbJA,kBACAuG,EAYI,EAZJA,WACAC,EAWI,EAXJA,WACA3F,EAUI,EAVJA,kBACAkM,EASI,EATJA,sBACAC,EAQI,EARJA,qBACAhV,EAOI,EAPJA,iBACAJ,EAMI,EANJA,iBACAE,EAKI,EALJA,sBACAqG,EAII,EAJJA,cACAH,EAGI,EAHJA,UACAE,EAEI,EAFJA,QACA1E,EACI,EADJA,QAEM5I,EAASgW,mBAAQ,+BAAU+E,GAAV,aAAoBzN,MAAU,CAACA,IAChD+O,EAAY3e,iBAAoB,MAChCvD,EAAQmiB,aAAa/O,GAEpBiP,EAA4B9f,EAAQsD,EAAOtD,MAAQ0Q,EAAvCqP,EAAkDvc,EAASF,EAAOE,OAASkN,EAExFmW,EAA0BjQ,uBAAY,WAC1C,IAAMuF,EAAOwD,EAAU1e,QACjBiK,EAAMuI,aAAO0I,GACnBjR,EAAIsB,U5F5EqB,K4F4EMkR,SAE/B,IAAMuC,EAAkBvB,GAAmB,GAAD,oBAAKhM,GAAL,CAAwBuG,EAAYC,IAAa1U,GAE3F,EAAyB,CACvB+b,aAAY,CAAC,EAAGT,IAAaM,OAAOH,EAAgBhH,IACpDsH,aAAY,CAACR,EAAa,IAAIK,OAAOH,EAAgB/G,KAFhDgH,EAAP,KAAe8D,EAAf,KAKMkC,EAAsBC,eACtBC,EAAe1T,EAAkBzV,KAAI,SAACc,GAAD,OACzCsoB,aAAY,CAAC,EAAG3V,EAAY,IAAI0P,OAAOH,EAAgBliB,OAGnDyoB,EAAe,SAACpoB,GAAD,OACnB8nB,EACExT,EAAkBzV,KAAI,SAACuB,EAAKsG,GAAN,MAAc,CACjC,EAAIwgB,KAAKmB,GAAK3hB,EAAO4N,EAAkB/N,OACxCyhB,EAAathB,GAAKQ,OAAOlH,EAAKI,WAI9BiQ,EAAUgF,aAAO7V,EAAS6P,KAC1BqZ,EAAa,SAACjpB,GAAD,OACjBqN,EACGsB,UA3DgB,uBA4DhBpO,KAAKoG,GACLkd,QACAW,MAAK,SAACjkB,EAAM0G,EAAKwd,GAChB7O,aAAO6O,EAASxd,IACb6c,OAAO1W,GAAaE,GACpBqB,UAAUvB,GAAaK,MACvBlN,KAAK,CAACA,IACNsjB,QACAC,OAAO1W,GAAaK,MACpBsW,KAAK3W,GAAeO,MAAO3N,GAC3B+jB,KAAK3W,GAAezD,EAAGgf,GACvB5E,KACC3W,GAAeQ,UACf/N,EAAa,CAACwiB,EAAO5a,OAAOlH,EAAK6a,KAAe+K,EAAO1e,OAAOlH,EAAK8a,QAEpEiI,GAAGhR,GAAa2R,WAAW,WAAmC1jB,GAA8B,IAA9D2jB,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,QACtCvT,EAAQ/I,aAAauc,SAASvU,IAAgBjB,MAAMxB,GAAUiB,QAASwB,IACvEe,EACGyT,KAAK/jB,EAA4BC,GAAMjB,KAAK6hB,KAC5CvS,MAAMxB,GAAU5H,KAAMtG,EAAGglB,IACzBtV,MAAMxB,GAAUkB,IAAKpP,EAAGilB,OAE5Bb,GAAGhR,GAAagS,UAAU,WACzB1T,EAAQ/I,aAAauc,SAASvU,IAAiBjB,MAAMxB,GAAUiB,QAASwB,OAEzEjB,MAAMxB,GAAUe,KAAM+S,GAAiBxL,EAAmB9V,QAEnEqpB,EAAWH,IAEGzb,EACXsB,UAzFK,SA0FLpO,KAAKoG,GACLkd,QACAC,OAAO1W,GAAaE,GACpByW,KAAK3W,GAAeQ,UAAW/N,EAAa,CAAC,EAAGqiB,KAChD6B,KAAK3W,GAAeO,MAAOiY,IACxBlB,KAAK0B,aAAW/D,IACtBhV,EACGsB,UAhGK,SAiGLpO,KAAKoG,GACLkd,QACAC,OAAO1W,GAAaE,GACpByW,KAAK3W,GAAeO,MAAOiY,IAC3BlB,KAAKC,aAASwB,IACjB,IAAMtD,EAAuB,SAACc,GACxBA,GACFhC,GAAgB,SAACphB,GAAD,OACdogB,GAAWgD,EAAWtB,EAAO5a,OAAOlH,EAAK6a,KAAe+K,EAAO1e,OAAOlH,EAAK8a,UAK3E0L,EAAY5D,eACfG,GAAGjR,GAAYkR,OAAO,WACrB1B,EAAqBrjB,EAAS6Q,sBAE/BiU,GAAGjR,GAAYmR,MAAM,YAAsD,IAAnDG,EAAkD,EAAlDA,UAClBhX,GAEHkW,EADuBc,MAI1BL,GAAGjR,GAAYuR,KAAK,YAAsD,IACnEqD,EADkE,EAAlDtD,UAEtBd,EAAqBoE,GAChBA,GACHpF,EAAqB,SAGxBb,OAAO,CACN,EAAEnO,EAAY,GAAIA,EAAY,GAC9B,CAACoP,EAAapP,EAAY,EAAGqP,EAAcrP,EAAY,KAE3DxF,EAAIqX,KAAKqC,GAGTkC,EAAWtD,IACX/D,GAAsB,WACpBuB,eAAQ0B,MAAMxX,QAEf,CACD1G,EACAsb,EACAC,EACAP,EACAE,EACAzG,EACAC,EACAxG,EACAa,EACA7C,EACAjT,EACAgiB,EACAjV,IAuBF,OApBA0M,qBACE,kBAAM2P,MAEN,CACEnU,EACAa,EACAuM,EACAC,EACArP,EACAlG,EACAqG,EACAoI,EACAC,IAIJ1M,aAAU5O,EAAS+oB,KAA4BhE,QD3NtB,6BC2N8C,SAACnb,GAAD,OAAQA,EAAyBC,YAExG6E,GAAehC,EAAkBkZ,IAE7B9Q,EAAkB/N,Q9BlO+B,E8BoOjD,gBAACnE,EAAA,EAAD,CAAKC,GAAImmB,GAA0B1a,EAASxB,GAAmBkY,GAAItH,GAAkBjf,EAAS6Q,mBAA9F,UACE,sBAAKlN,MAAOA,EAAOwD,OAAQA,EAAQof,GAAIvH,GAAQhf,EAAS6Q,mBAAxD,SACE,oBAAG2V,IAAKlD,EAAWlU,UAAW/N,EAAa,CAAC4F,EAAOD,KAAOqN,EAAY,EAAGpN,EAAO6I,IAAMuE,EAAY,QAEpG,eAAClQ,EAAA,EAAD,CAAK3C,UAAW4P,QAIf,eAACjN,EAAA,EAAD,CAAKC,GAAI8e,GAAwBvf,EAAOwD,EAAQF,GAAhD,SAA0DyV,M,sEC5OtDgO,GACF,WCDEC,GAAuB,SAACrN,EAAmBlS,GAApB,MAAoD,CACtFjE,OAAQmW,EACR7Z,QAAS2H,EAAW1I,GAAH,GACjB,0CAA2C,CACzCkoB,WAAY,EACZC,cAAe,KAINC,GAA0C,CACrDC,UAAW,CACT5jB,OAAQ,GACR1D,QAASX,GACTmgB,WAAW,OACX,0CAA2C,CACzC7hB,MAAO0B,IAET,+FAAgG,CAC9F1B,MAAOH,EAAU6B,MAGrBkoB,UAAW,CACTvnB,QAASX,IAEXmoB,aAAc,CACZvnB,QAAS,KCKAoN,GAAmD,SAAC,GAM1D,IALL3I,EAKI,EALJA,QACAkO,EAII,EAJJA,kBACA8M,EAGI,EAHJA,gBACAE,EAEI,EAFJA,qBACA/F,EACI,EADJA,UAEA,EAA0B7R,mBAAmBJ,GAAS+I,KAAtD,oBAAO8W,EAAP,KAAcC,EAAd,KACA,EAA8B1f,mBAAmC4K,EAAkB,IAAnF,oBAAOzC,EAAP,KAAgBwX,EAAhB,KACMvC,EAAkB5L,mBACtB,kBAAM9U,EAAQvH,KAAI,SAACmB,EAA0BkX,GAA3B,oBAAC,gBAA0ClX,GAA3C,IAAiDkX,eACnE,CAAC9Q,IAGG2gB,EAAgB7L,mBACpB,kBAAM4L,EAAgB7U,KAAKD,GAAcmX,EAAOtX,MAChD,CAACiV,EAAiBqC,EAAOtX,IA2BrByX,EAAoB,SAACC,GAAD,OAAwC,YANxC,SAACA,GACzB,IAAMC,EAAQ3X,IAAY0X,GAAYJ,IAAU7f,GAAS+I,IACzD+W,EAASI,EAAQlgB,GAAS4I,KAAO5I,GAAS+I,KAC1CgX,EAAWE,GAIXE,CAAkBF,KAOdG,EAActjB,EAAQjG,QAAO,SAACH,GAAD,OAAUA,EAAKqJ,YAAU9C,OACtDojB,EAAeD,EAAc,GAAKA,EAActjB,EAAQG,OACxDqjB,EAAcF,IAAgBtjB,EAAQG,OAE5C,OAAI+N,EAAkB/N,Q7BvFsB,E6ByFxC,eAACsjB,GAAA,EAAD,UACE,gBAACC,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAW1nB,GAAI0mB,GAAeC,UAA9B,SACE,gBAACgB,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAWtoB,QAASgnB,GAApB,SACE,eAAC1iB,GAAA,EAAD,CAAShE,MAAOwZ,GAAgBC,gBAAhC,SACE,eAAC9G,GAAA,EAAD,CACEvS,GAAI0mB,GAAemB,SACnBC,cAAeR,EACfpe,QAASqe,EACTtf,SAAU,SAACgB,GAA+BA,EAAMb,OAAOc,SAlCvE+V,EAAqBrjB,EAAS8Q,WAC9BqS,GAAgB,kBAAM,MAJpBE,EAAqB,aAyCZhN,EAAkBzV,KAAI,SAACc,GACtB,IA1BYyqB,EA0BNC,EAAkBxY,IAAYlS,EACpC,OACE,eAACsqB,GAAA,EAAD,CAA2BK,gBAAeD,GAAkBlB,EAA5D,SACE,eAACljB,GAAA,EAAD,CAAShE,OA7BDmoB,EA6ByBzqB,EA5BjDkS,IAAYuY,EACR3O,GAAgB0N,IAAU7f,GAAS+I,IAAM/I,GAAS4I,KAAO5I,GAAS+I,KAClEoJ,GAAgBnS,GAAS+I,MA0Bb,SACE,eAACkY,GAAA,EAAD,CACEC,OAAQH,EACRI,UAAWJ,EAAkBlB,EAAQ7f,GAAS+I,IAC9CzM,QAAS0jB,EAAkB3pB,GAH7B,SAKGvB,EAAwBuB,QAPfA,WAexB,eAAC+qB,GAAA,EAAD,CAAWroB,GAAI0mB,GAAeE,UAA9B,SACGlC,EAAcloB,KAAI,SAAC8rB,EAAUjkB,GAC5B,IAAM2C,EAAWjD,EAAQukB,EAASzT,OAAO7N,SACzC,OACE,gBAAC2gB,GAAA,EAAD,CACEY,OAAK,EACLhlB,QAAS,kBA5EEsR,EA4EsByT,EAASzT,WA3ED,IAAnD9Q,EAAQjG,QAAO,SAACH,GAAD,OAAUA,EAAKqJ,YAAU9C,QAAgBH,EAAQ8Q,GAAO7N,SACzEiY,EAAqB,OAGvBA,EAAqBrjB,EAAS8Q,WAC9BqS,GAAgB,SAACphB,EAAM0G,GAAP,OAAgBA,IAAQwQ,GAASlX,EAAKqJ,SAAWrJ,EAAKqJ,cAN9C,IAAC6N,GA8EX7U,GAAIumB,GAAqBrN,EAAWlS,GAJtC,UAME,eAAC4gB,GAAA,EAAD,CAAWtoB,QAASgnB,GAApB,SACE,eAAC/T,GAAA,EAAD,CAAUrJ,QAASlC,MAEpBiL,EAAkBzV,KAAI,SAACc,GAAD,OACrB,eAACsqB,GAAA,EAAD,WjGlIWjqB,EiGkI4C2qB,EAAShrB,GjGlIf,OAATK,EAAA,OAAyB1B,OAAO0B,KiGkIxE,UAAmB0G,EAAnB,YAA0B/G,IjGlIhB,IAACK,OiG2HR0G,aAiBd,eAACtE,EAAA,EAAD,CAAKC,GAAI0mB,GAAeG,aAAxB,SAAuCzN,GAAgB3I,e,6CCrH1DhL,IAA8C,sBACjD7J,EAAS4Q,QAAS,SAAC8Y,EAAGkD,GAAJ,OAAU,eAAC,GAAD,6BAAYlD,GAAQkD,OADC,gBAEjD5sB,EAASwQ,qBAAsB,SAACkZ,EAAGkD,GAAJ,OAAU,eAAC,GAAD,6BAAyBlD,GAAQkD,OAFzB,gBAGjD5sB,EAAS2Q,mBAAoB,SAAC+Y,EAAGkD,GAAJ,OAAU,eAAC,GAAD,6BAAuBlD,GAAQkD,OAHrB,gBAIjD5sB,EAAS6Q,mBAAoB,SAAC6Y,EAAGkD,GAAJ,OAAU,eAAC,GAAD,6BAAuBlD,GAAQkD,OAJrB,gBAKjD5sB,EAAS8Q,WAAY,SAAC4Y,EAAGkD,GAAJ,OAAU,eAAC,GAAD,6BAAelD,GAAQkD,OALL,IAQvCC,GAAyC,SAAC,GAA0D,ICpCjF7b,EAAWC,EDoCctN,EAAuD,EAAvDA,MAAOwD,EAAgD,EAAhDA,OAAQmc,EAAwC,EAAxCA,UAAW7V,EAA6B,EAA7BA,SAAaqf,EAAgB,mBACxGC,EAAQljB,GAAQyZ,GAChB0J,EAAevf,EAAS6V,GAC9B,OAAK0J,EAEH,eAAC7oB,EAAA,EAAD,CAAKC,ICzCuB4M,EDyCHrN,ECzCcsN,EDyCP9J,ECzC+B,CACjExD,MAAOqN,EACP7J,OAAQ8J,EACRgc,UAAU,SACVC,UAAU,SDqCR,SACGH,EAAM,cAAEppB,QAAOwD,OAAQA,ErExCE,GqEwC4B2lB,GAAaE,KAH7C,M,yCEtBfG,GAAyC,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,SAAUppB,EAAqC,EAArCA,MAAOqpB,EAA8B,EAA9BA,eAAmBC,EAAW,mBACtG,EAAgBC,cACd,gBAAG5pB,EAAH,EAAGA,MAAOwD,EAAV,EAAUA,OAAV,OACE,gBAAChD,EAAA,EAAD,CAAKC,GAAIma,GAAcC,SAAvB,UACE,gBAACra,EAAA,EAAD,CAAKC,GAAIma,GAAc7X,OAAQlF,UAAW6O,GAA1C,UACE,eAAC1F,GAAA,EAAD,CAAYvG,GAAIma,GAAcne,KAA9B,SAAqC4D,IACrC,gBAACG,EAAA,EAAD,WACGmpB,EAAKhK,YAActjB,EAAS8Q,WAAa,eAAC,GAAD,CAAgB4E,SAAU4X,EAAKhK,YACzE,eAAC3V,GAAA,EAAD,CAAYhG,QAASylB,EAArB,SACE,eAACI,GAAA,EAAD,YAILH,GAAkB,eAAC,GAAD,cAAM1pB,MAAOA,EAAOwD,OAAQA,EvExB1B,IuEwBsDmmB,SAG/Ehd,IAGF,OAlBA,sB,gKCwBImd,GAAkBC,yBAAcC,MAEzBC,GAAiD,SAAC,GAWxD,IAVLC,EAUI,EAVJA,aACAC,EASI,EATJA,YACApS,EAQI,EARJA,+BACAjO,EAOI,EAPJA,SACAqI,EAMI,EANJA,YACAiY,EAKI,EALJA,oBACAxf,EAII,EAJJA,uBACAyf,EAGI,EAHJA,OACAC,EAEI,EAFJA,UACGC,EACC,mBACJ,EAA4CziB,oBAAS,GAArD,oBAAO0iB,EAAP,KAAuBC,EAAvB,KAEMC,EAAe9T,uBACnB,SAAC+T,GACC,GAAKA,EAAL,CACA,IAAMC,EAAiBD,EAAUpsB,QAAO,SAACN,GAAD,OvGvDnB8T,EuGuDwC9T,EAAKuP,EvGtDrEnP,OAAOrB,OAAOX,GAAuB0f,SAAShK,GADvB,IAACA,KuGwDrBuY,EAAUM,MAEZ,CAACN,IAGGO,EAAUjU,uBACd,SAAC7E,GACCnH,GAAuB,GACvB0f,GAAU,SAACD,GACT,GAAIA,EAAOS,MAAK,SAAC7sB,GAAD,OAAUA,EAAKuP,IAAMuE,KAAW,OAAOsY,EACvD,IAAMU,EAAOV,EAAOW,QAAO,SAACnW,EAAK5W,GAAN,OAAeqnB,KAAKzQ,IAAI5W,EAAK0N,EAAGkJ,KAAM,GAAK,EACtE,MAAM,GAAN,oBAAWwV,GAAX,eAAqB7c,EAAGuE,EAAUrG,EAAG,EAAGC,EAAGof,GAAS3d,GAAwB2E,WAGhF,CAACnH,EAAwB0f,IAGrBW,EAAarU,uBACjB,SAAC7E,GACCuY,GAAU,SAACD,GAAD,OAAYA,EAAO9rB,QAAO,SAACN,GAAD,OAAUA,EAAKuP,IAAMuE,UAE3D,CAACuY,IAGHhe,GAAeie,EAAUjgB,iBAAkBmD,IAE3C,IAAM6M,EAAQ+P,EAAOptB,KAAI,SAACgB,GAAD,OAAUA,EAAKuP,KAElC0d,EADiB7sB,OAAOrB,OAAOX,GAAUkC,QAAO,SAACwT,GAAD,OAAeuI,EAAMyB,SAAShK,MAC/C9U,KAAI,SAACuB,GAAD,MAAU,CAAEA,MAAK0F,MAAOqK,GAAW/P,GAAMuF,KAAM,eAACiH,GAAA,EAAD,QACxF,OACE,gBAACxK,EAAA,EAAD,WACE,eAAC,GAAD,CACEwF,OAAQokB,EACRnkB,QAAS,kBAAM2E,GAAuB,IACtCvK,MAAO2B,GAAiBK,mBACxB6D,QAASglB,EACT9kB,aAAcpE,GAAiBM,SAC/B6D,oBAAqB0kB,IAEvB,eAAC,GAAD,CACE7kB,OAAQkkB,EACR7P,MAAO8P,EACP3lB,QAAS+lB,EAAU/lB,QACnB8V,MAAOA,EACPxQ,SAAUA,EACVqI,YAAaA,EACb4F,+BAAgCA,IAElC,eAACvX,EAAA,EAAD,CAAKC,GAAI+N,GAAcC,QAAS5Q,UAAW4P,KAC3C,eAACqc,GAAD,CACEqB,eAAgBT,EAChBU,gBAAiBxtB,EAAS8O,IAC1B2e,cAAe,kBAAMZ,GAAkB,IACvCa,aAAc,kBAAMb,GAAkB,IACtCc,KxEvGqB,GwEwGrB5R,UxEvGkB,GwEwGlB6R,aAAW,EAPb,SASGnB,EAAOptB,KAAI,SAACud,GAAD,OACV,eAACha,EAAA,EAAD,CAAkB,YAAWga,EAA7B,SACE,eAAC,GAAD,cACEkP,gBAAiBc,EACjBnqB,MAAOkO,GAAWiM,EAAKhN,GACvBic,SAAU,WACR1R,EAA+ByC,EAAKhN,GACpCyd,EAAWzQ,EAAKhN,IAElBmS,UAAWnF,EAAKhN,EAChB1D,SAAUA,GACNygB,KAVE/P,EAAKhN,YCvHZie,GAA0C,CACrDC,KAAM,CACJzE,WAAYlqB,EAAG,IACfU,MAAOuB,KCAE2sB,GAAmC,kBAAM,eAACnrB,EAAA,EAAD,CAAKC,GAAIgrB,GAAeC,KAAxB,SAA+B3pB,MCJxE6pB,GAAwC,CACnDC,KAAM,CACJ5E,WAAYlqB,EAAG,MCCNgM,GAAiC,kBAAM,eAACvI,EAAA,EAAD,CAAKC,GAAImrB,GAAaC,KAAtB,SAA6B9pB,MCapE+pB,GAAqC,WAChD,MAA0ChkB,mBAAS3L,EAAckN,QAAjE,oBAAO0iB,EAAP,KAAsBlkB,EAAtB,KAEA,EAA8BC,mBAAmD,MAAjF,oBAAOtD,EAAP,KAAgBoD,EAAhB,KACA,EAAgCE,mBAAmB,IAAnD,oBAAOgC,EAAP,KAAiBqI,EAAjB,KAEA,EAAyDrK,mBAA0B,MAAnF,oBAAOkkB,EAAP,KAA0BC,EAA1B,KACA,EAA0CnkB,mBAA2B,IAArE,oBAAOokB,EAAP,KAAsBC,EAAtB,KACA,EAAoCrkB,mBAASskB,KAAKC,OAAlD,oBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAAsCzkB,oBAAkB,GAAxD,oBAAOoiB,EAAP,KAAqBsC,EAArB,KACA,EAAgD1kB,oBAAS,GAAzD,oBAAOwC,EAAP,KAAyBC,EAAzB,KACA,EAA0DzC,oBAAS,GAAnE,oBAAO0C,EAAP,KAA8BC,EAA9B,KAEA,EAAsD3C,oBAAS,GAA/D,oBAAOsiB,EAAP,KAA4Bxf,EAA5B,KACA,EAA4B9C,mBAA2ByF,IAAvD,oBAAO8c,EAAP,KAAeC,EAAf,KAEMmC,EAAmB3rB,GAAcorB,GACjCQ,EAAuB5rB,GAAckrB,GAQrCxM,EAAkB,SAACmN,GACnBnoB,IACFA,EAAQiZ,SAAQ,SAACrf,EAAM0G,GACrB1G,EAAKqJ,SAAWklB,EAAYvuB,EAAM0G,MAEpCynB,EAAcH,KAAKC,SAIjBO,EAAkB,WAAiC,IAAhCC,IAA+B,yDAClDA,GACFrN,GAAgB,SAACphB,GAAD,OAAWA,EAAKqJ,UAAW,KAE7CglB,EAAiBxrB,QAAQwc,SAAQ,SAACqP,GAAD,OAAOA,QAmBpC/U,EAAiC,SAAC4H,GAClC+M,EAAqBzrB,UAAY0e,IACnCiN,IACAX,EAA4B,QAU1BvhB,EAAoD,OAAjCgiB,EAAqBzrB,QAExCspB,EAAY,CAChB9K,sBApB4B,SAACyM,GAC7BC,GAAiB,SAAC3Z,GAAD,6BAAcA,GAAd,CAAoB0Z,QAoBrCxM,qBA5BiD,SAACqN,GAC9CL,EAAqBzrB,UAAY8rB,GACnCH,EAAgBG,IAAiB1wB,EAAS8Q,WAAa4f,IAAiB1wB,EAAS4Q,QAEnFgf,EAA4Bc,IAyB5BvN,kBACA8M,aACA5hB,mBACAF,yBA4BF,OACE,uCACE,eAAC,GAAD,CACEJ,WAAY,kBAAMoiB,GAAc,IAChCniB,gBAA6B,OAAZ7F,EACjB8F,iBAAkBA,EAClBC,oBAAqBA,EACrBC,sBAAuBA,EACvBC,yBAlD4C,SAACuiB,GACjDJ,IACAX,EAA4B,MAC5BxhB,EAAyBuiB,IAgDrBtiB,iBAAkBA,EAClBC,aA3EuB,WAC3BshB,EAA4B,MAC5BW,KA0EIhlB,WAlG8B,SAACxJ,GACnC+T,EAAY,IACZvK,EAAWxJ,GACX6tB,EAA4B,OAgGxBpkB,iBAAkBA,EAClB+C,uBAAwBA,IArCxBmhB,IAAkB5vB,EAAckN,OAC3B,eAAC,GAAD,IAEL0iB,IAAkB5vB,EAAc4M,SAAYvE,EAI9C,eAAC,GAAD,cACE0lB,aAAcA,EACd5f,iBAAkBA,EAClB6f,YAAa,kBAAMqC,GAAc,IACjCzU,+BAAgCA,EAChCjO,SAAUA,EACVqI,YAAaA,EACb3N,QAASA,EACT4lB,oBAAqBA,EACrBxf,uBAAwBA,EACxByf,OAAQA,EACRC,UAAWA,GACPC,IAfC,eAAC,GAAD,QCxGA0C,GAAoC,CAC/CC,IAAK,CACH7b,UAAU,SACVK,UAAU,QACVzR,QAAQ,OACRC,cAAc,SACdC,WAAW,UAEbgtB,QAAS,CACPje,SAAU,EACVlP,MAAM,SCHGotB,GAA6B,kBACxC,gBAAC5sB,EAAA,EAAD,CAAKC,GAAIwsB,GAASC,IAAlB,UACE,eAAC,GAAD,IACA,eAAC1sB,EAAA,EAAD,CAAKC,GAAIwsB,GAASE,QAAlB,SACE,eAAC,GAAD,MAEF,eAAC,GAAD,Q,OCPJE,IAASC,OACP,eAAC,aAAD,UACE,eAAC,GAAD,MAEF7R,SAAS8R,eAAT,W","file":"static/js/main.507e5f52.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFileFormat = `unsupportedFileFormat`,\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  DataTable = `DataTable`,\n}\n\nexport const isViewType = (viewType: string): viewType is ViewType =>\n  (Object.values(ViewType) as string[]).includes(viewType)\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim()\n\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface for Selectable data type with index (for sorting etc.)\n */\nexport interface IndexedSelectableDataType extends SelectableDataType {\n  index: number\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  border: `rgba(0, 0, 0, 0.12)`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n  brushColor: `#830606`,\n  brushColorTable: `rgb(252, 207, 207)`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { calc } from '../helpers/d3/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/HeaderText'\n\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { FOOTER_TEXT } from '../../text/FooterText'\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n    <Box sx={footerStyle.text}>\n      &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n    </Box>\n  </Box>\n)\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { Air, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flower = `flower`,\n  bird = `bird`,\n  car = `car`,\n}\n\nexport const sampleDatasetFiles: Record<SampleDataset, string> = {\n  [SampleDataset.flower]: `flowerData.json`,\n  [SampleDataset.bird]: `birdData.json`,\n  [SampleDataset.car]: `carData.json`,\n}\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flower]: <LocalFlorist />,\n  [SampleDataset.bird]: <Air />,\n  [SampleDataset.car]: <DirectionsCar />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flower]: flowerJson,\n  [SampleDataset.bird]: birdJson,\n  [SampleDataset.car]: carJson,\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState } from 'react'\nimport { AutoGraph } from '@mui/icons-material'\nimport { Box } from '@mui/material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadError, DataLoadState } from '../../../../../constants/data/dataLoadState'\nimport { SampleDataset, sampleDatasetIcons, sampleDatasets } from '../../../../../constants/data/sampleDataset'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../../text/SiteText'\n\nimport { getFileReaderBoxStyle } from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\nimport { ClickableButton } from '../buttons/ClickableButton'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: ReadonlyArray<DataType>): ReadonlyArray<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const text = TOP_TOOLBAR_TEXT.fileReader\n  const optionsKeys = Object.values(SampleDataset)\n  const handleListItemClick = (optionKey: SampleDataset) => {\n    setIsSampleDataDialogOpen(false)\n    const dataset = sampleDatasets[optionKey]\n    setDataset(addSelected(dataset))\n    setDataLoadState(DataLoadState.Loaded)\n  }\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={text.sampleDataDialogTitle}\n        options={optionsKeys.map((key) => ({\n          key,\n          label: text.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={text.alertDialog.confirm}\n        alert={true}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={text.sampleDataLabel}\n        />\n        <input\n          type=\"file\"\n          onChange={async (e) => {\n            if (e.target.files?.length) {\n              setDataLoadState(DataLoadState.Loading)\n              const selectedFile = e.target.files[0]\n              const fileType = selectedFile.type\n              let dataset: DataType[] = []\n\n              switch (fileType) {\n                case AcceptableFileTypes.json: {\n                  const text = await selectedFile.text()\n                  dataset = JSON.parse(text)\n                  break\n                }\n                case AcceptableFileTypes.csv: {\n                  const textCsv = await selectedFile.text()\n                  dataset = CsvParse(textCsv)\n                  break\n                }\n                default: {\n                  setDataLoadState(DataLoadState.NoData)\n                  setAlertDialogText(text.alertDialog[DataLoadError.unsupportedFile])\n                  setDataset(null)\n                  setIsAlertDialogOpen(true)\n                  return\n                }\n              }\n              if (!isArrayOfDataType(dataset)) {\n                setDataLoadState(DataLoadState.NoData)\n                setAlertDialogText(text.alertDialog[DataLoadError.unsupportedFileFormat])\n                setDataset(null)\n                setIsAlertDialogOpen(true)\n                return\n              }\n              setDataset(addSelected(dataset))\n              setDataLoadState(DataLoadState.Loaded)\n            }\n          }}\n        />\n      </Box>\n    </>\n  )\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataLoadError } from '../constants/data/dataLoadState'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  addViewDialogTitle: `Add a view`,\n  noOption: `All view options are currently displayed.`,\n  fileReader: {\n    sampleDataLabel: `Try it on the sample data`,\n    sampleDataDialogTitle: `Select sample dataset`,\n    sampleDataDialogText: {\n      [SampleDataset.flower]: `Flower dataset`,\n      [SampleDataset.bird]: `Bird dataset`,\n      [SampleDataset.car]: `Car dataset`,\n    },\n    alertDialog: {\n      [DataLoadError.unsupportedFile]: {\n        title: `File type not supported`,\n        description: `This file type is not supported. Use JSON or CSV file.`,\n      },\n      [DataLoadError.unsupportedFileFormat]: {\n        title: `File format not supported`,\n        description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n      },\n      confirm: `OK`,\n    },\n  },\n  saveText: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    save: `Save`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  right: {\n    display: `flex`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant=\"contained\" onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n\n  padding: isHighlighted ? px(10, 0) : 0,\n  borderRadius: px(10),\n  '& input': {\n    width: px(220),\n  },\n})\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS, ERROR_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  text: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.text}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { SelectableDataType } from '../../types/data/data'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T>(a: T, b: T, orderBy: keyof T) =>\n  b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n\nexport enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n\nexport const getComparator = (sort: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sort === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = (event: MouseEvent<HTMLElement>, checked: string[]) => {\n    if (checked.length && checked[0] === onValue) {\n      return setValue(true)\n    }\n    return setValue(false)\n  }\n  const onValue = `on`\n  return (\n    <ToggleButtonGroup value={value ? [onValue] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={onValue} aria-label={label} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    color: BUTTON_COLORS.buttonOnBackground,\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Settings } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\n\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <IconButton size=\"small\" disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Settings />\n  </IconButton>\n)\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { AddCircle, AutoFixOff, SkipNext } from '@mui/icons-material'\nimport { Info } from '@mui/icons-material'\n\nimport { Box } from '@mui/material'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ToggleButtonSingle\n        icon={<Info />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<AutoFixOff />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n      />\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelAddView}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n    strokeWidth: `stroke-width`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    strokeWidth: `stroke-width`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","import { GridLayoutItem } from '../../types/views/Grid'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { ViewType } from './ViewTypes'\n\nexport const VIEW_BORDER_SIZE = 5\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const HEADER_HEIGHT = 30\n\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 200,\n  height: 200,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n}\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n}\n\nexport const DEFAULT_GRID_LAYOUT: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\n\nexport const MENU_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.DataTable]: `Data Table`,\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { TOOLTIP } from '../../../constants/views/tooltip'\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const dataDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n}\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n","export const CATEGORY_LIMIT = 10\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseActions {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { schemeCategory10 } from 'd3'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { SortType } from '../../helpers/data/comparator'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const dataDrawerMenuStyle: Record<string, SxProps> = {\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<T extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: T) => Partial<T>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <T extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<T>): JSX.Element => {\n  const handleCheckboxChange = (eventChecked: boolean, key: keyof SelectableDataType) => {\n    const newChecked = { ...checked, [key]: eventChecked }\n    setChecked(newChecked)\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as T\n      const newSettings = getNewSettings(newChecked, prevSettings)\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          ...newSettings,\n        },\n      }\n    })\n  }\n  const handleMove = (newAttributesKeys: Array<keyof SelectableDataType>) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setAttributesKeys(newAttributesKeys)\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as T\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n        },\n      }\n    })\n  }\n  const onUpButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  const onDownButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = (categoryAttribute: keyof SelectableDataType | -1) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n        },\n      }\n    })\n  }\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = (newValue: keyof SelectableDataType) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: newValue,\n        },\n      }\n    })\n  }\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const menuTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n    padding: px(6, 5, 3),\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({ margins, setSettings, viewType }) => {\n  const handleMarginChange = (newMargin: number, idx: number) => {\n    const newMargins = [...margins]\n    newMargins[idx] = newMargin\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: newMargins,\n        },\n      }\n    })\n  }\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type=\"number\"\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type=\"number\"\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type=\"number\"\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type=\"number\"\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface NumberInputProps<T> {\n  label: string\n  valueKey: keyof T\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <T,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<T>): JSX.Element => {\n  const handleValueChange = (newValue: number) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: newValue,\n        },\n      }\n    })\n  }\n  const minVal = min ? { min } : { min: 0 }\n  const maxVal = max ? { max } : {}\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type=\"number\"\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={{ inputMode: `numeric`, ...minVal, ...maxVal }}\n        onChange={(e) => handleValueChange(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacity: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({ header, opacity, setSettings, viewType }) => {\n  const handleOpacityChange = (newOpacity: number, idx: number) => {\n    const newOpacities = [...opacity]\n    newOpacities[idx] = newOpacity\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: newOpacities,\n        },\n      }\n    })\n  }\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type=\"number\"\n        defaultValue={opacity[0]}\n        sx={numberInputStyles.textField}\n        inputProps={{ min: 0, max: 100 }}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type=\"number\"\n          defaultValue={opacity[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type=\"number\"\n          defaultValue={opacity[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const getColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { ChangeEvent, Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PALETTE_PICKER } from '../../../../text/views-and-menus/common'\n\nimport {\n  getColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({ colors, setSettings, viewType }) => {\n  const handleSetColor = (event: ChangeEvent<HTMLInputElement>, idx: number) => {\n    const newColor = event.target.value\n    if (newColor) {\n      const newColors = [...colors]\n      newColors[idx] = newColor\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            colorCategory: newColors,\n          },\n        }\n      })\n    }\n  }\n  const getInput = (idx: number) => (\n    <Box sx={palettePickerStyle.col} key={idx}>\n      <label>{PALETTE_PICKER.categoriesLabel[idx]}</label>\n      <Box sx={getColorInputStyle(colors, idx)}>\n        <input type=\"color\" value={colors[idx]} onChange={(e) => handleSetColor(e, idx)} />\n      </Box>\n    </Box>\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = (newValue: T) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: newValue,\n        },\n      }\n    })\n  }\n  return (\n    <Box>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { SortType } from '../../../../helpers/data/comparator'\n\nexport const GlyphsMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n    prevSettings: GlyphsSettings,\n  ): Partial<GlyphsSettings> => {\n    const displayAttributes = getCurrentDisplayAttributes(newChecked)\n    const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n    const sortAttribute = newChecked[prevSettings.sortAttribute]\n      ? prevSettings.sortAttribute\n      : newSortableAttributes?.[0]\n    return { displayAttributes, sortAttribute }\n  }\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacity={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SortType } from '../../../helpers/data/comparator'\n\nimport { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [20, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacity={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `Scatter plot cannot be displayed, window is too small. Change the size, number of attributes displayed or margin to display scatter plot matrix`,\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <Typography sx={menuTextStyle.text}>{SCATTER_PLOT_MATRIX_MENU_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacity={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 10, 20],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport { glyphSizeKey, xAttributeKey, yAttributeKey } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { SCATTER_PLOT_GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createScatterPlotGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n  ): Partial<ScatterPlotGlyphsSettings> => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n  const handleChangeSettings = () => cleanSelectedIfViewWasBrushing(viewType)\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_MENU_TEXT.opacity}\n                  opacity={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\n\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\nexport const DATA_TABLE_DEFAULT: Pick<DataTableSettings, `rowHeight`> = {\n  rowHeight: 45,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { SortType } from '../../helpers/data/comparator'\nimport { MENU_BASE_TEXT, VIEW_NAMES } from './common'\n\nexport const DATA_TABLE_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes him not valid. Please choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascendant`,\n  [SortType.desc]: `Sort descendant`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from the menu.`,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport { DataTableSettings, rowHeightKey } from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_MENU_TEXT } from '../../../../text/views-and-menus/dataTable'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\n\nexport const DataTableMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    attributesKeys.filter((key) => currChecked[key])\n\n  const createDataTableMenu = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{DATA_TABLE_MENU_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.rowHeight}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{DATA_TABLE_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { VisualizationSettings } from './VisualizationSettings'\n\nexport const rowHeightKey = `rowHeight`\n/**\n * Settings for Data Table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, Divider, Drawer, IconButton } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { dataDrawerStyle } from '../../../components-style/content/data-drawer/dataDrawerStyle'\n\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot-matrix/ScatterPlotMatrixMenu'\nimport { ScatterPlotGlyphsMenu } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsMenu'\nimport { DataTableMenu } from '../views/data-table/DataTableMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: VoidFunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const menus = views.map((view, idx) => {\n    switch (view) {\n      case ViewType.Glyphs:\n        return (\n          <GlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ParallelCoordinates:\n        return (\n          <ParallelCoordinatesMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotMatrix:\n        return (\n          <ScatterPlotMatrixMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotGlyphs:\n        return (\n          <ScatterPlotGlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.DataTable:\n        return (\n          <DataTableMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      default:\n        return null\n    }\n  })\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} sx={dataDrawerStyle.drawer}>\n      <Box sx={dataDrawerStyle.header}>\n        <IconButton onClick={close}>\n          <ChevronRight sx={dataDrawerStyle.chevron} />\n        </IconButton>\n      </Box>\n      <Divider />\n      <Box sx={dataDrawerStyle.menu}>{menus.map((menu) => menu)}</Box>\n    </Drawer>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { HEADER_HEIGHT } from '../../../constants/views/common'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  text: {\n    padding: px(0, 8),\n  },\n  header: {\n    height: HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","import { ViewType } from '../views/ViewTypes'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n}\n\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, `http://www.w3.org/2000/svg`)\n  const svgData = svgEl.outerHTML\n  const preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\n  const svgBlob = new Blob([preface, svgData], { type: `image/svg+xml;charset=utf-8` })\n  const svgUrl = URL.createObjectURL(svgBlob)\n  const downloadLink = document.createElement(`a`)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    // eslint-disable-next-line no-console\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n\n  const newStyleNodes = Array.from(document.querySelectorAll(`style`))\n    .filter((e) => e.innerHTML.includes(`.${containerClass}`))\n    .map((style) => style.innerHTML.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n","import { SxProps } from '@mui/system'\nimport { BUTTON_COLORS } from '../../../styles/colors'\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    margin: 0,\n    padding: 0,\n    minWidth: 0,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant=\"contained\" autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant=\"outlined\">\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useState, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { saveSvg } from '../../../helpers/d3/saveSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { inlineButtonStyles } from '../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from './dialogs/ConfirmationDialog'\n\nexport interface DataSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const DataSaveButton: VoidFunctionComponent<DataSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const onConfirm = () => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={TOP_TOOLBAR_TEXT.saveText.header}\n        description={TOP_TOOLBAR_TEXT.saveText.description}\n        onConfirm={onConfirm}\n        onClose={() => setIsDialogOpen(false)}\n        confirmText={TOP_TOOLBAR_TEXT.saveText.confirm}\n        cancelText={TOP_TOOLBAR_TEXT.saveText.cancel}\n      />\n      <Button\n        variant=\"text\"\n        onClick={() => setIsDialogOpen(true)}\n        sx={inlineButtonStyles.button}\n        aria-label={TOP_TOOLBAR_TEXT.saveText.save}\n      >\n        <Tooltip title={TOP_TOOLBAR_TEXT.saveText.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","export const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: [[number, number], [number, number]], cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(`1`)\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(PLOT_COLORS.brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, D3BrushEvent, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataEachG } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\nconst TEXT_Y_SHIFT = 10\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  setDataSelected,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      setDataSelected((data) =>\n        displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        }),\n      )\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const brush = brushY<keyof SelectableDataType>()\n      .extent([\n        [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n        [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n      ])\n      .on(BrushAction.start, () => {\n        setComponentBrushing(ViewType.ParallelCoordinates)\n      })\n      .on(BrushAction.move, (brushEvent: D3BrushEvent<SelectableDataType>, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      })\n      .on(BrushAction.end, (brushEvent: D3BrushEvent<SelectableDataType>, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      })\n\n    const getAxisTransform = (attribute: keyof SelectableDataType) => getTranslate([xScale(String(attribute))!, 0])\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath = (data: SelectableDataType) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n        tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n        tooltip\n          .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n          .style(SVG.style.left, px(clientX))\n          .style(SVG.style.top, px(clientY))\n      })\n      .on(MouseActions.mouseOut, () => {\n        tooltip.transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n      })\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, -TEXT_Y_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{PARALLEL_COORDINATES_TEXT.unavailable}</Box>\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\nexport const getScatterPlotMatrixStyle = (opacity: Opacity, isBrushingActive: boolean): SxProps => ({\n  '& svg': {\n    fontSize: PLOT_FONT.fontSize,\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(PLOT_COLORS.brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  D3BrushEvent,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { DataEachCircle, DataEachG } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  setDataSelected,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachCircle<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachCircle<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n          tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n          tooltip\n            .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n            .style(SVG.style.left, px(clientX))\n            .style(SVG.style.top, px(clientY))\n        })\n        .on(MouseActions.mouseOut, () => {\n          tooltip.transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n        })\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: { cell: MatrixPosition | null } = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        setDataSelected((data) => isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey]))))\n      }\n    }\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, (_: D3BrushEvent<SelectableDataType>, { rowIdx, colIdx, rowKey, colKey }: MatrixItem) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      })\n      .on(BrushAction.move, ({ selection }: D3BrushEvent<SelectableDataType>, matrixItem: MatrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      })\n      .on(BrushAction.end, ({ selection }: D3BrushEvent<SelectableDataType>, matrixItem: MatrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      })\n      .extent([\n        [0, 0],\n        [rect.width, rect.height],\n      ])\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    setDataSelected,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, DUPLICATES_CLASS)\n\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.tooSmall}</Box> // rect not big enough\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getScatterPlotMatrixStyle(opacity, isBrushingActive)} id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}>\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(PLOT_COLORS.brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { HTML } from '../../../../constants/html'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  setDataSelected,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform = (data: SelectableDataType) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath = (data: SelectableDataType) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n            tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n            tooltip\n              .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n              .style(SVG.style.left, px(clientX))\n              .style(SVG.style.top, px(clientY))\n          })\n          .on(MouseActions.mouseOut, () => {\n            tooltip.transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n          })\n          .on(MouseActions.click, (_: MouseEvent, changedData: SelectableDataType) => {\n            const selected = dataset.map((data) => (data === changedData ? !data.selected : data.selected))\n            if (selected.every((value) => !value)) {\n              setComponentBrushing(null)\n              return\n            }\n            setComponentBrushing(ViewType.Glyphs)\n            setDataSelected((data, idx) => selected[idx])\n          })\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{GLYPHS_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotAxis`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\nexport const getScatterPlotGlyphsStyle = (opacity: Opacity, isBrushingActive: boolean): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(PLOT_COLORS.brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  axisBottom,\n  axisLeft,\n  brush,\n  D3BrushEvent,\n  lineRadial,\n  scaleLinear,\n  scaleOrdinal,\n  scaleRadial,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\n\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { isInRanges } from '../../../../helpers/basic/range'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  setDataSelected,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains([...displayAttributes, xAttribute, yAttribute], dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(extentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(extentInDomains[attribute]),\n    )\n\n    const getGlyphPath = (data: SelectableDataType) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n              tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n              tooltip\n                .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n                .style(SVG.style.left, px(clientX))\n                .style(SVG.style.top, px(clientY))\n            })\n            .on(MouseActions.mouseOut, () => {\n              tooltip.transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n            })\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n    axisX.call(axisBottom(xScale))\n    svg\n      .selectAll(AXIS_Y)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .call(axisLeft(yScale))\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        setDataSelected((data) =>\n          isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))),\n        )\n      }\n    }\n\n    const makeBrush = brush()\n      .on(BrushAction.start, () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      })\n      .on(BrushAction.move, ({ selection }: D3BrushEvent<SelectableDataType>) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      })\n      .on(BrushAction.end, ({ selection }: D3BrushEvent<SelectableDataType>) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      })\n      .extent([\n        [-glyphSize / 2, -glyphSize / 2],\n        [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n      ])\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, DUPLICATES_CLASS)\n\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive)} id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n        <Box className={TOOLTIP_CLASS} />\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_GLYPHS_TEXT.unavailable}</Box>\n}\n","interface FormType {\n  checkbox: `checkbox`\n}\n\nexport const FORM: FormType = {\n  checkbox: `checkbox`,\n}\n","import { SxProps } from '@mui/system'\nimport { PLOT_COLORS, TABLE_COLORS } from '../../../../styles/colors'\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nexport const getDataTableRowStyle = (rowHeight: number, selected: boolean): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? PLOT_COLORS.brushColorTable : ``,\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    height: 30,\n    bgcolor: TABLE_COLORS.headerBackground,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n}\n","import { useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Tooltip,\n} from '@mui/material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { IndexedSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable, otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator, SortType } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { FORM } from '../../../../constants/form'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-menus/dataTable'\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  setDataSelected,\n  setComponentBrushing,\n  rowHeight,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const sortableDataset = useMemo<IndexedSelectableDataType[]>(\n    () => dataset.map((data: SelectableDataType, index) => ({ ...data, index })),\n    [dataset],\n  )\n\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(order, orderBy)),\n    [sortableDataset, order, orderBy],\n  )\n\n  const handleSelectClick = (index: number) => {\n    if (dataset.filter((data) => data.selected).length === 1 && dataset[index].selected) {\n      setComponentBrushing(null)\n      return\n    }\n    setComponentBrushing(ViewType.DataTable)\n    setDataSelected((data, idx) => (idx === index ? !data.selected : data.selected))\n  }\n\n  const handleSelectAllClick = (checked: boolean) => {\n    if (!checked) {\n      setComponentBrushing(null)\n      return\n    }\n    setComponentBrushing(ViewType.DataTable)\n    setDataSelected(() => true)\n  }\n\n  const handleRequestSort = (property: keyof SelectableDataType) => {\n    const isAsc = orderBy === property && order === SortType.asc\n    setOrder(isAsc ? SortType.desc : SortType.asc)\n    setOrderBy(property)\n  }\n\n  const createSortHandler = (property: keyof SelectableDataType) => () => {\n    handleRequestSort(property)\n  }\n  const sortTooltipTitle = (headCellId: keyof SelectableDataType) =>\n    orderBy === headCellId\n      ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n      : DATA_TABLE_TEXT[SortType.asc]\n\n  const numSelected = dataset.filter((data) => data.selected).length\n  const someSelected = numSelected > 0 && numSelected < dataset.length\n  const allSelected = numSelected === dataset.length\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHead sx={dataTableStyle.tableHead}>\n            <TableRow>\n              <TableCell padding={FORM.checkbox}>\n                <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                  <Checkbox\n                    sx={dataTableStyle.checkAll}\n                    indeterminate={someSelected}\n                    checked={allSelected}\n                    onChange={(event) => handleSelectAllClick(event.target.checked)}\n                  />\n                </Tooltip>\n              </TableCell>\n              {displayAttributes.map((attribute) => {\n                const orderedByActive = orderBy === attribute\n                return (\n                  <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                    <Tooltip title={sortTooltipTitle(attribute)}>\n                      <TableSortLabel\n                        active={orderedByActive}\n                        direction={orderedByActive ? order : SortType.asc}\n                        onClick={createSortHandler(attribute)}\n                      >\n                        {otherCasesToWhitespaces(attribute)}\n                      </TableSortLabel>\n                    </Tooltip>\n                  </TableCell>\n                )\n              })}\n            </TableRow>\n          </TableHead>\n          <TableBody sx={dataTableStyle.tableBody}>\n            {sortedDataset.map((dataCopy, idx) => {\n              const selected = dataset[dataCopy.index].selected\n              return (\n                <TableRow\n                  hover\n                  onClick={() => handleSelectClick(dataCopy.index)}\n                  key={idx}\n                  sx={getDataTableRowStyle(rowHeight, selected)}\n                >\n                  <TableCell padding={FORM.checkbox}>\n                    <Checkbox checked={selected} />\n                  </TableCell>\n                  {displayAttributes.map((attribute) => (\n                    <TableCell key={`${idx}-${attribute}`}>{dataToReadable(dataCopy[attribute])}</TableCell>\n                  ))}\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { ParallelCoordinatesSettings } from '../../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../../types/views/settings/DataTableSettings'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { VIEW_BORDER_SIZE } from '../../../constants/views/common'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nimport { Settings, SettingsType } from '../../../types/views/settings/Settings'\nimport { ParallelCoordinates } from './parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from './scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from './glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from './scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from './data-table/DataTable'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  component: ViewType\n  settings: Settings\n}\n\ntype ViewElementFunction = (props: Brushable & VisualizationView, settings: SettingsType) => JSX.Element\n\nconst options: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.DataTable]: (p, s) => <DataTable {...p} {...(s as DataTableSettings)} />,\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({ width, height, component, settings, ...dataProps }) => {\n  const graph = options[component]\n  const settingsCurr = settings[component]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","import React, { VoidFunctionComponent, ComponentProps } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, IconButton, Typography } from '@mui/material'\nimport { Close } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { DRAG_HANDLE, HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/views/common'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { DataSaveButton } from '../common/DataSaveButton'\nimport { View } from './View'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isDragFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isDragFinished, ...rest }) => {\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Typography sx={gridItemStyle.text}>{title}</Typography>\n          <Box>\n            {rest.component !== ViewType.DataTable && <DataSaveButton viewType={rest.component} />}\n            <IconButton onClick={onRemove}>\n              <Close />\n            </IconButton>\n          </Box>\n        </Box>\n        {isDragFinished && <View width={width} height={height - HEADER_HEIGHT} {...rest} />}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../helpers/d3/displayDetails'\n\nimport { isViewType, ViewType } from '../../../constants/views/ViewTypes'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/views/common'\nimport { TOOLTIP_CLASS } from '../../../constants/views/tooltip'\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\nimport { VIEW_NAMES } from '../../../text/views-and-menus/common'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[]>>\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nexport const ViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  layout,\n  setLayout,\n  ...viewProps\n}) => {\n  const [isGridChanging, setIsGridResizing] = useState(false)\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => layout.filter((item) => item.i !== viewType))\n    },\n    [setLayout],\n  )\n\n  displayDetails(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={() => setIsGridResizing(true)}\n        onResizeStop={() => setIsGridResizing(false)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isDragFinished={!isGridChanging}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              component={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => <Box sx={emptyDataStyle.site}>{EMPTY_DATA_TEXT.content}</Box>\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const loadingStyle: Record<string, SxProps> = {\n  load: {\n    paddingTop: px(40),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { loadingStyle } from '../../../components-style/content/no-data/loadingStyle'\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={loadingStyle.load}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../views/ViewGrid'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\nimport { GridLayoutItem } from '../../../types/views/Grid'\nimport { DEFAULT_GRID_LAYOUT } from '../../../constants/views/common'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [redrawTime, setRedrawTime] = useState(Date.now())\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[]>(DEFAULT_GRID_LAYOUT)\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = (data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }\n\n  const setDataSelected = (setFunction: (data: SelectableDataType, idx: number) => boolean): void => {\n    if (dataset) {\n      dataset.forEach((data, idx) => {\n        data.selected = setFunction(data, idx)\n      })\n      setRedrawTime(Date.now()) // redraw component\n    }\n  }\n\n  const cleanAllBrushes = (deletePrevSelection = true) => {\n    if (deletePrevSelection) {\n      setDataSelected((data) => (data.selected = false))\n    }\n    cleanBrushingRef.current.forEach((f) => f())\n  }\n\n  const clearBrushesOnButton = () => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }\n\n  const setComponentBrushing: SetComponentBrushing = (newComponent) => {\n    if (componentBrushingRef.current !== newComponent) {\n      cleanAllBrushes(newComponent !== ViewType.DataTable && newComponent !== ViewType.Glyphs)\n    }\n    setCurrentComponentBrushing(newComponent)\n  }\n\n  const registerCleanBrushing = (cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }\n\n  const cleanSelectedIfViewWasBrushing = (component: ViewType) => {\n    if (componentBrushingRef.current === component) {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n    }\n  }\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = (newIsBrushingOnEndOfMove: boolean) => {\n    cleanAllBrushes()\n    setCurrentComponentBrushing(null)\n    setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n  }\n\n  const isBrushingActive = componentBrushingRef.current !== null\n\n  const viewProps = {\n    registerCleanBrushing,\n    setComponentBrushing,\n    setDataSelected,\n    redrawTime,\n    isBrushingActive,\n    isBrushingOnEndOfMove,\n  }\n\n  const getViewGrid = () => {\n    if (dataLoadState === DataLoadState.NoData) {\n      return <EmptyData />\n    }\n    if (dataLoadState === DataLoadState.Loading || !dataset) {\n      return <Loading />\n    }\n    return (\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={() => setDrawerOpen(false)}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        {...viewProps}\n      />\n    )\n  }\n\n  return (\n    <>\n      <TopToolbar\n        openDrawer={() => setDrawerOpen(true)}\n        isToolsDisabled={dataset === null}\n        isDetailsVisible={isDetailsVisible}\n        setIsDetailsVisible={setIsDetailsVisible}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n        setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n        isBrushingActive={isBrushingActive}\n        clearBrushes={clearBrushesOnButton}\n        setDataset={setDatasetAndRemoveBrushing}\n        setDataLoadState={setDataLoadState}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n      />\n      {getViewGrid()}\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}