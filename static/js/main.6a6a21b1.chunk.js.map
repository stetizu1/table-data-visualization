{"version":3,"sources":["app/constants/data/data.ts","app/text/headerText.ts","app/types/data/data.ts","app/helpers/data/formatText.ts","app/helpers/stringGetters.ts","app/styles/colors.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/footerText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/constants/link.ts","app/helpers/react/useUpdatedRef.ts","app/helpers/react/useDebounce.ts","app/constants/data/DataLoadState.ts","app/constants/views-general/ViewType.ts","app/helpers/data/data.ts","app/constants/layout/layout.ts","icons/BrushOffSvg.tsx","icons/TooltipSvg.tsx","app/constants/data/sampleDataset.tsx","app/constants/data/DataLoadError.ts","app/text/siteText.ts","app/constants/sort/SortType.ts","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/constants/mui.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataCheckers.ts","app/helpers/data/dataParsers.ts","app/constants/others.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/components/content/top-toolbar/items/file-reader/NullDialog.tsx","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components-style/content/top-toolbar/items/buttons/colorButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ColorButton.tsx","app/constants/debounce/debounce.ts","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/setDisplay.ts","app/constants/views-general/tooltip.ts","app/text/viewsNames.ts","app/components-style/content/views/viewGridStyle.ts","app/text/settingsDrawerBottomText.ts","app/components-style/content/data-drawer/settingsDrawerStyle.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-settings/common.ts","app/text/views-and-settings/parallelCoordinates.ts","app/components-style/content/data-drawer/settingsDrawerItemStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components-style/content/data-drawer/items/settingsTextStyle.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/helpers/basic/getInputPropsPositiveNumber.ts","app/components/content/data-drawer/items/OpacityInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinatesSettingsComponent.tsx","app/types/views/settings/ParallelCoordinatesSettings.ts","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-settings/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixSettingsComponent.tsx","app/types/views/settings/ScatterPlotMatrixSettings.ts","app/constants/views/glyphs.ts","app/constants/brushing-type/ParallelSetsBrushingType.ts","app/text/views-and-settings/glyphs.ts","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsSettingsComponent.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-settings/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsSettingsComponent.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/constants/views-general/defaultSettableColors.ts","app/text/views-and-settings/dataTable.ts","app/components-style/content/data-drawer/items/colorPickerStyle.ts","app/components/content/data-drawer/items/ColorPicker.tsx","app/components/content/views/data-table/DataTableSettingsComponent.tsx","app/types/views/settings/DataTableSettings.ts","app/constants/views/parallelSetsBundled.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseAction.ts","app/text/views-and-settings/parallelSetsBundled.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundledSettingsComponent.tsx","app/types/views/settings/ParallelSetsBundledSettings.ts","app/components/content/data-drawer/SettingsDrawer.tsx","app/constants/public-path.ts","app/components/content/top-toolbar/items/layout/LayoutDialog.tsx","app/components-style/content/views/gridItemStyle.ts","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/views/togglingYShift.ts","app/helpers/d3/categoryColor.ts","app/helpers/d3/tooltip.ts","app/constants/save/save.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/views/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/helpers/data/comparator.ts","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/constants/views-general/glyphs-general.ts","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTableBody.tsx","app/components/content/views/data-table/DataTable.tsx","lib/d3-sankey/src/align.js","lib/d3-sankey/src/constant.js","lib/d3-sankey/src/sankey.js","lib/d3-sankey/src/sankeyLinkHorizontal.js","app/helpers/data/lineShifts.ts","app/components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundled.tsx","app/constants/views-general/view.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/text/viewTopText.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/grid/items/ViewCloseButton.tsx","app/components-style/content/common/helpDialogStyle.ts","app/components/content/grid/items/ViewHelpButton.tsx","app/helpers/d3/saveSvg.ts","app/components/content/grid/items/ViewSaveButton.tsx","app/components/content/grid/items/GlyphAxesText.tsx","app/components/content/grid/items/DataFilterButton.tsx","app/components/content/grid/GridItem.tsx","app/components/content/grid/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["AcceptableFileTypes","DataNullOptionType","HEADER_TEXT","SelectedKey","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","toLowerCase","dataToReadable","data","px","values","map","val","join","calc","plus","important","border","color","getTranslate","translate","getClass","className","getSpaced","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","Object","keys","filter","key","getLinkDataPointValuesWithLabel","filteredData","from","names","to","count","value","selected","reduce","acc","sel","getNodeDataPointValuesWithLabel","name","countSelected","getLabelledAttribute","label","getDisplayAttributesInParentheses","displayAttributes","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","DIALOG_COLORS","BUTTON_COLORS","CARD_COLORS","VIEW_COLORS","SETTINGS_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","fontSize","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","right","githubIcon","Footer","Typography","Link","href","GitHub","useUpdatedRef","valueRef","useRef","current","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","DataLoadState","ViewType","DATA_NULL_OPTION_TYPES","getAttributeKeys","dataset","getDatasetSample","getDefaultQuantitativeAttributesKeys","getQuantitativeAttributesKeys","every","isNaN","Number","getCategoryAttributesKeys","Set","size","getDefaultAllAttributesChecked","fromEntries","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","getDefaultNominalAttributesChecked","getNominalValueProperties","nominalValuePropertiesArr","containedIdx","findIndex","prev","newNominalValueProperties","sort","a","b","nvp","idx","order","getNominalValuesRecord","brushView","isBrushView","component","ScatterPlotMatrix","ScatterPlotGlyphs","ParallelCoordinates","DRAG_HANDLE","VIEW_DEFAULT_SIZE","height","VIEW_LIMITS","minW","minH","Glyphs","ParallelSetsBundled","DataTable","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT_QUANTITATIVE","i","x","y","DEFAULT_GRID_LAYOUT_NOMINAL","LAYOUT_OPT_2","LAYOUT_OPT_3","LAYOUT_OPT_4","LAYOUT_OPTIONS","BrushOffSvg","forwardRef","props","ref","style","userSelect","fill","flexShrink","viewBox","d","id","displayName","TooltipSvg","strokeWidth","SampleDataset","DataLoadError","SAMPLE_DATASET_OPTIONS","sampleDatasetIcons","flowers","LocalFlorist","birds","Twitter","cars","DirectionsCar","titanic","DirectionsBoat","parallelCars","AirportShuttle","sampleDatasets","flowerJson","birdJson","carJson","titanicJson","parallelCarsJson","SortType","EMPTY_DATA_TEXT","header","subHeader","close","sample","file","viewsHelp","add","layout","tooltip","skip","brush","brushOff","settings","TOP_TOOLBAR_TEXT","noOption","alt","FILE_READER_TEXT","button","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFormat","nullDialog","confirm","optionsText","leave","change","optionsDescription","changeTo","topToolbarStyle","toolbar","flexWrap","separator","margin","borderLeft","left","middle","COMPONENT_TYPE","BUTTON_VARIANT","DRAWER_VARIANT","ANCHOR","CELL_PADDING","DIALOG_MAX_WIDTH","topToolbarButtonStyle","minWidth","ClickableButton","icon","onClick","disabled","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","Array","isArray","length","example","CsvParse","textCsv","parse","output","numValue","HTML","INPUT_TYPE","INPUT_PROPS","positiveNumber","inputMode","min","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","fileReaderStyle","paddingLeft","dialogStyle","dialog","alert","innerContent","contentBox","toggleDialogGroup","marginBottom","toggleDialogButton","flexGrow","attHeader","fontWeight","paddingBottom","textInput","alignSelf","card","opacity","image","cardContent","itemText","SelectionDialog","isOpen","onClose","options","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","NullDialog","nullContainingAttributes","setDataset","att","optionsChosen","setOptionsChosen","replaceValue","setReplaceValue","getFixedDataset","useCallback","newValue","handleNullDialogConfirm","datasetFixed","forEach","handleToggleChange","handleReplaceChange","ToggleButtonGroup","exclusive","onChange","e","optType","ToggleButton","TextField","defaultValue","target","addSelected","FILE_INPUT_ID","FileReader","setDataLoadState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isNullDialogOpen","setIsNullDialogOpen","setNullContainingAttributes","rawDataset","setRawDataset","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionKey","Loaded","closeDialog","getDatasetFromFile","fileType","selectedFile","json","csv","JSON","handleFileChange","files","Loading","type","dataLoadErrorType","NoData","selectableDataset","document","getElementById","AutoGraph","UploadFile","hidden","ON_VALUE","ToggleButtonSingle","setValue","handleChange","event","checked","openSettingsButtonStyle","OpenSettingsButton","Settings","getColorInputStyle","getColorInputBoxStyle","minHeight","ml","colorInputStyle","inputBox","position","ColorButton","handleSetColor","currentColor","setCurrentColor","debouncedColor","disableHoverListener","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","setIsLayoutDialogOpen","removeLayout","brushColor","setBrushColor","AddCircle","Dashboard","SkipNext","Brush","SVG","svg","g","circle","rect","path","div","class","transform","cx","cy","r","stroke","textAnchor","top","none","block","start","end","setDisplay","isVisible","displayClass","selectAll","TOOLTIP_CLASS","TOOLTIP","VIEWS_NAMES","viewGridStyle","pointerEvents","zIndex","SETTINGS_DRAWER_BOTTOM_TEXT","settingsDrawerStyle","drawer","chevron","setting","footer","PARALLEL_COORDINATES_DEFAULT","margins","lineWidth","colorCategory","schemeCategory10","SETTINGS_BASE_TEXT","more","empty","SETTINGS_TEXT","attributes","category","MARGIN_SETTINGS_TEXT","OPACITY_SETTINGS_TEXT","PALETTE_PICKER_SETTINGS_TEXT","categoriesLabel","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_SETTINGS_TEXT","unavailable","settingsDrawerItemStyle","drawerSettings","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleCheckboxChange","eventChecked","newChecked","prevSettings","newSettings","handleMove","newAttributesKeys","onUpButton","onDownButton","FormControlLabel","ArrowDropUp","ArrowDropDown","Checkbox","CategorySelector","handleSelectCategoryChange","categoryAttribute","undefined","select","MenuItem","numberInputStyles","vertical","horizontal","textField","settingsTextStyle","MarginInput","currentMargins","setCurrentMargins","debouncedMargins","handleMarginChange","newMargin","oldMargins","newMargins","inputProps","getInputPropsPositiveNumber","max","minVal","maxVal","OpacityInput","opacities","currentOpacities","setCurrentOpacities","debouncedOpacities","handleOpacityChange","newOpacity","oldOpacities","newOpacities","NumberInput","valueKey","currentValue","setCurrentValue","handleChangeValue","getPalettePickerColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","currentColors","setCurrentColors","debouncedColors","newColor","oldColors","newColors","getInput","ParallelCoordinatesSettingsComponent","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","categoricalAttributes","getCurrentDisplayAttributes","currChecked","createParallelCoordinatesSettings","newQaKeys","defaultCategoryAttribute","newParallelCoordinates","getNewSettingsForAttributeChecker","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_SETTINGS_TEXT","sizes","ScatterPlotMatrixSettingsComponent","scatterPlotMatrixSettings","createScatterPlotMatrixSettings","newScatterPlotMatrix","ParallelSetsBrushingType","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","GLYPHS_TEXT","GLYPHS_SETTINGS_TEXT","sorting","Selector","settingsKey","handleSelectChange","toggleButtonsStyle","box","group","ToggleButtons","handleToggleButtonChange","newSetting","opt","GlyphsSettingsComponent","glyphsSettings","sortableAttributes","createGlyphsSettings","defaultSortAttribute","newGlyphs","sortAttribute","newSortableAttributes","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_SETTINGS_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsSettingsComponent","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsSettings","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","selectedBackgroundColor","selectedFontColor","DATA_TABLE_SETTINGS_TEXT","DATA_TABLE_TEXT","checkboxTooltip","desc","getColorPickerInputStyle","colorPickerStyle","ColorPicker","handleChangeColor","DataTableSettingsComponent","dataTableSettings","createDataTableSettings","newKeys","newDataTableSettings","BrushAction","MouseAction","PARALLEL_SETS_BUNDLED_DEFAULT","tabWidth","tabSpacing","tabGap","brushingType","fontColor","PARALLEL_SETS_BUNDLED_TEXT","PARALLEL_SETS_SETTINGS_TEXT","brushing","ParallelSetsBundledSettingsComponent","parallelSetsBundledSettings","nominalAttributesKeys","setNominalAttributesKeys","createParallelSetsBundledSettings","newCatKeys","newParallelSetsBundled","SettingsDrawer","views","settingsComponents","view","Drawer","anchor","ChevronRight","PUBLIC_IMAGE_PATH","PUBLIC_PATH","LAYOUT_IMAGES","imgName","BRUSHING_IMAGES","address","LayoutDialog","setLayout","lastLayout","layoutItems","Card","CardContent","CardMedia","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","textBox","whiteSpace","overflow","textOverflow","textIcon","GRID_ITEM_HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","Margin","bottom","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getExtendedExtentInDomains","percentDown","percentUp","extentSize","p","finalExtent","TEXT_Y_SHIFTS","odd","even","TOGGLE_Y_SHIFT","Math","getTogglingYShift","_","getCategoryColor","onMouseOverTooltip","stringFunction","clientX","clientY","duration","html","onMouseOutTooltip","SAVE_ID","CONTAINER_SAVE_ID","CONTAINER_EMPTY","PARALLEL_COORDINATES_CLASS","SELECTED_CLASS","AXES_TEXT_CLASS","getParallelCoordinatesStyle","isBrushActive","font","getViewsNotDisplayStyle","refreshViews","registerCleanBrushing","setComponentBrushing","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","node","remove","extentInDomains","xScale","scalePoint","domain","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","onBrush","move","brushEvent","axisName","selection","brushExtent","BRUSH_WIDTH","brushY","on","enter","append","attr","line","mouseOver","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","selLKey","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","clearBrush","brushSelection","makeBrush","descCompare","orderBy","getComparator","GLYPHS_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","onMouseClick","changedData","click","SCATTER_PLOT_GLYPHS_CLASS","AXIS_TEXT_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","linearExtentInDomains","radialExtentInDomains","makeGlyphs","deg","axisX","axisY","getDataTableRowStyle","paddingTop","getFilterDisplayed","showFilter","dataTableStyle","tableHead","tableHeadRow","tableBody","filterCell","filterIcon","notDisplayed","checkboxAll","DataTableBody","handleSelectClick","TableBody","TableRow","hover","TableCell","redrawTime","setOrder","setOrderBy","doResort","setDoResort","filterValues","setFilterValues","filteredDataset","includes","handleSelectAllClick","handleRequestSort","property","isAsc","handleFilterValueChange","createSortHandler","sortTooltipTitle","headCellId","getTableHead","indeterminate","allChecked","TableHead","checkAll","TableSortLabel","active","direction","orderedByActive","sortDirection","FilterListOutlined","TableContainer","Table","container","justify","n","sourceLinks","depth","constant","ascendingSourceBreadth","ascendingBreadth","source","ascendingTargetBreadth","y0","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","get","computeLinkBreadths","y1","link","targetLinks","Sankey","py","linkSort","x0","x1","dx","dy","align","iterations","sankey","apply","arguments","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeHeights","computeNodeBreadths","entries","Map","push","fixedValue","sum","next","columns","kx","layer","computeNodeLayers","c","ky","reorderLinks","initializeNodeBreadths","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","column","v","reorderNodeLinks","resolveCollisions","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","update","nodeId","nodeAlign","nodeSort","nodeWidth","nodePadding","horizontalSource","horizontalTarget","getCurrentWidth","currentCount","all","getStrokeWidth","isBrush","isOverlay","catAttributeValuesCounts","currentWidth","selectedFraction","getSelectionWidth","getYShift","valuesCounts","yFormerShift","valuesCount","formerCount","slice","curr","getYFormerShift","yCatShift","getShift","TABS_CLASS","getParallelSetsBundledStyle","fontColorInner","mixBlendMode","nominalValuesRecord","setNominalValuesRecord","createParallelSetsBundled","displayPairs","getNeighborAttributes","pairWidth","valueCounts","arr","spacesAllMax","isLeft","half","displayPair","pairIdx","spacesPairMax","pairExtent","sankeyLayout","record","attFrom","attTo","toIdxStart","catAttributeOptions","flatMap","idxFrom","idxTo","filtered","getGraph","getPath","linkHorizontal","xShift","connectors","colorCategories","overlay","getViewRecord","s","f","View","dataProps","settingsCurr","overflowX","overflowY","VIEW_TOP_TEXT","cancel","INFO_DIALOG_TEXT","descriptionBrushing","descriptionSettings","descriptionSettingsMore","inlineButton","inlineButtonStyles","buttonClose","buttonActive","ConfirmationDialog","onConfirm","cancelText","ViewCloseButton","onRemove","isDialogOpen","setIsDialogOpen","Close","helpDialogStyle","iconedHeaderBox","brushContainer","topText","iconTextBox","inlineIcon","marginRight","ViewHelpButton","fullWidth","maxWidth","Help","saveSvg","svgContainer","querySelector","containerClass","classList","cls","newStyleNodes","querySelectorAll","sheet","cssRules","rules","cssText","createElement","innerHTML","insertBefore","firstChild","svgEl","fileName","setAttribute","svgBlob","Blob","outerHTML","svgUrl","URL","createObjectURL","downloadLink","download","body","appendChild","removeChild","saveSvgToFile","console","error","getSaveIsDisabled","ViewSaveButton","Save","GlyphAxesText","RotateRight","DataFilterButton","setShowFilter","FilterList","GridItem","isResizeFinished","rest","contextButton","isGlyphs","useSize","ReactGridLayout","WidthProvider","GridLayout","BaseViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","isLayoutDialogOpen","registerCleanBrushingAll","viewProps","viewResizing","setViewResizing","setLastLayout","useWindowSize","windowWidth","windowHeight","updateLayout","newLayout","filteredLayout","addView","posY","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","clean","ViewGrid","memo","emptyDataStyle","content","EmptyData","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","currentRedrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setDatasetAndRemoveBrushing","cleanAllBrushes","deletePrevSelection","clearBrushesOnButton","newComponent","setIsBrushingOnEndOfMoveAndRemoveBrushing","newIsBrushingOnEndOfMove","topToolbarComponent","appStyle","app","App","ReactDOM","render"],"mappings":"unxSAQYA,EAQAC,E,iDCbCC,EACL,0BADKA,EAEC,iDCEDC,EAAW,WCLlBC,EAAgB,wCAMTC,EAA0B,SAACC,GAAD,OACrCC,OAAOD,GAAME,QAAQJ,EAArB,eAAmDK,WAAnD,SAAwEC,OAAOC,eAMpEC,EAAiB,SAACC,GAAD,OAAuC,OAATA,EAAA,OAAyBN,OAAOM,ICD/EC,EAAK,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAiCA,EAAOC,KAAI,SAACC,GAAD,gBAAYA,EAAZ,SAAqBC,KAAhC,MAOtCC,EAAO,SAACL,EAAYM,GAAb,qBAA8CN,EAA9C,gBAAwDM,EAAxD,MAMPC,EAAY,SAACJ,GAAD,gBAAqCA,EAArC,gBAOZK,EAAS,SAACR,EAAYS,GAAb,gBAA0CT,EAA1C,oBAAwDS,IAYjEC,EAAe,SAACC,GAAD,0BAAsDA,EAAU,GAAhE,aAAuEA,EAAU,GAAjF,MAWfC,EAAW,SAACC,GAAD,iBAAmCA,IAM9CC,EAAY,sCAAIb,EAAJ,yBAAIA,EAAJ,uBAAiCA,EAAOG,KAAP,MAM7CW,EAAwB,SAACC,GAAD,OAAiDzB,EAAwByB,IAMjGC,EAAkC,SAACC,GAAD,OAA8BH,EAAsBG,EAAKC,SAO3FC,EAA8B,SAACrB,GAAD,OACzCsB,OAAOC,KAAKvB,GACTwB,QAAO,SAACC,GAAD,OAASA,IAAQnC,KACxBa,KAAI,SAACc,GAAD,YAAe,CAACD,EAAsBC,GAAvB,UAAmCjB,EAAKiB,UAAxC,gBAA8DZ,KAA9D,UAOXqB,EAAkC,SAAC1B,GAC9C,IAAM2B,EAAuC,CAC3CC,KAAM5B,EAAK6B,MAAM,GACjBC,GAAI9B,EAAK6B,MAAM,GACfE,MAAOrC,OAAOM,EAAKgC,OACnBC,SAAUvC,OAAOM,EAAKiC,SAASC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,IAAK,KAEjE,OAAOd,OAAOC,KAAKI,GAAcxB,KAAI,SAACsB,GAAD,gBAAYT,EAAsBS,GAAlC,aAA2CE,EAAaF,QAQlFY,EAAkC,SAACrC,GAC9C,IAAM2B,EAAuC,CAC3CV,UAAWzB,EAAwBQ,EAAKiB,WACxCqB,KAAMtC,EAAKsC,KACXP,MAAOrC,OAAOM,EAAK+B,OACnBE,SAAUvC,OAAOM,EAAKuC,gBAExB,OAAOjB,OAAOC,KAAKI,GAAcxB,KAAI,SAACsB,GAAD,gBAAYT,EAAsBS,GAAlC,aAA2CE,EAAaF,QAQlFe,EAAuB,SAACC,EAAexB,GAAhB,OAClCF,EAAU0B,EAAOjD,EAAwByB,KAM9ByB,EAAoC,SAACC,GAAD,MAC/C,IAAMA,EAAkBxC,KAAI,SAACc,GAAD,OAAezB,EAAwByB,MAAYZ,KAAzE,MAAN,KC9HWuC,EAEN,UAGMC,EACA,UADAA,EAEN,UAGMC,EACA,UADAA,EAEN,UAFMA,EAGJ,yBAGIC,EACN,UAGMC,EACa,UADbA,EAES,UAFTA,EAGW,UAHXA,EAIQ,UAJRA,EAKJ,sBALIA,EAMH,2BANGA,EAOE,sBAPFA,EAQG,UARHA,EASS,UATTA,EAUO,UAVPA,EAWC,UAXDA,EAYJ,sBAZIA,EAaC,UAbDA,EAcY,UAdZA,EAeiB,UAfjBA,EAgBM,UAGNC,EACA,UADAA,EAEK,UAFLA,GAGJ,UAGIC,GACI,UADJA,GAEJ,UAGIC,GACA,UADAA,GAEJ,UAFIA,GAGN,UAHMA,GAIU,UAJVA,GAKgB,UALhBA,GAMM,UANNA,GAOL,UAGKC,GACK,2BADLA,GAED,UAFCA,GAGO,iBAHPA,GAIC,UAJDA,GAKD,UALCA,GAMG,UANHA,GAOH,UAGGC,GACN,UAGMC,GACN,UAGMC,GACJ,UADIA,GAEA,wBAFAA,GAGI,sBAGJC,GACA,UADAA,GAEM,UAFNA,GAGM,UAHNA,GAII,UAJJA,GAKM,UALNA,GAMI,qBCxFJC,GAAuC,CAClDC,gBAAiB,CACfC,QDHS,UCITC,QAAS3D,EAAG,GAAI,GAChB4D,MAAM,OACNC,QAAQ,OACRC,cAAc,MACdC,WAAW,WACXC,eAAe,gBACfvD,MAAOkC,GAETsB,MAAO,CACLC,SAAU7D,EAAK,EAAD,SACdsD,QAAS3D,EAAG,EAAG,KAEjBmE,YAAa,CACXR,QAAS3D,EAAG,EAAG,IACfkE,SAAU7D,EAAK,EAAD,W,QChBL+D,GAAgC,kBAC3C,gBAACC,EAAA,EAAD,CAAKC,GAAId,GAAYC,gBAArB,UACE,eAACY,EAAA,EAAD,CAAKC,GAAId,GAAYS,MAArB,SAA6B7E,IAC7B,eAACiF,EAAA,EAAD,CAAKC,GAAId,GAAYW,YAArB,SAAmC/E,Q,6BCP1BmF,GACJ,gCADIA,GAEJ,UAFIA,GAGN,YAHMA,GAIA,8BAJAA,GAKJ,SCFIC,GAAuC,CAClDC,gBAAiB,CACff,QAASd,EACTnC,MAAOmC,EACPgB,MAAOvD,GAAM,GAAF,QACXsD,QAAS3D,EAAG,GAAI,IAChB6D,QAAQ,OACRG,eAAe,iBAEjBU,MAAO,CACLb,QAAQ,OACRC,cAAc,SACdC,WAAW,YAEbvE,KAAM,CACJ0E,SAAU7D,EAAK,EAAD,SACdI,MAAOyC,GACPW,QAAQ,OACRE,WAAW,UAEbY,WAAY,CACVhB,QAAS3D,EAAG,EAAG,GACfkE,SAAUlE,EAAG,MClBJ4E,GAAgC,kBAC3C,gBAACP,EAAA,EAAD,CAAKC,GAAIE,GAAYC,gBAArB,UACE,gBAACI,GAAA,EAAD,CAAYP,GAAIE,GAAYhF,KAA5B,UACG+E,GACD,gBAACO,GAAA,EAAD,CAAMC,KCXY,yDDWOT,GAAIE,GAAYhF,KAAzC,UACE,eAACwF,GAAA,EAAD,CAAQV,GAAIE,GAAYG,aACvBJ,SAGL,gBAACF,EAAA,EAAD,CAAKC,GAAIE,GAAYE,MAArB,UACE,gBAACL,EAAA,EAAD,CAAKC,GAAIE,GAAYhF,KAArB,UAA4B+E,GAA5B,OACA,gBAACF,EAAA,EAAD,CAAKC,GAAIE,GAAYhF,KAArB,kBACU+E,GADV,KACgCA,a,wBEhBzBU,GAAgB,SAAIlD,GAC/B,IAAMmD,EAAWC,iBAAUpD,GAE3B,OADAmD,EAASE,QAAUrD,EACZmD,GCAIG,GAAc,SAAItD,EAAUuD,GACvC,MAA4CC,mBAASxD,GAArD,oBAAOyD,EAAP,KAAuBC,EAAvB,KASA,OARAC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBH,EAAkB1D,KACjBuD,GACH,OAAO,WACLO,aAAaF,MAEd,CAAC5D,EAAOuD,IACJE,G,mBbXGtG,K,wBAAAA,E,gBAAAA,M,cAQAC,K,cAAAA,E,gBAAAA,E,iBAAAA,M,KASL,IctBK2G,GCAAC,GfsBCC,GAAyB3E,OAAOpB,OAAOd,GgBHvC8G,GAAmB,SAACC,GAAD,OAC9B7E,OAAOC,KAPgB,SAAC4E,GAAD,OAAgDA,EAAQ,GAOnEC,CAAiBD,IAAU3E,QAAO,SAACC,GAAD,OAASA,IAAQnC,MAMpD+G,GAAuC,SAClDF,GADkD,OAEdD,GAAiBC,GAAS3E,QAAO,SAACC,GAAD,MAAS,kBAAO0E,EAAQ,GAAG1E,OAMrF6E,GAAgC,SAC3CH,GAD2C,OAG3CD,GAAiBC,GAAS3E,QAAO,SAACC,GAAD,OAAS0E,EAAQI,OAAM,SAACvG,GAAD,OAAWwG,MAAMC,OAAOzG,EAAKyB,YAM1EiF,GAA4B,SACvCP,GAGA,OADaD,GAAiBC,GAClB3E,QAAO,SAACC,GAElB,OADqB,IAAIkF,IAAIR,EAAQhG,KAAI,SAACH,GAAD,OAAUA,EAAKyB,OACpCmF,MhBjDM,OgByDjBC,GAAiC,SAC5CV,GAEA,IAAM5E,EAAO2E,GAAiBC,GAC9B,OAAO7E,OAAOwF,YAAYvF,EAAKpB,KAAI,SAACsB,GAAD,MAAS,CAACA,GAAK,QAOvCsF,GAA0C,SACrDZ,GAEA,IAAMa,EAAoCX,GAAqCF,GACzEc,EAAqCX,GAA8BH,GAEzE,OAAO7E,OAAOwF,YACZG,EAAmC9G,KAAI,SAACsB,GAAD,MAAS,CAACA,EAAKuF,EAAkCE,MAAK,SAACC,GAAD,OAAQA,IAAO1F,WAQnG2F,GAAqC,SAChDjB,GADgD,OAEf7E,OAAOwF,YAAYJ,GAA0BP,GAAShG,KAAI,SAACsB,GAAD,MAAS,CAACA,GAAK,QAe/F4F,GAA4B,SACvClB,EACAlF,GAFuC,OAIvCkF,EACGjE,QAAO,SAACoF,EAA2BtH,GAClC,IAAMuH,EAAeD,EAA0BE,WAAU,SAACtH,GAAD,OAAYA,EAAOoC,OAAS5C,OAAOM,EAAKiB,OACjG,IAAsB,IAAlBsG,EAAqB,CACvB,IAAME,EAAOH,EAA0BC,GAMvC,OALAD,EAA0BC,GAA1B,6BACKE,GADL,IAEE1F,MAAO0F,EAAK1F,MAAQ,EACpBQ,cAAekF,EAAKlF,eAAiBvC,EAAKiC,SAAW,EAAI,KAEpDqF,EAET,IAAMI,EAAmE,CACvEpF,KAAM5C,OAAOM,EAAKiB,IAClBA,YACAc,MAAO,EACPQ,cAAevC,EAAKiC,SAAW,EAAI,GAGrC,OADAqF,EAAyB,uBAAOA,GAAP,CAAkCI,MAE1D,IACFC,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEvF,KAAOsF,EAAEtF,KAAO,EAAIuF,EAAEvF,KAAOsF,EAAEtF,MAAQ,EAAI,KAC7DnC,KAAI,SAAC2H,EAAKC,GAAN,oBAAC,gBAAmBD,GAApB,IAAyBE,MAAOD,QAM5BE,GAAyB,SAAC9B,GAAD,OACpC7E,OAAOwF,YACLJ,GAA0BP,GAAShG,KAAI,SAACc,GAAD,MAAe,CAACA,EAAWoG,GAA0BlB,EAASlF,U,SFtI7F8E,K,iBAAAA,E,kBAAAA,E,iBAAAA,Q,cCAAC,K,0CAAAA,E,sCAAAA,E,gBAAAA,E,sCAAAA,E,0CAAAA,E,uBAAAA,Q,KAaL,I,MAAMkC,GAAwB,YAYxBC,GAAc,SAACC,GAAD,OACzBA,IAAcpC,GAASqC,mBACvBD,IAAcpC,GAASsC,mBACvBF,IAAcpC,GAASuC,qBEnBZC,GAAW,cAKXC,GAAgC,CAC3C5E,MAAO,EACP6E,OAAQ,GAgBGC,IAA8E,sBACxF3C,GAASuC,oBAAsB,CAC9BK,KAAM,EACNC,KAAM,IAHiF,gBAKxF7C,GAASqC,kBAAoB,CAC5BO,KAAM,EACNC,KAAM,IAPiF,gBASxF7C,GAAS8C,OAAS,CACjBF,KAAM,EACNC,KAAM,IAXiF,gBAaxF7C,GAASsC,kBAAoB,CAC5BM,KAAM,EACNC,KAAM,IAfiF,gBAiBxF7C,GAAS+C,oBAAsB,CAC9BH,KAAM,EACNC,KAAM,IAnBiF,gBAqBxF7C,GAASgD,UAAY,CACpBJ,KAAM,EACNC,KAAM,KAvBiF,IA8B9EI,IAAsG,sBAChHjD,GAASuC,oBADuG,cAE/GW,EAAG,GACHC,EAAG,IACAR,GAAY3C,GAASuC,uBAJuF,gBAMhHvC,GAASqC,kBANuG,cAO/Ga,EAAG,GACHC,EAAG,IACAR,GAAY3C,GAASqC,qBATuF,gBAWhHrC,GAAS8C,OAXuG,cAY/GI,EAAG,GACHC,EAAG,IACAR,GAAY3C,GAAS8C,UAduF,gBAgBhH9C,GAASsC,kBAhBuG,cAiB/GY,EAAG,GACHC,EAAG,IACAR,GAAY3C,GAASsC,qBAnBuF,gBAqBhHtC,GAAS+C,oBArBuG,cAsB/GG,EAAG,GACHC,EAAG,IACAR,GAAY3C,GAAS+C,uBAxBuF,gBA0BhH/C,GAASgD,UA1BuG,cA2B/GE,EAAG,GACHC,EAAG,IACAR,GAAY3C,GAASgD,aA7BuF,IAoCtGI,GAAqD,CAAC,cAE/DC,EAAGrD,GAASuC,oBACZW,EAAG,GACHC,EAAG,GACHG,EAAG,EACHC,EAAG,GACAZ,GAAY3C,GAASuC,sBAPsC,cAU9Dc,EAAGrD,GAASqC,kBACZa,EAAG,GACHC,EAAG,GACHG,EAAG,GACHC,EAAG,GACAZ,GAAY3C,GAASqC,oBAfsC,cAkB9DgB,EAAGrD,GAAS8C,OACZI,EAAG,GACHC,EAAG,GACHG,EAAG,EACHC,EAAG,IACAZ,GAAY3C,GAAS8C,UAOfU,GAAgD,CAAC,cAE1DH,EAAGrD,GAAS+C,oBACZG,EAAG,GACHC,EAAG,GACHG,EAAG,EACHC,EAAG,GACAZ,GAAY3C,GAAS+C,uBAOfU,GAAiC,CAAC,cAE3CJ,EAAGrD,GAASuC,oBACZW,EAAG,GACHC,EAAG,GACHG,EAAG,EACHC,EAAG,GACAZ,GAAY3C,GAASuC,sBAPkB,cAU1Cc,EAAGrD,GAAS+C,oBACZG,EAAG,GACHC,EAAG,GACHG,EAAG,GACHC,EAAG,GACAZ,GAAY3C,GAAS+C,uBAOfW,GAAiC,CAAC,cAE3CL,EAAGrD,GAASuC,oBACZW,EAAG,GACHC,EAAG,GACHG,EAAG,EACHC,EAAG,GACAZ,GAAY3C,GAASuC,sBAPkB,cAU1Cc,EAAGrD,GAASqC,kBACZa,EAAG,GACHC,EAAG,GACHG,EAAG,GACHC,EAAG,GACAZ,GAAY3C,GAASqC,oBAfkB,cAkB1CgB,EAAGrD,GAAS8C,OACZI,EAAG,GACHC,EAAG,GACHG,EAAG,GACHC,EAAG,IACAZ,GAAY3C,GAAS8C,SAvBkB,cA0B1CO,EAAGrD,GAAS+C,oBACZG,EAAG,GACHC,EAAG,GACHG,EAAG,EACHC,EAAG,IACAZ,GAAY3C,GAAS+C,uBAOfY,GAAiC,CAAC,cAE3CN,EAAGrD,GAASuC,oBACZW,EAAG,GACHC,EAAG,GACHG,EAAG,GACHC,EAAG,GACAZ,GAAY3C,GAASuC,sBAPkB,cAU1Cc,EAAGrD,GAASqC,kBACZa,EAAG,GACHC,EAAG,GACHG,EAAG,EACHC,EAAG,GACAZ,GAAY3C,GAASqC,oBAfkB,cAkB1CgB,EAAGrD,GAASsC,kBACZY,EAAG,GACHC,EAAG,GACHG,EAAG,GACHC,EAAG,IACAZ,GAAY3C,GAASsC,qBAOfsB,GAAiB,CAC5BR,GACAI,GACAC,GACAC,GACAC,I,wCC1OWE,GAAcC,sBAAW,SAACC,EAAOC,GAAR,OACpC,eAAC1F,EAAA,EAAD,2BAAK0F,IAAKA,EAAKC,MAAO,CAAEvB,OAAQ,KAAUqB,GAA1C,aACE,uBACEjJ,UAAU,4CACVmJ,MAAO,CACLC,WAAW,OACXrG,MAAM,MACN6E,OAAO,MACP5E,QAAQ,eACRqG,KAAK,eACLC,WAAY,EACZjG,SAAS,UAEX,cAAY,OACZkG,QAAQ,YAZV,UAcE,uBACEC,EAAE,sMACFC,GAAG,UAEL,uBACED,EAAE,iGACFC,GAAG,mBAMXV,GAAYW,YAAZ,eC5BO,IAAMC,GAAaX,sBAAW,SAACC,EAAOC,GAAR,OACnC,eAAC1F,EAAA,EAAD,2BAAK0F,IAAKA,EAAKC,MAAO,CAAEvB,OAAQ,KAAUqB,GAA1C,aACE,sBACEjJ,UAAU,4CACVmJ,MAAO,CACLC,WAAW,OACXrG,MAAM,MACN6E,OAAO,MACP5E,QAAQ,eACRqG,KAAK,eACLC,WAAY,EACZjG,SAAS,UAEX,cAAY,OACZkG,QAAQ,YAZV,SAcE,uBACEE,GAAG,UACHN,MAAO,CAAES,YAAa,GACtBJ,EAAE,8bAMVG,GAAWD,YAAX,a,UClBYG,G,8GAAAA,K,iBAAAA,E,aAAAA,E,WAAAA,E,kBAAAA,E,6BAAAA,Q,KAWL,ICrBKC,G,YDqBCC,GAAyBvJ,OAAOpB,OAAOyK,IAKvCG,IAAsD,sBAChEH,GAAcI,QAAU,eAACC,GAAA,EAAD,KADwC,gBAEhEL,GAAcM,MAAQ,eAACC,GAAA,EAAD,KAF0C,gBAGhEP,GAAcQ,KAAO,eAACC,GAAA,EAAD,KAH2C,gBAIhET,GAAcU,QAAU,eAACC,GAAA,EAAD,KAJwC,gBAKhEX,GAAcY,aAAe,eAACC,GAAA,EAAD,KALmC,IAWtDC,IAAiD,sBAC3Dd,GAAcI,QAAUW,IADmC,gBAE3Df,GAAcM,MAAQU,IAFqC,gBAG3DhB,GAAcQ,KAAOS,IAHsC,gBAI3DjB,GAAcU,QAAUQ,IAJmC,gBAK3DlB,GAAcY,aAAeO,IAL8B,K,SCrClDlB,K,kCAAAA,E,2CAAAA,Q,KCQL,I,GCRKmB,GDQCC,GACH,8HADGA,GAED,6BAFCA,GAGC,CACVC,OAAO,gCACP7H,YAAY,iFACZ8H,UAAU,UACVC,MAAM,QACNC,OAAO,2OACPC,KAAK,kYACLC,UAAU,6GACVC,IAAI,qDACJC,OAAO,wCACPC,QAAQ,yCACRC,KAAK,4MACLC,MAAM,oCACNC,SAAS,gCACTC,SAAS,oCAjBAb,GAmBH,aAMGc,GACH,aADGA,GAEJ,wBAFIA,GAGI,mBAHJA,GAIG,2CAJHA,GAKA,cALAA,GAME,gBANFA,GAOF,WAPEA,GAQA,CACT5I,MAAM,aACN6I,SAAS,6CAVAD,GAYG,CACZ5I,MAAM,kBACN8I,IAAI,WAOKC,GAAmB,CAC9BC,OAAO,gBACPC,gBAAgB,4BAChBC,sBAAsB,wBACtBC,sBAAoB,sBACjB1C,GAAcI,QADG,kCAEjBJ,GAAcM,MAFG,gCAGjBN,GAAcQ,KAHG,+BAIjBR,GAAcU,QAJG,mCAKjBV,GAAcY,aALG,4BAOpB+B,aAAW,sBACR1C,GAAc2C,gBAAkB,CAC/BrJ,MAAM,0BACNE,YAAY,2DAHL,gBAKRwG,GAAc4C,kBAAoB,CACjCtJ,MAAM,4BACNE,YAAY,6JAPL,oCAWXqJ,WAAY,CACVvJ,MAAM,kCACNE,YAAY,qJACZsJ,QAAQ,UACRC,aAAW,sBACRvO,EAAmBwO,MADX,+BAERxO,EAAmBoC,OAFX,0BAGRpC,EAAmByO,OAHX,kBAKXC,oBAAkB,sBACf1O,EAAmBwO,MADJ,+MAEfxO,EAAmBoC,OAFJ,oIAGfpC,EAAmByO,OAHJ,0EAKlBE,SAAS,YACT9M,UAAU,eExFD+M,GAA2C,CACtDC,QAAS,CACPpK,MAAM,OACND,QAAS3D,EAAG,GAAI,GAChB6D,QAAQ,OACRG,eAAe,gBACfD,WAAW,UACXL,QAASb,EACTpC,MAAOoC,EACPoL,SAAS,QAEXC,UAAW,CACTzF,OAAO,OACP0F,OAAQnO,EAAG,EAAG,GACdoO,WAAY5N,EAAO,EAAGqC,IAExBwL,KAAM,CACJxK,QAAQ,OACRsK,OAAQnO,EAAG,EAAG,IACd+D,WAAW,UAEbuK,OAAQ,CACNzK,QAAQ,OACRE,WAAW,UAEbW,MAAO,CACLb,QAAQ,OACRE,WAAW,W,oBC9BFwK,GACL,MADKA,GAEL,QAGKC,GACN,OADMA,GAEF,WAFEA,GAGD,YAGCC,GAEA,aAIAC,GAGL,QAIKC,GACF,WADEA,GAEN,OAGMC,GAGT,KC7BSC,GAAiD,CAC5D5B,OAAQ,CACNkB,OAAQnO,EAAG,EAAG,GACd2D,QAAS3D,EAAG,GACZ8O,SAAU,EACV3E,WAAY,EACZ,uBAAwB,CACtBzG,QAASX,EACTtC,MAAOsC,EACPvC,OAAQA,EAAO,EAAGuC,IAEpB,0CAA2C,CACzCW,QAASX,EACTtC,MAAOsC,EACP,UAAW,CACTW,QAASX,GAEX,4CAA6C,CAC3CW,QAASX,EACTtC,MAAOsC,MCTFgM,GAAsD,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,SAAU1M,EAA5B,EAA4BA,MAA5B,OACjE,eAAC2M,GAAA,EAAD,CAAQC,QAASZ,GAA0BS,QAASA,EAAS3K,GAAIuK,GAAsB5B,OAAQiC,SAAUA,EAAzG,SACE,eAACG,GAAA,EAAD,CAASpL,MAAOzB,EAAhB,SAAwBwM,O,kDCZfM,GAAc,SAACvN,GAAD,MACzB,kBAAOA,GAAsB,kBAAOA,GAAsB,mBAAOA,GAAiC,OAAVA,GAM7EwN,GAAoB,SAACrJ,GAChC,GAAIsJ,MAAMC,QAAQvJ,IAAYA,EAAQwJ,OAAS,EAAG,CAChD,IAAMC,EAAUzJ,EAAQ,GAClB5E,EAAOD,OAAOC,KAAKqO,GACzB,OAAOzJ,EAAQI,OACb,SAACvG,GAAD,OAAUsB,OAAOC,KAAKvB,GAAMuG,OAAM,SAAC9E,EAAKsG,GAAN,OAActG,IAAQF,EAAKwG,OAASzG,OAAOpB,OAAOF,GAAMuG,MAAMgJ,OAGpG,OAAO,G,UCbIM,GAAW,SAACC,GAAD,OACtBC,iBAAMD,EAAS,CAAEE,OAAO,YAAc7P,KAAI,SAACH,GAAD,OACxCsB,OAAOwF,YACLxF,OAAOC,KAAKvB,GAAMG,KAAI,SAACsB,GACrB,IAAMO,EAAQhC,EAAKyB,GACnB,GAAI,SAAAO,EAAMlC,eAAiC,KAALkC,EAAc,MAAO,CAACP,EAAK,MACjE,GAAI,SAAAO,EAAMlC,cAA0B,MAAO,CAAC2B,GAAK,GACjD,GAAI,UAAAO,EAAMlC,cAA2B,MAAO,CAAC2B,GAAK,GAClD,IAAMwO,EAAWxJ,OAAOzE,EAAMrC,QAAN,UACxB,OAAK6G,MAAMyJ,GACJ,CAACxO,EAAKO,GADgB,CAACP,EAAKwO,WCZ9BC,GACH,QAMGC,GACL,QADKA,GAEJ,SAFIA,GAGN,OAMMC,GAAuD,CAClEC,eAAgB,CAAEC,UAAU,UAAYC,IAAK,IChBlCC,GAAwB,SAACC,GAAD,MAAsC,CACzEC,WAAW,gBACXjQ,OAAwBA,EAAhBgQ,EAAuB,EAAoC,EAAjClN,IAClCI,QAAS8M,EAAgBlN,GAA6BA,GACtDO,QAAQ,OACRE,WAAW,SACXJ,QAAS6M,EAAgBxQ,EAAG,EAAG,GAAK,EACpC0Q,aAAc1Q,EAAG,MAGN2Q,GAA2C,CACtD1D,OAAQ,CACNkB,OAAQnO,EAAG,EAAG,EAAG,EAAG,GACpB2D,QAAS3D,EAAG,EAAG,GAAI,EAAG,GACtB8O,SAAU,EACVpL,QAASX,EACTtC,MAAOsC,EACP,UAAW,CACTW,QAASX,GAEX,SAAU,CACR6N,YAAa5Q,EAAG,IAElB,4BAA6B,CAC3B2D,QAAS3D,EAAG,EAAG,GACf,SAAU,CACR6D,QAAQ,W,gFC1BHgN,GAAuC,CAClDC,OAAQ,CACN,mBAAoB,CAClBhC,SAAU9O,EAAG,OAGjB+Q,MAAO,CACLtQ,MAAO4C,IAETc,YAAa,CACXR,QAAS3D,EAAG,GAAI,GAAI,IACpBS,MAAO2C,IAET4N,aAAc,CACZrN,QAAS3D,EAAG,EAAG,GAAI,KAErBiR,WAAY,CACVxI,OAAQzI,EAAG,KACX6D,QAAQ,OACRC,cAAc,UAEhBtE,KAAM,CACJiB,MAAO2C,IAET8N,kBAAmB,CACjBtN,MAAM,OACNuN,aAAcnR,EAAG,GACjB6D,QAAQ,QAEVuN,mBAAoB,CAClBC,SAAU,EACV1N,QAAS3D,EAAG,GACZ,iBAAkB,CAChB0D,QAASX,EACTtC,MAAOsC,EACP,UAAW,CACTW,QAASX,KAIfkK,OAAQ,CACNkB,OAAQnO,EAAG,EAAG,GAAI,KAEpBsR,UAAW,CACTpN,SAAUlE,EAAG,IACbuR,WAAW,OACXC,cAAexR,EAAG,GAClBS,MAAO2C,IAETqO,UAAW,CACT3C,SAAS,MACT4C,UAAU,SACV,wBAAyB,CACvBvD,OAAQnO,EAAG,GAAI,EAAG,IAEpB,UAAW,CACT2D,QAAS3D,EAAG,EAAG,GAAI,KAGvB2R,KAAM,CACJ9N,QAAQ,OACRG,eAAe,gBACf8K,SAAU9O,EAAG,KACbQ,OAAQA,EAAO,EAAGwC,IAClBmL,OAAQnO,EAAG,GACX0D,QAASV,EACT,UAAW,CACTU,QAASnD,EAAUyC,GACnB,QAAS,CACP4O,QAAS,KAGb,4BAA6B,CAC3B9C,SAAU,IAGd+C,MAAO,CACLjO,MAAO,IACP6E,OAAQ,GACRiI,aAAc1Q,EAAG,IAEnB8R,YAAa,CACXnO,QAAS3D,EAAG,KAEd+R,SAAU,CACR7N,SAAUlE,EAAG,MC9DJgS,GAAkB,gBAC7BC,EAD6B,EAC7BA,OACAC,EAF6B,EAE7BA,QACAjO,EAH6B,EAG7BA,MACAkO,EAJ6B,EAI7BA,QACAC,EAL6B,EAK7BA,oBACAC,EAN6B,EAM7BA,aAN6B,OAQ7B,gBAACC,GAAA,EAAD,CAAQJ,QAASA,EAASK,KAAMN,EAAQ3N,GAAIuM,GAAYC,OAAxD,UACE,eAAC0B,GAAA,EAAD,UAAcvO,IACd,eAACwO,GAAA,EAAD,IACA,gBAACC,GAAA,EAAD,WACGP,EAAQjS,KAAI,SAACyS,GAAD,OACX,gBAACC,GAAA,EAAD,CAAU3F,QAAM,EAACgC,QAAS,kBAAMmD,EAAoBO,EAAOnR,MAA3D,UACE,eAACqR,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,UAASH,EAAO3D,SAElB,eAAC+D,GAAA,EAAD,CAAcC,QAASL,EAAOnQ,UAJsC/C,OAAOkT,EAAOnR,UAOpF2Q,EAAQzC,QAAU,eAAC7K,GAAA,EAAD,CAAYP,GAAIuM,GAAY1M,YAA5B,SAA0CkO,W,8BCnCvDY,GAAmE,SAAC,GAAD,IAC9EhB,EAD8E,EAC9EA,OACAC,EAF8E,EAE9EA,QACAjO,EAH8E,EAG9EA,MACAE,EAJ8E,EAI9EA,YACA+O,EAL8E,EAK9EA,YAL8E,IAM9EnC,aAN8E,gBAQ9E,gBAACuB,GAAA,EAAD,CAAQJ,QAASA,EAASK,KAAMN,EAAhC,UACE,eAACO,GAAA,EAAD,UAAcvO,IACd,eAACwO,GAAA,EAAD,IACA,eAACU,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,CAAmB9O,GAAIyM,EAAQF,GAAYE,MAAQ,GAAnD,SAAwD5M,MAE1D,eAACkP,GAAA,EAAD,UACE,eAAClE,GAAA,EAAD,CAAQF,QAASiD,EAASoB,WAAS,EAAnC,SACGJ,U,8BCKIK,GAAqD,SAAC,GAM5D,IALLtB,EAKI,EALJA,OACAC,EAII,EAJJA,QACAsB,EAGI,EAHJA,yBACAtN,EAEI,EAFJA,QACAuN,EACI,EADJA,WAEA,EAA0ClO,mBACxClE,OAAOwF,YAAY2M,EAAyBtT,KAAI,SAACwT,GAAD,MAAS,CAACA,EAAKvU,EAAmBwO,YADpF,oBAAOgG,EAAP,KAAsBC,EAAtB,KAGA,EAAwCrO,mBACtClE,OAAOwF,YAAY2M,EAAyBtT,KAAI,SAACwT,GAAD,MAAS,CAACA,EAAD,SAD3D,oBAAOG,EAAP,KAAqBC,EAArB,KAIApO,qBAAU,WACRkO,EAAiBvS,OAAOwF,YAAY2M,EAAyBtT,KAAI,SAACwT,GAAD,MAAS,CAACA,EAAKvU,EAAmBwO,YACnGmG,EAAgBzS,OAAOwF,YAAY2M,EAAyBtT,KAAI,SAACwT,GAAD,MAAS,CAACA,EAAD,WACxE,CAACF,IAEJ,IAAMO,EAAkBC,uBACtB,SAAC9N,EAA+BlF,GAC9B,OAAQ2S,EAAc3S,IACpB,KAAK7B,EAAmBoC,OACtB,OAAO2E,EAAQ3E,QAAO,SAACxB,GAAD,OAA8B,OAApBA,EAAKiB,MACvC,KAAK7B,EAAmByO,OACtB,IAAMqG,EAAY1N,MAAMC,OAAOqN,EAAa7S,KAExC6S,EAAa7S,GADbwF,OAAOqN,EAAa7S,IAExB,OAAOkF,EAAQhG,KAAI,SAACH,GAAD,oBAAC,gBACfA,GADc,mBAEhBiB,EAAgC,OAApBjB,EAAKiB,GAAsBiT,EAAWlU,EAAKiB,QAG5D,KAAK7B,EAAmBwO,MACxB,QACE,OAAOzH,KAGb,CAACyN,EAAeE,IAGZK,EAA0BF,uBAAY,WAC1C,IAAIG,EAAqCjO,EACzCsN,EAAyBY,SAAQ,SAACpT,GAChCmT,EAAeJ,EAAgBI,EAAcnT,MAE/CyS,EAAWU,KACV,CAACjO,EAAS6N,EAAiBP,EAA0BC,IAElDY,EAAqBL,uBACzB,SAACjS,EAAkCf,GAAnC,OACE4S,GAAiB,SAACpM,GAAD,oBAAC,gBACbA,GADY,mBAEdxG,EAAYe,GAAgByF,EAAKxG,UAEtC,IAEIsT,EAAsBN,uBAC1B,SAACjS,EAAef,GAAhB,OACE8S,GAAgB,SAACtM,GAAD,oBAAC,gBACZA,GADW,mBAEbxG,EAAYe,SAEjB,IAGF,OACE,gBAACuQ,GAAA,EAAD,CAAQJ,QAASA,EAASK,KAAMN,EAAhC,UACE,eAACO,GAAA,EAAD,UAAcxF,GAAiBQ,WAAWvJ,QAC1C,eAACwO,GAAA,EAAD,IACA,gBAACU,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAmB9O,GAAIuM,GAAY1M,YAAnC,SAAiD6I,GAAiBQ,WAAWrJ,cAC5EqP,EAAyBtT,KAAI,SAACc,GAC7B,IAAM2R,EAASgB,EAAc3S,GAC7B,OACE,gBAACqD,EAAA,EAAD,CAAqBC,GAAIuM,GAAYG,aAArC,UACE,eAACnM,GAAA,EAAD,CAAYP,GAAIuM,GAAYS,UAA5B,SACG/O,EAAqByK,GAAiBQ,WAAWxM,UAAWA,KAE/D,eAACuT,GAAA,EAAD,CACEjQ,GAAIuM,GAAYK,kBAChBnP,MAAO4Q,EACP6B,WAAS,EACTC,SAAU,SAACC,EAAG3S,GAAJ,OAAcsS,EAAmBtS,EAAOf,IAJpD,SAMGgF,GAAuB9F,KAAI,SAACyU,EAAS7M,GAAV,OAC1B,eAAC8M,GAAA,EAAD,CAActQ,GAAIuM,GAAYO,mBAAoBrP,MAAO4S,EAAzD,SACG3H,GAAiBQ,WAAWE,YAAYiH,IAD4B7M,QAK3E,gBAACzD,EAAA,EAAD,CAAKC,GAAIuM,GAAYI,WAArB,UACE,eAACpM,GAAA,EAAD,CAAYP,GAAIuM,GAAYrR,KAA5B,SAAmCwN,GAAiBQ,WAAWK,mBAAmB8E,KACjFA,IAAWxT,EAAmByO,QAC7B,eAACiH,GAAA,EAAD,CACErS,MAAOwK,GAAiBQ,WAAWM,SACnCxJ,GAAIuM,GAAYY,UAChBqD,aAAcjB,EAAa7S,GAC3ByT,SAAU,SAACC,GAAD,OAAOJ,EAAoBI,EAAEK,OAAOhT,MAAOf,WAvBnDA,SA+BhB,eAACqS,GAAA,EAAD,UACE,eAAClE,GAAA,EAAD,CAAQC,QAASZ,GAA0BS,QAASiF,EAAyB5P,GAAIuM,GAAY5D,OAAQqG,WAAS,EAA9G,SACGtG,GAAiBQ,WAAWC,gBCnG1BuH,GAAc,SAACjV,GAAD,OACzBA,EAAKG,KAAI,SAACmK,GAAD,oBAAC,gBAAYA,GAAb,IAAgBrI,UAAU,QAE/BiT,GAAa,aAENC,GAAqD,SAAC,GAAqD,IAAnDzB,EAAkD,EAAlDA,WAAY0B,EAAsC,EAAtCA,iBAAkB3E,EAAoB,EAApBA,cACjG,EAA4DjL,oBAAS,GAArE,oBAAO6P,EAAP,KAA+BC,EAA/B,KAEA,EAAgD9P,oBAAS,GAAzD,oBAAO+P,EAAP,KAAyBC,EAAzB,KACA,EAAgEhQ,mBAA0C,IAA1G,oBAAOiO,EAAP,KAAiCgC,EAAjC,KACA,EAAoCjQ,mBAAoC,IAAxE,oBAAOkQ,EAAP,KAAmBC,EAAnB,KAEA,EAAkDnQ,oBAAS,GAA3D,oBAAOoQ,EAAP,KAA0BC,EAA1B,KACA,EAA8CrQ,mBAAwD,MAAtG,oBAAOsQ,EAAP,KAAwBC,EAAxB,KAEM1D,EAAsB4B,uBAC1B,SAAC+B,GACCV,GAA0B,GAE1B5B,EAAWuB,GADKxJ,GAAeuK,KAE/BZ,EAAiBrP,GAAckQ,UAEjC,CAACb,EAAkB1B,IAGfwC,EAAcjC,uBAAY,WAC9BuB,GAAoB,GACpBG,EAAc,IACdF,EAA4B,MAC3B,IAEGU,EAAqBlC,sBAAW,yCACpC,WAAOmC,EAAwCC,GAA/C,kBAAAzO,EAAA,2DACUwO,EADV,cAESjX,EAAoBmX,KAF7B,SAMSnX,EAAoBoX,IAN7B,kCAGyBF,EAAa5W,OAHtC,cAGYA,EAHZ,yBAIa+W,KAAKzG,MAAMtQ,IAJxB,uBAO4B4W,EAAa5W,OAPzC,cAOYqQ,EAPZ,yBAQaD,GAASC,IARtB,iCAWa,MAXb,4CADoC,wDAgBpC,IAGI2G,EAAmBxC,sBAAW,yCAClC,WAAOU,GAAP,4BAAA/M,EAAA,mEACM+M,EAAEK,OAAO0B,aADf,QACM,EAAgB/G,OADtB,wBAEIyF,EAAiBrP,GAAc4Q,SACzBN,EAAe1B,EAAEK,OAAO0B,MAAM,GAC9BN,EAAWC,EAAaO,KAJlC,SAK0BT,EAAmBC,EAAUC,GALvD,UAOoB,QAFVlQ,EALV,SAO6BqJ,GAAkBrJ,GAP/C,wBAQY0Q,EAAgC,OAAZ1Q,EAAmByE,GAAc2C,gBAAkB3C,GAAc4C,kBAC3F4H,EAAiBrP,GAAc+Q,QAC/Bf,EAAmB9I,GAAiBK,YAAYuJ,IAChDhB,GAAqB,GACrBnC,EAAW,MAZjB,8BAgBUqD,EAAoB9B,GAAY9O,KAChCsN,EAA2BvN,GAAiB6Q,GAAmBvV,QAAO,SAACmS,GAAD,OAC1ExN,EAAQe,MAAK,SAAClH,GAAD,OAAwB,OAAdA,EAAK2T,UAEDhE,OApBjC,wBAqBM8F,EAA4BhC,GAC5BkC,EAAcoB,GACdvB,GAAoB,GACLwB,SAASC,eAAe/B,IAChClT,MAAQ,KAzBrB,2BA4BI0R,EAAWqD,GACX3B,EAAiBrP,GAAckQ,QA7BnC,4CADkC,sDAiClC,CAACE,EAAoBf,EAAkB1B,IAGzC,OACE,uCACE,eAAC,GAAD,CACExB,OAAQmD,EACRlD,QAAS,kBAAMmD,GAA0B,IACzCpR,MAAO+I,GAAiBG,sBACxBgF,QAASvH,GAAuB1K,KAAI,SAACsB,GAAD,MAAU,CAC5CA,MACAgB,MAAOwK,GAAiBI,qBAAqB5L,GAC7CwN,KAAMnE,GAAmBrJ,OAE3B4Q,oBAAqBA,IAEvB,eAAC,GAAD,CACEH,OAAQ0D,EACRzD,QAAS,kBAAM0D,GAAqB,IACpC3R,MAAK,OAAE4R,QAAF,IAAEA,OAAF,EAAEA,EAAiB5R,MACxBE,YAAW,OAAE0R,QAAF,IAAEA,OAAF,EAAEA,EAAiB1R,YAC9B+O,YAAalG,GAAiBK,YAAYI,QAC1CsD,OAAO,IAET,eAAC,GAAD,CACEkB,OAAQqD,EACRpD,QAAS,WACPiD,EAAiBrP,GAAc+Q,QAC/BZ,KAEFzC,yBAA0BA,EAC1BtN,QAASuP,EACThC,WAAY,SAACvN,GACXuN,EAAWvN,GACXiP,EAAiBrP,GAAckQ,QAC/BC,OAGJ,gBAAC5R,EAAA,EAAD,CAAKC,GAAIiM,GAAsBC,GAA/B,UACE,eAAC,GAAD,CACEvB,QAAS,kBAAMoG,GAA0B,IACzCrG,KAAM,eAACiI,GAAA,EAAD,IACNzU,MAAOwK,GAAiBE,kBAE1B,gBAACiC,GAAA,EAAD,CAAQ7K,GAAIqM,GAAgB1D,OAAQmC,QAASZ,GAA0BrG,UAAWoG,GAAlF,UACE,eAACc,GAAA,EAAD,CAASpL,MAAO+I,GAAiBC,OAAjC,SACE,eAACiK,GAAA,EAAD,MAEF,gCAAOlK,GAAiBC,SACxB,wBAAO0J,KAAMzG,GAAiBiH,QAAM,EAAC7M,GAAI2K,GAAeR,SAAU+B,cClKtEY,GAAQ,KAEDC,GAA+D,SAAC,GAMtE,IALLrI,EAKI,EALJA,KACAjN,EAII,EAJJA,MACAuV,EAGI,EAHJA,SACA9U,EAEI,EAFJA,MACA0M,EACI,EADJA,SAEMqI,EAAevD,uBACnB,SAACwD,EAAgCC,GAC/B,OAAIA,EAAQ/H,QAAU+H,EAAQ,KAAOL,GAC5BE,GAAS,GAEXA,GAAS,KAElB,CAACA,IAEH,OACE,eAAC/C,GAAA,EAAD,CAAmBxS,MAAOA,EAAQ,CAACqV,IAAY,GAAI3C,SAAU8C,EAA7D,SACE,eAAC3C,GAAA,EAAD,CAActQ,GAAIuK,GAAsB5B,OAAQlL,MAAOqV,GAAUlI,SAAUA,EAA3E,SACE,eAACG,GAAA,EAAD,CAASpL,MAAOzB,EAAhB,SAAwBwM,S,UC7BnB0I,GAAmD,CAC9D9K,SAAU,CACRuB,OAAQnO,EAAG,EAAG,GAAI,EAAG,GACrB2D,QAAS3D,EAAG,GACZS,MAAOsC,EACP+L,SAAU,EACV,QAAS,CACP5K,SAAUlE,EAAG,KAEf,kBAAmB,CACjBS,MAAOsC,KCJA4U,GAAqE,SAAC,GAAD,IAAGzI,EAAH,EAAGA,SAAUqD,EAAb,EAAaA,KAAb,OAChF,eAACpD,GAAA,EAAD,CAAQD,SAAUA,EAAUD,QAASsD,EAAMjO,GAAIoT,GAAwB9K,SAAvE,SACE,eAACyC,GAAA,EAAD,CAASpL,MAAO4I,GAAhB,SACE,eAAC+K,GAAA,EAAD,SCTOC,GAAqB,SAAC3I,GAAD,MAAkC,CAClErL,QAAQ,OACR,qBAAsB,CACpBpD,MAAOyO,EAAWnM,EAA6BA,KAItC+U,GAAwB,SAACrX,EAAeyO,GAAhB,MAAiD,CACpFxL,QAASwL,EAAWnM,EAA6BtC,EACjDqO,SAAU9O,EAAG,IACb+X,UAAW/X,EAAG,IACd0Q,aAAc1Q,EAAG,GACjBgY,GAAIhY,EAAG,GACPQ,OAAQA,EAAO,EAAG0O,EAAWnM,EAAwCA,KAG1DkV,GAA2C,CACtDC,SAAU,CACRC,SAAS,WACT,UAAW,CACTvU,MAAM,OACNgO,QAAS,EACTuG,SAAS,WACT9J,KAAM,KCPC+J,GAAuD,SAAC,GAM9D,IALL3X,EAKI,EALJA,MACA4X,EAII,EAJJA,eACA7L,EAGI,EAHJA,QACA0C,EAEI,EAFJA,SACAF,EACI,EADJA,KAEA,EAAwCzJ,mBAAS9E,GAAjD,oBAAO6X,EAAP,KAAqBC,EAArB,KACMC,EAAiBnT,GAAYiT,ECjBP,IDsB5B,OAJA5S,qBAAU,WACR2S,EAAeG,KACd,CAACA,EAAgBH,IAGlB,eAAChJ,GAAA,EAAD,CAASpL,MAAOuI,EAASiM,qBAAsBvJ,EAA/C,SACE,gBAAC7K,EAAA,EAAD,CAAKC,GAAI2T,GAAgBC,SAAzB,UACE,wBACEhJ,SAAUA,EACVyH,KAAMzG,GACNnO,MAAOtB,EACPgU,SAAU,SAACC,GAAD,OAAO6D,EAAgB7D,EAAEK,OAAOhT,UAE5C,gBAACsC,EAAA,EAAD,CAAKC,GAAIuT,GAAmB3I,GAA5B,UACGF,EACD,eAAC3K,EAAA,EAAD,CAAKC,GAAIwT,GAAsBrX,EAAOyO,cETnCwJ,GAAqD,SAAC,GAAD,IAChEC,EADgE,EAChEA,WACAC,EAFgE,EAEhEA,gBACAC,EAHgE,EAGhEA,iBACAC,EAJgE,EAIhEA,oBACAC,EALgE,EAKhEA,sBACAC,EANgE,EAMhEA,yBACAC,EAPgE,EAOhEA,iBACAC,EARgE,EAQhEA,aACAzF,EATgE,EAShEA,WACA0B,EAVgE,EAUhEA,iBACAgE,EAXgE,EAWhEA,uBACAC,EAZgE,EAYhEA,sBACAC,EAbgE,EAahEA,aACAC,EAdgE,EAchEA,WACAC,EAfgE,EAehEA,cAfgE,OAiBhE,gBAAClV,EAAA,EAAD,CAAKC,GAAIyJ,GAAgBC,QAAzB,UACE,gBAAC3J,EAAA,EAAD,CAAKC,GAAIyJ,GAAgBM,KAAzB,UACE,eAAC,GAAD,CACEW,KAAM,eAACwK,GAAA,EAAD,IACNvK,QAAS,kBAAMkK,GAAuB,IACtCjK,SAAU0J,EACVpW,MAAOqK,KAET,eAAC,GAAD,CACEoC,QAAS,WACPmK,GAAsB,GACtBC,KAEFrK,KAAM,eAACyK,GAAA,EAAD,IACNvK,SAAU0J,EACVpW,MAAOqK,KAET,eAACxI,EAAA,EAAD,CAAKC,GAAIyJ,GAAgBG,YACzB,eAAC,GAAD,CACEc,KAAM,eAACxE,GAAD,IACNzI,MAAO8W,EACPvB,SAAUwB,EACV5J,SAAU0J,EACVpW,MAAOqK,KAET,eAAC,GAAD,CACEmC,KAAM,eAAC0K,GAAA,EAAD,IACN3X,MAAOgX,EACPzB,SAAU0B,EACV9J,SAAU0J,EACVpW,MAAOqK,QAGX,gBAACxI,EAAA,EAAD,CAAKC,GAAIyJ,GAAgBO,OAAzB,UACE,eAAC,GAAD,CACE7N,MAAO6Y,EACPjB,eAAgB,SAAC5X,GAAD,OAAW8Y,EAAc9Y,IACzCuO,KAAM,eAAC2K,GAAA,EAAD,IACNzK,SAAU0J,EACVpM,QAASK,KAEX,eAACxI,EAAA,EAAD,CAAKC,GAAIyJ,GAAgBG,YACzB,eAAC,GAAD,CACEc,KAAM,eAACpF,GAAD,IACNqF,QAASiK,EACThK,UAAW+J,EACXzW,MAAOqK,QAGX,gBAACxI,EAAA,EAAD,CAAKC,GAAIyJ,GAAgBrJ,MAAzB,UACE,eAAC,GAAD,CAAY+O,WAAYA,EAAY0B,iBAAkBA,EAAkB3E,cAAeoI,IACvF,eAAC,GAAD,CAAoBrG,KAAMoG,EAAYzJ,SAAU0J,W,iDCtGzCgB,GACD,CACRC,IAAI,MACJC,EAAE,IACFC,OAAO,SACPC,KAAK,OACLC,KAAK,OACLza,KAAK,OACL0a,IAAI,OARKN,GAUC,CACVO,MAAM,QACN9P,EAAE,IACF+P,UAAU,YACV/Q,EAAE,IACFC,EAAE,IACF1F,MAAM,QACN6E,OAAO,SACP4R,GAAG,KACHC,GAAG,KACHC,EAAE,IACFC,OAAO,SACP/P,YAAY,eACZgQ,WAAW,eAvBFb,GAyBJ,CACL1P,KAAK,OACLsQ,OAAO,SACP5I,QAAQ,UACRvD,KAAK,OACLqM,IAAI,MACJ7W,QAAQ,WA/BC+V,GAiCH,CACNe,KAAK,OACLC,MAAM,QACNC,MAAM,QACNC,IAAI,MACJxM,OAAO,UC3BEyM,GAAa,SAACC,EAAgCC,GACrDD,EACFE,aAAUta,EAASqa,IAAejR,MAAM4P,GAAU/V,QAAS+V,GAAWgB,OAGxEM,aAAUta,EAASqa,IAAejR,MAAM4P,GAAU/V,QAAS+V,GAAWe,OChB3DQ,GAAa,gBAKbC,GACF,EADEA,GAEA,EAFAA,GAGH,IAHGA,GAIF,ICPEC,IAAqC,sBAC/CtV,GAASuC,oBADsC,wCAE/CvC,GAASqC,kBAFsC,uCAG/CrC,GAAS8C,OAHsC,0BAI/C9C,GAASsC,kBAJsC,uCAK/CtC,GAAS+C,oBALsC,kDAM/C/C,GAASgD,UANsC,kBCCrCuS,GAAyC,CACpD9O,QAAS,CACP2L,SAAS,QACTxU,QAAS3D,EAAG,EAAG,EAAG,IAClB0D,QAASP,GACT1C,MAAO0C,GACPuN,aAAc1Q,EAAG,GACjBub,cAAc,OACd3J,QAAS,EACT4J,OAAQ,K,oBCZCC,GACC,yCADDA,GAEN,OCCMC,GAA+C,CAC1DC,OAAQ,CACN/X,MAAO5D,EAAG,KACVmK,WAAY,EACZ,qBAAsB,CACpBzG,QAASR,GACTU,MAAO5D,EAAG,KACV+D,WAAW,WACXvD,OAAQA,EAAO,EAAG0C,KAEpB,OAAQ,CACNU,MAAM,QAER,sBAAuB,CACrBD,QAAS3D,EAAG,GAAI,GAAI,KAGxBkK,KAAM,CACJmH,SAAU,GAEZrF,OAAQ,GACR4P,QAAS,CACPnb,MAAOyC,IAET2Y,QAAS,CACPjY,MAAM,OACNC,QAAQ,OACRC,cAAc,SACduN,SAAU,GAEZyK,OAAQ,CACNlY,MAAOvD,GAAM,GAAF,QACXsD,QAAS3D,EAAG,KAEdR,KAAM,CACJiB,MAAOyC,GACPgB,SAAUlE,EAAG,IAEfiN,OAAQ,CACN6B,SAAU,I,wCChCDiN,GAGT,CACFC,QAAS,CAAC,GAAI,GAAI,GAAI,IACtBC,UAAW,EACXrK,QAAS,CAAC,GAAI,GAAI,IAClBsK,cAAeC,MCbJC,GAAqB,CAChCC,KAAK,eACLC,MAAM,SAMKC,GAAa,cACxBC,WAAW,sBACXC,SAAS,cACNL,IAMQM,GACJ,SADIA,GAEP,MAFOA,GAGL,QAHKA,GAIJ,SAJIA,GAKN,OAMMC,GACP,sBADOA,GAEF,WAFEA,GAGC,eAMDC,GAA+B,CAC1C5Q,OAAO,kBACP6Q,gBAAiB,CAAC,KAAD,gDCnCNC,GACC,oKAMDC,GAAkC,cAC7C/Q,OAAQqP,GAAYtV,GAASuC,qBAC7B0U,YAAY,iKACZpL,QAAQ,mBACRqK,UAAU,cACPM,ICjBQU,GAAmD,CAC9DC,eAAgB,CACdtZ,MAAOvD,GAAM,GAAF,QACXsD,QAAS3D,EAAG,IACZ6D,QAAQ,OACRC,cAAc,SACdqZ,UAAU,OACVzZ,QAASR,GACT1C,OAAQA,EAAO,EAAG0C,IAClBwN,aAAc1Q,EAAG,GACjBod,aAAc5c,EAAO,EAAG0C,IACxB,OAAQ,CACNka,aAAc5c,EAAO,EAAG0C,IACxBgB,SAAU,GACVN,MAAM,QAER,OAAQ,CACNuK,OAAQnO,EAAG,EAAG,EAAG,IAEnB,UAAW,CACTkE,SAAS,QACTzD,MAAOyC,IAET,8BAA+B,CAC7BS,QAAS3D,EAAG,EAAG,KAEjB,uBAAwB,CACtB2D,QAAS,GAEX,UAAW,CACT0Z,UAAWrd,EAAG,MAGlBsd,yBAA0B,CACxB3Z,QAAS3D,EAAG,IACZkE,SAAUlE,EAAG,IACbS,MAAO4C,IAETka,UAAW,CACT,kBAAmB,CACjB7M,aAAc,GAEhB,wBAAyB,CACvBqH,UAAW,EACXrU,QAASR,GACT,iBAAkB,CAChB6U,UAAW,IAGf,iCAAkC,CAChC5J,OAAQnO,EAAG,EAAG,EAAG,GACjB,iBAAkB,CAChBmO,OAAQnO,EAAG,EAAG,EAAG,KAGrB,8BAA+B,CAC7B2D,QAAS,EACT,gBAAiB,CACfA,QAAS3D,EAAG,EAAG,O,wCC5DVwd,GAAiD,CAC5DC,QAAS,CACP5Z,QAAQ,OACRC,cAAc,UAEhB4Z,QAAS,CACPvP,OAAQnO,EAAG,EAAG,GACd2D,QAAS,EACTmL,SAAU,EACVrG,OAAQ,KCaCkV,GAAmB,YAUgB,IAT9CC,EAS6C,EAT7CA,SACAC,EAQ6C,EAR7CA,eACAC,EAO6C,EAP7CA,qBACAC,EAM6C,EAN7CA,eACAC,EAK6C,EAL7CA,YACAxb,EAI6C,EAJ7CA,MACAiV,EAG6C,EAH7CA,QACAwG,EAE6C,EAF7CA,WACAC,EAC6C,EAD7CA,kBAEMC,EAAuBnK,uBAC3B,SAACoK,EAAuB5c,GACtB,IAAM6c,EAAU,6BAAQ5G,GAAR,mBAAkBjW,EAAM4c,IACxCH,EAAWI,GACPP,GAAsBA,IAC1BE,GAAY,SAACxW,GACX,IAAM8W,EAAe9W,EAAKoW,GACpBW,EAAcR,EAAeM,EAAYC,GAC/C,OAAO,6BACF9W,GADL,mBAEGoW,EAFH,6BAGOU,GACAC,UAKX,CAAC9G,EAASsG,EAAgBD,EAAsBG,EAAYD,EAAaJ,IAErEY,EAAaxK,uBACjB,SAACyK,GACKX,GAAsBA,IAC1BI,EAAkBO,GAClBT,GAAY,SAACxW,GACX,IAAM8W,EAAe9W,EAAKoW,GAC1B,OAAO,6BACFpW,GADL,mBAEGoW,EAFH,6BAGOU,GAHP,IAII5b,kBAAmB+b,EAAkBld,QAAO,SAACC,GAAD,OAASiW,EAAQjW,eAKrE,CAACiW,EAASqG,EAAsBI,EAAmBF,EAAaJ,IAG5Dc,EAAa1K,uBACjB,SAAClM,GACC,IAAM2W,EAAiB,aAAOZ,GADf,EAEyC,CAACY,EAAkB3W,GAAM2W,EAAkB3W,EAAM,IAAvG2W,EAAkB3W,EAAM,GAFX,KAEe2W,EAAkB3W,GAFjC,KAGf0W,EAAWC,KAEb,CAACZ,EAAgBW,IAGbG,EAAe3K,uBACnB,SAAClM,GACC,IAAM2W,EAAiB,aAAOZ,GADf,EAEyC,CAACY,EAAkB3W,GAAM2W,EAAkB3W,EAAM,IAAvG2W,EAAkB3W,EAAM,GAFX,KAEe2W,EAAkB3W,GAFjC,KAGf0W,EAAWC,KAEb,CAACZ,EAAgBW,IAGnB,OACE,uCACE,iCAAQhc,IACPqb,EAAe3d,KAAI,SAACsB,EAAKsG,GAAN,OAClB,eAAC8W,GAAA,EAAD,CACElB,QACE,uCACE,gBAACrZ,EAAA,EAAD,CAAKC,GAAIkZ,GAAsBC,QAA/B,UACE,eAACtO,GAAA,EAAD,CAAQF,QAAS,kBAAMyP,EAAW5W,IAAMoH,SAAkB,IAARpH,EAAWxD,GAAIkZ,GAAsBE,QAAvF,SACE,eAACmB,GAAA,EAAD,MAEF,eAAC1P,GAAA,EAAD,CACEF,QAAS,kBAAM0P,EAAa7W,IAC5BoH,SAAUpH,IAAQ+V,EAAenO,OAAS,EAC1CpL,GAAIkZ,GAAsBE,QAH5B,SAKE,eAACoB,GAAA,EAAD,SAGJ,eAACC,GAAA,EAAD,CAAUtH,QAASA,EAAQjW,GAAMiT,SAAU,SAACC,GAAD,OAAOyJ,EAAqBzJ,EAAEK,OAAO0C,QAASjW,SAG7FgB,MAAOjD,EAAwBiC,IAlBjC,gBAmBgBoc,EAnBhB,YAmB4B9V,W,UC9FvBkX,GAAiE,SAAC,GAOxE,IANLpB,EAMI,EANJA,SACA7b,EAKI,EALJA,MACA8b,EAII,EAJJA,eACAG,EAGI,EAHJA,YACAxb,EAEI,EAFJA,MACAsb,EACI,EADJA,qBAEMmB,EAA6BjL,uBACjC,SAACkL,GACKpB,GAAsBA,IAC1BE,GAAY,SAACxW,GACX,IAAM8W,EAAe9W,EAAKoW,GAC1B,OAAO,6BACFpW,GADL,mBAEGoW,EAFH,6BAGOU,GAHP,IAIIY,mBAA0C,IAAvBA,OAA2BC,EAAYD,WAKlE,CAAClB,EAAaJ,EAAUE,IAG1B,OACE,gBAACjJ,GAAA,EAAD,CAAW9S,MAAK,OAAEA,QAAF,IAAEA,KAAU,EAAG0S,SAAU,SAACC,GAAD,OAAOuK,EAA2BvK,EAAEK,OAAOhT,QAAQqd,QAAM,EAAC5c,MAAOA,EAA1G,UACGqb,EAAe3d,KAAI,SAACsB,EAAKsG,GAAN,OAClB,eAACuX,GAAA,EAAD,CAAUtd,MAAOP,EAAjB,SACGjC,EAAwBiC,IAD3B,mBAAuCoc,EAAvC,YAAmD9V,OAIrD,eAACuX,GAAA,EAAD,CAAUtd,OAAQ,EAAlB,SAAsBwa,GAAcD,YCjD7BgD,GAA6C,CACxDC,SAAU,CACR1b,QAAQ,OACRC,cAAc,UAEhB0b,WAAY,CACV3b,QAAQ,OACRC,cAAc,OAEhB2b,UAAW,CACT,wBAAyB,CACvBtR,OAAQnO,EAAG,EAAG,EAAG,IAEnB,UAAW,CACT2D,QAAS3D,EAAG,EAAG,GAAI,MCdZ0f,GAA6C,CACxDlgB,KAAM,CACJ0E,SAAUlE,EAAG,IACb2D,QAAS3D,EAAG,EAAG,EAAG,KCiBT2f,GAAuD,SAAC,GAK9D,IAJL3D,EAII,EAJJA,QACAgC,EAGI,EAHJA,YACAJ,EAEI,EAFJA,SACAE,EACI,EADJA,qBAEA,EAA4CvY,mBAAsByW,GAAlE,oBAAO4D,EAAP,KAAuBC,EAAvB,KACMC,EAAmBza,GAAYua,ElB5BJ,KkB8B3BG,EAAqB/L,uBAAY,SAACgM,EAAmBlY,GACzD+X,GAAkB,SAACI,GACjB,IAAMC,EAAuB,aAAOD,GAEpC,OADAC,EAAWpY,GAAOkY,EACXE,OAER,IAgBH,OAdAxa,qBAAU,WACJoY,GAAsBA,IAC1BE,GAAY,SAACxW,GACX,IAAM8W,EAAe9W,EAAKoW,GAC1B,OAAO,6BACFpW,GADL,mBAEGoW,EAFH,6BAGOU,GAHP,IAIItC,QAAS8D,WAId,CAACA,EAAkBhC,EAAsBE,EAAaJ,IAGvD,gBAACvZ,EAAA,EAAD,CAAKC,GAAIgb,GAAkBC,SAA3B,UACE,eAAC1a,GAAA,EAAD,CAAYP,GAAIob,GAAkBlgB,KAAlC,SAAyCkd,KACzC,gBAACrY,EAAA,EAAD,CAAKC,GAAIgb,GAAkBE,WAA3B,UACE,eAAC3K,GAAA,EAAD,CACErS,MAAOka,GACP/F,KAAMzG,GACN4E,aAAckH,EAAQ,GACtB1X,GAAIgb,GAAkBG,UACtBU,WAAYhQ,GAAYC,eACxBqE,SAAU,SAACC,GAAD,OAAOqL,EAAmBvZ,OAAOkO,EAAEK,OAAOhT,OAAQ,MAE9D,eAAC8S,GAAA,EAAD,CACErS,MAAOka,GACP/F,KAAMzG,GACN4E,aAAckH,EAAQ,GACtB1X,GAAIgb,GAAkBG,UACtBU,WAAYhQ,GAAYC,eACxBqE,SAAU,SAACC,GAAD,OAAOqL,EAAmBvZ,OAAOkO,EAAEK,OAAOhT,OAAQ,SAGhE,gBAACsC,EAAA,EAAD,CAAKC,GAAIgb,GAAkBE,WAA3B,UACE,eAAC3K,GAAA,EAAD,CACErS,MAAOka,GACP/F,KAAMzG,GACN4E,aAAckH,EAAQ,GACtB1X,GAAIgb,GAAkBG,UACtBU,WAAYhQ,GAAYC,eACxBqE,SAAU,SAACC,GAAD,OAAOqL,EAAmBvZ,OAAOkO,EAAEK,OAAOhT,OAAQ,MAE9D,eAAC8S,GAAA,EAAD,CACErS,MAAOka,GACP/F,KAAMzG,GACN4E,aAAckH,EAAQ,GACtB1X,GAAIgb,GAAkBG,UACtBU,WAAYhQ,GAAYC,eACxBqE,SAAU,SAACC,GAAD,OAAOqL,EAAmBvZ,OAAOkO,EAAEK,OAAOhT,OAAQ,aClFzDqe,GAA8B,SAAC,GAA2E,IAAzE9P,EAAwE,EAAxEA,IAAK+P,EAAmE,EAAnEA,IAC3CC,EAAShQ,EAAM,CAAEA,OAAQ,GACzBiQ,EAASF,EAAM,CAAEA,OAAQ,GAC/B,OAAO,0CACFlQ,GAAYC,gBACZkQ,GACAC,ICUMC,GAAyD,SAAC,GAKhE,IAJLxU,EAII,EAJJA,OACAyU,EAGI,EAHJA,UACAzC,EAEI,EAFJA,YACAJ,EACI,EADJA,SAEA,EAAgDrY,mBAAkBkb,GAAlE,oBAAOC,EAAP,KAAyBC,EAAzB,KACMC,EAAqBvb,GAAYqb,EpB7BN,KoB+B3BG,EAAsB7M,uBAAY,SAAC8M,EAAoBhZ,GAC3D6Y,GAAoB,SAACI,GACnB,IAAMC,EAAqB,aAAOD,GAElC,OADAC,EAAalZ,GAAOgZ,EACbE,OAER,IAeH,OAbAtb,qBAAU,WACRsY,GAAY,SAACxW,GACX,IAAM8W,EAAe9W,EAAKoW,GAC1B,OAAO,6BACFpW,GADL,mBAEGoW,EAFH,6BAGOU,GAHP,IAII1M,QAASgP,WAId,CAACA,EAAoB5C,EAAaJ,IAGnC,gBAACvZ,EAAA,EAAD,CAAKC,GAAIgb,GAAkBC,SAA3B,UACE,eAAC1a,GAAA,EAAD,CAAYP,GAAIob,GAAkBlgB,KAAlC,SAAyCwM,IACzC,eAAC6I,GAAA,EAAD,CACErS,MAAOma,GACPhG,KAAMzG,GACN4E,aAAc2L,EAAU,GACxBnc,GAAIgb,GAAkBG,UACtBU,WAAYC,GAA4B,CAAEC,IAAK,MAC/C5L,SAAU,SAACC,GAAD,OAAOmM,EAAoBra,OAAOkO,EAAEK,OAAOhT,OAAQ,MAE/D,gBAACsC,EAAA,EAAD,CAAKC,GAAIgb,GAAkBE,WAA3B,UACE,eAAC3K,GAAA,EAAD,CACErS,MAAOma,GACPhG,KAAMzG,GACN4E,aAAc2L,EAAU,GACxBnc,GAAIgb,GAAkBG,UACtBU,WAAYC,GAA4B,CAAEC,IAAK,MAC/C5L,SAAU,SAACC,GAAD,OAAOmM,EAAoBra,OAAOkO,EAAEK,OAAOhT,OAAQ,MAE/D,eAAC8S,GAAA,EAAD,CACErS,MAAOma,GACPhG,KAAMzG,GACN4E,aAAc2L,EAAU,GACxBnc,GAAIgb,GAAkBG,UACtBU,WAAYC,GAA4B,CAAEC,IAAK,MAC/C5L,SAAU,SAACC,GAAD,OAAOmM,EAAoBra,OAAOkO,EAAEK,OAAOhT,OAAQ,aCxD1Dkf,GAAc,YASgB,IARzCze,EAQwC,EARxCA,MACAT,EAOwC,EAPxCA,MACAmf,EAMwC,EANxCA,SACAlD,EAKwC,EALxCA,YACAJ,EAIwC,EAJxCA,SACAtN,EAGwC,EAHxCA,IACA+P,EAEwC,EAFxCA,IACAvC,EACwC,EADxCA,qBAEA,EAAwCvY,mBAASxD,GAAjD,oBAAOof,EAAP,KAAqBC,EAArB,KACM5b,EAAiBH,GAAY8b,ErBjCF,KqBmC3BE,EAAoBrN,uBAAY,SAACC,GACrCmN,EAAgBnN,KACf,IAgBH,OAdAvO,qBAAU,WACJoY,GAAsBA,IAC1BE,GAAY,SAACxW,GACX,IAAM8W,EAAe9W,EAAKoW,GAC1B,OAAO,6BACFpW,GADL,mBAEGoW,EAFH,6BAGOU,GAHP,mBAIK4C,EAAW1b,WAIjB,CAACA,EAAgBwY,EAAakD,EAAUtD,EAAUyD,EAAmBvD,IAGtE,eAACzZ,EAAA,EAAD,UACE,eAACwQ,GAAA,EAAD,CACErS,MAAOA,EACPmU,KAAMzG,GACN4E,aAAc/S,EACduC,GAAIgb,GAAkBG,UACtBU,WAAYC,GAA4B,CAAE9P,MAAK+P,QAC/C5L,SAAU,SAACC,GAAD,OAAO2M,EAAkB7a,OAAOkO,EAAEK,OAAOhT,cC1D9Cuf,GAAkC,SAACC,EAAoBC,GAArB,MAAiD,CAC9F9d,QAAS6d,EAAOC,GAChB,UAAW,CACT5d,MAAM,OACN6E,OAAQzI,EAAG,IACX4R,QAAS,KAIA6P,GAA8C,CACzDC,OAAQ,CACNvT,OAAQnO,EAAG,EAAG,IAEhBR,KAAM,CACJ0E,SAAUlE,EAAG,KAEf2hB,IAAK,CACH9d,QAAQ,OACRC,cAAc,OAEhB8d,IAAK,CACH/d,QAAQ,OACRC,cAAc,SACdF,MAAM,QCHGie,GAA2D,SAAC,GAKlE,IAJLN,EAII,EAJJA,OACAvD,EAGI,EAHJA,YACAJ,EAEI,EAFJA,SACAE,EACI,EADJA,qBAEA,EAA0CvY,mBAAqBgc,GAA/D,oBAAOO,EAAP,KAAsBC,EAAtB,KACMC,EAAkB3c,GAAYyc,EvBpBR,IuBsBtBzJ,EAAiBrE,uBAAY,SAACiO,EAAkBna,GAChDma,GACFF,GAAiB,SAACG,GAChB,IAAMC,EAAqB,aAAOD,GAElC,OADAC,EAAUra,GAAOma,EACVE,OAGV,IAEHzc,qBAAU,WACJoY,GAAsBA,IAC1BE,GAAY,SAACxW,GACX,IAAM8W,EAAe9W,EAAKoW,GAC1B,OAAO,6BACFpW,GADL,mBAEGoW,EAFH,6BAGOU,GAHP,IAIIpC,cAAe8F,WAIpB,CAACA,EAAiBhE,EAAaJ,EAAUE,IAE5C,IAAMsE,EAAWpO,uBACf,SAAClM,GAAD,OACE,gBAACzD,EAAA,EAAD,CAAKC,GAAImd,GAAmBG,IAA5B,UACE,iCAAQhF,GAA6BC,gBAAgB/U,KACrD,eAACzD,EAAA,EAAD,CAAKC,GAAIgd,GAAgCC,EAAQzZ,GAAjD,SACE,wBAAO6O,KAAMzG,GAAkBnO,MAAOwf,EAAOzZ,GAAM2M,SAAU,SAACC,GAAD,OAAO2D,EAAe3D,EAAEK,OAAOhT,MAAO+F,UAHjEA,KAOxC,CAACyZ,EAAQlJ,IAEX,OACE,gBAAChU,EAAA,EAAD,CAAKC,GAAImd,GAAmBC,OAA5B,UACE,eAAC7c,GAAA,EAAD,CAAYP,GAAImd,GAAmBjiB,KAAnC,SAA0Cod,GAA6B5Q,SACvE,eAAC3H,EAAA,EAAD,CAAKC,GAAImd,GAAmBE,IAA5B,SAAkC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGzhB,KAAI,SAAC4H,GAAD,OAASsa,EAASta,QACxE,eAACzD,EAAA,EAAD,CAAKC,GAAImd,GAAmBE,IAA5B,SAAkC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGzhB,KAAI,SAAC4H,GAAD,OAASsa,EAASta,YC3CjEua,GAAsF,SAAC,GAK7F,IAJLnc,EAII,EAJJA,QACA0G,EAGI,EAHJA,SACAoR,EAEI,EAFJA,YACAsE,EACI,EADJA,+BAEM1E,EAAW7X,GAASuC,oBACpBia,EAA8B3V,EAASgR,GAE7C,EAAoErY,mBAASc,GAA8BH,IAA3G,oBAAOsc,EAAP,KAAmCC,EAAnC,KACA,EAA8Bld,mBAAuCuB,GAAwCZ,IAA7G,oBAAOuR,EAAP,KAAgBwG,EAAhB,KAEMyE,EAAwBjc,GAA0BP,GAElDyc,EAA8B3O,uBAClC,SAAC4O,GAAD,OAA+CJ,EAA2BjhB,QAAO,SAACC,GAAD,OAASohB,EAAYphB,QACtG,CAACghB,IAIGK,EAAoC7O,uBAAY,WAAO,IAAD,EACpDqK,EAAavX,GAAwCZ,GACrD4c,EAAYzc,GAA8BH,GAC1C6c,EAAwB,UAAGtc,GAA0BP,UAA7B,aAAG,EAAqC,GACtE+X,EAAWI,GACXoE,EAA8BK,GAC9B9E,GAAY,SAACxW,GACX,IAAMwb,EAAmD,cACvDtgB,kBAAmBogB,EAAUvhB,QAAO,SAACC,GAAD,OAAS6c,EAAW7c,MACxD0d,kBAAmB6D,GAChBhH,IAEL,OAAO,6BAAKvU,GAAZ,mBAAmBzB,GAASuC,oBAAsB0a,SAEnD,CAAChF,EAAa9X,IAGjBR,qBAAU,kBAAMmd,MAAqC,CAAC3c,IAEtD,IAAM+c,EAAoCjP,uBACxC,SAACqK,GAAD,MAA+C,CAC7C3b,kBAAmBigB,EAA4BtE,MAEjD,CAACsE,IAGG7E,EAAuB9J,uBAC3B,kBAAMsO,EAA+Bvc,GAASuC,uBAC9C,CAACga,IAGH,OAAIC,EAEA,gBAACle,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBC,eAAjC,UACE,8BAAKH,GAAmC/Q,SACvCwW,EAA2B9S,Qf9EoB,Ee+E9C,uCACE,eAAC,GAAD,CACEkO,SAAUA,EACVC,eAAgB2E,EAChB1E,qBAAsBA,EACtBC,eAAgBkF,EAChBjF,YAAaA,EACbxb,MAAOua,GAAmCP,WAC1C/E,QAASA,EACTwG,WAAYA,EACZC,kBAAmBuE,IAErB,eAAC,GAAD,CACE7E,SAAUA,EACV7b,MAAOwgB,EAA4BrD,kBACnCrB,eAAgB6E,EAChB1E,YAAaA,EACbxb,MAAOua,GAAmCN,SAC1CqB,qBAAsBA,IAExB,gBAACoF,GAAA,EAAD,CAAW5e,GAAI2Y,GAAwBM,UAAvC,UACE,eAAC4F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxe,GAAA,EAAD,UAAakY,GAAmCV,SAElD,gBAACiH,GAAA,EAAD,WACE,eAAC,GAAD,CACEtH,QAASuG,EAA4BvG,QACrCgC,YAAaA,EACbJ,SAAUA,EACVE,qBAAsBA,IAExB,eAACrL,GAAA,EAAD,IACA,eAAC,GAAD,CACE1Q,MAAOwgB,EAA4BtG,UACnCiF,SCnHO,YDoHPlD,YAAaA,EACbxb,MAAOua,GAAmCd,UAC1C2B,SAAUA,IAEZ,eAACnL,GAAA,EAAD,IACA,eAAC,GAAD,CACEzG,OAAQ+Q,GAAmCnL,QAC3C6O,UAAW8B,EAA4B3Q,QACvCoM,YAAaA,EACbJ,SAAUA,IAEZ,eAACnL,GAAA,EAAD,IACA,eAAC,GAAD,CACE8O,OAAQgB,EAA4BrG,cACpC8B,YAAaA,EACbJ,SAAUA,EACVE,qBAAsBA,aAM9B,eAACzZ,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBK,yBAAjC,SACGP,GAAmCC,iBAMvC,ME1IIuG,GAGT,CACFvH,QAAS,CAAC,GAAI,GAAI,GAAI,IACtBwH,UAAW,EACXC,kBAAmB,GACnBC,gBAAiB,GACjB9R,QAAS,CAAC,GAAI,GAAI,IAClBsK,cAAeC,MCXJwH,GACF,mKADEA,GAEC,0IAMDC,GAAiC,cAC5C5X,OAAQqP,GAAYtV,GAASqC,mBAC7Byb,MAAM,QACN7G,YAAY,gKACZpL,QAAQ,yBACR4R,UAAU,aACVC,kBAAkB,qBAClBC,gBAAgB,oBACbnH,ICUQuH,GAAoF,SAAC,GAK3F,IAJL5d,EAII,EAJJA,QACA0G,EAGI,EAHJA,SACAoR,EAEI,EAFJA,YACAsE,EACI,EADJA,+BAEM1E,EAAW7X,GAASqC,kBACpB2b,EAA4BnX,EAASgR,GAE3C,EAAoErY,mBAASc,GAA8BH,IAA3G,oBAAOsc,EAAP,KAAmCC,EAAnC,KACA,EAA8Bld,mBAAuCuB,GAAwCZ,IAA7G,oBAAOuR,EAAP,KAAgBwG,EAAhB,KAEMyE,EAAwBjc,GAA0BP,GAElDyc,EAA8B3O,uBAClC,SAAC4O,GAAD,OAA+CJ,EAA2BjhB,QAAO,SAACC,GAAD,OAASohB,EAAYphB,QACtG,CAACghB,IAIGwB,EAAkChQ,uBAAY,WAAO,IAAD,EAClDqK,EAAavX,GAAwCZ,GACrD4c,EAAYzc,GAA8BH,GAC1C6c,EAAwB,UAAGtc,GAA0BP,UAA7B,aAAG,EAAqC,GACtE+X,EAAWI,GACXoE,EAA8BK,GAC9B9E,GAAY,SAACxW,GACX,IAAMyc,EAA+C,cACnDvhB,kBAAmBogB,EAAUvhB,QAAO,SAACC,GAAD,OAAS6c,EAAW7c,MACxD0d,kBAAmB6D,GAChBQ,IAEL,OAAO,6BAAK/b,GAAZ,mBAAmBzB,GAASqC,kBAAoB6b,SAEjD,CAACjG,EAAa9X,IAGjBR,qBAAU,kBAAMse,MAAmC,CAAC9d,IAEpD,IAAM+c,EAAoCjP,uBACxC,SAACqK,GAAD,MAA+C,CAC7C3b,kBAAmBigB,EAA4BtE,MAEjD,CAACsE,IAGG7E,EAAuB9J,uBAC3B,kBAAMsO,EAA+Bvc,GAASqC,qBAC9C,CAACka,IAGH,OAAIyB,EAEA,gBAAC1f,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBC,eAAjC,UACE,8BAAK0G,GAAkC5X,SACtCwW,EAA2B9S,QFpFmB,EEqF7C,uCACE,eAAC,GAAD,CACEkO,SAAUA,EACVC,eAAgB2E,EAChB1E,qBAAsBA,EACtBC,eAAgBkF,EAChBjF,YAAaA,EACbxb,MAAOohB,GAAkCpH,WACzC/E,QAASA,EACTwG,WAAYA,EACZC,kBAAmBuE,IAErB,eAAC,GAAD,CACE7E,SAAUA,EACV7b,MAAOgiB,EAA0B7E,kBACjCrB,eAAgB6E,EAChB1E,YAAaA,EACbxb,MAAOohB,GAAkCnH,SACzCqB,qBAAsBA,IAExB,gBAACoF,GAAA,EAAD,CAAW5e,GAAI2Y,GAAwBM,UAAvC,UACE,eAAC4F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxe,GAAA,EAAD,UAAa+e,GAAkCvH,SAEjD,gBAACiH,GAAA,EAAD,WACE,eAAC,GAAD,CACEtH,QAAS+H,EAA0B/H,QACnCgC,YAAaA,EACbJ,SAAUA,EACVE,qBAAsBA,IAExB,eAACrL,GAAA,EAAD,IACA,eAAC5N,GAAA,EAAD,CAAYP,GAAIob,GAAkBlgB,KAAlC,SAAyCokB,GAAkCC,QAC3E,eAAC,GAAD,CACE9hB,MAAOgiB,EAA0BP,UACjCtC,SC1HO,YD2HPlD,YAAaA,EACbxb,MAAOohB,GAAkCJ,UACzC5F,SAAUA,IAEZ,eAAC,GAAD,CACE7b,MAAOgiB,EAA0BN,kBACjCvC,SChIe,oBDiIflD,YAAaA,EACbxb,MAAOohB,GAAkCH,kBACzC7F,SAAUA,EACVE,qBAAsBA,IAExB,eAAC,GAAD,CACE/b,MAAOgiB,EAA0BL,gBACjCxC,SCvIa,kBDwIblD,YAAaA,EACbxb,MAAOohB,GAAkCF,gBACzC9F,SAAUA,EACVE,qBAAsBA,IAExB,eAACrL,GAAA,EAAD,IACA,eAAC,GAAD,CACEzG,OAAQ4X,GAAkChS,QAC1C6O,UAAWsD,EAA0BnS,QACrCoM,YAAaA,EACbJ,SAAUA,IAEZ,eAACnL,GAAA,EAAD,IACA,eAAC,GAAD,CACE8O,OAAQwC,EAA0B7H,cAClC8B,YAAaA,EACbJ,SAAUA,EACVE,qBAAsBA,aAM9B,eAACzZ,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBK,yBAAjC,SACGsG,GAAkC5G,iBAMtC,O,S/C3KGlR,K,UAAAA,E,aAAAA,Q,KiDOL,I,GCPKoY,GDYCC,GAGT,CACFC,SAAUtY,GAASuY,IACnBC,UAAW,GACXC,aAAc,EACdvI,QAAS,CAAC,GAAI,GAAI,GAAI,IACtBpK,QAAS,CAAC,GAAI,GAAI,IAClBsK,cAAeC,MEbJqI,GACC,sIAMDC,GAAoB,cAC/BzY,OAAQqP,GAAYtV,GAAS8C,QAC7B6b,QAAQ,YACR1H,YAAY,kJACZsH,UAAU,aACVC,aAAa,gBACb3S,QAAQ,oBACRlK,KAAK,WACF6U,ICNQoI,GAAW,YAQgB,IAPtC/G,EAOqC,EAPrCA,SACA7b,EAMqC,EANrCA,MACA8b,EAKqC,EALrCA,eACAG,EAIqC,EAJrCA,YACAxb,EAGqC,EAHrCA,MACAoiB,EAEqC,EAFrCA,YACA9G,EACqC,EADrCA,qBAEM+G,EAAqB7Q,uBACzB,SAACC,GACK6J,GAAsBA,IAC1BE,GAAY,SAACxW,GACX,IAAM8W,EAAe9W,EAAKoW,GAC1B,OAAO,6BACFpW,GADL,mBAEGoW,EAFH,6BAGOU,GAHP,mBAIKsG,EAAc3Q,WAKvB,CAAC6J,EAAsBE,EAAa4G,EAAahH,IAGnD,OACE,eAAC/I,GAAA,EAAD,CACE9S,MAAOA,EACP0S,SAAU,SAACC,GAAD,OAAOmQ,EAAmBnQ,EAAEK,OAAOhT,QAC7Cqd,QAAM,EACN5c,MAAOA,EAJT,SAMGqb,EAAe3d,KAAI,SAACsB,EAAKsG,GAAN,OAClB,eAACuX,GAAA,EAAD,CAAUtd,MAAOP,EAAjB,SACGjC,EAAwBiC,IAD3B,UAA8BojB,EAA9B,YAA6ChH,EAA7C,YAAyD9V,UChDpDgd,GAA8C,CACzDC,IAAK,CACH1H,UAAW9c,EAAU,IAEvBykB,MAAO,CACLphB,MAAM,OACNC,QAAQ,QAEVoJ,OAAQ,CACNoE,SAAU,EACV1N,QAAS3D,EAAG,EAAG,GACf,iBAAkB,CAChB0D,QAASX,KCDFkiB,GAAgB,YAMmB,IAL9CrH,EAK6C,EAL7CA,SACA7b,EAI6C,EAJ7CA,MACAoQ,EAG6C,EAH7CA,QACA6L,EAE6C,EAF7CA,YACA4G,EAC6C,EAD7CA,YAEMM,EAA2BlR,uBAC/B,SAACC,GACC+J,GAAY,SAACxW,GACX,IAAM8W,EAAe9W,EAAKoW,GACpBuH,EAAalR,EAAQ,gBAAM2Q,EAAc3Q,GAAa,GAC5D,OAAO,6BACFzM,GADL,mBAEGoW,EAFH,6BAGOU,GACA6G,UAKX,CAACnH,EAAa4G,EAAahH,IAG7B,OACE,eAACvZ,EAAA,EAAD,CAAKC,GAAIwgB,GAAmBC,IAA5B,SACE,eAACxQ,GAAA,EAAD,CACEjQ,GAAIwgB,GAAmBE,MACvBjjB,MAAOA,EACPyS,WAAS,EACTC,SAAU,SAACC,EAAG3S,GAAJ,OAAcmjB,EAAyBnjB,IAJnD,SAMGoQ,EAAQjS,KAAI,SAACklB,EAAKtd,GAAN,OACX,eAAC8M,GAAA,EAAD,CAActQ,GAAIwgB,GAAmB7X,OAAQlL,MAAOqjB,EAApD,SACGA,GAD2Dtd,WCZ3Dud,GAAyE,SAAC,GAIhF,IAHLnf,EAGI,EAHJA,QACA0G,EAEI,EAFJA,SACAoR,EACI,EADJA,YAEMJ,EAAW7X,GAAS8C,OACpByc,EAAiB1Y,EAASgR,GAChC,EAAoErY,mBAASc,GAA8BH,IAA3G,oBAAOsc,EAAP,KAAmCC,EAAnC,KACA,EAA8Bld,mBAAuCuB,GAAwCZ,IAA7G,oBAAOuR,EAAP,KAAgBwG,EAAhB,KAEMsH,EAAqB/C,EAA2BjhB,QAAO,SAACC,GAAD,OAASiW,EAAQjW,MACxEkhB,EAAwBjc,GAA0BP,GAElDyc,EAA8B3O,uBAClC,SAAC4O,GAAD,OAA+CJ,EAA2BjhB,QAAO,SAACC,GAAD,OAASohB,EAAYphB,QACtG,CAACghB,IAGGgD,EAAuBxR,uBAAY,WAAO,IAAD,IACvCqK,EAAavX,GAAwCZ,GACrD4c,EAAYzc,GAA8BH,GAC1Cuf,EAAoB,UAAG3C,EAAUvhB,QAAO,SAACC,GAAD,OAAS6c,EAAW7c,aAAxC,aAAG,EAA6C,GACpEuhB,EAAwB,UAAGtc,GAA0BP,UAA7B,aAAG,EAAqC,GACtE+X,EAAWI,GACXoE,EAA8BK,GAC9B9E,GAAY,SAACxW,GACX,IAAMke,EAAyB,cAC7BhjB,kBAAmBogB,EAAUvhB,QAAO,SAACC,GAAD,OAAS6c,EAAW7c,MACxDmkB,cAAeF,EACfvG,kBAAmB6D,GAChBoB,IAEL,OAAO,6BAAK3c,GAAZ,mBAAmBzB,GAAS8C,OAAS6c,SAEtC,CAAC1H,EAAa9X,IAGjBR,qBAAU,kBAAM8f,MAAwB,CAACtf,IAEzC,IAAM+c,EAAoCjP,uBACxC,SAACqK,EAA0CC,GACzC,IAAM5b,EAAoBigB,EAA4BtE,GAChDuH,EAAwBpD,EAA2BjhB,QAAO,SAACC,GAAD,OAAS6c,EAAW7c,MAIpF,MAAO,CAAEkB,oBAAmBijB,cAHNtH,EAAWC,EAAaqH,eAC1CrH,EAAaqH,cADK,OAElBC,QAFkB,IAElBA,OAFkB,EAElBA,EAAwB,MAG9B,CAACjD,EAA6BH,IAGhC,OAAI8C,EAEA,gBAACjhB,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBC,eAAjC,UACE,8BAAKuH,GAAqBzY,SACzBwW,EAA2B9S,QNnFM,EMoFhC,uCACE,eAAC,GAAD,CACEkO,SAAUA,EACVC,eAAgB2E,EAChBzE,eAAgBkF,EAChBjF,YAAaA,EACbxb,MAAOiiB,GAAqBjI,WAC5B/E,QAASA,EACTwG,WAAYA,EACZC,kBAAmBuE,IAErB,eAAC,GAAD,CACE7E,SAAUA,EACV7b,MAAOujB,EAAepG,kBACtBrB,eAAgB6E,EAChB1E,YAAaA,EACbxb,MAAOiiB,GAAqBhI,WAE9B,eAAC,GAAD,CACEmB,SAAUA,EACV7b,MAAOujB,EAAeK,cACtB9H,eAAgB0H,EAChBvH,YAAaA,EACbxb,MAAOiiB,GAAqBC,QAC5BE,YC5Ge,kBD8GjB,eAAC/f,GAAA,EAAD,CAAYP,GAAIob,GAAkBlgB,KAAlC,SAAyCilB,GAAqB/c,OAC9D,eAAC,GAAD,CACEkW,SAAUA,EACV7b,MAAOujB,EAAelB,SACtBjS,QAAS9Q,OAAOpB,OAAiB6L,IACjCkS,YAAaA,EACb4G,YCnHU,aDqHZ,gBAAC1B,GAAA,EAAD,CAAW5e,GAAI2Y,GAAwBM,UAAvC,UACE,eAAC4F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxe,GAAA,EAAD,UAAa4f,GAAqBpI,SAEpC,gBAACiH,GAAA,EAAD,WACE,eAAC,GAAD,CAAatH,QAASsJ,EAAetJ,QAASgC,YAAaA,EAAaJ,SAAUA,IAClF,eAACnL,GAAA,EAAD,IACA,eAAC,GAAD,CACE1Q,MAAOujB,EAAehB,UACtBpD,SC7HO,YD8HPlD,YAAaA,EACbxb,MAAOiiB,GAAqBH,UAC5B1G,SAAUA,IAEZ,eAAC,GAAD,CACE7b,MAAOujB,EAAef,aACtBrD,SCnIU,eDoIVlD,YAAaA,EACbxb,MAAOiiB,GAAqBF,aAC5B3G,SAAUA,IAEZ,eAACnL,GAAA,EAAD,IACA,eAAC,GAAD,CACEzG,OAAQyY,GAAqB7S,QAC7B6O,UAAW6E,EAAe1T,QAC1BoM,YAAaA,EACbJ,SAAUA,IAEZ,eAACnL,GAAA,EAAD,IACA,eAAC,GAAD,CAAe8O,OAAQ+D,EAAepJ,cAAe8B,YAAaA,EAAaJ,SAAUA,aAK/F,eAACvZ,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBK,yBAAjC,SAA4DmH,GAAqBzH,iBAKlF,ME1JI6I,GAGT,CACFvB,UAAW,GACXtI,QAAS,CAAC,GAAI,GAAI,GAAI,IACtBpK,QAAS,CAAC,GAAI,GAAI,IAClBsK,cAAeC,MCTJ2J,GACC,kKAMDC,GAAiC,cAC5C/Z,OAAQqP,GAAYtV,GAASsC,mBAC7B2d,WAAW,gBACXC,WAAW,gBACXjJ,YAAY,gKACZsH,UAAU,aACV1S,QAAQ,qBACL2K,ICYQ2J,GAAoF,SAAC,GAK3F,IAJLhgB,EAII,EAJJA,QACA0G,EAGI,EAHJA,SACAoR,EAEI,EAFJA,YACAsE,EACI,EADJA,+BAEM1E,EAAW7X,GAASsC,kBACpB8d,EAA4BvZ,EAASgR,GACrCwI,EAAWC,mBAAQ,kCAAMhgB,GAA8BH,UAApC,aAAM,EAAyC,KAAI,CAACA,IACvEogB,EAAWD,mBAAQ,kCAAMhgB,GAA8BH,UAApC,aAAM,EAAyC,KAAI,CAACA,IAC7E,EAAoEX,mBAASc,GAA8BH,IAA3G,oBAAOsc,EAAP,KAAmCC,EAAnC,KACA,EAA8Bld,mBAAuCuB,GAAwCZ,IAA7G,oBAAOuR,EAAP,KAAgBwG,EAAhB,KAEMyE,EAAwBjc,GAA0BP,GAElDyc,EAA8B3O,uBAClC,SAAC4O,GAAD,OAA+CJ,EAA2BjhB,QAAO,SAACC,GAAD,OAASohB,EAAYphB,QACtG,CAACghB,IAGG+D,EAAkCvS,uBAAY,WAAO,IAAD,EAClDqK,EAAavX,GAAwCZ,GACrD4c,EAAYzc,GAA8BH,GAC1C6c,EAAwB,UAAGtc,GAA0BP,UAA7B,aAAG,EAAqC,GACtE+X,EAAWI,GACXoE,EAA8BK,GAC9B9E,GAAY,SAACxW,GACX,IAAMgf,EAAuD,cAC3D9jB,kBAAmBogB,EAAUvhB,QAAO,SAACC,GAAD,OAAS6c,EAAW7c,MACxD0d,kBAAmB6D,EACnBiD,WAAYI,EACZH,WAAYK,GACTT,IAEL,OAAO,6BAAKre,GAAZ,mBAAmBzB,GAASsC,kBAAoBme,SAEjD,CAACxI,EAAaoI,EAAUE,EAAUpgB,IAGrCR,qBAAU,kBAAM6gB,MAAmC,CAACrgB,IAEpD,IAAM+c,EAAoCjP,uBACxC,SAACqK,GAAD,MAAmF,CACjF3b,kBAAmBigB,EAA4BtE,MAEjD,CAACsE,IAGG7E,EAAuB9J,uBAC3B,kBAAMsO,EAA+Bvc,GAASsC,qBAC9C,CAACia,IAGH,OAAI6D,EAEA,gBAAC9hB,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBC,eAAjC,UACE,8BAAK6I,GAAkC/Z,SACtCwW,EAA2B9S,QFtFmB,EEuF7C,uCACE,eAAC,GAAD,CACEkO,SAAUA,EACVC,eAAgB2E,EAChBzE,eAAgBkF,EAChBjF,YAAaA,EACbxb,MAAOujB,GAAkCvJ,WACzC/E,QAASA,EACTwG,WAAYA,EACZC,kBAAmBuE,EACnB3E,qBAAsBA,IAExB,eAAC,GAAD,CACEF,SAAUA,EACV7b,MAAOokB,EAA0BH,WACjCnI,eAAgB2E,EAChBxE,YAAaA,EACbxb,MAAOujB,GAAkCC,WACzCpB,YCxGY,aDyGZ9G,qBAAsBA,IAExB,eAAC,GAAD,CACEF,SAAUA,EACV7b,MAAOokB,EAA0BF,WACjCpI,eAAgB2E,EAChBxE,YAAaA,EACbxb,MAAOujB,GAAkCE,WACzCrB,YChHY,aDiHZ9G,qBAAsBA,IAExB,eAAC,GAAD,CACEF,SAAUA,EACV7b,MAAOokB,EAA0BjH,kBACjCrB,eAAgB6E,EAChB1E,YAAaA,EACbxb,MAAOujB,GAAkCtJ,SACzCqB,qBAAsBA,IAExB,gBAACoF,GAAA,EAAD,CAAW5e,GAAI2Y,GAAwBM,UAAvC,UACE,eAAC4F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxe,GAAA,EAAD,UAAakhB,GAAkC1J,SAEjD,gBAACiH,GAAA,EAAD,WACE,eAAC,GAAD,CACEtH,QAASmK,EAA0BnK,QACnCgC,YAAaA,EACbJ,SAAUA,EACVE,qBAAsBA,IAExB,eAACrL,GAAA,EAAD,IACA,eAAC,GAAD,CACE1Q,MAAOokB,EAA0B7B,UACjCpD,SC3IO,YD4IPlD,YAAaA,EACbxb,MAAOujB,GAAkCzB,UACzC1G,SAAUA,IAEZ,eAACnL,GAAA,EAAD,IACA,eAAC,GAAD,CACEzG,OAAQ+Z,GAAkCnU,QAC1C6O,UAAW0F,EAA0BvU,QACrCoM,YAAaA,EACbJ,SAAUA,IAEZ,eAACnL,GAAA,EAAD,IACA,eAAC,GAAD,CACE8O,OAAQ4E,EAA0BjK,cAClC8B,YAAaA,EACbJ,SAAUA,EACVE,qBAAsBA,aAM9B,eAACzZ,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBK,yBAAjC,SACGyI,GAAkC/I,iBAMtC,MErKIyJ,GAGT,CACFC,UAAW,GACXC,wBCTuC,UDUvCC,kBCLyC,WCD9BC,GAAwB,cACnC7a,OAAQqP,GAAYtV,GAASgD,WAC7BiU,YAAY,+GACZR,WAAW,kBACXkK,UAAU,mBACVC,wBAAwB,4BACxBC,kBAAkB,uBACfxK,IAMQ0K,IAAe,IAC1BC,gBAAgB,cADU,gBAEzBjb,GAASuY,IAFgB,kCAGzBvY,GAASkb,KAHgB,6LCrBfC,GAA2B,SAACxmB,GAAD,MAA6B,CACnEiD,QAASjD,EACTmD,MAAO5D,EAAG,IACV0Q,aAAc1Q,EAAG,GACjB,UAAW,CACT4D,MAAM,OACN6E,OAAQzI,EAAG,IACX4R,QAAS,KAIAsV,GAA4C,CACvDxF,OAAQ,CACN7d,QAAQ,OACRG,eAAe,gBACfD,WAAW,WCMFojB,GAAc,YAMgB,IALzCvJ,EAKwC,EALxCA,SACAnd,EAIwC,EAJxCA,MACAmkB,EAGwC,EAHxCA,YACA5G,EAEwC,EAFxCA,YACAxb,EACwC,EADxCA,MAEA,EAAwC+C,mBAAS9E,GAAjD,oBAAO6X,EAAP,KAAqBC,EAArB,KACMC,EAAiBnT,GAAYiT,E9CpBP,I8CsBtB8O,EAAoBpT,uBAAY,SAACiO,GACjCA,GACF1J,EAAgB0J,KAEjB,IAcH,OAZAvc,qBAAU,WACRsY,GAAY,SAACxW,GACX,IAAM8W,EAAe9W,EAAKoW,GAC1B,OAAO,6BACFpW,GADL,mBAEGoW,EAFH,6BAGOU,GAHP,mBAIKsG,EAAcpM,WAIpB,CAACA,EAAgBwF,EAAa4G,EAAahH,IAE5C,gBAACvZ,EAAA,EAAD,CAAKC,GAAI4iB,GAAiBxF,OAA1B,UACE,eAAC7c,GAAA,EAAD,CAAYP,GAAIob,GAAkBlgB,KAAlC,SAAyCgD,IACzC,eAAC6B,EAAA,EAAD,CAAKC,GAAI2iB,GAAyBxmB,GAAlC,SACE,wBAAOkW,KAAMzG,GAAkBnO,MAAOtB,EAAOgU,SAAU,SAACC,GAAD,OAAO0S,EAAkB1S,EAAEK,OAAOhT,gBC/BpFslB,GAA4E,SAAC,GAInF,IAHLnhB,EAGI,EAHJA,QACA0G,EAEI,EAFJA,SACAoR,EACI,EADJA,YAEMJ,EAAW7X,GAASgD,UACpBue,EAAoB1a,EAASgR,GACnC,EAA4CrY,mBAASU,GAAiBC,IAAtE,oBAAO2X,EAAP,KAAuBK,EAAvB,KACA,EAA8B3Y,mBAAuCqB,GAA+BV,IAApG,oBAAOuR,EAAP,KAAgBwG,EAAhB,KAEM0E,EAA8B3O,uBAClC,SAAC4O,GAAD,OAA+C/E,EAAetc,QAAO,SAACC,GAAD,OAASohB,EAAYphB,QAC1F,CAACqc,IAGG0J,EAA0BvT,uBAAY,WAC1C,IAAMqK,EAAazX,GAA+BV,GAC5CshB,EAAUvhB,GAAiBC,GACjC+X,EAAWI,GACXH,EAAkBsJ,GAClBxJ,GAAY,SAACxW,GACX,IAAMigB,EAAuC,cAC3C/kB,kBAAmB8kB,EAAQjmB,QAAO,SAACC,GAAD,OAAS6c,EAAW7c,OACnDilB,IAEL,OAAO,6BAAKjf,GAAZ,mBAAmBzB,GAASgD,UAAY0e,SAEzC,CAACzJ,EAAa9X,IAGjBR,qBAAU,kBAAM6hB,MAA2B,CAACrhB,IAE5C,IAAM+c,EAAoCjP,uBACxC,SAACqK,GAAD,MAA2E,CACzE3b,kBAAmBigB,EAA4BtE,MAEjD,CAACsE,IAGH,OAAI2E,EAEA,gBAACjjB,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBC,eAAjC,UACE,8BAAK2J,GAAyB7a,SAC7B6R,EAAenO,QL9DsB,EK+DpC,uCACE,eAAC,GAAD,CACEkO,SAAUA,EACVC,eAAgBA,EAChBE,eAAgBkF,EAChBjF,YAAaA,EACbxb,MAAOqkB,GAAyBrK,WAChC/E,QAASA,EACTwG,WAAYA,EACZC,kBAAmBA,IAErB,gBAACgF,GAAA,EAAD,CAAW5e,GAAI2Y,GAAwBM,UAAvC,UACE,eAAC4F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxe,GAAA,EAAD,UAAagiB,GAAyBxK,SAExC,gBAACiH,GAAA,EAAD,WACE,eAAC,GAAD,CACE1F,SAAUA,EACV7b,MAAOulB,EAAkBZ,UACzBxF,SCnFO,YDoFPlD,YAAaA,EACbxb,MAAOqkB,GAAyBH,YAElC,eAAC,GAAD,CACE9I,SAAUA,EACVnd,MAAO6mB,EAAkBX,wBACzB/B,YCzFqB,0BD0FrB5G,YAAaA,EACbxb,MAAOqkB,GAAyBF,0BAElC,eAAC,GAAD,CACE/I,SAAUA,EACVnd,MAAO6mB,EAAkBV,kBACzBhC,YC/Fe,oBDgGf5G,YAAaA,EACbxb,MAAOqkB,GAAyBD,6BAMxC,eAACviB,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBK,yBAAjC,SAA4DuJ,GAAyB7J,iBAKtF,O,ShBjHGkH,K,UAAAA,E,mBAAAA,Q,KkBQL,ICRKwD,GCAAC,G,SFaCC,GAGT,CACF5L,QAAS,CAAC,EAAG,GAAI,GAAI,IACrBpK,QAAS,CAAC,GAAI,GAAI,IAClBsK,cAAeC,KACf0L,SAAU,EACVC,WAAY,EACZC,OAAQ,GACRC,aAAc9D,GAAyBxJ,IACvCuN,UNT2C,WSPhCC,GACC,sJAMDC,GAA2B,cACtCnc,OAAQqP,GAAYtV,GAAS+C,qBAC7BkU,YAAY,wJACZpL,QAAQ,wBACRiW,SAAS,oBACTC,WAAW,uBACXC,OAAO,mBACPK,SAAS,cACTH,UAAU,oBACP1L,ICWQ8L,GAAsF,SAAC,GAI7F,IAHLniB,EAGI,EAHJA,QACA0G,EAEI,EAFJA,SACAoR,EACI,EADJA,YAEMJ,EAAW7X,GAAS+C,oBACpBwf,EAA8B1b,EAASgR,GAE7C,EAA0DrY,mBAASkB,GAA0BP,IAA7F,oBAAOqiB,EAAP,KAA8BC,EAA9B,KACA,EAA8BjjB,mBAAuC4B,GAAmCjB,IAAxG,oBAAOuR,EAAP,KAAgBwG,EAAhB,KAEM0E,EAA8B3O,uBAClC,SAAC4O,GAAD,OAA+C2F,EAAsBhnB,QAAO,SAACC,GAAD,OAASohB,EAAYphB,QACjG,CAAC+mB,IAIGE,EAAoCzU,uBAAY,WACpD,IAAMqK,EAAalX,GAAmCjB,GAChDwiB,EAAajiB,GAA0BP,GAC7C+X,EAAWI,GACXmK,EAAyBE,GACzB1K,GAAY,SAACxW,GACX,IAAMmhB,EAAmD,cACvDjmB,kBAAmBgmB,EAAWnnB,QAAO,SAACC,GAAD,OAAS6c,EAAW7c,MACzD0d,kBAAmBwJ,EAAW,IAC3Bd,IAEL,OAAO,6BAAKpgB,GAAZ,mBAAmBzB,GAAS+C,oBAAsB6f,SAEnD,CAAC3K,EAAa9X,IAGjBR,qBAAU,kBAAM+iB,MAAqC,CAACviB,IAEtD,IAAM+c,EAAoCjP,uBACxC,SAACqK,GAAD,MAA+C,CAC7C3b,kBAAmBigB,EAA4BtE,MAEjD,CAACsE,IAGH,OAAI2F,EAEA,gBAACjkB,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBC,eAAjC,UACE,8BAAKiL,GAA4Bnc,SAChCuc,EAAsB7Y,QJzE0B,EI0E/C,uCACE,eAAC,GAAD,CACEkO,SAAUA,EACVC,eAAgB0K,EAChBxK,eAAgBkF,EAChBjF,YAAaA,EACbxb,MAAO2lB,GAA4B3L,WACnC/E,QAASA,EACTwG,WAAYA,EACZC,kBAAmBsK,IAErB,eAAC,GAAD,CACE5K,SAAUA,EACV7b,MAAOumB,EAA4BpJ,kBACnCrB,eAAgB0K,EAChBvK,YAAaA,EACbxb,MAAO2lB,GAA4B1L,WAErC,eAAC5X,GAAA,EAAD,CAAYP,GAAIob,GAAkBlgB,KAAlC,SAAyC2oB,GAA4BC,WACrE,eAAC,GAAD,CACExK,SAAUA,EACV7b,MAAOumB,EAA4BN,aACnC7V,QAAS9Q,OAAOpB,OAAiCikB,IACjDlG,YAAaA,EACb4G,YClGc,iBDoGhB,gBAAC1B,GAAA,EAAD,CAAW5e,GAAI2Y,GAAwBM,UAAvC,UACE,eAAC4F,GAAA,EAAD,CAAkBC,WAAY,eAACC,GAAA,EAAD,IAA9B,SACE,eAACxe,GAAA,EAAD,UAAasjB,GAA4B9L,SAE3C,gBAACiH,GAAA,EAAD,WACE,eAAC,GAAD,CACEtH,QAASsM,EAA4BtM,QACrCgC,YAAaA,EACbJ,SAAUA,IAEZ,eAACnL,GAAA,EAAD,IACA,eAAC,GAAD,CACEmL,SAAUA,EACVpb,MAAO2lB,GAA4BN,SACnC3G,SCrHM,WDsHNnf,MAAOumB,EAA4BT,SACnC7J,YAAaA,IAEf,eAAC,GAAD,CACEJ,SAAUA,EACVpb,MAAO2lB,GAA4BL,WACnC5G,SC3HQ,aD4HRnf,MAAOumB,EAA4BR,WACnC9J,YAAaA,IAEf,eAAC,GAAD,CACEJ,SAAUA,EACVpb,MAAO2lB,GAA4BJ,OACnC7G,SCjII,SDkIJnf,MAAOumB,EAA4BP,OACnC/J,YAAaA,IAEf,eAACvL,GAAA,EAAD,IACA,eAAC,GAAD,CACEmL,SAAUA,EACVnd,MAAO6nB,EAA4BL,UACnCrD,YCvIO,YDwIP5G,YAAaA,EACbxb,MAAO2lB,GAA4BF,YAErC,eAACxV,GAAA,EAAD,IACA,eAAC,GAAD,CACEzG,OAAQmc,GAA4BvW,QACpC6O,UAAW6H,EAA4B1W,QACvCoM,YAAaA,EACbJ,SAAUA,IAEZ,eAACnL,GAAA,EAAD,IACA,eAAC,GAAD,CACE8O,OAAQ+G,EAA4BpM,cACpC8B,YAAaA,EACbJ,SAAUA,aAMlB,eAACvZ,EAAA,EAAD,CAAKC,GAAI2Y,GAAwBK,yBAAjC,SAA4D6K,GAA4BnL,iBAKzF,ME9II4L,GAA6D,SAAC,GAQpE,IAPL3W,EAOI,EAPJA,OACA/F,EAMI,EANJA,MACAhG,EAKI,EALJA,QACA2iB,EAII,EAJJA,MACAjc,EAGI,EAHJA,SACAoR,EAEI,EAFJA,YACAsE,EACI,EADJA,+BAEMwG,EAAqBzC,mBACzB,kBACEwC,EAAM3oB,KAAI,SAAC6oB,EAAMjhB,GACf,OAAQihB,GACN,KAAKhjB,GAAS8C,OACZ,OACE,eAAC,GAAD,CACE3C,QAASA,EACT0G,SAAUA,EACVoR,YAAaA,EACbsE,+BAAgCA,GAC3Bxa,GAGX,KAAK/B,GAASuC,oBACZ,OACE,eAAC,GAAD,CACEpC,QAASA,EACT0G,SAAUA,EACVoR,YAAaA,EACbsE,+BAAgCA,GAC3Bxa,GAGX,KAAK/B,GAASqC,kBACZ,OACE,eAAC,GAAD,CACElC,QAASA,EACT0G,SAAUA,EACVoR,YAAaA,EACbsE,+BAAgCA,GAC3Bxa,GAGX,KAAK/B,GAASsC,kBACZ,OACE,eAAC,GAAD,CACEnC,QAASA,EACT0G,SAAUA,EACVoR,YAAaA,EACbsE,+BAAgCA,GAC3Bxa,GAGX,KAAK/B,GAASgD,UACZ,OACE,eAAC,GAAD,CACE7C,QAASA,EACT0G,SAAUA,EACVoR,YAAaA,EACbsE,+BAAgCA,GAC3Bxa,GAGX,KAAK/B,GAAS+C,oBACZ,OACE,eAAC,GAAD,CACE5C,QAASA,EACT0G,SAAUA,EACVoR,YAAaA,EACbsE,+BAAgCA,GAC3Bxa,GAGX,QACE,OAAO,WAGf,CAACwa,EAAgCpc,EAAS8X,EAAapR,EAAUic,IAEnE,OACE,gBAACG,GAAA,EAAD,CAAQ5Z,QAASX,GAA2Bwa,OAAQva,GAAc6D,KAAMN,EAAQ3N,GAAIoX,GAAoBC,OAAxG,UACE,eAACtX,EAAA,EAAD,CAAKC,GAAIoX,GAAoB1P,OAA7B,SACE,eAACmD,GAAA,EAAD,CAAQF,QAAS/C,EAAO5H,GAAIoX,GAAoBzO,OAAhD,SACE,eAACoC,GAAA,EAAD,CAASpL,MAAOwX,GAAhB,SACE,eAACyN,GAAA,EAAD,CAAc5kB,GAAIoX,GAAoBE,gBAI5C,eAACnJ,GAAA,EAAD,IACA,eAACpO,EAAA,EAAD,CAAKC,GAAIoX,GAAoBG,QAA7B,SAAuCiN,IACvC,eAACzkB,EAAA,EAAD,CAAKC,GAAIoX,GAAoBxR,OAC7B,eAAC7F,EAAA,EAAD,CAAKC,GAAIoX,GAAoBI,OAA7B,SACE,eAACjX,GAAA,EAAD,CAAYP,GAAIoX,GAAoBlc,KAApC,SAA2Cic,W,8BCpHtC0N,GAAoBC,sCAEpBC,GAAgB,CAAC,eAAD,6DAAiFnpB,KAC5G,SAACopB,GAAD,OAAaH,GAAoBG,KAGtBC,GAAkBloB,OAAOwF,YACpC,CACE,CAACd,GAASuC,oBAAV,mBACA,CAACvC,GAASqC,kBAAV,oBACA,CAACrC,GAAS8C,OAAV,kBACA,CAAC9C,GAASsC,kBAAV,oBACA,CAACtC,GAASgD,UAAV,mBACA,CAAChD,GAAS+C,oBAAV,qBACA5I,KAAI,oCAAE6oB,EAAF,KAAQS,EAAR,WAAqB,CAACT,EAAMI,GAAoBK,OCC3CC,GAAyD,SAAC,GAAgD,IAA9CxX,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,QAASwX,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAKnG,OACE,gBAACrX,GAAA,EAAD,CAAQJ,QALU,WAClBwX,EAAUC,GACVzX,KAG8BK,KAAMN,EAApC,UACE,eAACO,GAAA,EAAD,UAAc3F,GAA8B5I,QAC5C,eAACwO,GAAA,EAAD,IACA,eAACU,GAAA,EAAD,UACGxJ,GAAezJ,KAAI,SAAC0pB,EAAa9hB,GAAd,OAClB,gBAAC+hB,GAAA,EAAD,CAEE5a,QAAS,WACPya,EAAUE,GACV1X,KAEF5N,GAAIuM,GAAYc,KANlB,UAQE,eAACmY,GAAA,EAAD,CAAaxlB,GAAIuM,GAAYiB,YAA7B,SACG8X,EAAY1pB,KAAI,SAACgB,GAAD,OACf,eAAC2D,GAAA,EAAD,CAAYP,GAAIuM,GAAYkB,SAA5B,SACGxS,EAAwB2B,EAAKkI,IADWlI,EAAKkI,QAKpD,eAAC2gB,GAAA,EAAD,CACE5hB,UAAWoG,GACXjK,GAAIuM,GAAYgB,MAChBA,MAAOwX,GAAcvhB,GACrBiF,IAAKF,GAA8BE,IAAMjF,MAlBtCA,Y,UC1BJkiB,GAAyC,CACpDC,SAAU,CACRxhB,OAAO,OACP/E,QAAST,GACTinB,YAAajnB,GACbknB,YAAa,EACbC,YAAY,SAEd1lB,MAAO,CACLb,QAAQ,OACRoK,SAAS,SACT2C,YAAa5Q,EAAG,IAElBqqB,QAAS,CACP1mB,QAAS3D,EAAG,EAAG,GACf6D,QAAQ,OACRymB,WAAW,SACXC,SAAS,SACTC,aAAa,YAEfhrB,KAAM,CACJmE,QAAS3D,EAAG,EAAG,GACf6D,QAAQ,OACRE,WAAW,SACXC,eAAe,SACfE,SAAUlE,EAAG,KAEfyqB,SAAU,CACRvmB,SAAUlE,EAAG,IACb2D,QAAS3D,EAAG,IAEdgM,OAAQ,CACNvD,OAAQiiB,GACR7mB,QAAQ,OACRE,WAAW,SACXC,eAAe,gBACf2mB,OAAO,aACPjnB,QAAST,GACTinB,YAAajnB,GACb2nB,kBAAmB,EACnBC,kBAAkB,QAClBlnB,QAAS,I,2BCvCAmnB,GAAb,cAIE,WAAqBpQ,EAAsBhW,EAAwBqmB,EAAyB1c,GAAe,0BAAtFqM,MAAqF,KAA/DhW,QAA+D,KAAvCqmB,SAAuC,KAAd1c,OAAc,KAHjGzK,WAGiG,OAFjG6E,YAEiG,OADjGuiB,cACiG,EACxGC,KAAKrnB,MAAQqnB,KAAKvmB,MAAQumB,KAAK5c,KAC/B4c,KAAKxiB,OAASwiB,KAAKvQ,IAAMuQ,KAAKF,OAC9BE,KAAKD,SAAWhrB,EAAGirB,KAAKvQ,IAAKuQ,KAAKvmB,MAAOumB,KAAKF,OAAQE,KAAK5c,SCFlD6c,GAAa,SAACC,EAAgB9Q,EAAYC,GACrD,MAAyB,CAAC6Q,EAAO,GAAG,GAAIA,EAAO,GAAG,GAAIA,EAAO,GAAG,GAAIA,EAAO,GAAG,IAC9E,OADA,MACa9Q,GAAMA,GADnB,YACqCC,GAAMA,GAD3C,MCJW8Q,GAAqB,SAChCC,EACAnlB,GAFgC,OAIhC7E,OAAOwF,YACLwkB,EAAQnrB,KAAI,SAACsB,GACX,IAAM8pB,EAAmBC,aAAOrlB,GAAS,SAACmE,GAAD,OAAO7D,OAAO6D,EAAE7I,OACzD,QAA4B2d,IAAxBmM,EAAiB,GAAkB,MAAM,IAAIE,MAAJ,sCAC7C,MAAO,CAAChqB,EAAK8pB,QAWNG,GAA6B,SACxCJ,EACAnlB,EACAwlB,GAHwC,IAIxCC,EAJwC,uDAI5B,EAJ4B,OAMxCtqB,OAAOwF,YACLwkB,EAAQnrB,KAAI,SAACsB,GACX,IAAM8pB,EAAmBC,aAAOrlB,GAAS,SAACmE,GAAD,OAAO7D,OAAO6D,EAAE7I,OACzD,QAA4B2d,IAAxBmM,EAAiB,GAAkB,MAAM,IAAIE,MAAJ,sCAC7C,IAAMI,EAAaN,EAAiB,GAAKA,EAAiB,GACpDO,EAAI,EAAGH,EAAc,IAAOE,EAAaD,EAAY,IAAOC,GAC5DE,EAAgC,CAACR,EAAiB,GAAKO,EAAE,GAAIP,EAAiB,GAAKO,EAAE,IAC3F,MAAO,CAACrqB,EAAKsqB,QCnCbC,GAAgB,CAAEC,IAAK,EAAGC,KAAM,IAKzBC,GAAiBC,KAAK9L,IAAL,MAAA8L,KAAI,aAAQ9qB,OAAOpB,OAAO8rB,MAO3CK,GAA+D,SAACC,EAAGvkB,GAAJ,OAC1EA,EAAM,IAAM,GAAKikB,GAAcC,KAAOD,GAAcE,MCNzCK,GACX,SAACpN,EAAyDze,GAA1D,OACA,SAACV,GAAD,OACsBU,EAApBye,EAA0Bzf,OAAOM,EAAKmf,IAV9B,OCICqN,GACX,SAAIC,GAAJ,OACA,WAAmCzsB,GAAmB,IAAnD0sB,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,QACJlgB,EAAU4S,aAAOxe,EAASua,KAChC3O,EAAQiE,aAAakc,SAASvR,IAAgBpR,MAAM4P,GAAUhI,QAASwJ,IACvE5O,EACGogB,KAAKJ,EAAezsB,GAAMK,KAAK6P,KAC/BjG,MAAM4P,GAAUvL,KAAMrO,EAAGysB,IACzBziB,MAAM4P,GAAUc,IAAK1a,EAAG0sB,MAGlBG,GAAoB,WAE/B,OADAzN,aAAOxe,EAASua,KAAgB1K,aAAakc,SAASvR,IAAiBpR,MAAM4P,GAAUhI,QAASwJ,IACzF,O,SdvBGsM,K,cAAAA,E,aAAAA,E,WAAAA,Q,cCAAC,K,sBAAAA,E,oBAAAA,E,eAAAA,Q,KcEL,IAAMmF,IAAiC,sBAC3C/mB,GAASuC,oBADkC,2BAE3CvC,GAASqC,kBAFkC,4BAG3CrC,GAAS8C,OAHkC,8BAI3C9C,GAASsC,kBAJkC,4BAK3CtC,GAAS+C,oBALkC,4BAM3C/C,GAASgD,UANkC,mBAYjCgkB,IAA2C,sBACrDhnB,GAASuC,oBAD4C,6BAErDvC,GAASqC,kBAF4C,8BAGrDrC,GAAS8C,OAH4C,gCAIrD9C,GAASsC,kBAJ4C,8BAKrDtC,GAAS+C,oBAL4C,8BAMrD/C,GAASgD,UAN4C,qBAY3CikB,IAAyC,sBACnDjnB,GAASuC,oBAD0C,+BAEnDvC,GAASqC,kBAF0C,gCAGnDrC,GAAS8C,OAH0C,kCAInD9C,GAASsC,kBAJ0C,gCAKnDtC,GAAS+C,oBAL0C,gCAMnD/C,GAASgD,UAN0C,uBCrBzCkkB,GAA0B,sBAC1BC,GAAc,8BACdC,GAAe,8BAGfC,GAA8B,SAACxb,EAAkByb,EAAwB/T,GAA3C,MAA4E,CACrH,QAAS,CACP5V,QAASP,GACTmqB,KAAK,mBAEP,SAAU,CACRpjB,KAAK,OACL0H,QAAUyb,EAAmCzb,EAAQ,GAAK,IAAhCA,EAAQ,GAAK,IACvC,gCAAiC,CAC/BA,QAASA,EAAQ,GAAK,IACtB4I,OAAQja,EAAU+Y,KAGtB,iCAAkC,CAChCmB,WAAW,SACXlJ,WAAW,OACXrH,KAAM/G,GACNe,SAAUlE,EAAG,OC1BJutB,GAA0B,SAAC3pB,EAAe6E,EAAgB0F,GAAhC,MAA6D,CAClGvK,MAAOA,EAAQuK,EAAOvK,MACtB6E,OAAQA,EAAS0F,EAAO1F,OACxB9E,QAASwK,EAAO6c,WC8CL1iB,GAAuE,SAAC,GAgB9E,IAfL1E,EAeI,EAfJA,MACA6E,EAcI,EAdJA,OACAvC,EAaI,EAbJA,QACAxD,EAYI,EAZJA,kBACAwc,EAWI,EAXJA,kBACAsO,EAUI,EAVJA,aACAC,EASI,EATJA,sBACAC,EAQI,EARJA,qBACAzU,EAOI,EAPJA,iBACAF,EAMI,EANJA,sBACAmD,EAKI,EALJA,cACAD,EAII,EAJJA,UACAD,EAGI,EAHJA,QACApK,EAEI,EAFJA,QACA0H,EACI,EADJA,WAEMnL,EAASkY,mBAAQ,+BAAUyE,GAAV,aAAoB9O,MAAU,CAACA,IAChD7T,EAAYhD,iBAAoB,MAChC1E,EAAQktB,aAAazR,GACrB0R,EAAe1B,GhF7CW,GgF8CzB2B,EAA4BjqB,EAAQuK,EAAOvK,MAA/BkqB,EAAsCrlB,EAAS0F,EAAO1F,OAASmlB,EAGlF1S,aAAUta,EAASqsB,KAA6Bc,QAAQb,IAAgB,SAAC7iB,GAAD,OAAQA,EAAyBrI,YAEzG,IAAMgsB,EAA4Bha,uBAAY,WAAO,IAAD,EAC5Cia,EAAO9lB,EAAU/C,QACvB,GAAK6oB,EAAL,CACA,IAAMpU,EAAMuF,aAAO6O,GACnBpU,EAAIqB,U1G3CqB,K0G2CMgT,SAE/B,IAAMC,EAAkB/C,GAAmB1oB,EAAmBwD,GACxDkoB,EAASC,aAAW,CAAC,EAAGR,IAAaS,OAAO5rB,EAAkBxC,KAAI,SAACc,GAAD,OAAevB,OAAOuB,OACxFutB,EAAU7rB,EAAkBxC,KAAI,SAACc,GAAD,OACpCwtB,aAAY,CAACV,EAAa,IAAIQ,OAAOH,EAAgBntB,OAGjDytB,E9FGsC,SAC9C/rB,GAD8C,OAEdrB,OAAOwF,YAAYnE,EAAkBxC,KAAI,SAACsB,GAAD,MAAS,CAACA,EAAK,U8FLnEktB,CAAiChsB,GAE9CisB,EAAuB,WAC3B,GAAIjsB,EAAkB4D,OAAM,SAACsoB,GAAD,OAAyC,OAA1BH,EAAWG,MAIpD,OAFA1oB,EAAQkO,SAAQ,SAACrU,GAAD,OAAWA,EAAKiC,UAAW,UAC3CwrB,IAGFtnB,EAAQkO,SAAQ,SAACrU,GACfA,EAAKiC,SAAWU,EAAkB4D,OAAM,SAACsoB,EAAW9mB,GAClD,IAAM+mB,EAAgBJ,EAAWG,GACjC,GAAsB,OAAlBC,EAAwB,OAAO,EACnC,IRjGgBC,EAAgBC,EQiG1BC,EAAcT,EAAQzmB,GAAKtB,OAAOzG,EAAK6uB,KAC7C,ORlGgBE,EQkGCE,IRlGeD,EQkGFF,GRlGsD,IAAMC,EAASC,EAAM,SQqG7GvB,KAQIyB,GAAwF,oBAC3FvH,GAAY7M,OAAQ,kBAAM6S,EAAqB3nB,GAASuC,wBADmC,eAE3Fof,GAAYwH,MAAO,SAACC,EAAYC,GAC1BrW,IACH0V,EAAWW,GAAYD,EAAWE,UAClCV,QALwF,eAQ3FjH,GAAY5M,KAAM,SAACqU,EAAYC,GAE9B,OADAX,EAAWW,GAAYD,EAAWE,UAC9B3sB,EAAkBuE,MAAK,SAACzF,GAAD,OAA6B,OAApBitB,EAAWjtB,MACtCmtB,KAfXjsB,EAAkB0R,SAAQ,SAAC5S,GAAD,OAAUitB,EAAWjtB,GAAO,aACtDksB,EAAqB,UAGuE,GAgBxF4B,EAAsB,CAC1B,EAxFeC,IACC,GAwFhB,CAzFeA,GAyFAzB,EAxFC,IA2FZphB,EAAQ8iB,eACXC,GAAG/H,GAAY7M,MAAOoU,EAAQvH,GAAY7M,QAC1C4U,GAAG/H,GAAYwH,KAAMD,EAAQvH,GAAYwH,OACzCO,GAAG/H,GAAY5M,IAAKmU,EAAQvH,GAAY5M,MACxCyQ,OAAO+D,GAWVzV,EACGqB,UAxG0B,wBAyG1Bnb,KAAKmG,GACLwpB,QACAC,OAAO/V,GAAaK,MACpB2V,KAAKhW,GAAevP,GAX+C,SAACtK,GAAD,OACpE8vB,eACEntB,EAAkBxC,KAAI,SAACc,EAAW8G,GAAZ,MAAoB,CAACsmB,EAAO3uB,OAAOuB,IAAcutB,EAAQzmB,GAAKtB,OAAOzG,EAAKiB,aAUjG4uB,KAAKhW,GAAeO,MAAO8S,IAC3B2C,KAAKhW,GAAenP,YAAawR,GAEjCwT,GAAG9H,GAAYmI,UAAWvD,GAAmBnrB,IAC7CquB,GAAG9H,GAAYoI,SAAUlD,IACzB7iB,MAAM4P,GAAUY,OAAQ8R,GAAiBpN,EAAmBze,IAE/D,IAIMuvB,EAAgBnW,EACnBqB,UA1HG,QA2HHnb,KAAK2C,GACLgtB,QACAC,OAAO/V,GAAaE,GACpB8V,KAAKhW,GAAeQ,WAT+C,SAACpZ,GAAD,OACpEN,EAAa,CAAC0tB,EAAO3uB,OAAOuB,IAAc,OASzCivB,MAhCkD,SAACjvB,EAAW8G,EAAKooB,GAAjB,OACnD9Q,aAAO8Q,EAASpoB,IAAMqoB,KAAKC,aAAS7B,EAAQzmB,QAgC3CqoB,KAAKzjB,GAGRsjB,EACGL,OAAO/V,GAAapa,MACpBowB,KAAKhW,GAAetQ,EAAG8iB,IACvB5sB,KAAKuB,GACL6uB,KAAKhW,GAAeO,MAAOgT,IAE9BM,GAAsB,WACpBuC,EAAcC,MAAK,SAACjvB,EAAW8G,EAAKooB,GAClC,IAAMG,EAAOjR,aAAO8Q,EAASpoB,IAC7B0nB,eAASc,MAAMD,MAEjBhvB,OAAOC,KAAKmtB,GAAYra,SAAQ,SAACmc,GAAD,OAAc9B,EAAW8B,GAAW,WAItErV,aAAUta,EAASqsB,KAA6Bc,QAAQb,IAAgB,SAAC7iB,GAAD,OAAQA,EAAyBrI,eACxG,CACDkE,EACA2nB,EACAC,EACAN,EACAE,EACAxO,EACAxc,EACA+qB,EACA1U,EACAkD,EACAxb,IASF,OANAiF,qBACE,kBAAMsoB,MAEN,CAACtrB,EAAmBwc,EAAmB2O,EAAYC,EAAa7R,EAAWlD,EAAuBmD,IAGhG2R,EAAa,GAAKC,EAAc,EAAU,eAACzpB,EAAA,EAAD,IAC1C3B,EAAkBgN,Q3DhNgC,E2DkNlD,eAACrL,EAAA,EAAD,CACEC,GAAI8oB,GAA4Bxb,EAASqH,EAAkBK,GAC3DhP,GAAIyiB,GAAkBhnB,GAASuC,qBAFjC,SAIE,sBAAK1E,MAAOA,EAAO6E,OAAQA,EAAQ6B,GAAIwiB,GAAQ/mB,GAASuC,qBAAxD,SACE,oBACEyB,IAAK5B,EACLvE,MAAOiqB,EACPplB,OAAQqlB,EACR1T,UAAW1Z,EAAa,CAACyN,EAAOE,KAAMF,EAAOuM,IAAMkT,UAO3D,eAACvpB,EAAA,EAAD,CAAKC,GAAIipB,GAAwB3pB,EAAO6E,EAAQ0F,GAAS7D,GAAI0iB,GAAgBjnB,GAASuC,qBAAtF,SACGwU,MC9NM0T,GAAY,SAAClvB,GAAD,OACvBA,EAAKpB,KAAI,SAACiB,EAAQsvB,GAAT,OAAoBnvB,EAAKpB,KAAI,SAACwwB,EAAQC,GAAT,MAAqB,CAAEF,SAAQE,SAAQxvB,SAAQuvB,gBAAYE,QAOtFC,GAAmB,SAACnhB,EAAgBohB,GAAjB,OAA6CphB,EAAS,EAAIohB,GAO7EC,GACX,SAAC/W,EAAkBgX,GAAnB,OACA,gBAAGP,EAAH,EAAGA,OAAQE,EAAX,EAAWA,OAAX,OACEjwB,EAAa,EAAEswB,EAASP,GAAUzW,EAAKpW,MAAO+sB,EAAS3W,EAAKvR,WCvBnDwoB,GAAgB,yBAChBC,GAAgB,8BAChBC,GAAU,wBAGVjE,GAAc,4BAGdkE,GAA4B,SACvCxf,EACAqH,EACAK,GAHuC,MAI1B,CACb,QAAS,CACP5V,QAASP,GACTmqB,KAAK,mBAEP,2BAA4B,CAC1B+D,eAAe,aACf,SAAU,CACR7W,OAAQrX,IAEV,SAAU,CACRU,QAAQ,SAGZ,2BAA4B,CAC1BwtB,eAAe,aACfnnB,KAAK,OACLsQ,OAAQrX,IAEV,2BAA4B,CAC1B,SAAU,CACRoO,WAAW,OACXrH,KAAK,UAGT,4BAA6B,CAC3BonB,YAAcrY,EAAsCrH,EAAQ,GAAK,IAAhCA,EAAQ,GAAK,IAC9C,8BAA+B,CAC7B1H,KAAM3J,EAAU+Y,GAChBgY,YAAa1f,EAAQ,GAAK,MAG9B,iCAAkC,CAChCA,QAAS,KCiBA2f,GACR,EADQA,GAER,EAGQnpB,GAAmE,SAAC,GAmB1E,IAlBLxE,EAkBI,EAlBJA,MACA6E,EAiBI,EAjBJA,OACAvC,EAgBI,EAhBJA,QACAsnB,EAeI,EAfJA,aACA9qB,EAcI,EAdJA,kBACAwc,EAaI,EAbJA,kBACAuO,EAYI,EAZJA,sBACAC,EAWI,EAXJA,qBACAzU,EAUI,EAVJA,iBACAJ,EASI,EATJA,iBACAE,EAQI,EARJA,sBACAmD,EAOI,EAPJA,cACAsH,EAMI,EANJA,UACAC,EAKI,EALJA,kBACAC,EAII,EAJJA,gBACA1H,EAGI,EAHJA,QACApK,EAEI,EAFJA,QACA0H,EACI,EADJA,WAEMnL,EAASkY,mBAAQ,+BAAUyE,GAAV,aAAoB9O,MAAU,CAACA,IAChD7T,EAAYhD,iBAAoB,MAChC1E,EAAQktB,aAAazR,GAEpB2R,EAA4BjqB,EAAQuK,EAAOvK,MAA/BkqB,EAAsCrlB,EAAS0F,EAAO1F,OAGzEyS,aAAUta,EAASqwB,KAAmBlD,QAAQb,IAAgB,SAAC7iB,GAAD,OAAQA,EAAyBrI,YAE/F+Y,GAAWlC,EAAkBqY,IAE7B,IAAMM,EAA0Bxd,uBAAY,WAAO,IAAD,EAC1Cia,EAAO9lB,EAAU/C,QACvB,GAAK6oB,EAAL,CACA,IAAMpU,EAAMuF,aAAO6O,GACnBpU,EAAIqB,U7GtEqB,K6GsEMgT,SAE/B,IAAMuD,EAAkB/uB,EAAkBgN,OACpCsK,EAAmB,CACvBpW,MAAOiqB,EAAa4D,EACpBhpB,OAAQqlB,EAAc2D,GAExB,KAAIZ,GAAiB7W,EAAKpW,MAAO6f,GAAqB,GAAKoN,GAAiB7W,EAAKvR,OAAQib,GAAmB,GAA5G,CAGA,IAAMyK,EAAkB/C,GAAmB1oB,EAAmBwD,GAE9D,EAAyB,CACvBsoB,aAAY,CAAC/K,EAAmBzJ,EAAKpW,MAAQ6f,IAC7C+K,aAAY,CAACxU,EAAKvR,OAASib,EAAiBA,KAFvC0K,EAAP,KAAesD,EAAf,KAKA,EAAuB,CAACC,aAAWvD,GAASgC,aAASsB,IAA9CE,EAAP,KAAcC,EAAd,KACAD,EAAME,MAAMP,IAASQ,SAASjE,GAC9B+D,EAAMC,MAAMP,IAASQ,UAAUlE,GAE/B,IAAMmE,EACJ,SAACrqB,EAAgC0oB,GAAjC,OACA,SAACrvB,EAAWwgB,EAAO0O,GACjBvoB,EAAE2mB,OAAOH,EAAgBntB,IACzBoe,aAAO8Q,EAAS1O,IAAQ2O,KAAKE,KAQjCxW,EACGqB,UA/EY,UAgFZnb,KAAK2C,GACLgtB,QACAC,OAAO/V,GAAaE,GACpB8V,KAAKhW,GAAeO,MAAOgX,IAC3BvB,KAAKhW,GAAeQ,WAZ4C,SAACpZ,EAAW8G,GAAZ,OACjEpH,EAAa,EAAE+wB,EAAkB,EAAI3pB,GAAOkS,EAAKpW,MAAO,OAYvDqsB,KAAK+B,EAAQ5D,EAAQwD,IAGxB/X,EACGqB,UAxFY,UAyFZnb,KAAK2C,GACLgtB,QACAC,OAAO/V,GAAaE,GACpB8V,KAAKhW,GAAeO,MAAOgX,IAC3BvB,KAAKhW,GAAeQ,WApB4C,SAACpZ,EAAW8G,GAAZ,OACjEpH,EAAa,CAAC,EAAGoH,EAAMkS,EAAKvR,YAoB3BwnB,KAAK+B,EAAQN,EAAQG,IAExB,IAAMI,EAAwC,SAACC,EAAYpqB,EAAKooB,GAE9D9B,EAAOE,OAAOH,EAAgB+D,EAAW/wB,SACzCuwB,EAAOpD,OAAOH,EAAgB+D,EAAWxB,SAEzC,IAAMyB,EAAO/S,aAAO8Q,EAASpoB,IAK7BqqB,EACGxC,OAAO/V,GAAaI,MACpB4V,KAAKhW,GAAeO,MDnKN,yBCoKdyV,KAAKhW,GAAevQ,EAAGoa,GACvBmM,KAAKhW,GAAetQ,EAAGoa,GACvBkM,KAAKhW,GAAehW,MAAOitB,GAAiB7W,EAAKpW,MAAO6f,IACxDmM,KAAKhW,GAAenR,OAAQooB,GAAiB7W,EAAKvR,OAAQib,IAG7DyO,EACGjX,UAtHc,cAuHdnb,KAAKmG,GACLwpB,QACAC,OAAO/V,GAAaG,QACpB6V,KAAKhW,GAAeS,IAlB8B,SAACta,GAAD,OAAUquB,EAAO5nB,OAAOzG,EAAKmyB,EAAW/wB,aAmB1FyuB,KAAKhW,GAAeU,IAlB8B,SAACva,GAAD,OAAU2xB,EAAOlrB,OAAOzG,EAAKmyB,EAAWxB,aAmB1Fd,KAAKhW,GAAeW,EAAGiJ,GACvBoM,KAAKhW,GAAeO,MAAO8W,IAC3BxB,GAAG9H,GAAYmI,UAAWvD,GAAmBnrB,IAC7CquB,GAAG9H,GAAYoI,SAAUlD,IACzB7iB,MAAM4P,GAAU1P,KAAMoiB,GAAiBpN,EAAmBze,KAGzD0xB,EAAOtY,EACVqB,UAjIU,QAkIVnb,KAAKywB,GAAU9tB,IACfgtB,QACAC,OAAO/V,GAAaE,GACpB8V,KAAKhW,GAAeO,MD5LJ,yBC6LhByV,KAAKhW,GAAeQ,UAAW2W,GAAyB/W,EAAMyX,EAAkB,IAChFxB,KAAKgC,GAGRE,EACG5wB,QAAO,SAAC2wB,GAAD,OAAgBA,EAAWzB,SAAWyB,EAAWvB,UACxDhB,OAAO/V,GAAapa,MACpBowB,KAAKhW,GAAevQ,EAAG,IAAMoa,GAC7BmM,KAAKhW,GAAetQ,EAAGoa,EnFrLI,ImFsL3BlkB,KAAKyB,GAER,IAAMmnB,EAAyB,CAC7B+J,KAAM,MAGFC,EAAa,WACjBD,EAAKlC,MAAK,SAAC5lB,EAAGvC,EAAKooB,GACjBxjB,eAAQ4jB,MAAMlR,aAAO8Q,EAASpoB,SAI5B6mB,EAAuB,SAAC,EAAgCU,GAAiC,IAA/DluB,EAA8D,EAA9DA,OAAQuvB,EAAsD,EAAtDA,OAClCrB,IACFnpB,EAAQkO,SACN,SAACrU,GAAD,OAAWA,EAAKiC,SAAWkpB,GAAWmE,EAAWjB,EAAO5nB,OAAOzG,EAAKoB,KAAWuwB,EAAOlrB,OAAOzG,EAAK2wB,SAEpGlD,MAIEyB,GAA0E,oBAC7EvH,GAAY7M,OAAQ,SAACwR,EAAD,GAA4C,IAAtCoE,EAAqC,EAArCA,OAAQE,EAA6B,EAA7BA,OAAQxvB,EAAqB,EAArBA,OAAQuvB,EAAa,EAAbA,OACjDhD,EAAqB3nB,GAASqC,mBACzBggB,EAAS+J,MAAQ/J,EAAS+J,KAAK1B,SAAWA,GAAUrI,EAAS+J,KAAKxB,SAAWA,IAChFyB,IACAhK,EAAS+J,KAAO,CAAE1B,SAAQE,UAC1BvC,EAAOE,OAAOH,EAAgBhtB,IAC9BuwB,EAAOpD,OAAOH,EAAgBuC,QAP4C,eAU7EhJ,GAAYwH,MAAO,WAAgBgD,GAAgB,IAA7B7C,EAA4B,EAA5BA,UAChBtW,GAEH4V,EAAqBuD,EADE7C,MAZmD,eAgB7E3H,GAAY5M,KAAM,WAAgBoX,GAAgB,IAC3CG,EAD0C,EAA5BhD,UAEpBV,EAAqBuD,EAAYG,GAC5BA,GACH3E,EAAqB,SApBqD,GAwB1E4B,EAAsB,CAC1B,CAAC,EAAG,GACJ,CAACtV,EAAKpW,MAAOoW,EAAKvR,SAGd6pB,EAAY5lB,eACf+iB,GAAG/H,GAAY7M,MAAOoU,EAAQvH,GAAY7M,QAC1C4U,GAAG/H,GAAYwH,KAAMD,EAAQvH,GAAYwH,OACzCO,GAAG/H,GAAY5M,IAAKmU,EAAQvH,GAAY5M,MACxCyQ,OAAO+D,GAEV7B,GAAsB,WACpB2E,IACAhK,EAAS+J,KAAO,QAGlBA,EAAKhC,KAAKmC,GAGVzY,EACGqB,UA/MqB,mBAgNrBnb,KAAKywB,GAAU9tB,IACfgtB,QACAC,OAAO/V,GAAaE,GACpB8V,KAAKhW,GAAeO,MAAO+W,IAC3BtB,KAAKhW,GAAeQ,UAAW2W,GAAyB/W,EAAMyX,EAAkB,IAChFxB,KAAKgC,GAGR/W,aAAUta,EAASqwB,KAAmBlD,QAAQb,IAAgB,SAAC7iB,GAAD,OAAQA,EAAyBrI,gBAC9F,CACDkE,EACA2nB,EACAC,EACArK,EACAC,EACA8J,EACAtO,EACAxc,EACAgrB,EACAD,EACA1U,EACAyK,EACA/iB,IAmBF,OAhBAiF,qBACE,kBAAM8rB,MAEN,CACE9uB,EACAwc,EACA2O,EACAC,EACAtK,EACAC,EACAC,EACA3K,EACAmD,IAIA2R,EAAa,GAAKC,EAAc,EAAU,eAACzpB,EAAA,EAAD,IAE5CwsB,GAAiBhD,EAAanrB,EAAkBgN,OAAQ+T,GAAqB,GAC7EoN,GAAiB/C,EAAcprB,EAAkBgN,OAAQgU,GAAmB,EAG1E,eAACrf,EAAA,EAAD,CAAKC,GAAIipB,GAAwB3pB,EAAO6E,EAAQ0F,GAAS7D,GAAI0iB,GAAgBjnB,GAASqC,mBAAtF,SACGub,KAGHjhB,EAAkBgN,Q7C/T+B,E6CiUjD,eAACrL,EAAA,EAAD,CACEC,GAAI8sB,GAA0Bxf,EAASqH,EAAkBK,GACzDhP,GAAIyiB,GAAkBhnB,GAASqC,mBAFjC,SAIE,sBAAKxE,MAAOA,EAAO6E,OAAQA,EAAQ6B,GAAIwiB,GAAQ/mB,GAASqC,mBAAxD,SACE,oBAAG2B,IAAK5B,EAAWiS,UAAW1Z,EAAa,CAACyN,EAAOE,KAAMF,EAAOuM,YAMtE,eAACrW,EAAA,EAAD,CAAKC,GAAIipB,GAAwB3pB,EAAO6E,EAAQ0F,GAAS7D,GAAI0iB,GAAgBjnB,GAASqC,mBAAtF,SACGub,MC/UD4O,GAAc,SAA+B5qB,EAAMC,EAAM4qB,GAC7D,OAAmB,IAAf7qB,EAAE6qB,IAAyC,IAAf5qB,EAAE4qB,GAAoB,EAAI,GACvC,IAAf7qB,EAAE6qB,IAA0C,IAAf5qB,EAAE4qB,GAAqB,GAAK,EAEtD5qB,EAAE4qB,GAAW7qB,EAAE6qB,IAAY,EAAI5qB,EAAE4qB,GAAW7qB,EAAE6qB,GAAW,EAAI,GAQzDC,GAAgB,SAACrO,EAAoBoO,GAArB,OAC3BpO,IAAatY,GAASkb,KAAO,SAACrf,EAAGC,GAAJ,OAAU2qB,GAAY5qB,EAAGC,EAAG4qB,IAAW,SAAC7qB,EAAGC,GAAJ,OAAW2qB,GAAY5qB,EAAGC,EAAG4qB,KCXtFE,GAAY,SACZxF,GAAc,iBAGdyF,GAAiB,SAAC/gB,EAAkByb,EAAwB/T,GAA3C,MAA4E,CACxG,QAAS,CACP5V,QAASP,GACTmqB,KAAK,mBAEP,YAAa,CACX1b,QAAUyb,EAAmCzb,EAAQ,GAAK,IAAhCA,EAAQ,GAAK,IACvC+Y,OAAO,UACP,mBAAoB,CAClBzgB,KAAM3J,EAAU+Y,GAChB1H,QAASA,EAAQ,GAAK,QCef/I,GAA6C,SAAC,GAiBpD,IAhBL3C,EAgBI,EAhBJA,QACAtC,EAeI,EAfJA,MACA6E,EAcI,EAdJA,OACA/F,EAaI,EAbJA,kBACAwc,EAYI,EAZJA,kBACAjG,EAWI,EAXJA,iBACAyU,EAUI,EAVJA,qBACAF,EASI,EATJA,aACA7H,EAQI,EARJA,cACAvB,EAOI,EAPJA,SACAlI,EAMI,EANJA,cACAoI,EAKI,EALJA,UACAC,EAII,EAJJA,aACAvI,EAGI,EAHJA,QACApK,EAEI,EAFJA,QACA0H,EACI,EADJA,WAEMnL,EAASkY,mBAAQ,+BAAUyE,GAAV,aAAoB9O,MAAU,CAACA,IAChD7T,EAAYhD,iBAAoB,MAEhCytB,EAAkBvM,mBAA8B,+BAAUngB,KAAU,CAACA,IACrE2sB,EAAgBxM,mBACpB,kBAAMuM,EAAgBlrB,KAAK+qB,GAAcrO,EAAUuB,MACnD,CAACiN,EAAiBjN,EAAevB,IAG7B3jB,EAAQktB,aAAazR,GAErB2R,EAAajqB,EAAQuK,EAAOvK,MAC5BkvB,EAAuBxO,EAAYC,EACnCwO,EAAqB5G,KAAK6G,MAAMnF,EAAaiF,GAC7CG,EAAuB9G,KAAK+G,KAAKhtB,EAAQwJ,OAASqjB,GAClDjF,EAAcmF,EAAuBH,EACrCK,EAAc7O,EAAY,EAGhCpJ,aAAUta,EAAS8xB,KAAe3E,QAAQb,IAAgB,SAAC7iB,GAAD,OAAQA,EAAyBrI,YAE3F,IAAMoxB,EAAepf,uBAAY,WAC/B,IAAMia,EAAO9lB,EAAU/C,QACvB,GAAK6oB,EAAL,CACA,IAAMpU,EAAMuF,aAAO6O,GACnBpU,EAAIqB,UhHxCqB,KgHwCMgT,SAE/B,MAAyB,CACvBM,aAAY,CAAC,EAAGX,IAAaS,OAAO,CAAC,EAAGyE,IACxCvE,aAAY,CAACV,EAAa,IAAIQ,OAAO,CAAC,EAAG2E,KAFpC7E,EAAP,KAAesD,EAAf,KAKMvD,EAAkB1C,GAA2B/oB,EAAmBwD,ECpFlC,GDsF9BmtB,EAAsBC,eACtBC,EAAe7wB,EAAkBxC,KAAI,SAACc,GAAD,OACzCwyB,aAAY,CAAC,EAAGL,IAAc7E,OAAOH,EAAgBntB,OAIjDyyB,EAAsD,SAAC1zB,GAC3D,IAAM+H,EAAM+qB,EAAca,QAAQ3zB,GAClC,OAAOW,EAAa,CAClB0tB,EAAOtmB,EAAMirB,GAAsBI,EACnCzB,EAAOuB,EAAuB9G,KAAK6G,MAAMlrB,EAAMirB,IAAuBI,KAGpEQ,EAA6D,SAAC5zB,GAAD,OACjEszB,EACE3wB,EAAkBxC,KAAI,SAACsB,EAAKsG,GAAN,MAAc,CACjC,EAAIqkB,KAAKyH,GAAK9rB,EAAOpF,EAAkBgN,OACxC6jB,EAAazrB,GAAKtB,OAAOzG,EAAKyB,WAI9BqyB,EAAiD,SAACxH,EAAGyH,GACzDA,EAAY9xB,UAAY8xB,EAAY9xB,SAChCkE,EAAQI,OAAM,SAACvG,GAAD,OAAWA,EAAKiC,YAChC0rB,EAAqB,OAGvBA,EAAqB3nB,GAAS8C,QAC9B2kB,MAGF3T,EACGqB,UAtFK,UAuFLnb,KAAKmG,GACLwpB,QACAO,MAAK,SAAClwB,EAAM+H,EAAKooB,GAChB9Q,aAAO8Q,EAASpoB,IACb6nB,OAAO/V,GAAaE,GACpBoB,UAAUtB,GAAaK,MACvBla,KAAK,CAACA,IACN2vB,QACAC,OAAO/V,GAAaK,MACpB2V,KAAKhW,GAAeO,MAAOuY,IAC3B9C,KAAKhW,GAAevP,EAAGspB,GACvB/D,KAAKhW,GAAeQ,UAAWqZ,GAC/BhE,GAAG9H,GAAYmI,UAAWvD,GAAmBnrB,IAC7CquB,GAAG9H,GAAYoI,SAAUlD,IACzB4C,GAAG9H,GAAYoM,MAAOF,GACtB7pB,MAAM4P,GAAU1P,KAAMoiB,GAAiBpN,EAAmBze,OAGjEya,aAAUta,EAAS8xB,KAAe3E,QAAQb,IAAgB,SAAC7iB,GAAD,OAAQA,EAAyBrI,eAC1F,CACDkE,EACA2sB,EACAhF,EACAC,EACAN,EACAE,EACAqF,EACAE,EACAE,EACAzwB,EACAwc,EACAze,IASF,OANAiF,qBACE,kBAAM0tB,MAEN,CAAC1wB,EAAmBwc,EAAmByG,EAAevB,EAAUyJ,EAAYC,EAAa5R,IAGvF2R,EAAa,GAAKC,EAAc,EAAU,eAACzpB,EAAA,EAAD,IAC1C3B,EAAkBgN,Q5CzJkB,E4C2JpC,eAACrL,EAAA,EAAD,CAAKC,GAAIquB,GAAe/gB,EAASqH,EAAkBK,GAAahP,GAAIyiB,GAAkBhnB,GAAS8C,QAA/F,SACE,sBAAKjF,MAAOA,EAAO6E,OAAQqlB,EAAc3f,EAAO1F,OAAQ6B,GAAIwiB,GAAQ/mB,GAAS8C,QAA7E,SACE,oBAAGkB,IAAK5B,EAAWiS,UAAW1Z,EAAa,CAACyN,EAAOE,KAAMF,EAAOuM,YAMtE,eAACrW,EAAA,EAAD,CAAKC,GAAIipB,GAAwB3pB,EAAO6E,EAAQ0F,GAAS7D,GAAI0iB,GAAgBjnB,GAAS8C,QAAtF,SACG2b,MEvKMwP,GAAyB,oBACzB9G,GAAc,4BACdiE,GAAU,wBACV8C,GAAe,4BAIfC,GAA4B,SACvCtiB,EACAqH,EACAK,GAHuC,MAI1B,CACb,QAAS,CACP5V,QAASP,GACTmqB,KAAK,mBAEP,uBAAwB,CACtB1b,QAAUqH,EAAsCrH,EAAQ,GAAK,IAAhCA,EAAQ,GAAK,IAC1C,8BAA+B,CAC7B1H,KAAM3J,EAAU+Y,GAChB1H,QAASA,EAAQ,GAAK,MAG1B,iCAAkC,CAChCA,QAAS,GAEX,2BAA4B,CAC1Byf,eAAe,aACf,eAAgB,CACd7W,OAAQrX,KAGZ,+BAAgC,CAC9B+G,KAAM/G,GACNe,SAAUlE,EAAG,IACbuR,WAAW,UCaFlJ,GAAmE,SAAC,GAmB1E,IAlBLzE,EAkBI,EAlBJA,MACA6E,EAiBI,EAjBJA,OACAvC,EAgBI,EAhBJA,QACAsnB,EAeI,EAfJA,aACA9qB,EAcI,EAdJA,kBACAsjB,EAaI,EAbJA,WACAC,EAYI,EAZJA,WACA/G,EAWI,EAXJA,kBACAuO,EAUI,EAVJA,sBACAC,EASI,EATJA,qBACAzU,EAQI,EARJA,iBACAJ,EAOI,EAPJA,iBACAE,EAMI,EANJA,sBACAmD,EAKI,EALJA,cACAoI,EAII,EAJJA,UACAtI,EAGI,EAHJA,QACApK,EAEI,EAFJA,QACA0H,EACI,EADJA,WAEMnL,EAASkY,mBAAQ,+BAAUyE,GAAV,aAAoB9O,MAAU,CAACA,IAChD7T,EAAYhD,iBAAoB,MAChC1E,EAAQktB,aAAazR,GAEpB2R,EAA4BjqB,EAAQuK,EAAOvK,MAAQ0gB,EAAvCwJ,EAAkDrlB,EAAS0F,EAAO1F,OAAS6b,EAG9FpJ,aAAUta,EAASozB,KAA4BjG,QAAQb,IAAgB,SAAC7iB,GAAD,OAAQA,EAAyBrI,YAExG+Y,GAAWlC,EAAkBsC,IAE7B,IAAMgZ,EAA0BngB,uBAAY,WAAO,IAAD,EAC1Cia,EAAO9lB,EAAU/C,QACvB,GAAK6oB,EAAL,CACA,IAAMpU,EAAMuF,aAAO6O,GACnBpU,EAAIqB,UnHlDqB,KmHkDMgT,SAE/B,IAAMkG,EAAwBhJ,GAAmB,CAACpF,EAAYC,GAAa/f,GACrEmuB,EAAwB5I,GAA2B/oB,EAAmBwD,EF1FxC,GE4FpC,EAAyB,CACvBsoB,aAAY,CAAC,EAAGX,IAAaS,OAAO8F,EAAsBpO,IAC1DwI,aAAY,CAACV,EAAa,IAAIQ,OAAO8F,EAAsBnO,KAFtDmI,EAAP,KAAesD,EAAf,KAKM2B,EAAsBC,eACtBC,EAAe7wB,EAAkBxC,KAAI,SAACc,GAAD,OACzCwyB,aAAY,CAAC,EAAGlP,EAAY,IAAIgK,OAAO+F,EAAsBrzB,OAGzD2yB,EAA6D,SAAC5zB,GAAD,OACjEszB,EACE3wB,EAAkBxC,KAAI,SAACsB,EAAKsG,GAAN,MAAc,CACjC,EAAIqkB,KAAKyH,GAAK9rB,EAAOpF,EAAkBgN,OACxC6jB,EAAazrB,GAAKtB,OAAOzG,EAAKyB,WAI9B8yB,EAAa,SAACzzB,GAAD,OACjBgZ,EACGqB,UApEgB,uBAqEhByU,OAAO/V,GAAaE,GACpB/Z,KAAKmG,GACLwpB,QACAO,MAAK,SAAClwB,EAAM+H,EAAKooB,GAChB9Q,aAAO8Q,EAASpoB,IACb6nB,OAAO/V,GAAaE,GACpBoB,UAAUtB,GAAaK,MACvBla,KAAK,CAACA,IACN2vB,QACAC,OAAO/V,GAAaK,MACpB2V,KAAKhW,GAAeO,MAAOtZ,GAC3B+uB,KAAKhW,GAAevP,EAAGspB,GACvB/D,KACChW,GAAeQ,UACf1Z,EAAa,CAAC0tB,EAAO5nB,OAAOzG,EAAKimB,KAAe0L,EAAOlrB,OAAOzG,EAAKkmB,QAEpEwJ,GAAG9H,GAAYmI,UAAWvD,GAAmBnrB,IAC7CquB,GAAG9H,GAAYoI,SAAUlD,IACzB7iB,MAAM4P,GAAU1P,KAAMoiB,GAAiBpN,EAAmBze,QAEnE6zB,EAAWN,IAEX,InHtFsBO,EmHsFhBC,EAAQ3a,EACXqB,UA3FK,SA4FLnb,KAAK,CAACimB,IACN0J,QACAC,OAAO/V,GAAaE,GACpB8V,KAAKhW,GAAeQ,UAAW1Z,EAAa,CAAC,EAAGotB,KAChD8B,KAAKhW,GAAeO,MAAOgX,IAExBsD,EAAQ5a,EACXqB,UAlGK,SAmGLnb,KAAK,CAACkmB,IACNyJ,QACAC,OAAO/V,GAAaE,GACpB8V,KAAKhW,GAAeO,MAAOgX,IAE9BqD,EAAMrE,KAAKwB,aAAWvD,IACtBqG,EAAMtE,KAAKC,aAASsB,IAGpB8C,EACG7E,OAAO/V,GAAapa,MACpBowB,KAAKhW,GAAevQ,EAAGwkB,GACvB+B,KAAKhW,GAAetQ,EA7GD,IA8GnB9J,KAAKuB,GACL6uB,KAAKhW,GAAeO,MAAO8Z,IAC3BrE,KAAKhW,GAAea,WAAYb,GAAWkB,KAE9C2Z,EACG9E,OAAO/V,GAAapa,MACpBowB,KAAKhW,GAAeQ,WnHnHDma,GmHmHuB,GnHnHxB,iBAAmCA,EAAnC,OmHoHlB3E,KAAKhW,GAAetQ,GArHD,IAsHnB9J,KAAKuB,GACL6uB,KAAKhW,GAAeO,MAAO8Z,IAC3BrE,KAAKhW,GAAea,WAAYb,GAAWkB,KAE9C,IAAM6T,EAAuB,SAACU,GACxBA,IACFnpB,EAAQkO,SACN,SAACrU,GAAD,OACGA,EAAKiC,SAAWkpB,GAAWmE,EAAWjB,EAAO5nB,OAAOzG,EAAKimB,KAAe0L,EAAOlrB,OAAOzG,EAAKkmB,SAEhGuH,MAIEyB,GAA8D,oBACjEvH,GAAY7M,OAAQ,WACnB6S,EAAqB3nB,GAASsC,sBAFkC,eAIjEqf,GAAYwH,MAAO,YAAoB,IAAjBG,EAAgB,EAAhBA,UAChBtW,GAEH4V,EADuBU,MANuC,eAUjE3H,GAAY5M,KAAM,YAAoB,IAC/BuX,EAD8B,EAAhBhD,UAEpBV,EAAqB0D,GAChBA,GACH3E,EAAqB,SAdyC,GAkB9D4B,EAAsB,CAC1B,EAAEhL,EAAY,GAAIA,EAAY,GAC9B,CAACuJ,EAAavJ,EAAY,EAAGwJ,EAAcxJ,EAAY,IAGnDgO,EAAY5lB,eACf+iB,GAAG/H,GAAY7M,MAAOoU,EAAQvH,GAAY7M,QAC1C4U,GAAG/H,GAAYwH,KAAMD,EAAQvH,GAAYwH,OACzCO,GAAG/H,GAAY5M,IAAKmU,EAAQvH,GAAY5M,MACxCyQ,OAAO+D,GAEVzV,EAAIsW,KAAKmC,GAGTgC,ED5MyB,+BC6MzB7G,GAAsB,WACpB/gB,eAAQ4jB,MAAMzW,MAIhBqB,aAAUta,EAASozB,KAA4BjG,QAAQb,IAAgB,SAAC7iB,GAAD,OAAQA,EAAyBrI,eACvG,CACDkE,EACA2nB,EACAC,EACAN,EACAE,EACA1H,EACAC,EACAvjB,EACAwc,EACAoF,EACA7jB,EACAgtB,EACA1U,IAmBF,OAhBArT,qBACE,kBAAMyuB,MAEN,CACEzxB,EACAwc,EACA2O,EACAC,EACAxJ,EACAvL,EACAmD,EACA8J,EACAC,IAIA4H,EAAa,GAAKC,EAAc,EAAU,eAACzpB,EAAA,EAAD,IAC1C3B,EAAkBgN,QvCvP+B,EuCyPjD,eAACrL,EAAA,EAAD,CACEC,GAAI4vB,GAA0BtiB,EAASqH,EAAkBK,GACzDhP,GAAIyiB,GAAkBhnB,GAASsC,mBAFjC,SAIE,sBAAKzE,MAAOA,EAAO6E,OAAQA,EAAQ6B,GAAIwiB,GAAQ/mB,GAASsC,mBAAxD,SACE,oBAAG0B,IAAK5B,EAAWiS,UAAW1Z,EAAa,CAACyN,EAAOE,KAAOiW,EAAY,EAAGnW,EAAOuM,IAAM4J,EAAY,UAMxG,eAACjgB,EAAA,EAAD,CAAKC,GAAIipB,GAAwB3pB,EAAO6E,EAAQ0F,GAAS7D,GAAI0iB,GAAgBjnB,GAASsC,mBAAtF,SACGyd,M,sECvQM4O,GAAuB,SAClChO,EACA1kB,EACA2kB,EACAC,GAJkC,MAKrB,CACbne,OAAQie,EACRhjB,QAAS1B,EAAWzB,EAAUomB,GAAb,GACjB,uBAAwB,CACtBlmB,MAAOuB,EAAWzB,EAAUqmB,GAAb,IAEjB,0CAA2C,CACzC+N,WAAY,EACZnjB,cAAe,KAINojB,GAAqB,SAACC,GACjC,IAAMhxB,EAAWgxB,EAAmC,GAAtB,CAAEhxB,QAAQ,QACxC,OAAO,cAAEH,QAASH,IAAkCM,IAGzCixB,GAA0C,CACrDC,UAAW,CACTrxB,QAASH,IAEXyxB,aAAc,CACZvsB,OAAQ,GACR8I,WAAW,OACX,0CAA2C,CACzC9Q,MAAO8C,IAET,+FAAgG,CAC9F9C,MAAOF,EAAUgD,MAGrB0xB,UAAW,CACTvxB,QAASH,IAEX2xB,WAAY,CACVvxB,QAAS3D,EAAG,IAEduB,OAAQ,CACNqC,MAAM,MACNF,QAASH,GACTmN,aAAc1Q,EAAG,GACjB,wBAAyB,CACvBmO,OAAQ,GAEV,UAAW,CACTxK,QAAS3D,EAAG,EAAG,GAAI,KAGvBm1B,WAAY,CACVvkB,YAAa5Q,EAAG,IAChBS,MAAO8C,IAET6xB,aAAc,CACZzxB,QAAS,IAEX0xB,YAAa,CACXxxB,QAAQ,OACR4E,OAAQpI,GAAM,GAAF,QACZsD,QAAS3D,EAAG,K,UC7CHs1B,GAA2D,SAAC,GAAD,IACtE5yB,EADsE,EACtEA,kBACAmwB,EAFsE,EAEtEA,cACA0C,EAHsE,EAGtEA,kBACA7O,EAJsE,EAItEA,UACAC,EALsE,EAKtEA,wBACAC,EANsE,EAMtEA,kBANsE,OAQtE,eAAC4O,GAAA,EAAD,CAAWlxB,GAAIwwB,GAAeG,UAA9B,SACGpC,EAAc3yB,KAAI,SAACH,EAAM+H,GAAP,OACjB,gBAAC2tB,GAAA,EAAD,CACEC,OAAK,EACLzmB,QAAS,kBAAMsmB,EAAkBx1B,IAEjCuE,GAAIowB,GAAqBhO,EAAW3mB,EAAKiC,SAAU2kB,EAAyBC,GAJ9E,UAME,eAAC+O,GAAA,EAAD,CAAWhyB,QAASgL,GAApB,SACE,eAACoQ,GAAA,EAAD,CAAUtH,QAAS1X,EAAKiC,aAEzBU,EAAkBxC,KAAI,SAACc,GAAD,OACrB,eAAC20B,GAAA,EAAD,UAAwC71B,EAAeC,EAAKiB,KAA5D,UAAmB8G,EAAnB,YAA0B9G,SAPvB8G,SCIAiB,GAAmD,SAAC,GAU1D,IATL7C,EASI,EATJA,QACAxD,EAQI,EARJA,kBACA8qB,EAOI,EAPJA,aACAE,EAMI,EANJA,qBACAhH,EAKI,EALJA,UACAC,EAII,EAJJA,wBACAC,EAGI,EAHJA,kBACAiO,EAEI,EAFJA,WACAe,EACI,EADJA,WAEA,EAA0BrwB,mBAAmBuG,GAASuY,KAAtD,oBAAOtc,EAAP,KAAc8tB,EAAd,KACA,EAA8BtwB,mBAAmC7C,EAAkB,IAAnF,oBAAO8vB,EAAP,KAAgBsD,EAAhB,KACA,EAAgCvwB,mBAAS,GAAzC,oBAAOwwB,EAAP,KAAiBC,EAAjB,KACA,EAAwCzwB,mBACtClE,OAAOwF,YAAYnE,EAAkBxC,KAAI,SAACsB,GAAD,MAAS,CAACA,EAAD,SADpD,oBAAOy0B,EAAP,KAAqBC,EAArB,KAIMC,EAAkB9P,mBACtB,kBACE,aAAIngB,GAAS3E,QAAO,SAACxB,GAAD,OAClB2C,EAAkB4D,OAAM,SAACtF,GAAD,OACtBvB,OAAOM,EAAKiB,IAAYnB,cAAcu2B,SAASH,EAAaj1B,GAAWnB,uBAG7E,CAACqG,EAASxD,EAAmBuzB,IAGzBpD,EAAgBxM,mBACpB,kBAAM8P,EAAgBzuB,KAAK+qB,GAAc1qB,EAAOyqB,MAGhD,CAAC2D,EAAiBpuB,EAAOyqB,EAASuD,IAGpCrwB,qBACE,kBAAM,WACA8sB,IAAYnzB,GACd22B,GAAY,SAACxuB,GAAD,OAAUA,EAAO,QAGjC,CAACgrB,EAASoD,IAGZ,IAAML,EAAoBvhB,uBACxB,SAAC8f,GACCA,EAAY9xB,UAAY8xB,EAAY9xB,SAChCkE,EAAQI,OAAM,SAACvG,GAAD,OAAWA,EAAKiC,YAChC0rB,EAAqB,OAGvBA,EAAqB3nB,GAASgD,WAC9BykB,OAEF,CAACtnB,EAASsnB,EAAcE,IAGpB2I,EAAuBriB,uBAC3B,SAACyD,GACCob,EAAcze,SAAQ,SAACrU,GAAD,OAAWA,EAAKiC,SAAWyV,KAC7CvR,EAAQI,OAAM,SAACvG,GAAD,OAAWA,EAAKiC,YAChC0rB,EAAqB,OAGvBA,EAAqB3nB,GAASgD,WAC9BykB,OAEF,CAACtnB,EAASsnB,EAAcE,EAAsBmF,IAG1CyD,EAAoBtiB,uBACxB,SAACuiB,GACC,IAAMC,EAAQhE,IAAY+D,GAAYxuB,IAAU+D,GAASuY,IACzDwR,EAASW,EAAQ1qB,GAASkb,KAAOlb,GAASuY,KAC1CyR,EAAWS,KAEb,CAACxuB,EAAOyqB,IAGJiE,EAA0BziB,uBAAY,SAACC,EAAkBzS,GAC7D00B,GAAgB,SAAC1uB,GAAD,oBAAC,gBACZA,GADW,mBAEbhG,EAAMyS,SAER,IAEGyiB,EAAoB1iB,uBACxB,SAACuiB,GAAD,OAAwC,WACtCD,EAAkBC,MAEpB,CAACD,IAGGK,EAAmB3iB,uBACvB,SAAC4iB,GAAD,OACEpE,IAAYoE,EACR9P,GAAgB/e,IAAU+D,GAASuY,IAAMvY,GAASkb,KAAOlb,GAASuY,KAClEyC,GAAgBhb,GAASuY,OAC/B,CAACtc,EAAOyqB,IAGJqE,EAAe7iB,uBACnB,SAAC8iB,EAAwBC,GAAzB,OACE,gBAACC,GAAA,EAAD,CAAW1yB,GAAIwwB,GAAeC,UAA9B,UACE,gBAACU,GAAA,EAAD,CAAUnxB,GAAIwwB,GAAeE,aAA7B,UACE,eAACW,GAAA,EAAD,CAAWhyB,QAASgL,GAApB,SACE,gBAACtK,EAAA,EAAD,CAAKC,GAAIwwB,GAAeO,YAAxB,UACE,eAAChmB,GAAA,EAAD,CAASpL,MAAO6iB,GAAgBC,gBAAhC,SACE,eAAChI,GAAA,EAAD,CACEza,GAAIwwB,GAAemC,SACnBH,cAAeA,IAAkBC,EACjCtf,QAASsf,EACTtiB,SAAU,SAAC+C,GAAD,OAAW6e,EAAqB7e,EAAMzC,OAAO0C,cAG3D,eAACyf,GAAA,EAAD,CACEC,OAAQ3E,IAAYnzB,EACpB+3B,UAAW5E,IAAYnzB,EAAc0I,EAAQ+D,GAASuY,IACtDpV,QAASynB,EAAkBr3B,UAIhCqD,EAAkBxC,KAAI,SAACc,GACtB,IAAMq2B,EAAkB7E,IAAYxxB,EACpC,OACE,eAAC20B,GAAA,EAAD,CAA2B2B,gBAAeD,GAAkBtvB,EAA5D,SACE,eAACsH,GAAA,EAAD,CAASpL,MAAO0yB,EAAiB31B,GAAjC,SACE,eAACk2B,GAAA,EAAD,CACEC,OAAQE,EACRD,UAAWC,EAAkBtvB,EAAQ+D,GAASuY,IAC9CpV,QAASynB,EAAkB11B,GAH7B,SAKGzB,EAAwByB,QAPfA,SActB,gBAACy0B,GAAA,EAAD,CAAUnxB,GAAIswB,GAAmBC,GAAjC,UACE,eAACc,GAAA,EAAD,CAAWhyB,QAASgL,GAApB,SACE,eAAC4oB,GAAA,EAAD,CAAoBjzB,GAAIwwB,GAAeK,eAExCzyB,EAAkBxC,KAAI,SAACc,EAAW8G,GAAZ,OACrB,eAAC6tB,GAAA,EAAD,CAAWrxB,GAAIwwB,GAAeI,WAA9B,SACE,eAACrgB,GAAA,EAAD,CACEC,aAAcmhB,EAAanuB,GAC3BxD,GAAIwwB,GAAevzB,OACnBkT,SAAU,SAACC,GAAD,OAAO+hB,EAAwB/hB,EAAEK,OAAOhT,MAAOf,OAJ7D,iBAAyDA,eAWjE,CACE01B,EACAh0B,EACAuzB,EACAQ,EACAJ,EACAtuB,EACAyqB,EACAqC,EACA8B,IAIJ,OAAIj0B,EAAkBgN,QtC1MsB,EsC4MxC,eAAC8nB,GAAA,EAAD,UACE,gBAACC,GAAA,EAAD,CAAOnzB,GAAIwwB,GAAe4C,UAA1B,UACGb,EACChE,EAAc5rB,MAAK,SAAClH,GAAD,OAAUA,EAAKiC,YAClC6wB,EAAcvsB,OAAM,SAACvG,GAAD,OAAUA,EAAKiC,aAErC,eAAC,GAAD,CACEU,kBAAmBA,EACnBmwB,cAAeA,EACf0C,kBAAmBA,EACnB7O,UAAWA,EACXC,wBAAyBA,EACzBC,kBAAmBA,EACnBgP,WAAYA,SAMf,eAACvxB,EAAA,EAAD,CAAKC,GAAIwwB,GAAeM,aAAxB,SAAuCtO,GAAgB9J,e,uCCxNzD,SAAS2a,GAAQ1J,EAAM2J,GAC5B,OAAO3J,EAAK4J,YAAYnoB,OAASue,EAAK6J,MAAQF,EAAI,ECfrC,SAASG,GAAS1uB,GAC/B,OAAO,WACL,OAAOA,GCEX,SAAS2uB,GAAuBrwB,EAAGC,GACjC,OAAOqwB,GAAiBtwB,EAAEuwB,OAAQtwB,EAAEswB,SAAWvwB,EAAE6Z,MAAQ5Z,EAAE4Z,MAG7D,SAAS2W,GAAuBxwB,EAAGC,GACjC,OAAOqwB,GAAiBtwB,EAAEoN,OAAQnN,EAAEmN,SAAWpN,EAAE6Z,MAAQ5Z,EAAE4Z,MAG7D,SAASyW,GAAiBtwB,EAAGC,GAC3B,OAAOD,EAAEywB,GAAKxwB,EAAEwwB,GAGlB,SAASr2B,GAAMsI,GACb,OAAOA,EAAEtI,MAGX,SAASs2B,GAAUhuB,GACjB,OAAOA,EAAEmX,MAGX,SAAS8W,GAAaC,GACpB,OAAOA,EAAMC,MAGf,SAASC,GAAaF,GACpB,OAAOA,EAAMG,MAGf,SAASC,GAAKC,EAAUtuB,GACtB,IAAM2jB,EAAO2K,EAASC,IAAIvuB,GAC1B,IAAK2jB,EAAM,MAAM,IAAIzC,MAAM,YAAclhB,GACzC,OAAO2jB,EAGT,SAAS6K,GAAT,GAAuC,IAAD,EAARN,EAAQ,EAARA,MAAQ,eACjBA,GADiB,IACpC,2BAA0B,CAAC,IAAD,EAAfvK,EAAe,QACpBmK,EAAKnK,EAAKmK,GACVW,EAAKX,EAFe,eAGLnK,EAAK4J,aAHA,IAGxB,2BAAqC,CAAC,IAA3BmB,EAA0B,QACnCA,EAAKZ,GAAKA,EAAKY,EAAKp1B,MAAQ,EAC5Bw0B,GAAMY,EAAKp1B,OALW,mDAOLqqB,EAAKgL,aAPA,IAOxB,2BAAqC,CAAC,IAA3BD,EAA0B,QACnCA,EAAKD,GAAKA,EAAKC,EAAKp1B,MAAQ,EAC5Bm1B,GAAMC,EAAKp1B,OATW,gCADU,+BAevB,SAASs1B,KACtB,IAEYC,EAGRzxB,EACA0xB,EANAC,EAAK,EAAGjB,EAAK,EAAGkB,EAAK,EAAGP,EAAK,EAC7BQ,EAAK,GACLC,EAAK,EACLlvB,EAAK+tB,GACLoB,EAAQ9B,GAGRa,EAAQF,GACRI,EAAQD,GACRiB,EAAa,EAEjB,SAASC,IACP,IAAMpB,EAAQ,CAACC,MAAOA,EAAMoB,MAAM,KAAMC,WAAYnB,MAAOA,EAAMkB,MAAM,KAAMC,YAO7E,OANAC,EAAiBvB,GACjBwB,EAAkBxB,GAClByB,EAAkBzB,GAClB0B,EAAmB1B,GACnB2B,EAAoB3B,GACpBO,GAAoBP,GACbA,EAoDT,SAASuB,EAAT,GAA2C,IAAD,EAAftB,EAAe,EAAfA,MAAOE,EAAQ,EAARA,MAAQ,eAChBF,EAAM2B,WADU,IACxC,2BAAyC,CAAC,IAAD,0BAA7B/wB,EAA6B,KAA1B6kB,EAA0B,KACvCA,EAAKzM,MAAQpY,EACb6kB,EAAK4J,YAAc,GACnB5J,EAAKgL,YAAc,IAJmB,8BAMxC,IANwC,EAMlCL,EAAW,IAAIwB,IAAI5B,EAAMt4B,KAAI,SAACmK,EAAGjB,GAAJ,MAAU,CAACkB,EAAGD,EAAGjB,EAAGovB,GAAQnuB,OANvB,eAOhBquB,EAAMyB,WAPU,IAOxC,2BAAyC,CAAC,IAAD,0BAA7B/wB,EAA6B,KAA1B4vB,EAA0B,KACvCA,EAAKxX,MAAQpY,EACb,IAAK8uB,EAAkBc,EAAlBd,OAAQnjB,EAAUikB,EAAVjkB,OACS,kBAAXmjB,IAAqBA,EAASc,EAAKd,OAASS,GAAKC,EAAUV,IAChD,kBAAXnjB,IAAqBA,EAASikB,EAAKjkB,OAAS4jB,GAAKC,EAAU7jB,IACtEmjB,EAAOL,YAAYwC,KAAKrB,GACxBjkB,EAAOkkB,YAAYoB,KAAKrB,IAbc,8BAexC,GAAgB,MAAZI,EAAkB,CAAC,IAAD,iBACqBZ,GADrB,IACpB,2BAAgD,CAAC,IAAD,UAApCX,EAAoC,EAApCA,YAAaoB,EAAuB,EAAvBA,YACvBpB,EAAYnwB,KAAK0xB,GACjBH,EAAYvxB,KAAK0xB,IAHC,gCAQxB,SAASW,EAAT,GAAqC,IAAD,EAARvB,EAAQ,EAARA,MAAQ,eACfA,GADe,IAClC,2BAA0B,CAAC,IAAhBvK,EAAe,QACxBA,EAAKlsB,WAA4Bod,IAApB8O,EAAKqM,WACZnO,KAAK9L,IAAIka,aAAItM,EAAK4J,YAAa91B,IAAQw4B,aAAItM,EAAKgL,YAAal3B,KAC7DksB,EAAKqM,YAJqB,+BAQpC,SAASN,EAAT,GAKE,IALmC,IAATxB,EAAQ,EAARA,MACpBZ,EAAIY,EAAM9oB,OACZtK,EAAU,IAAIsB,IAAI8xB,GAClBgC,EAAO,IAAI9zB,IACX2C,EAAI,EACDjE,EAAQuB,MAAM,CAAC,IAAD,iBACAvB,GADA,IACnB,2BAA4B,CAAC,IAAlB6oB,EAAiB,QAC1BA,EAAK6J,MAAQzuB,EADa,qBAEH4kB,EAAK4J,aAFF,IAE1B,2BAAyC,CAAC,IAA9B9iB,EAA6B,QAA7BA,OACVylB,EAAKluB,IAAIyI,IAHe,gCADT,8BAOnB,KAAM1L,EAAIuuB,EAAG,MAAM,IAAIpM,MAAM,iBAC7BpmB,EAAUo1B,EACVA,EAAO,IAAI9zB,KAIf,SAASuzB,EAAT,GAKE,IALoC,IAATzB,EAAQ,EAARA,MACrBZ,EAAIY,EAAM9oB,OACZtK,EAAU,IAAIsB,IAAI8xB,GAClBgC,EAAO,IAAI9zB,IACX2C,EAAI,EACDjE,EAAQuB,MAAM,CAAC,IAAD,iBACAvB,GADA,IACnB,2BAA4B,CAAC,IAAlB6oB,EAAiB,QAC1BA,EAAKxlB,OAASY,EADY,qBAEH4kB,EAAKgL,aAFF,IAE1B,2BAAyC,CAAC,IAA9Bf,EAA6B,QAA7BA,OACVsC,EAAKluB,IAAI4rB,IAHe,gCADT,8BAOnB,KAAM7uB,EAAIuuB,EAAG,MAAM,IAAIpM,MAAM,iBAC7BpmB,EAAUo1B,EACVA,EAAO,IAAI9zB,KA4Cf,SAASwzB,EAAoB3B,GAC3B,IAAMkC,EAzCR,YAAqC,IAAD,EAARjC,EAAQ,EAARA,MACpBnvB,EAAIgX,aAAImY,GAAO,SAAAnuB,GAAC,OAAIA,EAAEytB,SAAS,EAC/B4C,GAAMpB,EAAKD,EAAKE,IAAOlwB,EAAI,GAC3BoxB,EAAU,IAAIjrB,MAAMnG,GAHQ,eAIfmvB,GAJe,IAIlC,2BAA0B,CAAC,IAAhBvK,EAAe,QAClB7kB,EAAI+iB,KAAK9L,IAAI,EAAG8L,KAAK7b,IAAIjH,EAAI,EAAG8iB,KAAK6G,MAAMyG,EAAMtJ,KAAK,KAAMlC,EAAM5kB,MACxE4kB,EAAK0M,MAAQvxB,EACb6kB,EAAKoL,GAAKA,EAAKjwB,EAAIsxB,EACnBzM,EAAKqL,GAAKrL,EAAKoL,GAAKE,EAChBkB,EAAQrxB,GAAIqxB,EAAQrxB,GAAGixB,KAAKpM,GAC3BwM,EAAQrxB,GAAK,CAAC6kB,IAVa,8BAYlC,GAAIvmB,EAAJ,sBAA+B+yB,GAA/B,IAAU,2BAA8B,QAC/B/yB,KAAKA,GADd,+BAGA,OAAO+yB,EA0BSG,CAAkBrC,GAClCY,EAAKhN,KAAK7b,IAAIkpB,GAAKT,EAAKX,IAAO/X,aAAIoa,GAAS,SAAAI,GAAC,OAAIA,EAAEnrB,UAAU,IAxB/D,SAAgC+qB,GAC9B,IADuC,EACjCK,EAAKxqB,aAAImqB,GAAS,SAAAI,GAAC,OAAK9B,EAAKX,GAAMyC,EAAEnrB,OAAS,GAAKypB,GAAMoB,aAAIM,EAAG94B,OAD/B,eAEnB04B,GAFmB,IAEvC,2BAA6B,CAAC,IAAD,EAAlBjC,EAAkB,QACvBlvB,EAAI8uB,EADmB,eAERI,GAFQ,IAE3B,2BAA0B,CAAC,IAAhBvK,EAAe,QACxBA,EAAKmK,GAAK9uB,EACV2kB,EAAK8K,GAAKzvB,EAAI2kB,EAAKlsB,MAAQ+4B,EAC3BxxB,EAAI2kB,EAAK8K,GAAKI,EAHU,qBAILlL,EAAK4J,aAJA,IAIxB,2BAAqC,CAAC,IAA3BmB,EAA0B,QACnCA,EAAKp1B,MAAQo1B,EAAKj3B,MAAQ+4B,GALJ,gCAFC,8BAU3BxxB,GAAKyvB,EAAKzvB,EAAI6vB,IAAOX,EAAM9oB,OAAS,GACpC,IAAK,IAAItG,EAAI,EAAGA,EAAIovB,EAAM9oB,SAAUtG,EAAG,CACrC,IAAM6kB,EAAOuK,EAAMpvB,GACnB6kB,EAAKmK,IAAM9uB,GAAKF,EAAI,GACpB6kB,EAAK8K,IAAMzvB,GAAKF,EAAI,GAEtB2xB,EAAavC,IAlBwB,+BAyBvCwC,CAAuBP,GACvB,IAAK,IAAIrxB,EAAI,EAAGA,EAAIswB,IAActwB,EAAG,CACnC,IAAM6xB,EAAQ9O,KAAK+O,IAAI,IAAM9xB,GACvB+xB,EAAOhP,KAAK9L,IAAI,EAAI4a,GAAQ7xB,EAAI,GAAKswB,GAC3C0B,EAAiBX,EAASQ,EAAOE,GACjCE,EAAiBZ,EAASQ,EAAOE,IAKrC,SAASE,EAAiBZ,EAASQ,EAAOE,GACxC,IAAK,IAAI/xB,EAAI,EAAGwuB,EAAI6C,EAAQ/qB,OAAQtG,EAAIwuB,IAAKxuB,EAAG,CAC9C,IAD8C,EACxCkyB,EAASb,EAAQrxB,GADuB,eAEzBkyB,GAFyB,IAE9C,2BAA6B,CAAC,IAAD,EAAlBvmB,EAAkB,QACvBzL,EAAI,EACJL,EAAI,EAFmB,eAGG8L,EAAOkkB,aAHV,IAG3B,2BAAkD,CAAC,IAAD,UAAtCf,EAAsC,EAAtCA,OACNqD,EAD4C,EAA9Bx5B,OACDgT,EAAO4lB,MAAQzC,EAAOyC,OACvCrxB,GAwFC,EAxFgCiyB,EACjCtyB,GAAKsyB,GANoB,8BAQ3B,GAAMtyB,EAAI,EAAV,CACA,IAAIuwB,GAAMlwB,EAAIL,EAAI8L,EAAOqjB,IAAM6C,EAC/BlmB,EAAOqjB,IAAMoB,EACbzkB,EAAOgkB,IAAMS,EACbgC,EAAiBzmB,KAd2B,mCAgBjCoK,IAATzX,GAAoB4zB,EAAO5zB,KAAKuwB,IACpCwD,EAAkBH,EAAQH,IAK9B,SAASC,EAAiBX,EAASQ,EAAOE,GACxC,IAAK,IAAwB/xB,EAAhBqxB,EAAQ/qB,OAAgB,EAAGtG,GAAK,IAAKA,EAAG,CACnD,IADmD,EAC7CkyB,EAASb,EAAQrxB,GAD4B,eAE9BkyB,GAF8B,IAEnD,2BAA6B,CAAC,IAAD,EAAlBpD,EAAkB,QACvB5uB,EAAI,EACJL,EAAI,EAFmB,eAGGivB,EAAOL,aAHV,IAG3B,2BAAkD,CAAC,IAAD,UAAtC9iB,EAAsC,EAAtCA,OACNwmB,EAD4C,EAA9Bx5B,OACDgT,EAAO4lB,MAAQzC,EAAOyC,OACvCrxB,GAsEC,EAtEgCiyB,EACjCtyB,GAAKsyB,GANoB,8BAQ3B,GAAMtyB,EAAI,EAAV,CACA,IAAIuwB,GAAMlwB,EAAIL,EAAIivB,EAAOE,IAAM6C,EAC/B/C,EAAOE,IAAMoB,EACbtB,EAAOa,IAAMS,EACbgC,EAAiBtD,KAdgC,mCAgBtC/Y,IAATzX,GAAoB4zB,EAAO5zB,KAAKuwB,IACpCwD,EAAkBH,EAAQH,IAI9B,SAASM,EAAkBjD,EAAOyC,GAChC,IAAM7xB,EAAIovB,EAAM9oB,QAAU,EACpBgsB,EAAUlD,EAAMpvB,GACtBuyB,EAA6BnD,EAAOkD,EAAQtD,GAAKe,EAAI/vB,EAAI,EAAG6xB,GAC5DW,EAA6BpD,EAAOkD,EAAQ3C,GAAKI,EAAI/vB,EAAI,EAAG6xB,GAC5DU,EAA6BnD,EAAOO,EAAIP,EAAM9oB,OAAS,EAAGurB,GAC1DW,EAA6BpD,EAAOJ,EAAI,EAAG6C,GAI7C,SAASW,EAA6BpD,EAAOlvB,EAAGF,EAAG6xB,GACjD,KAAO7xB,EAAIovB,EAAM9oB,SAAUtG,EAAG,CAC5B,IAAM6kB,EAAOuK,EAAMpvB,GACbowB,GAAMlwB,EAAI2kB,EAAKmK,IAAM6C,EACvBzB,EAAK,OAAMvL,EAAKmK,IAAMoB,EAAIvL,EAAK8K,IAAMS,GACzClwB,EAAI2kB,EAAK8K,GAAKI,GAKlB,SAASwC,EAA6BnD,EAAOlvB,EAAGF,EAAG6xB,GACjD,KAAO7xB,GAAK,IAAKA,EAAG,CAClB,IAAM6kB,EAAOuK,EAAMpvB,GACbowB,GAAMvL,EAAK8K,GAAKzvB,GAAK2xB,EACvBzB,EAAK,OAAMvL,EAAKmK,IAAMoB,EAAIvL,EAAK8K,IAAMS,GACzClwB,EAAI2kB,EAAKmK,GAAKe,GAIlB,SAASqC,EAAT,GAAuD,IAA5B3D,EAA2B,EAA3BA,YAAaoB,EAAc,EAAdA,YACtC,QAAiB9Z,IAAbia,EAAwB,CAAC,IAAD,iBACYH,GADZ,IAC1B,2BAAmD,SAAvCf,OAASL,YACPnwB,KAAKywB,KAFO,mDAIYN,GAJZ,IAI1B,2BAAmD,SAAvC9iB,OAASkkB,YACPvxB,KAAKswB,KALO,gCAU9B,SAAS+C,EAAavC,GACpB,QAAiBrZ,IAAbia,EAAwB,CAAC,IAAD,iBACeZ,GADf,IAC1B,2BAAgD,CAAC,IAAD,UAApCX,EAAoC,EAApCA,YAAaoB,EAAuB,EAAvBA,YACvBpB,EAAYnwB,KAAKywB,IACjBc,EAAYvxB,KAAKswB,KAHO,gCAkB9B,OAjRA2B,EAAOkC,OAAS,SAAStD,GAEvB,OADAO,GAAoBP,GACbA,GAGToB,EAAOmC,OAAS,SAASzP,GACvB,OAAOwN,UAAUnqB,QAAUpF,EAAkB,oBAAN+hB,EAAmBA,EAAI0L,GAAS1L,GAAIsN,GAAUrvB,GAGvFqvB,EAAOoC,UAAY,SAAS1P,GAC1B,OAAOwN,UAAUnqB,QAAU+pB,EAAqB,oBAANpN,EAAmBA,EAAI0L,GAAS1L,GAAIsN,GAAUF,GAG1FE,EAAOqC,SAAW,SAAS3P,GACzB,OAAOwN,UAAUnqB,QAAUhI,EAAO2kB,EAAGsN,GAAUjyB,GAGjDiyB,EAAOsC,UAAY,SAAS5P,GAC1B,OAAOwN,UAAUnqB,QAAU6pB,GAAMlN,EAAGsN,GAAUJ,GAGhDI,EAAOuC,YAAc,SAAS7P,GAC5B,OAAOwN,UAAUnqB,QAAU8pB,EAAKL,GAAM9M,EAAGsN,GAAUH,GAGrDG,EAAOnB,MAAQ,SAASnM,GACtB,OAAOwN,UAAUnqB,QAAU8oB,EAAqB,oBAANnM,EAAmBA,EAAI0L,GAAS1L,GAAIsN,GAAUnB,GAG1FmB,EAAOjB,MAAQ,SAASrM,GACtB,OAAOwN,UAAUnqB,QAAUgpB,EAAqB,oBAANrM,EAAmBA,EAAI0L,GAAS1L,GAAIsN,GAAUjB,GAG1FiB,EAAOP,SAAW,SAAS/M,GACzB,OAAOwN,UAAUnqB,QAAU0pB,EAAW/M,EAAGsN,GAAUP,GAGrDO,EAAOhzB,KAAO,SAAS0lB,GACrB,OAAOwN,UAAUnqB,QAAU2pB,EAAKjB,EAAK,EAAGkB,GAAMjN,EAAE,GAAI0M,GAAM1M,EAAE,GAAIsN,GAAU,CAACL,EAAKD,EAAIN,EAAKX,IAG3FuB,EAAOpO,OAAS,SAASc,GACvB,OAAOwN,UAAUnqB,QAAU2pB,GAAMhN,EAAE,GAAG,GAAIiN,GAAMjN,EAAE,GAAG,GAAI+L,GAAM/L,EAAE,GAAG,GAAI0M,GAAM1M,EAAE,GAAG,GAAIsN,GAAU,CAAC,CAACN,EAAIjB,GAAK,CAACkB,EAAIP,KAGnHY,EAAOD,WAAa,SAASrN,GAC3B,OAAOwN,UAAUnqB,QAAUgqB,GAAcrN,EAAGsN,GAAUD,GAmOjDC,E,aC3VT,SAASwC,GAAiB9xB,GACxB,MAAO,CAACA,EAAE6tB,OAAOoB,GAAIjvB,EAAE+tB,IAGzB,SAASgE,GAAiB/xB,GACxB,MAAO,CAACA,EAAE0K,OAAOskB,GAAIhvB,EAAE0uB,IAGV,I,MC4BTsD,GAAkB,SAACC,EAAsBC,EAAa34B,GAC1D,OAAKA,GAAU04B,EAER14B,GADU04B,EAAeC,GADI,GAyCzBC,GAAiB,SAACnyB,EAAkBvC,EAAa20B,EAAkBC,GAC9E,IAAMJ,EAAejyB,EAAEsyB,yBAA2BtyB,EAAEsyB,yBAAyB70B,GAAOuC,EAAEtI,MAChF66B,EAAeP,GAAgBC,EAAcjyB,EAAEtI,MAAOsI,EAAEzG,OAE9D,OAAK64B,GAAWC,EAAkBE,EAxEV,SAACL,EAAav6B,EAAkB4B,EAAe64B,GACvE,GAAc,IAAV74B,EAAa,OAAO,EACxB,IAAMi5B,EAAmB76B,EAAWu6B,EACpC,OAAO34B,GAAS64B,EAAUI,EAAmB,EAAIA,GAsE1CC,CAAkBR,EAAcjyB,EAAErI,SAAS8F,GAAM80B,EAAcH,IAG3DM,GAAY,SAAC1yB,EAAkBvC,EAAa20B,EAAkBC,GACzE,IAAMJ,EAAejyB,EAAEsyB,yBAA2BtyB,EAAEsyB,yBAAyB70B,GAAOuC,EAAEtI,MACtF,OAAKsI,EAAEzG,MAnCQ,SACf04B,EACAt6B,EACAu6B,EACA34B,EACAo5B,EACAl1B,EACA20B,EACAC,GAEA,IAAKJ,EAAc,OAAO,EAE1B,IAAMM,EAAeP,GAAgBC,EAAcC,EAAK34B,GAElDq5B,EA5CgB,SAACC,EAAmCX,EAAa34B,EAAekE,GACtF,IAAKo1B,EAAa,OAAO,EACzB,IAAMC,EAAcD,EAAYE,MAAM,EAAGt1B,GAAK7F,QAAO,SAACs4B,EAAK8C,GAAN,OAAe9C,EAAM8C,IAAM,GAEhF,OAAOz5B,GADgBu5B,EAAcZ,GAyChBe,CAAgBN,EAAcT,EAAK34B,EAAOkE,GACzDy1B,GAAa35B,EAAQ,EAAIq5B,EAAeL,EAAe,EAE7D,GAAIF,EACF,OAAOa,EAET,IAAMV,EAAmB76B,EAAWs6B,EAEpC,OAAOiB,EADcX,GAAgBH,GAAW,GAAK,EAAII,GAAoBA,GAAqB,EAgB3FW,CAASlB,EAAcjyB,EAAErI,SAAS8F,GAAMuC,EAAEtI,MAAOsI,EAAEzG,MAAOyG,EAAEsyB,yBAA0B70B,EAAK20B,EAASC,GAFtF,GCjFVe,GAAU,UAOVC,GAA8B,SACzC9rB,EACAyb,EACA/T,EACAqkB,GAJyC,MAK5B,CACb,QAAS,CACPj6B,QAASP,GACTmqB,KAAK,mBAEP,kBAAmB,CACjBpjB,KAAK,QAEP,aAAc,CACZygB,OAAO,UACP,oBAAqB,CACnBzgB,KAAM3J,EAAU+Y,KAGpB,SAAU,CACR,gCAAiC,CAC/B1H,QAASA,EAAQ,GAAK,IACtB4I,OAAQja,EAAU+Y,IAEpB,YAAa,CACX1H,QAAUyb,EAAmCzb,EAAQ,GAAK,IAAhCA,EAAQ,GAAK,IACvCgsB,aAAa,aAGjB,kBAAmB,CACjB1zB,KAAMyzB,KCWG70B,GAAuE,SAAC,GAmB9E,IAlBLlF,EAkBI,EAlBJA,MACA6E,EAiBI,EAjBJA,OACAvC,EAgBI,EAhBJA,QACAxD,EAeI,EAfJA,kBACAuW,EAcI,EAdJA,iBACAiD,EAaI,EAbJA,cACAF,EAYI,EAZJA,QACApK,EAWI,EAXJA,QACA0H,EAUI,EAVJA,WACAsc,EASI,EATJA,WACAlI,EAQI,EARJA,qBACAF,EAOI,EAPJA,aACA3F,EAMI,EANJA,SACAC,EAKI,EALJA,WACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,UACA/I,EACI,EADJA,kBAEM/Q,EAASkY,mBAAQ,+BAAUyE,GAAV,aAAoB9O,MAAU,CAACA,IAChD7T,EAAYhD,iBAAoB,MAChCyoB,EAAe1B,GnGnDW,GmGoDzB2B,EAA4BjqB,EAAQuK,EAAOvK,MAA/BkqB,EAAsCrlB,EAAS0F,EAAO1F,OAASmlB,EAElF,EAAsDroB,mBAASyC,GAAuB9B,IAAtF,oBAAO23B,EAAP,KAA4BC,EAA5B,KAEAp4B,qBAAU,WACRo4B,EAAuB91B,GAAuB9B,MAC7C,CAACA,EAAS0vB,EAAYlzB,IAEzB,IAAMq7B,EAA4B/pB,uBAAY,WAC5C,IAAMia,EAAO9lB,EAAU/C,QACvB,GAAK6oB,EAAL,CACA,IAAMpU,EAAMuF,aAAO6O,GACnBpU,EAAIqB,U7HpDqB,K6HoDMgT,SAE/B,IAAM8P,EjHkD2B,SACnCt7B,GADmC,OAGnCA,EAAkB06B,MAAM,GAAI,GAAGl9B,KAAI,SAACwT,EAAK5L,GAAN,MAAc,CAAC4L,EAAKhR,EAAkBoF,EAAM,OiHrDxDm2B,CAAsBv7B,GACrCw7B,GAAarQ,GAAcnrB,EAAkBgN,OAAS,GAAKoY,IAAeplB,EAAkBgN,OAAS,GACrGyuB,EAAcz7B,EAAkBxC,KAAI,SAACwT,GAAD,OAASmqB,EAAoBnqB,MAAMxT,KAAI,SAACk+B,GAAD,OAASA,EAAI1uB,UACxF2uB,EAAelS,KAAK9L,IAAL,MAAA8L,KAAI,aAAQgS,IAAe,EAC1CG,EAAS,SAACj0B,GAAD,OAA+B7D,OAAO6D,EAAEgvB,IAAM6E,EAAY,GAEnEK,GAAQ77B,EAAkBgN,OAAS,GAAK,EAGxCmkB,EAA4C,SAACxH,EAAD,GAAmD,IAA7CrrB,EAA4C,EAA5CA,UAAWqB,EAAiC,EAAjCA,KAAMP,EAA2B,EAA3BA,MAAOQ,EAAoB,EAApBA,cAC9E4D,EAAQkO,SAAQ,SAACrU,GACXN,OAAOM,EAAKiB,MAAgBqB,IAC9BtC,EAAKiC,SAAWF,IAAUQ,MAI1B4D,EAAQI,OAAM,SAACvG,GAAD,OAAWA,EAAKiC,YAChC0rB,EAAqB,OAGvBA,EAAqB3nB,GAAS+C,qBAC9B0kB,MAGFwQ,EAAa5pB,SAAQ,SAACoqB,EAAaC,GACjC,IAAMC,EAAgBvS,KAAK9L,IAAI8d,EAAYM,GAAUN,EAAYM,EAAU,IAAM,EAC3EE,EAAqB,CACzB,CAAC,EAAG,GACJ,CAACT,EAAWpQ,GAAeuQ,EAAeK,GAAiB3W,IAGvDtnB,EAAQktB,aAAazR,GACrB0iB,EAAejF,KAClBsC,UAAUpU,GACVqU,YAAYnU,GACZiU,UAAS,SAACr0B,EAAGC,GAAJ,OAAUD,EAAEI,MAAQH,EAAEG,SAC/BwjB,OAAOoT,GAEJpG,EjHyBY,SACtBryB,EACAgZ,EACA2f,EACAC,EACAC,GAEA,IAAMvG,EAA2B,uBAAOqG,EAAOC,IAAd,aAA2BD,EAAOE,KAC7DC,EAAaH,EAAOC,GAASpvB,OAE7BuvB,EAAsB/f,EAAoB2f,EAAO3f,GAAmBhf,KAAI,SAAC4J,GAAD,OAAWA,EAAMzH,QAAQ,GA0BvG,MAAO,CAAEm2B,QAAOE,MAxBUmG,EAAOC,GAASI,SAAQ,SAACv9B,EAAMw9B,GAAP,OAChDN,EAAOE,GAAO7+B,KAAI,SAAC2B,EAAIu9B,GACrB,IAAMC,EAAWn5B,EAAQ3E,QACvB,SAACxB,GAAD,OAAUN,OAAOM,EAAK++B,MAAcr/B,OAAOkC,EAAKU,OAAS5C,OAAOM,EAAKg/B,MAAYt/B,OAAOoC,EAAGQ,SAE7F,MAAO,CACL61B,OAAQiH,EACRpqB,OAAQqqB,EAAQJ,EAChBp9B,MAAO,CAACD,EAAKU,KAAMR,EAAGQ,MACtBs6B,yBAA0BsC,EAAoBvvB,OAC1CuvB,EAAoB/+B,KAClB,SAAC6B,GAAD,OAAWs9B,EAAS99B,QAAO,SAACxB,GAAD,OAAUN,OAAOM,EAAKmf,MAAyBnd,KAAO2N,eAEnFyP,EACJnd,SAAUi9B,EAAoBvvB,OAC1BuvB,EAAoB/+B,KAClB,SAAC6B,GAAD,OAAWs9B,EAAS99B,QAAO,SAACxB,GAAD,OAAUA,EAAKiC,UAAYvC,OAAOM,EAAKmf,MAAyBnd,KAAO2N,UAEpG,CAAC2vB,EAAS99B,QAAO,SAACxB,GAAD,OAAUA,EAAKiC,YAAU0N,QAC9C3N,MAAOs9B,EAAS3vB,eiHxDJ4vB,CAASp5B,EAASgZ,EAAmB2e,EAAqBW,EAAY,GAAIA,EAAY,IACpG,EAAyBI,EAAarG,GAA9BC,EAAR,EAAQA,MAAOE,EAAf,EAAeA,MACT6G,EH3HHC,eACFtH,OAAOiE,IACPpnB,OAAOqnB,IG2HFqD,EAAShB,GAAWP,EAAYpW,GACtCjO,EACG8V,OAAO/V,GAAaE,GACpBoB,UAtFQ,QAuFRnb,KAAKy4B,GACL9I,QACAC,OAAO/V,GAAaI,MACpB4V,KAAKhW,GAAeO,OAAO,SAAC8T,GAAD,OAC1BA,EAAKnsB,QAAUmsB,EAAK3rB,cAAgBxB,EAAU28B,GDnIxB,mBCmI2DA,MAElF7N,KAAKhW,GAAevQ,GAAG,SAAC4kB,GAAD,OAAUznB,OAAOynB,EAAKoL,IAAMoG,KACnD7P,KAAKhW,GAAetQ,GAAG,SAAC2kB,GAAD,OAAUznB,OAAOynB,EAAKmK,OAC7CxI,KAAKhW,GAAenR,QAAQ,SAACwlB,GAAD,OAAUznB,OAAOynB,EAAK8K,IAAMvyB,OAAOynB,EAAKmK,OACpExI,KAAKhW,GAAehW,OAAO,SAACqqB,GAAD,OAAUznB,OAAOynB,EAAKqL,IAAM9yB,OAAOynB,EAAKoL,OACnE5J,GAAG9H,GAAYmI,UAAWvD,GAAmBnqB,IAC7CqtB,GAAG9H,GAAYoI,SAAUlD,IACzB4C,GAAG9H,GAAYoM,MAAOF,GAGzB,IAAM6L,EAAa7lB,EAChB8V,OAAO/V,GAAaE,GACpB8V,KAAKhW,GAAeO,MDlJA,gBCmJpByV,KAAKhW,GAAeQ,UAAW1Z,EAAa,CAAC+9B,GAAWP,EAAYpW,GAAa,KACjF5M,UA7Gc,cA8Gdnb,KAAK24B,GACLhJ,QAEGiQ,EAAkBzgB,EAAoB2e,EAAoB3e,GAAmBhf,KAAI,SAACwT,GAAD,OAASA,EAAIrR,QAAQ,CAAC,KACvGq6B,EAAY1U,IAAiB9D,GAAyB0b,QAE5DD,EAAgBvrB,SAAQ,SAACqI,EAAU3U,GAEjC43B,EACG/P,OAAO/V,GAAaK,MACpB2V,KAAKhW,GAAeO,MDhKK,WCiKzByV,KAAKhW,GAAevP,EAAGk1B,GACvB3P,KAAKhW,GAAeY,OAAQ/Z,EAAMgc,IAClCmT,KAAKhW,GAAenP,aAAa,SAACuuB,GAAD,OAAUwD,GAAexD,EAAMlxB,GAAK,EAAO40B,MAC5E9M,KAAKhW,GAAeQ,WAAW,SAAC4e,GAAD,OAAUt4B,EAAa,CAAC,EAAGq8B,GAAU/D,EAAMlxB,GAAK,EAAO40B,QACtFjN,GAAG9H,GAAYmI,UAAWvD,GAAmB9qB,IAC7CguB,GAAG9H,GAAYoI,SAAUlD,IAG5B6S,EACG/P,OAAO/V,GAAaK,MACpB2V,KAAKhW,GAAeO,MD7KJ,+BC8KhByV,KAAKhW,GAAevP,EAAGk1B,GACvB3P,KAAKhW,GAAenP,aAAa,SAACuuB,GAAD,OAAUwD,GAAexD,EAAMlxB,GAAK,MACrE8nB,KAAKhW,GAAeQ,WAAW,SAAC4e,GAAD,OAAUt4B,EAAa,CAAC,EAAGq8B,GAAU/D,EAAMlxB,GAAK,EAAM40B,QACrFjN,GAAG9H,GAAYmI,UAAWvD,GAAmB9qB,IAC7CguB,GAAG9H,GAAYoI,SAAUlD,OAU9BhT,EACG8V,OAAO/V,GAAaE,GACpBoB,UAnJQ,QAoJRnb,KAAKy4B,GACL9I,QACAC,OAAO/V,GAAapa,MACpBowB,KAAKhW,GAAeO,MD9LA,gBC+LpByV,KACChW,GAAevQ,GACf,SAAC4kB,GAAD,OAAWqQ,EAAOrQ,GAAQznB,OAAOynB,EAAKqL,IAtJtB,EAsJyC9yB,OAAOynB,EAAKoL,IAtJrD,GAsJyEoG,KAE1F7P,KAAKhW,GAAetQ,GAAG,SAAC2kB,GAAD,OAAWznB,OAAOynB,EAAK8K,IAAMvyB,OAAOynB,EAAKmK,KAAO,KACvExI,KAAKhW,GAAea,YAAY,SAACwT,GAAD,OAAWqQ,EAAOrQ,GAAQrU,GAAWiB,MAAQjB,GAAWkB,OACxF9Q,MAAM4P,GAAUhI,SApBqD,SAACqc,GACvE,OAAIwQ,IAAYtS,KAAK6G,MAAMuL,GAAc,EACpCD,EAAOrQ,IAASwQ,EAAUF,IAAWD,EAAOrQ,IAASwQ,EAAUF,EAAc,EAC3E,KAkBN/+B,MAAK,SAACyuB,GAAD,OAAUltB,EAAsBktB,EAAK5rB,YAG/CwX,EACG8V,OAAO/V,GAAaE,GACpBoB,UAnKe,aAoKfnb,KAAK2C,GACLgtB,QACAC,OAAO/V,GAAapa,MACpBowB,KAAKhW,GAAea,WAAYb,GAAWtL,QAC3CshB,KAAKhW,GAAevQ,GAAG,SAACgjB,EAAGvkB,GAAJ,OAAYA,GAAOo2B,EAAYpW,MACtD8H,KAAKhW,GAAetQ,EAAG8iB,IACvB5sB,KAAKuB,GACL6uB,KAAKhW,GAAeO,MAAOgT,OAC7B,CACDzqB,EACAmrB,EACAhG,EACAgW,EACA33B,EACAwnB,EACAF,EACAM,EACA/F,EACA7L,EACA4L,EACA5I,EACA8I,IAoBF,OAjBAtiB,qBACE,kBAAMq4B,MAEN,CACEr7B,EACAmrB,EACAC,EACA5R,EACA2hB,EACAhW,EACAC,EACAC,EACA7I,EACA8I,IAIA6F,EAAa,GAAKC,EAAc,EAAU,eAACzpB,EAAA,EAAD,IAC1C3B,EAAkBgN,QtCvPiC,EsCyPnD,eAACrL,EAAA,EAAD,CACEC,GAAIo5B,GAA4B9rB,EAASqH,EAAkBK,EAAY2O,GACvE3d,GAAIyiB,GAAkBhnB,GAAS+C,qBAFjC,SAIE,sBAAKlF,MAAOA,EAAO6E,OAAQA,EAAQ6B,GAAIwiB,GAAQ/mB,GAAS+C,qBAAxD,SACE,oBACEiB,IAAK5B,EACLvE,MAAOiqB,EACPplB,OAAQqlB,EACR1T,UAAW1Z,EAAa,CAACyN,EAAOE,KAAMF,EAAOuM,IAAMkT,UAO3D,eAACvpB,EAAA,EAAD,CAAKC,GAAIipB,GAAwB3pB,EAAO6E,EAAQ0F,GAAS7D,GAAI0iB,GAAgBjnB,GAAS+C,qBAAtF,SACGof,MCnPM2X,IAAoD,sBAC9D95B,GAAS8C,QAAS,SAACgjB,EAAGiU,GAAJ,OAAU,eAAC,GAAD,6BAAYjU,GAAQiU,OADc,gBAE9D/5B,GAASuC,qBAAsB,SAACujB,EAAGiU,GAAJ,OAAU,eAAC,GAAD,6BAAyBjU,GAAQiU,OAFZ,gBAG9D/5B,GAASqC,mBAAoB,SAACyjB,EAAGiU,GAAJ,OAAU,eAAC,GAAD,6BAAuBjU,GAAQiU,OAHR,gBAI9D/5B,GAASsC,mBAAoB,SAACwjB,EAAGiU,GAAJ,OAAU,eAAC,GAAD,6BAAuBjU,GAAQiU,OAJR,gBAK9D/5B,GAAS+C,qBAAsB,SAAC+iB,EAAGiU,GAAJ,OAAU,eAAC,GAAD,6BAAyBjU,GAAQiU,OALZ,gBAM9D/5B,GAASgD,WAAY,SAAC8iB,EAAGiU,EAAGC,GAAP,OAAa,eAAC,GAAD,0CAAelU,GAAQiU,GAAvB,IAAgDjL,aAAckL,QANlC,I,yDCfpDC,GAAyC,SAAC,GAOhD,ICxByB/2B,EAAWC,EDkBzCtF,EAMI,EANJA,MACA6E,EAKI,EALJA,OACAmV,EAII,EAJJA,SACAhR,EAGI,EAHJA,SACAioB,EAEI,EAFJA,WACGoL,EACC,mBACE1H,EAAQsH,GAAcjiB,GACtBsiB,EAAetzB,EAASgR,GAC9B,OAAKsiB,EAEH,eAAC77B,EAAA,EAAD,CAAKC,IC7BuB2E,ED6BHrF,EC7BcsF,ED6BPT,EC7B+B,CACjE7E,MAAOqF,EACPR,OAAQS,EACRi3B,UAAU,SACVC,UAAU,SDyBR,SACG7H,EAAM,cAAE30B,QAAO6E,OAAQA,EDVE,GCU4Bw3B,GAAaC,EAAcrL,KAH3D,M,UExBfwL,GACJ,SADIA,GAEN,cAFMA,GAGL,QAHKA,GAID,kCAJCA,GAKC,CACVr0B,OAAO,eACP7H,YAAY,wDACZsJ,QAAQ,OACR6yB,OAAO,UATED,GAWE,CACXr0B,OAAO,iBACP7H,YAAY,wCACZsJ,QAAQ,QACR6yB,OAAO,UAfED,GAiBN,wBAjBMA,GAkBC,CACVjY,SAAS,WACTxb,SAAS,WACTuF,QAAQ,UACRjG,MAAM,SAcGq0B,IAAkD,sBAC5Dx6B,GAASuC,oBAAsB,CAC9BnE,YAAY,kVACZq8B,oBAAoB,qRACpBC,oBAAoB,4MACpBC,wBAAwB,0NALmC,gBAO5D36B,GAASqC,kBAAoB,CAC5BjE,YAAY,wgBACZq8B,oBAAoB,iSACpBC,oBAAoB,4MACpBC,wBAAwB,qQAXmC,gBAa5D36B,GAAS8C,OAAS,CACjB1E,YAAY,ydACZq8B,oBAAoB,mOACpBC,oBAAoB,oRACpBC,wBAAwB,uNAjBmC,gBAmB5D36B,GAASsC,kBAAoB,CAC5BlE,YAAY,mhBACZq8B,oBAAoB,kOACpBC,oBAAoB,8PACpBC,wBAAwB,uNAvBmC,gBAyB5D36B,GAAS+C,oBAAsB,CAC9B3E,YAAY,ikBACZq8B,oBAAoB,weACpBC,oBAAoB,wUACpBC,wBAAwB,+SA7BmC,gBA+B5D36B,GAASgD,UAAY,CACpB5E,YAAY,uRACZq8B,oBAAoB,0PACpBC,oBAAoB,uGACpBC,wBAAwB,2HAnCmC,ICnCzDC,GAAe,CACnBxyB,OAAQ,EACRxK,QAAS3D,EAAG,EAAG,GACf8O,SAAU,GAGC8xB,GAA8C,CACzD3zB,OAAO,6BACF0zB,IADC,IAEJlgC,MAAOsC,IAET89B,YAAY,6BACPF,IADM,IAETlgC,MAAOsC,IAET+9B,aAAc,CACZrgC,MAAOsC,EACPW,QAASX,EACT2N,aAAc1Q,EAAG,KCTR+gC,GAAoE,SAAC,GAAD,IAC/E9uB,EAD+E,EAC/EA,OACAhO,EAF+E,EAE/EA,MACAE,EAH+E,EAG/EA,YACA68B,EAJ+E,EAI/EA,UACA9uB,EAL+E,EAK/EA,QACAgB,EAN+E,EAM/EA,YACA+tB,EAP+E,EAO/EA,WAP+E,OAS/E,gBAAC3uB,GAAA,EAAD,CAAQJ,QAASA,EAASK,KAAMN,EAAhC,UACE,eAACO,GAAA,EAAD,UAAcvO,IACd,eAACwO,GAAA,EAAD,IACA,eAACU,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,UAAoBjP,MAEtB,gBAACkP,GAAA,EAAD,WACE,eAAClE,GAAA,EAAD,CAAQF,QAAS+xB,EAAW5xB,QAASZ,GAA0B8E,WAAS,EAAxE,SACGJ,IAEH,eAAC/D,GAAA,EAAD,CAAQF,QAASiD,EAAS9C,QAASZ,GAAnC,SACGyyB,WCrBIC,GAA+D,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7E,EAAwC57B,oBAAS,GAAjD,oBAAO67B,EAAP,KAAqBC,EAArB,KACML,EAAYhtB,uBAAY,WAC5BmtB,IACAE,GAAgB,KACf,CAACF,IAEJ,OACE,uCACE,eAAC,GAAD,CACElvB,OAAQmvB,EACRn9B,MAAOo8B,GAA0Br0B,OACjC7H,YAAak8B,GAA0Bl8B,YACvC68B,UAAWA,EACX9uB,QAAS,kBAAMmvB,GAAgB,IAC/BnuB,YAAamtB,GAA0B5yB,QACvCwzB,WAAYZ,GAA0BC,SAExC,eAACnxB,GAAA,EAAD,CAAQF,QAAS,kBAAMoyB,GAAgB,IAAO/8B,GAAIs8B,GAAmBC,YAArE,SACE,eAACxxB,GAAA,EAAD,CAASpL,MAAOo8B,GAAhB,SACE,eAACiB,GAAA,EAAD,Y,UC5BGC,GAA2C,CACtDzwB,OAAQ,CACN,mBAAoB,CAClBqM,UAAU,YAGdqkB,gBAAiB,CACf39B,QAAQ,OACRG,eAAe,gBACfD,WAAW,WACX,QAAS,CACPG,SAAUlE,EAAG,IACb4R,QAAS,GACTJ,cAAexR,EAAG,KAGtBgM,OAAQ,CACNuF,WAAW,OACXrN,SAAUlE,EAAG,IACb20B,WAAY30B,EAAG,KAEjByhC,eAAgB,CACd3yB,SAAU9O,EAAG,GACb6D,QAAQ,OACRG,eAAe,gBACfmK,OAAQnO,EAAG,GACX,4BAA6B,CAC3BiO,SAAS,SAGbyzB,QAAS,CACP/9B,QAAS3D,EAAG,EAAG,EAAG,GAClBS,MAAOqC,GAETtD,KAAM,CACJmE,QAAS3D,EAAG,EAAG,GAAI,GACnBS,MAAOqC,GAET+O,MAAO,CACLpJ,OAAQzI,EAAG,KACX4D,MAAO5D,EAAG,MAEZ2hC,YAAa,CACX99B,QAAQ,OACRE,WAAW,aACX,MAAO,CACLJ,QAAS3D,EAAG,EAAG,EAAG,KAGtB4hC,WAAY,CACV19B,SAAUlE,EAAG,IACb6hC,YAAa7hC,EAAG,KC3BP8hC,GAA6D,SAAC,GAAkB,IAAhBlkB,EAAe,EAAfA,SAC3E,EAAwCrY,oBAAS,GAAjD,oBAAO67B,EAAP,KAAqBC,EAArB,KAEA,OACE,uCACE,gBAAC/uB,GAAA,EAAD,CACEJ,QAAS,kBAAMmvB,GAAgB,IAC/B9uB,KAAM6uB,EACN98B,GAAIi9B,GAAgBzwB,OACpBixB,WAAS,EACTC,SAAUpzB,GALZ,UAOE,eAAC4D,GAAA,EAAD,UAAc6I,GAAYuC,KAC1B,eAACnL,GAAA,EAAD,IACA,gBAACU,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SAA8C+gC,GAAiB3iB,GAAUzZ,cACzE,gBAACE,EAAA,EAAD,CAAKC,GAAIi9B,GAAgBC,gBAAzB,UACE,eAAC38B,GAAA,EAAD,CAAYP,GAAIi9B,GAAgBv1B,OAAhC,SAAyCq0B,GAAyBjY,WAClE,eAACzO,GAAA,EAAD,OAEF,eAAClH,GAAA,EAAD,IACA,gBAACpO,EAAA,EAAD,CAAKC,GAAIi9B,GAAgBE,eAAzB,UACE,eAAC1X,GAAA,EAAD,CACE5hB,UAAWoG,GACXjK,GAAIi9B,GAAgB1vB,MACpBA,MAAO0X,GAAgB3L,GACvB7Q,IAAK6Q,IAEP,eAACxK,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SACG+gC,GAAiB3iB,GAAU4iB,yBAGhC,gBAACn8B,EAAA,EAAD,CAAKC,GAAIi9B,GAAgBC,gBAAzB,UACE,eAAC38B,GAAA,EAAD,CAAYP,GAAIi9B,GAAgBv1B,OAAhC,SAAyCq0B,GAAyBzzB,WAClE,eAACgL,GAAA,EAAD,OAEF,eAACnF,GAAA,EAAD,IACA,eAACW,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SACG+gC,GAAiB3iB,GAAU6iB,sBAE9B,eAACrtB,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SACG+gC,GAAiB3iB,GAAU8iB,6BAGhC,eAACrtB,GAAA,EAAD,UACE,eAAClE,GAAA,EAAD,CAAQF,QAAS,kBAAMoyB,GAAgB,IAAQjyB,QAASZ,GAA0B8E,WAAS,EAA3F,SACG+sB,GAAyBn0B,aAIhC,eAACiD,GAAA,EAAD,CAAQF,QAAS,kBAAMoyB,GAAgB,IAAO/8B,GAAIs8B,GAAmB3zB,OAArE,SACE,eAACoC,GAAA,EAAD,CAASpL,MAAOo8B,GAAhB,SACE,eAAC4B,GAAA,EAAD,Y,UCxEJ9vB,GAAU,CAAEwE,KAAK,+BA2BVurB,GAAU,SAACtkB,GACtB,IAAMukB,EAAeprB,SAASqrB,cAAT,WAA2BrV,GAAkBnP,KAC5D/D,EAAM9C,SAASqrB,cAAT,WAA2BtV,GAAQlP,KAC/C,GAAKukB,GAAiBtoB,EAAtB,CAKA,IAAMwoB,EAAiB7yB,MAAM7N,KAAKwgC,EAAaG,WAAW/gC,QAAO,SAACghC,GAAD,OAAUA,EAAInM,SAAJ,aAAwB,GAC7FoM,EAAgB,aAAKzrB,SAAS0rB,iBAAT,mBACxBvD,SAAQ,gBAAGwD,EAAH,EAAGA,MAAH,OAAe,aAAIA,EAAMC,UAAUziC,KAAI,SAAC0iC,GAAD,OAAWA,EAAMC,cAChEthC,QAAO,SAACmhC,GAAD,OAAWA,EAAMtM,SAAN,WAAmBiM,OACrCniC,KAAI,SAACwiC,GAAD,OAAWA,EAAMhjC,QAAN,WAAkB2iC,EAAlB,YACfniC,KAAI,SAAC8J,GACJ,IAAMikB,EAAOlX,SAAS+rB,cAAT,SAGb,OAFA7U,EAAK8U,UAAY/4B,EACjB6P,EAAImpB,aAAa/U,EAAMpU,EAAIopB,YACpBhV,MApCS,SAACiV,EAAgBC,GACrCD,EAAME,aAAN,QAXY,8BAaZ,IAAMC,EAAU,IAAIC,KAAK,CAZd,4CAYwBJ,EAAMK,WAAYpxB,IAC/CqxB,EAASC,IAAIC,gBAAgBL,GAG7BM,EAAe5sB,SAAS+rB,cAdf,KAefa,EAAa5+B,KAAOy+B,EACpBG,EAAaC,SAAWT,EACxBpsB,SAAS8sB,KAAKC,YAAYH,GAC1BA,EAAa5P,QACbhd,SAAS8sB,KAAKE,YAAYJ,GA0B1BK,CAAcnqB,EAAK+D,GAEnB4kB,EAAcpuB,SAAQ,SAAC6Z,GAAD,OAAUA,EAAKC,iBAjBnC+V,QAAQC,MAAR,qDAwBSC,GAAoB,SAACvmB,GAAD,OAC6B,OAA5D7G,SAASqrB,cAAT,WAA2BpV,GAAgBpP,MACS,OAApD7G,SAASqrB,cAAT,WAA2BtV,GAAQlP,MClDxBwmB,GAA6D,SAAC,GAAkB,IAAhBxmB,EAAe,EAAfA,SAC3E,EAAwCrY,oBAAS,GAAjD,oBAAO67B,EAAP,KAAqBC,EAArB,KAEML,EAAYhtB,uBAAY,WAC5BkuB,GAAQtkB,GACRyjB,GAAgB,KACf,CAACzjB,IAEJ,OACE,uCACE,eAAC,GAAD,CACE3L,OAAQmvB,EACRn9B,MAAOo8B,GAAyBr0B,OAChC7H,YAAak8B,GAAyBl8B,YACtC68B,UAAWA,EACX9uB,QAAS,kBAAMmvB,GAAgB,IAC/BnuB,YAAamtB,GAAyB5yB,QACtCwzB,WAAYZ,GAAyBC,SAEvC,eAACnxB,GAAA,EAAD,CACEF,QAAS,kBAAMoyB,GAAgB,IAC/BnyB,SAAUi1B,GAAkBvmB,GAC5BtZ,GAAIs8B,GAAmB3zB,OAHzB,SAKE,eAACoC,GAAA,EAAD,CAASpL,MAAOo8B,GAAhB,SACE,eAACgE,GAAA,EAAD,Y,UC1BGC,GAA2D,SAAC,GAAD,IAAG5hC,EAAH,EAAGA,kBAAH,OACtE,eAAC2M,GAAA,EAAD,CAASpL,MAAOnD,EAAUu/B,GAAyB59B,EAAkCC,IAArF,SACE,gBAACmC,GAAA,EAAD,CAAYP,GAAI0lB,GAAcxqB,KAA9B,UACE,eAAC+kC,GAAA,EAAD,CAAajgC,GAAI0lB,GAAcS,WAC9BhoB,EAAkCC,S,UCN5B8hC,GAAiE,SAAC,GAAD,IAAG3P,EAAH,EAAGA,WAAY4P,EAAf,EAAeA,cAAf,OAC5E,eAACt1B,GAAA,EAAD,CAAQC,QAASZ,GAAqBS,QAAS,kBAAMw1B,GAAe5P,IAAavwB,GAAIs8B,GAAmB3zB,OAAxG,SACE,eAACoC,GAAA,EAAD,CAASpL,MAAOo8B,GAAhB,SACE,eAACqE,GAAA,EAAD,CAAYpgC,GAAIuwB,EAAa+L,GAAmBE,aAAe,U,sDCKxD6D,GAAyC,SAAC,GAA8D,IAA5DxD,EAA2D,EAA3DA,SAAUl9B,EAAiD,EAAjDA,MAAO2gC,EAA0C,EAA1CA,iBAAkBhnB,EAAwB,EAAxBA,SAAainB,EAAW,mBAClH,EAAoCt/B,wBAA8B4Z,GAAlE,oBAAO0V,EAAP,KAAmB4P,EAAnB,KACMK,EACJlnB,IAAa7X,GAASgD,UACpB,eAAC,GAAD,CAAgB6U,SAAUA,IAE1B,eAAC,GAAD,CAAkBiX,WAAYA,EAAY4P,cAAeA,IAGvDM,GAAYnnB,IAAa7X,GAAS8C,QAAU+U,IAAa7X,GAASsC,oBAAsBw8B,EAAKj4B,SAASgR,GAE5G,EAAgBonB,cACd,gBAAGphC,EAAH,EAAGA,MAAO6E,EAAV,EAAUA,OAAV,OACE,gBAACpE,EAAA,EAAD,CAAKC,GAAI0lB,GAAcC,SAAvB,UACE,gBAAC5lB,EAAA,EAAD,CAAKC,GAAI0lB,GAAche,OAAQnL,UAAW0H,GAA1C,UACE,gBAAClE,EAAA,EAAD,CAAKC,GAAI0lB,GAAcK,QAAvB,UACE,eAACxlB,GAAA,EAAD,UAAaZ,IACZ8gC,GAAY,eAAC,GAAD,CAAeriC,kBAAmBmiC,EAAKj4B,SAASgR,GAAWlb,uBAE1E,gBAAC2B,EAAA,EAAD,CAAKC,GAAI0lB,GAActlB,MAAvB,UACE,eAAC,GAAD,CAAgBkZ,SAAUA,IACzBknB,EACD,eAAC,GAAD,CAAiB3D,SAAUA,UAG9ByD,GACC,eAAC,GAAD,2BACEhhC,MAAOA,EACP6E,OAAQA,E9H3CmB,G8H4C3BmV,SAAUA,GACNinB,GAJN,IAKEhQ,WAAYA,UAKpBrsB,IAGF,OA5BA,sB,wOCiBIy8B,GAAkBC,yBAAcC,MAEhCC,GAAqD,SAAC,GAcrD,IAbLC,EAaI,EAbJA,aACAC,EAYI,EAZJA,YACAhjB,EAWI,EAXJA,+BACA1V,EAUI,EAVJA,SACAoR,EASI,EATJA,YACAunB,EAQI,EARJA,oBACApsB,EAOI,EAPJA,uBACAqsB,EAMI,EANJA,mBACApsB,EAKI,EALJA,sBACA7M,EAII,EAJJA,OACAmd,EAGI,EAHJA,UACA+b,EAEI,EAFJA,yBACGC,EACC,mBACJ,EAAwCngC,mBAA0B,MAAlE,oBAAOogC,EAAP,KAAqBC,EAArB,KACA,EAAoCrgC,mBAASgH,GAA7C,oBAAOod,EAAP,KAAmBkc,EAAnB,KACA,EAAqDC,eAAtCC,EAAf,EAAQniC,MAA4BoiC,EAApC,EAA4Bv9B,OAE5B/C,qBACE,kBAAM,WACW,OAAX6G,GAAiBs5B,EAAct5B,MAErC,CAACA,IAGH7G,qBACE,kBAAM,WACJ4c,EAA+Bra,OAEjC,CAAC89B,EAAaC,EAAc1jB,IAG9B,IAAM2jB,EAAejyB,uBACnB,SAACkyB,GACC,GAAKA,GAA+B,IAAlB35B,EAAOmD,OAAzB,CACA,IAAMy2B,EAAiBD,EAAU3kC,QAAO,SAACL,GAAD,OjIlEnB0c,EiIkEwC1c,EAAKkI,EjIlEF/H,OAAOpB,OAAe8F,IAAUqwB,SAASxY,GAArF,IAACA,KiImErB8L,EAAUyc,MAEZ,CAACzc,EAAWnd,IAGR65B,EAAUpyB,uBACd,SAAC4J,GACCzE,GAAuB,GACvBuQ,GAAU,SAACnd,GACT,GAAe,OAAXA,EAAiB,OAAOA,EAC5B,GAAIA,EAAOosB,MAAK,SAACz3B,GAAD,OAAUA,EAAKkI,IAAMwU,KAAW,OAAOrR,EACvD,IAAM85B,EAAO95B,EAAOtK,QAAO,SAACoe,EAAKnf,GAAN,OAAeirB,KAAK9L,IAAInf,EAAKoI,EAAG+W,KAAM,GAAK,EACtE,MAAM,GAAN,oBAAW9T,GAAX,eAAqBnD,EAAGwU,EAAUvU,EAAG,EAAGC,EAAG+8B,GAASr9B,GAAwB4U,WAGhF,CAACzE,EAAwBuQ,IAGrB4c,EAAatyB,uBACjB,SAAC4J,GACC8L,GAAU,SAACnd,GACT,OAAe,OAAXA,EAAwBA,EACrBA,EAAOhL,QAAO,SAACL,GAAD,OAAUA,EAAKkI,IAAMwU,UAG9C,CAAC8L,IAGH3O,GAAW2qB,EAAU7sB,iBAAkBsC,IAEvC,IAAM0N,EAAQtc,EAAOrM,KAAI,SAACgB,GAAD,OAAUA,EAAKkI,KAElCm9B,EADiBllC,OAAOpB,OAAO8F,IAAUxE,QAAO,SAACqc,GAAD,OAAeiL,EAAMuN,SAASxY,MAC/C1d,KAAI,SAACsB,GAAD,MAAU,CAAEA,MAAKgB,MAAO6Y,GAAY7Z,GAAMwN,KAAM,eAACwK,GAAA,EAAD,QACzF,OACE,gBAACnV,EAAA,EAAD,WACE,eAAC,GAAD,CACE4N,OAAQszB,EACRrzB,QAAS,kBAAMiH,GAAuB,IACtClV,MAAO4I,GAA2B5I,MAClCkO,QAASo0B,EACTl0B,aAAcxF,GAA2BC,SACzCsF,oBAAqBg0B,IAEvB,eAAC,GAAD,CACEn0B,OAAQuzB,EACR9b,UAAWA,EACXxX,QAAS,kBAAMkH,GAAsB,IACrCuQ,WAAYA,IAEd,eAAC,GAAD,CACE1X,OAAQozB,EACRn5B,MAAOo5B,EACPp/B,QAASw/B,EAAUx/B,QACnB2iB,MAAOA,EACPjc,SAAUA,EACVoR,YAAaA,EACbsE,+BAAgCA,IAElC,eAACje,EAAA,EAAD,CAAKC,GAAIgX,GAAc9O,QAAS3L,UAAWsa,KAC3C,eAAC8pB,GAAD,CACEj7B,MAAO,CAAEm2B,UAAU,UACnBqG,eAAgBP,EAChBQ,gBAAiB7lC,EAAS2H,IAC1Bm+B,cAAe,SAACra,EAAGtD,GACjB,IAAMnL,EAAWmL,EAAK3f,EAClBlB,GAAY0V,IAAW0E,EAA+B1E,GAC1DgoB,EAAgBhoB,IAElB+oB,aAAc,kBAAMf,EAAgB,OACpCgB,K/HrIqB,G+HsIrBlgB,U/HjIkB,G+HkIlBmgB,aAAW,EAZb,SAcGt6B,EAAOrM,KAAI,SAAC6oB,GAAD,OACV,eAAC1kB,EAAA,EAAD,CAAkB,YAAW0kB,EAA7B,SACE,eAAC,GAAD,cACE6b,iBAAkB7b,EAAK3f,IAAMu8B,EAC7B1hC,MAAOoX,GAAY0N,EAAK3f,GACxB+3B,SAAU,WACR7e,EAA+ByG,EAAK3f,GACpCk9B,EAAWvd,EAAK3f,IAElBwU,SAAUmL,EAAK3f,EACfwD,SAAUA,EACV6gB,sBAAuB,SAACqZ,GAAD,OAAuBrB,EAAyB1c,EAAK3f,EAAG09B,KAC3EpB,KAXE3c,EAAK3f,YAqBZ29B,GAAWC,eAAK5B,IClLhB6B,GAA0C,CACrDC,QAAS,CACPrjC,QAAQ,OACRC,cAAc,SACdC,WAAW,UAEbiL,KAAM,CACJ6yB,YAAa7hC,EAAG,GAChB4R,QAAS,IAEXpS,KAAM,CACJm1B,WAAY30B,EAAG,IACfS,MAAO2C,IAET6J,OAAQ,CACNoQ,UAAWrd,EAAG,IACd4R,QAAS,KCEAu1B,GAAmC,WAC9C,MAAwC5hC,oBAAS,GAAjD,oBAAO67B,EAAP,KAAqBC,EAArB,KAEA,OACE,uCACE,gBAAC/uB,GAAA,EAAD,CACEJ,QAAS,kBAAMmvB,GAAgB,IAC/B9uB,KAAM6uB,EACN98B,GAAIi9B,GAAgBzwB,OACpBixB,WAAS,EACTC,SAAUpzB,GALZ,UAOE,eAAC4D,GAAA,EAAD,UAAczG,GAA2BC,SACzC,eAACyG,GAAA,EAAD,IACA,gBAACU,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgBG,QAAvC,SAAiD31B,GAA2B5H,cAC5E,gBAACiP,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgBG,QAAvC,UACE,eAACzqB,GAAA,EAAD,CAAW3S,GAAIi9B,GAAgBK,aAC9B71B,GAA2BI,UAE9B,gBAACiH,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgBG,QAAvC,UACE,eAACxqB,GAAA,EAAD,CAAY5S,GAAIi9B,GAAgBK,aAC/B71B,GAA2BK,QAE9B,gBAACgH,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgBG,QAAvC,UACE,eAACO,GAAA,EAAD,CAAM39B,GAAIi9B,GAAgBK,aACzB71B,GAA2BM,aAG9B,eAACxH,GAAA,EAAD,CAAYP,GAAIi9B,GAAgBv1B,OAAhC,SAAyCD,GAA2BE,YACpE,eAACwG,GAAA,EAAD,IAEA,gBAACpO,EAAA,EAAD,CAAKC,GAAIi9B,GAAgBI,YAAzB,UACE,eAACnoB,GAAA,EAAD,IACA,eAACpG,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SAA8CuM,GAA2BO,SAE3E,gBAACjI,EAAA,EAAD,CAAKC,GAAIi9B,GAAgBI,YAAzB,UACE,eAACloB,GAAA,EAAD,IACA,eAACrG,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SAA8CuM,GAA2BQ,YAE3E,gBAAClI,EAAA,EAAD,CAAKC,GAAIi9B,GAAgBI,YAAzB,UACE,eAACn3B,GAAD,IACA,eAAC4I,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SAA8CuM,GAA2BS,aAE3E,gBAACnI,EAAA,EAAD,CAAKC,GAAIi9B,GAAgBI,YAAzB,UACE,eAACjoB,GAAA,EAAD,IACA,eAACtG,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SAA8CuM,GAA2BU,UAE3E,gBAACpI,EAAA,EAAD,CAAKC,GAAIi9B,GAAgBI,YAAzB,UACE,eAAChoB,GAAA,EAAD,IACA,eAACvG,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SAA8CuM,GAA2BW,WAE3E,gBAACrI,EAAA,EAAD,CAAKC,GAAIi9B,GAAgBI,YAAzB,UACE,eAAC/3B,GAAD,IACA,eAACwJ,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SAA8CuM,GAA2BY,cAE3E,gBAACtI,EAAA,EAAD,CAAKC,GAAIi9B,GAAgBI,YAAzB,UACE,eAAC/pB,GAAA,EAAD,IACA,eAACxE,GAAA,EAAD,CAAmB9O,GAAIi9B,GAAgB/hC,KAAvC,SAA8CuM,GAA2Ba,iBAG7E,eAACyG,GAAA,EAAD,UACE,eAAClE,GAAA,EAAD,CAAQF,QAAS,kBAAMoyB,GAAgB,IAAQjyB,QAASZ,GAA0B8E,WAAS,EAA3F,SACGvH,GAA2BG,aAIlC,gBAAC7H,EAAA,EAAD,CAAKC,GAAI2iC,GAAeC,QAAxB,UACE,eAAC7iC,EAAA,EAAD,CAAKC,GAAI2iC,GAAeznC,KAAxB,SAA+BuM,KAC/B,gBAACoD,GAAA,EAAD,CAAQC,QAASZ,GAAyBlK,GAAI2iC,GAAeh6B,OAAQgC,QAAS,kBAAMoyB,GAAgB,IAApG,UACE,eAACY,GAAA,EAAD,CAAM39B,GAAI2iC,GAAej4B,OACxBjD,aCxFE2K,GAAiC,kBAAM,eAACrS,EAAA,EAAD,CAAKC,GAAI2iC,GAAeznC,KAAxB,SAA+BuM,MCetEq7B,GAAqC,WAChD,MAA0C7hC,mBAASO,GAAc+Q,QAAjE,oBAAOwwB,EAAP,KAAsBlyB,EAAtB,KAEA,EAA8B5P,mBAAmD,MAAjF,oBAAOW,EAAP,KAAgBuN,EAAhB,KACA,EAAgClO,mBAAmB,IAAnD,oBAAOqH,EAAP,KAAiBoR,EAAjB,KAEA,EAAyDzY,mBAA0B,MAAnF,oBAAO+hC,EAAP,KAA0BC,EAA1B,KACA,EAA0ChiC,mBAAgD,IAA1F,oBAAOiiC,EAAP,KAAsBC,EAAtB,KACA,EAA2CliC,mBAASmiC,KAAKC,OAAzD,oBAAOC,EAAP,KAA0BC,EAA1B,KAEMjS,EAAavwB,GAAYuiC,E1GxBH,I0G0B5B,EAAsCriC,oBAAkB,GAAxD,oBAAO8/B,EAAP,KAAqByC,EAArB,KACA,EAAgDviC,oBAAS,GAAzD,oBAAOsT,EAAP,KAAyBC,EAAzB,KACA,EAA0DvT,oBAAS,GAAnE,oBAAOwT,EAAP,KAA8BC,EAA9B,KAEA,EAAoDzT,oBAAS,GAA7D,oBAAOigC,EAAP,KAA2BpsB,EAA3B,KACA,EAAsD7T,oBAAS,GAA/D,oBAAOggC,EAAP,KAA4BpsB,EAA5B,KACA,EAA4B5T,mBAAkC,MAA9D,oBAAOgH,EAAP,KAAemd,EAAf,KACA,EAAoCnkB,mB/DtCN,W+DsC9B,oBAAO+T,EAAP,KAAmBC,EAAnB,KAEA7T,qBAAU,WACHQ,GAAsB,OAAXqG,GAChBmd,EACEjjB,GAA0BP,GAASwJ,OAAStJ,GAAqCF,GAASwJ,OACtFnG,GACAJ,MAEL,CAACjD,EAASqG,IAEb,IAAMw7B,GAAmB9iC,GAAcuiC,GACjCQ,GAAuB/iC,GAAcqiC,GAErCW,GAA8Bj0B,uBAAY,SAACjU,GAC/Cie,EAAY,IACZvK,EAAW1T,GACXwnC,EAA4B,QAC3B,IAEG/Z,GAAexZ,uBAAY,WAC/B6zB,EAAcH,KAAKC,SAClB,IAEGO,GAAkBl0B,uBACtB,WAAiC,IAAhCm0B,IAA+B,yDAC1BjiC,GAAWiiC,IACbjiC,EAAQkO,SAAQ,SAACrU,GAAD,OAAWA,EAAKiC,UAAW,KAC3CwrB,MAEFnsB,OAAOpB,OAAO8nC,GAAiB3iC,SAASgP,SAAQ,SAAC2rB,GAAD,OAAOA,SAEzD,CAACgI,GAAkB7hC,EAASsnB,KAGxB4a,GAAuBp0B,uBAAY,WACvCuzB,EAA4B,MAC5BW,OACC,CAACA,KAEExa,GAA6C1Z,uBACjD,SAACq0B,GACKL,GAAqB5iC,UAAYijC,GACnCH,GAAgBhgC,GAAYmgC,IAAkC,OAAjBA,GAE/Cd,EAA4Bc,KAE9B,CAACH,GAAiBF,KAGdvC,GAA2BzxB,uBAAY,SAAC4J,EAAoB4pB,GAChEC,GAAiB,SAACjgC,GAAD,oBAAC,gBACbA,GADY,mBAEdoW,EAAW4pB,SAEb,IAEGllB,GAAiCtO,uBACrC,SAAC7L,IAEG6/B,GAAqB5iC,UAAY+C,GAChCA,IAAcF,IAAaC,GAAY8/B,GAAqB5iC,YAE7D8iC,KACAX,EAA4B,SAGhC,CAACW,GAAiBF,KAGdM,GAA4Ct0B,uBAChD,SAACu0B,GACCL,KACAX,EAA4B,MAC5BvuB,EAAyBuvB,KAE3B,CAACL,KAGG5C,GAActxB,uBAAY,kBAAM8zB,GAAc,KAAQ,IACtDnvB,GAAa3E,uBAAY,kBAAM8zB,GAAc,KAAO,IAEpDU,GACJ,eAAC,GAAD,CACE7vB,WAAYA,GACZC,gBAA6B,OAAZ1S,EACjB2S,iBAAkBA,EAClBC,oBAAqBA,EACrBC,sBAAuBA,EACvBC,yBAA0BsvB,GAC1BrvB,iBAAmD,OAAjC+uB,GAAqB5iC,QACvC8T,aAAckvB,GACd30B,WAAYw0B,GACZ9yB,iBAAkBA,EAClBiE,sBAAuBA,EACvBC,aAAc,kBAAMqQ,EAAU,KAC9BvQ,uBAAwBA,EACxBG,WAAYA,EACZC,cAAeA,IAInB,OAAI8tB,IAAkBvhC,GAAc+Q,OAEhC,uCACG2xB,GACD,eAAC,GAAD,OAIFnB,IAAkBvhC,GAAc4Q,SAAYxQ,EAS3CqG,EAGH,uCACGi8B,GACD,eAACzB,GAAD,CACE1B,aAAcA,EACdxsB,iBAAkBA,EAClBysB,YAAaA,GACbhjB,+BAAgCA,GAChC1V,SAAUA,EACVoR,YAAaA,EACb9X,QAASA,EACTs/B,mBAAoBA,EACpBpsB,sBAAuBA,EACvBmsB,oBAAqBA,EACrBpsB,uBAAwBA,EACxB5M,OAAQA,EACRmd,UAAWA,EACXpQ,WAAYA,EACZmsB,yBAA0BA,GAC1B/X,qBAAsBA,GACtBF,aAAcA,GACdoI,WAAYA,EACZ3c,iBAAmD,OAAjC+uB,GAAqB5iC,QACvC2T,sBAAuBA,OAzBT,KAPhB,uCACGyvB,GACD,eAAC,GAAD,QCzJKC,GAAoC,CAC/CC,IAAK,CACHvrB,UAAU,SACVpF,UAAU,QACVlU,QAAQ,OACRC,cAAc,SACdC,WAAW,UAEbmjC,QAAS,CACP71B,SAAU,EACVzN,MAAM,SCAG+kC,GAA6B,kBACxC,gBAACtkC,EAAA,EAAD,CAAKC,GAAImkC,GAASC,IAAlB,UACE,eAAC,GAAD,IACA,eAACrkC,EAAA,EAAD,CAAKC,GAAImkC,GAASvB,QAAlB,SACE,eAAC,GAAD,MAEF,eAAC,GAAD,Q,OCVJ0B,IAASC,OACP,eAAC,aAAD,UACE,eAAC,GAAD,MAEF9xB,SAASC,eAAT,W","file":"static/js/main.6a6a21b1.chunk.js","sourcesContent":["/**\n * Limit for different values to consider attribute as nominal\n */\nexport const CATEGORY_LIMIT = 10\n\n/**\n * File types that can be used to extract dataset\n */\nexport enum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\n/**\n * Options what to do with null values of the attributes\n */\nexport enum DataNullOptionType {\n  leave = `leave`,\n  change = `change`,\n  filter = `filter`,\n}\n\n/**\n * All types of options what to do with null values of the attributes.\n */\nexport const DATA_NULL_OPTION_TYPES = Object.values(DataNullOptionType)\n","/**\n * Text in page header\n */\nexport const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","/**\n * Types to work with dataset (sample or loaded) and its attributes\n */\n\n/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  /**\n   * All keys and values, readonly\n   */\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  /**\n   * Flag showing if item is selected, mutable\n   */\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface for properties of nominal value of attributes\n */\nexport interface NominalValueProperties {\n  name: string\n  attribute: keyof SelectableDataType\n  count: number\n  countSelected: number\n  order: number\n}\n\n/**\n * Interface for nominal value records\n * -- every attribute has an array of possible values with additional info\n */\nexport interface NominalRecord {\n  [key: keyof SelectableDataType]: Array<NominalValueProperties>\n}\n\n/**\n * Interface for properties of pair of data, used for on graph\n * Also can include properties counts for third attribute values\n */\nexport type DataLink = {\n  source: number\n  target: number\n  catAttributeValuesCounts: number[] | undefined\n  selected: number[]\n  names: Array<string>\n  value: number\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\n/**\n * Interface that assigns attributes numerical extent.\n * Used for axes' range.\n */\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\n/**\n * Changes the other cases like camelCase, snake_case or PascalCase to lower case values separated by whitespace\n * @param text\n */\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim().toLowerCase()\n\n/**\n * Changes value of the data to readable value\n * @param data\n */\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","/**\n * Functions to get consistent strings\n */\nimport { SelectableDataType, SelectedKey } from '../types/data/data'\nimport { MatrixItem } from '../types/data/MatrixData'\nimport { LinkDataPoint, NodeDataPoint } from '../types/d3-sankey'\n\nimport { otherCasesToWhitespaces } from './data/formatText'\n\n// CSS\n/**\n * Get pixel values\n * @param values\n */\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\n/**\n * Use calc with pixels and other value\n * @param px - how many pixels to add\n * @param plus - any size value\n */\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\n/**\n * Make css value important\n * @param val\n */\nexport const important = (val: string | number): string => `${val} !important`\n\n/**\n * Create solid border, with given number of pixels and value\n * @param px - pixel width\n * @param color - color of border\n */\nexport const border = (px: number, color: string): string => `${px}px solid ${color}`\n\n// also for D3.js\n/**\n * Get d3.js selector for every child\n */\nexport const getEverything = (): `*` => `*`\n\n/**\n * Get translation for x and y\n * @param translate [x, y]\n */\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\n/**\n * Get rotation for given degrees\n * @param deg - degrees\n */\nexport const getRotate = (deg: number): string => `rotate(${deg})`\n\n/**\n * Get class selector (with dot)\n */\nexport const getClass = (className: string): string => `.${className}`\n\n/**\n * Get values separated by space\n * @param values\n */\nexport const getSpaced = (...values: string[]): string => values.join(` `)\n\n/**\n * Get attribute formatted (other cases to white spaces)\n * @param attribute - data key\n */\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string => otherCasesToWhitespaces(attribute)\n\n/**\n * Get matrix attribute formatted\n * @param item - matrix item\n */\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\n/**\n * Get all keys with corresponding values of data item (not including selected), in string format `key: value`\n * @param data - item\n * @return array of strings `attribute: value`\n */\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n\n/**\n * Get important information from link between values - from which value, to which value, how many (count) and how many are selected\n * @param data - link\n * @return array of strings `info: value`\n */\nexport const getLinkDataPointValuesWithLabel = (data: LinkDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    from: data.names[0],\n    to: data.names[1],\n    count: String(data.value),\n    selected: String(data.selected.reduce((acc, sel) => acc + sel, 0)),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n\n/**\n * Get important information from values tabs - the name of the attribute, name of value, count of values and how many are selected\n * @param data - node\n * @return array of strings `info: value`\n */\nexport const getNodeDataPointValuesWithLabel = (data: NodeDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    attribute: otherCasesToWhitespaces(data.attribute),\n    name: data.name,\n    count: String(data.count),\n    selected: String(data.countSelected),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n\n/**\n * Get attribute with label in front of it, space separated\n * @param label - label to place in front of the attribute\n * @param attribute\n */\nexport const getLabelledAttribute = (label: string, attribute: keyof SelectableDataType): string =>\n  getSpaced(label, otherCasesToWhitespaces(attribute))\n\n/**\n * Returns all the display attributes separated by parenthesis\n * @param displayAttributes - attributes to display\n */\nexport const getDisplayAttributesInParentheses = (displayAttributes: Array<keyof SelectableDataType>): string =>\n  `(` + displayAttributes.map((attribute) => otherCasesToWhitespaces(attribute)).join(`; `) + `)`\n","/**\n * Colors used for application styling\n */\n\nexport const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const DIALOG_COLORS = {\n  font: `#212121`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonHoverBackground: `#b3bede`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  buttonInlinedFontOn: `#3965c4`,\n  buttonInlinedBgOn: `#e9eeff`,\n  buttonClose: `#4c4f56`,\n  border: `rgba(0, 0, 0, 0.12)`,\n  colorBorder: `#42495d`,\n  buttonDialogBackground: `#363a46`,\n  buttonDialogHoverBackground: `#1f2528`,\n  buttonDialogFont: `#d6e1ff`,\n}\n\nexport const CARD_COLORS = {\n  background: `#f7f8fd`,\n  backgroundHover: `#dce1ef`,\n  border: `#b3bede`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const SETTINGS_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#98a1b6`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  filterIconFont: `#656d86`,\n  filterBackground: `#52586c`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, px } from '../../helpers/stringGetters'\n\nimport { HEADER_COLORS } from '../../styles/colors'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: calc(5, `2vmin`),\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: calc(2, `1vmin`),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/headerText'\n\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","/**\n * Text in page footer\n */\nexport const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n  openSource: `Source code is available at`,\n  github: `GitHub`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, px } from '../../helpers/stringGetters'\n\nimport { FOOTER_COLORS, SETTINGS_DRAWER_COLORS } from '../../styles/colors'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    width: calc(-30, `100%`),\n    padding: px(10, 15),\n    display: `flex`,\n    justifyContent: `space-between`,\n  },\n  right: {\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n  },\n  text: {\n    fontSize: calc(2, `1vmin`),\n    color: SETTINGS_DRAWER_COLORS.icon,\n    display: `flex`,\n    alignItems: `center`,\n  },\n  githubIcon: {\n    padding: px(0, 6),\n    fontSize: px(14),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box, Link, Typography } from '@mui/material'\nimport { GitHub } from '@mui/icons-material'\n\nimport { GITHUB_LINK } from '../../constants/link'\n\nimport { FOOTER_TEXT } from '../../text/footerText'\n\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Typography sx={footerStyle.text}>\n      {FOOTER_TEXT.openSource}\n      <Link href={GITHUB_LINK} sx={footerStyle.text}>\n        <GitHub sx={footerStyle.githubIcon} />\n        {FOOTER_TEXT.github}\n      </Link>\n    </Typography>\n    <Box sx={footerStyle.right}>\n      <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n      <Box sx={footerStyle.text}>\n        &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n      </Box>\n    </Box>\n  </Box>\n)\n","/**\n * Link to GitHub repository\n */\nexport const GITHUB_LINK = `https://github.com/stetizu1/tabular-data-visualization`\n","import { MutableRefObject, useRef } from 'react'\n\n/**\n * Modified useRef, to get the value after the update\n * @param value - original ref value\n */\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { useEffect, useState } from 'react'\n\n/**\n * Function to slow down changes triggered by its changing state.\n * If during debounce time value changes again, the later value is used and timer restarted.\n * @param value - the value to which we want to change the current value after debounce\n * @param delay - how much time we want to wait for the value to change\n * @return value, that has delayed change\n */\nexport const useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n  return debouncedValue\n}\n","/**\n * State of data loading\n */\nexport enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n","/**\n * Types of views that can be visualized\n */\nexport enum ViewType {\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  Glyphs = `glyphs`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  ParallelSetsBundled = `parallelSetsBundled`,\n  DataTable = `dataTable`,\n}\n\n/**\n * Any view with brushing extents (rectangles)\n */\nexport type brushViewType = `brushView`\nexport const brushView: brushViewType = `brushView`\n\n/**\n * Returns true if given string is a view type\n * @param viewType\n */\nexport const isViewType = (viewType: string): viewType is ViewType => Object.values<string>(ViewType).includes(viewType)\n\n/**\n * True if the view have brushing with extents (rectangles)\n * @param component - component tested\n */\nexport const isBrushView = (component: ViewType | null): boolean =>\n  component === ViewType.ScatterPlotMatrix ||\n  component === ViewType.ScatterPlotGlyphs ||\n  component === ViewType.ParallelCoordinates\n","/**\n * Functions that works with dataset\n */\nimport {\n  CheckedForSelectableDataType,\n  DataLink,\n  ExtentForSelectableDataType,\n  NominalRecord,\n  NominalValueProperties,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\nimport { NodeDataPoint, SankeyGraph } from '../../types/d3-sankey'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\n/**\n * Get all attribute keys of the dataset\n * @param dataset\n */\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\n/**\n * Get keys from dataset, that are default attributes for quantitative visualization (first item numbers)\n * @param dataset\n */\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\n/**\n * Get keys from dataset, that are possible attributes for quantitative visualization (all transferable to number)\n * @param dataset\n */\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\n/**\n * Get keys from dataset, that are categorical (have less than `CATEGORY_LIMIT` different values)\n * @param dataset\n */\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size <= CATEGORY_LIMIT\n  })\n}\n\n/**\n * Get [attribute, true] pair for each attribute from the dataset\n * @param dataset\n */\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\n/**\n * Get [attribute, true] pair for each default quantitative attribute from the dataset\n * @param dataset\n */\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\n/**\n * Get [attribute, true] pair for each nominal attribute from the dataset (less than `CATEGORY_LIMIT` values)\n * @param dataset\n */\nexport const getDefaultNominalAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => Object.fromEntries(getCategoryAttributesKeys(dataset).map((key) => [key, true]))\n\n/**\n * Get [attribute, null] pair for each of given attribute - default selection for the attributes (parallel coordinates)\n * @param displayAttributes\n */\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n\n/**\n * Get possible values of given nominal attribute of the given dataset.\n * @param dataset\n * @param attribute - nominal attribute\n */\nexport const getNominalValueProperties = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  attribute: keyof SelectableDataType,\n): Array<NominalValueProperties> =>\n  dataset\n    .reduce((nominalValuePropertiesArr, data) => {\n      const containedIdx = nominalValuePropertiesArr.findIndex((values) => values.name === String(data[attribute]))\n      if (containedIdx !== -1) {\n        const prev = nominalValuePropertiesArr[containedIdx]\n        nominalValuePropertiesArr[containedIdx] = {\n          ...prev,\n          count: prev.count + 1,\n          countSelected: prev.countSelected + (data.selected ? 1 : 0),\n        }\n        return nominalValuePropertiesArr\n      }\n      const newNominalValueProperties: Omit<NominalValueProperties, `order`> = {\n        name: String(data[attribute]),\n        attribute,\n        count: 1,\n        countSelected: data.selected ? 1 : 0,\n      }\n      nominalValuePropertiesArr = [...nominalValuePropertiesArr, newNominalValueProperties]\n      return nominalValuePropertiesArr\n    }, [] as Array<Omit<NominalValueProperties, `order`>>)\n    .sort((a, b) => (b.name < a.name ? 1 : b.name > a.name ? -1 : 0))\n    .map((nvp, idx) => ({ ...nvp, order: idx }))\n\n/**\n * Get possible values of all nominal attributes of the given dataset.\n * @param dataset\n */\nexport const getNominalValuesRecord = (dataset: ReadonlyArray<SelectableDataType>): NominalRecord =>\n  Object.fromEntries(\n    getCategoryAttributesKeys(dataset).map((attribute) => [attribute, getNominalValueProperties(dataset, attribute)]),\n  )\n\n/**\n * Get pairs of attributes that are neighbors in the displayAttributes list\n * @param displayAttributes\n */\nexport const getNeighborAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): Array<[keyof SelectableDataType, keyof SelectableDataType]> =>\n  displayAttributes.slice(0, -1).map((att, idx) => [att, displayAttributes[idx + 1]])\n\n/**\n * Get graph for the sankey plotting (for a pair of the attributes)\n * @param dataset - given dataset\n * @param categoryAttribute - category attribute, that is coloring the graph\n * @param record - the nominal values record of the dataset\n * @param attFrom - attribute on the left part of the graph\n * @param attTo - attribute on the right part of the graph\n */\nexport const getGraph = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  categoryAttribute: keyof SelectableDataType | undefined,\n  record: NominalRecord,\n  attFrom: keyof SelectableDataType,\n  attTo: keyof SelectableDataType,\n): SankeyGraph => {\n  const nodes: Array<NodeDataPoint> = [...record[attFrom], ...record[attTo]]\n  const toIdxStart = record[attFrom].length\n\n  const catAttributeOptions = categoryAttribute ? record[categoryAttribute].map((props) => props.name) : []\n\n  const links: DataLink[] = record[attFrom].flatMap((from, idxFrom) =>\n    record[attTo].map((to, idxTo) => {\n      const filtered = dataset.filter(\n        (data) => String(data[attFrom]) === String(from.name) && String(data[attTo]) === String(to.name),\n      )\n      return {\n        source: idxFrom,\n        target: idxTo + toIdxStart,\n        names: [from.name, to.name],\n        catAttributeValuesCounts: catAttributeOptions.length\n          ? catAttributeOptions.map(\n              (value) => filtered.filter((data) => String(data[categoryAttribute!]) === value).length,\n            )\n          : undefined,\n        selected: catAttributeOptions.length\n          ? catAttributeOptions.map(\n              (value) => filtered.filter((data) => data.selected && String(data[categoryAttribute!]) === value).length,\n            )\n          : [filtered.filter((data) => data.selected).length],\n        value: filtered.length,\n      }\n    }),\n  )\n\n  return { nodes, links }\n}\n","import { Dimensions } from '../../types/basic/dimensions'\nimport { GridLayoutItem } from '../../types/views/Grid'\nimport { ViewType } from '../views-general/ViewType'\n\n/**\n * Height of the grid item header panel\n */\nexport const GRID_ITEM_HEADER_HEIGHT = 30\n\n/**\n * Class to give header panel to be draggable\n */\nexport const DRAG_HANDLE = `drag-handle`\n\n/**\n * Default size of the view\n */\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 0,\n  height: 0,\n}\n\n/**\n * Count of layout columns\n */\nexport const COLUMNS_COUNT = 25\n\n/**\n * Height of layout row\n */\nexport const ROW_HEIGHT = 10\n\n/**\n * Minimal width/height limits for all views\n */\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ParallelSetsBundled]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n}\n\n/**\n * Default dimensions for all views\n */\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.ParallelSetsBundled]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n}\n\n/**\n * Default grid layout for dataset with quantitative attributes\n */\nexport const DEFAULT_GRID_LAYOUT_QUANTITATIVE: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n\n/**\n * Default grid layout for dataset with nominal attributes\n */\nexport const DEFAULT_GRID_LAYOUT_NOMINAL: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 25,\n    h: 20,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n\n/**\n * Other layout options for dialog selection\n */\nexport const LAYOUT_OPT_2: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 30,\n    h: 16,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 30,\n    h: 14,\n    x: 17,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n\n/**\n * Other layout options for dialog selection\n */\nexport const LAYOUT_OPT_3: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 16,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 20,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 11,\n    h: 10,\n    x: 14,\n    y: 20,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 14,\n    h: 14,\n    x: 0,\n    y: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n\n/**\n * Other layout options for dialog selection\n */\nexport const LAYOUT_OPT_4: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 15,\n    x: 11,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.ScatterPlotGlyphs,\n    w: 14,\n    h: 15,\n    x: 11,\n    y: 15,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n]\n\n/**\n * Layout options for dialog selection\n */\nexport const LAYOUT_OPTIONS = [\n  DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n  DEFAULT_GRID_LAYOUT_NOMINAL,\n  LAYOUT_OPT_2,\n  LAYOUT_OPT_3,\n  LAYOUT_OPT_4,\n]\n","/**\n * Crossed out brush icon\n */\nimport { forwardRef } from 'react'\nimport { Box } from '@mui/material'\n\nexport const BrushOffSvg = forwardRef((props, ref) => (\n  <Box ref={ref} style={{ height: 24 }} {...props}>\n    <svg\n      className=\"MuiSvgIcon-root MuiSvgIcon-fontSizeMedium\"\n      style={{\n        userSelect: `none`,\n        width: `1em`,\n        height: `1em`,\n        display: `inline-block`,\n        fill: `currentColor`,\n        flexShrink: 0,\n        fontSize: `1.5rem`,\n      }}\n      aria-hidden=\"true\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path\n        d=\"M7 14c-1.66 0-3 1.34-3 3 0 1.31-1.16 2-2 2 .92 1.22 2.49 2 4 2 2.21 0 4-1.79 4-4 0-1.66-1.34-3-3-3zm13.71-9.37-1.34-1.34a.9959.9959 0 0 0-1.41 0L9 12.25 11.75 15l8.96-8.96c.39-.39.39-1.02 0-1.41z\"\n        id=\"path2\"\n      />\n      <path\n        d=\"M 3.27,3.26 2,4.53 C 19.47,22 2,4.53 19.47,22 l 1.27,-1.27 c -17.47,-17.47 0,0 -17.47,-17.47 z\"\n        id=\"path4\"\n      />\n    </svg>\n  </Box>\n))\n\nBrushOffSvg.displayName = `ButtonOffSvg`\n","/**\n * Graph tooltip icon\n */\nimport { forwardRef } from 'react'\nimport { Box } from '@mui/material'\n\nexport const TooltipSvg = forwardRef((props, ref) => (\n  <Box ref={ref} style={{ height: 24 }} {...props}>\n    <svg\n      className=\"MuiSvgIcon-root MuiSvgIcon-fontSizeMedium\"\n      style={{\n        userSelect: `none`,\n        width: `1em`,\n        height: `1em`,\n        display: `inline-block`,\n        fill: `currentColor`,\n        flexShrink: 0,\n        fontSize: `1.5rem`,\n      }}\n      aria-hidden=\"true\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path\n        id=\"path2-2\"\n        style={{ strokeWidth: 1 }}\n        d=\"m 2.0292969,2.6826315 0.039063,15.5214845 c 0,1.091591 0.8902343,1.984375 1.9902344,1.984375 H 20.058594 c 1.1,0 2,-0.892784 2,-1.984375 V 6.2959128 c 0,-1.0915916 -0.900007,-1.988315 -2,-1.984375 L 3.7167969,4.3701315 Z M 5.1757812,8.3642721 H 12.84375 V 9.4170065 H 5.1757812 Z m 0,2.4999999 H 18.375 v 1.052734 H 5.1757812 Z m 0.1171876,2.5 h 8.8671872 v 1.052735 H 5.2929688 Z m -0.015625,2.5 H 17.130859 v 1.052735 H 5.2773438 Z\"\n      />\n    </svg>\n  </Box>\n))\n\nTooltipSvg.displayName = `TooltipSvg`\n","import { AirportShuttle, DirectionsBoat, DirectionsCar, LocalFlorist, Twitter } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport titanicJson from '../../../test-data/titanicData.json'\nimport parallelCarsJson from '../../../test-data/parallelCarsData.json'\n\nimport { DataType } from '../../types/data/data'\n\n/**\n * Sample datasets options\n */\nexport enum SampleDataset {\n  flowers = `flower`,\n  birds = `bird`,\n  cars = `car`,\n  titanic = `titanic`,\n  parallelCars = `parallelCars`,\n}\n\n/**\n * All sample datasets options\n */\nexport const SAMPLE_DATASET_OPTIONS = Object.values(SampleDataset)\n\n/**\n * Icons for all sample datasets\n */\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flowers]: <LocalFlorist />,\n  [SampleDataset.birds]: <Twitter />,\n  [SampleDataset.cars]: <DirectionsCar />,\n  [SampleDataset.titanic]: <DirectionsBoat />,\n  [SampleDataset.parallelCars]: <AirportShuttle />,\n}\n\n/**\n * Sample datasets data\n */\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flowers]: flowerJson,\n  [SampleDataset.birds]: birdJson,\n  [SampleDataset.cars]: carJson,\n  [SampleDataset.titanic]: titanicJson,\n  [SampleDataset.parallelCars]: parallelCarsJson,\n}\n","/**\n * Types of errors occurring while reading data\n */\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFormat = `unsupportedFileFormat`,\n}\n","/**\n * Text on site and top toolbar\n */\n\nimport { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataNullOptionType } from '../constants/data/data'\nimport { DataLoadError } from '../constants/data/DataLoadError'\n\n/**\n * Text on page before the data is selected/loaded\n */\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  firstTime: `Trying for the first time?`,\n  helpDialog: {\n    header: `About Tabular Data Visualizer`,\n    description: `The purpose of this application is to visualize multidimensional tabular data.`,\n    subHeader: `Options`,\n    close: `Close`,\n    sample: `To try the application, you can select one of the sample datasets. You can use flower or car dataset for quantitative data visualizations, Titanic or parallel cars for category visualization, or bird dataset for combination of both.`,\n    file: `To use the application with your custom dataset, upload the file in JSON or CSV format. Files need to have the correct form; for JSON it is the array of objects with the same keys and value types (e.g. [{\"species\": \"bird\", \"weight\": 20}, {\"species\": \"fish\", \"weight\": 35},...]), CSV files should have the names of the attributes on the first line and their values on the lines after.`,\n    viewsHelp: `To get more information about a specific view, you can look at its help, which can be found in its header.`,\n    add: `... add a new view type to the visualization board`,\n    layout: `... set one of the predefined layouts`,\n    tooltip: `... turn on/off tooltips or data items`,\n    skip: `... turn on/off brushing only at the end of the move. Works for range brushes (scatter plot, parallel coordinates). Enabling this option is recommended if the application runs too slow during brushing.`,\n    brush: `... change the color of the brush`,\n    brushOff: `... clean all active brushing`,\n    settings: `... show more settings for views`,\n  },\n  loading: `loading...`,\n}\n\n/**\n * Text on top toolbar\n */\nexport const TOP_TOOLBAR_TEXT = {\n  addView: `Add a view`,\n  layout: `Set predefined layout`,\n  detailsVisible: `Display tooltips`,\n  brushingOnEOM: `Set brushing at the end of the move only`,\n  brushColor: `Brush color`,\n  clearBrushes: `Clear brushes`,\n  settings: `Settings`,\n  addDialog: {\n    title: `Add a view`,\n    noOption: `All view options are currently displayed.`,\n  },\n  layoutDialog: {\n    title: `Select a layout`,\n    alt: `Layout `,\n  },\n}\n\n/**\n * Text connected to data load / reading file\n */\nexport const FILE_READER_TEXT = {\n  button: `Select a file`,\n  sampleDataLabel: `Try it on the sample data`,\n  sampleDataDialogTitle: `Select sample dataset`,\n  sampleDataDialogText: {\n    [SampleDataset.flowers]: `Flower dataset`,\n    [SampleDataset.birds]: `Bird dataset`,\n    [SampleDataset.cars]: `Car dataset`,\n    [SampleDataset.titanic]: `Titanic dataset`,\n    [SampleDataset.parallelCars]: `Car parallel dataset`,\n  },\n  alertDialog: {\n    [DataLoadError.unsupportedFile]: {\n      title: `File type not supported`,\n      description: `This file type is not supported. Use JSON or CSV file.`,\n    },\n    [DataLoadError.unsupportedFormat]: {\n      title: `File format not supported`,\n      description: `The file format is invalid. The valid JSON file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null).`,\n    },\n    confirm: `OK`,\n  },\n  nullDialog: {\n    title: `Data with null values occurred!`,\n    description: `This application provides only basic operations for modifying null data values. For better processing, use applications designed for this purpose.`,\n    confirm: `Confirm`,\n    optionsText: {\n      [DataNullOptionType.leave]: `Leave as is`,\n      [DataNullOptionType.filter]: `Filter`,\n      [DataNullOptionType.change]: `Change all`,\n    },\n    optionsDescription: {\n      [DataNullOptionType.leave]: `This option leaves the data as is. On numeric scales, null values will be cast to 0, in the table they will be displayed as null; for categorical data a separate category will be created.`,\n      [DataNullOptionType.filter]: `This option filters out all data with null values. These data will not be considered further in the application.`,\n      [DataNullOptionType.change]: `This option replaces all null values with the value entered below.`,\n    },\n    changeTo: `Change to`,\n    attribute: `Attribute:`,\n  },\n}\n","/**\n * Types of sorting\n */\nexport enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/stringGetters'\n\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n    flexWrap: `wrap`,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  middle: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n  right: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n}\n","/**\n * Constants to work with mui\n */\nexport const COMPONENT_TYPE = {\n  image: `img` as `img`,\n  label: `label` as `label`,\n}\n\nexport const BUTTON_VARIANT = {\n  text: `text` as `text`,\n  outlined: `outlined` as `outlined`,\n  contained: `contained` as `contained`,\n}\n\nexport const DRAWER_VARIANT = {\n  permanent: `permanent` as `permanent`,\n  persistent: `persistent` as `persistent`,\n  temporary: `temporary` as `temporary`,\n}\n\nexport const ANCHOR = {\n  left: `left` as `left`,\n  top: `top` as `top`,\n  right: `right` as `right`,\n  bottom: `bottom` as `bottom`,\n}\n\nexport const CELL_PADDING = {\n  checkbox: `checkbox` as `checkbox`,\n  none: `none` as `none`,\n}\n\nexport const DIALOG_MAX_WIDTH = {\n  xs: `xs` as `xs`,\n  s: `sm` as `sm`,\n  m: `md` as `md`,\n  l: `lg` as `lg`,\n  xl: `xl` as `xl`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    flexShrink: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonHoverBackground,\n      },\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { BUTTON_VARIANT } from '../../../../../constants/mui'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant={BUTTON_VARIANT.contained} onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { DataType, JsonValue } from '../../types/data/data'\n\n/**\n * Checks if value is one of the JSON simple values\n * @param value\n */\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\n/**\n * Checks if the array is an array of a DataType\n * @param dataset\n */\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n","import { parse } from 'csv-string'\n\nimport { DataType } from '../../types/data/data'\n\n/**\n * Parses the CSV file to the DataType array\n * @param textCsv - csv string text\n */\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { InputBaseComponentProps } from '@mui/material/InputBase'\n\n/**\n * HTML constants\n */\nexport const HTML = {\n  newLine: `<br/>`,\n}\n\n/**\n * Used input types\n */\nexport const INPUT_TYPE = {\n  color: `color`,\n  number: `number`,\n  file: `file`,\n}\n\n/**\n * Used input props\n */\nexport const INPUT_PROPS: Record<string, InputBaseComponentProps> = {\n  positiveNumber: { inputMode: `numeric`, min: 0 },\n}\n\n/**\n * Size of block containing font in plots\n */\nexport const PLOT_FONT_BOX_SIZE = 14 // font box, 2px bigger than the fontSize 12\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS, HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n  display: `flex`,\n  alignItems: `center`,\n  padding: isHighlighted ? px(8, 2) : 0,\n  borderRadius: px(10),\n})\n\nexport const fileReaderStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 3, 0, 2),\n    padding: px(6, 12, 6, 8),\n    minWidth: 0,\n    bgcolor: BUTTON_COLORS.buttonOnBackground,\n    color: BUTTON_COLORS.fontOn,\n    '&:hover': {\n      bgcolor: BUTTON_COLORS.buttonHoverBackground,\n    },\n    '& span': {\n      paddingLeft: px(5),\n    },\n    '@media (max-width: 600px)': {\n      padding: px(6, 8),\n      '& span': {\n        display: `none`,\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, important, px } from '../../../helpers/stringGetters'\n\nimport { SITE_COLORS, ERROR_COLORS, BUTTON_COLORS, CARD_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  description: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n  innerContent: {\n    padding: px(0, 40, 10),\n  },\n  contentBox: {\n    height: px(120),\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  text: {\n    color: SITE_COLORS.font,\n  },\n  toggleDialogGroup: {\n    width: `100%`,\n    marginBottom: px(5),\n    display: `flex`,\n  },\n  toggleDialogButton: {\n    flexGrow: 1,\n    padding: px(6),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonDialogBackground,\n      color: BUTTON_COLORS.buttonDialogFont,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonDialogHoverBackground,\n      },\n    },\n  },\n  button: {\n    margin: px(0, 20, 20),\n  },\n  attHeader: {\n    fontSize: px(16),\n    fontWeight: `bold`,\n    paddingBottom: px(4),\n    color: SITE_COLORS.font,\n  },\n  textInput: {\n    minWidth: `95%`,\n    alignSelf: `center`,\n    '&.MuiFormControl-root': {\n      margin: px(20, 6, 6),\n    },\n    '& input': {\n      padding: px(8, 10, 6),\n    },\n  },\n  card: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    minWidth: px(400),\n    border: border(1, CARD_COLORS.border),\n    margin: px(2),\n    bgcolor: CARD_COLORS.background,\n    '&:hover': {\n      bgcolor: important(CARD_COLORS.backgroundHover),\n      '& img': {\n        opacity: 0.6,\n      },\n    },\n    '@media (max-width: 520px)': {\n      minWidth: 0,\n    },\n  },\n  image: {\n    width: 165,\n    height: 85,\n    borderRadius: px(2),\n  },\n  cardContent: {\n    padding: px(10),\n  },\n  itemText: {\n    fontSize: px(10),\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.description}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  TextField,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material'\n\nimport { SelectableDataType } from '../../../../../types/data/data'\n\nimport { getLabelledAttribute } from '../../../../../helpers/stringGetters'\n\nimport { DATA_NULL_OPTION_TYPES, DataNullOptionType } from '../../../../../constants/data/data'\nimport { BUTTON_VARIANT } from '../../../../../constants/mui'\n\nimport { FILE_READER_TEXT } from '../../../../../text/siteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface NullDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  nullContainingAttributes: Array<keyof SelectableDataType>\n  dataset: Array<SelectableDataType>\n  setDataset: (dataset: Array<SelectableDataType>) => void\n}\n\nexport const NullDialog: VoidFunctionComponent<NullDialogProps> = ({\n  isOpen,\n  onClose,\n  nullContainingAttributes,\n  dataset,\n  setDataset,\n}) => {\n  const [optionsChosen, setOptionsChosen] = useState<Record<keyof SelectableDataType, DataNullOptionType>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, DataNullOptionType.leave])),\n  )\n  const [replaceValue, setReplaceValue] = useState<Record<keyof SelectableDataType, string>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])),\n  )\n\n  useEffect(() => {\n    setOptionsChosen(Object.fromEntries(nullContainingAttributes.map((att) => [att, DataNullOptionType.leave])))\n    setReplaceValue(Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])))\n  }, [nullContainingAttributes])\n\n  const getFixedDataset = useCallback(\n    (dataset: SelectableDataType[], attribute: keyof SelectableDataType) => {\n      switch (optionsChosen[attribute]) {\n        case DataNullOptionType.filter:\n          return dataset.filter((data) => data[attribute] !== null)\n        case DataNullOptionType.change: {\n          const newValue = !isNaN(Number(replaceValue[attribute]))\n            ? Number(replaceValue[attribute])\n            : replaceValue[attribute]\n          return dataset.map((data) => ({\n            ...data,\n            [attribute]: data[attribute] === null ? newValue : data[attribute],\n          }))\n        }\n        case DataNullOptionType.leave:\n        default:\n          return dataset\n      }\n    },\n    [optionsChosen, replaceValue],\n  )\n\n  const handleNullDialogConfirm = useCallback(() => {\n    let datasetFixed: SelectableDataType[] = dataset\n    nullContainingAttributes.forEach((attribute) => {\n      datasetFixed = getFixedDataset(datasetFixed, attribute)\n    })\n    setDataset(datasetFixed)\n  }, [dataset, getFixedDataset, nullContainingAttributes, setDataset])\n\n  const handleToggleChange = useCallback(\n    (value: DataNullOptionType | null, attribute: keyof SelectableDataType) =>\n      setOptionsChosen((prev) => ({\n        ...prev,\n        [attribute]: value ? value : prev[attribute],\n      })),\n    [],\n  )\n  const handleReplaceChange = useCallback(\n    (value: string, attribute: keyof SelectableDataType) =>\n      setReplaceValue((prev) => ({\n        ...prev,\n        [attribute]: value,\n      })),\n    [],\n  )\n\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{FILE_READER_TEXT.nullDialog.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        <DialogContentText sx={dialogStyle.description}>{FILE_READER_TEXT.nullDialog.description}</DialogContentText>\n        {nullContainingAttributes.map((attribute) => {\n          const option = optionsChosen[attribute]\n          return (\n            <Box key={attribute} sx={dialogStyle.innerContent}>\n              <Typography sx={dialogStyle.attHeader}>\n                {getLabelledAttribute(FILE_READER_TEXT.nullDialog.attribute, attribute)}\n              </Typography>\n              <ToggleButtonGroup\n                sx={dialogStyle.toggleDialogGroup}\n                value={option}\n                exclusive\n                onChange={(e, value) => handleToggleChange(value, attribute)}\n              >\n                {DATA_NULL_OPTION_TYPES.map((optType, idx) => (\n                  <ToggleButton sx={dialogStyle.toggleDialogButton} value={optType} key={idx}>\n                    {FILE_READER_TEXT.nullDialog.optionsText[optType]}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n              <Box sx={dialogStyle.contentBox}>\n                <Typography sx={dialogStyle.text}>{FILE_READER_TEXT.nullDialog.optionsDescription[option]}</Typography>\n                {option === DataNullOptionType.change && (\n                  <TextField\n                    label={FILE_READER_TEXT.nullDialog.changeTo}\n                    sx={dialogStyle.textInput}\n                    defaultValue={replaceValue[attribute]}\n                    onChange={(e) => handleReplaceChange(e.target.value, attribute)}\n                  />\n                )}\n              </Box>\n            </Box>\n          )\n        })}\n      </DialogContent>\n      <DialogActions>\n        <Button variant={BUTTON_VARIANT.contained} onClick={handleNullDialogConfirm} sx={dialogStyle.button} autoFocus>\n          {FILE_READER_TEXT.nullDialog.confirm}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, ChangeEvent } from 'react'\nimport { Box, Button, Tooltip } from '@mui/material'\nimport { AutoGraph, UploadFile } from '@mui/icons-material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { isArrayOfDataType } from '../../../../../helpers/data/dataCheckers'\nimport { CsvParse } from '../../../../../helpers/data/dataParsers'\nimport { getAttributeKeys } from '../../../../../helpers/data/data'\n\nimport { AcceptableFileTypes } from '../../../../../constants/data/data'\nimport { DataLoadState } from '../../../../../constants/data/DataLoadState'\nimport {\n  SAMPLE_DATASET_OPTIONS,\n  SampleDataset,\n  sampleDatasetIcons,\n  sampleDatasets,\n} from '../../../../../constants/data/sampleDataset'\nimport { BUTTON_VARIANT, COMPONENT_TYPE } from '../../../../../constants/mui'\nimport { INPUT_TYPE } from '../../../../../constants/others'\nimport { DataLoadError } from '../../../../../constants/data/DataLoadError'\n\nimport { FILE_READER_TEXT } from '../../../../../text/siteText'\n\nimport {\n  fileReaderStyle,\n  getFileReaderBoxStyle,\n} from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\n\nimport { ClickableButton } from '../buttons/ClickableButton'\nimport { NullDialog } from './NullDialog'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: Array<DataType>): Array<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nconst FILE_INPUT_ID = `FILE_INPUT`\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isNullDialogOpen, setIsNullDialogOpen] = useState(false)\n  const [nullContainingAttributes, setNullContainingAttributes] = useState<Array<keyof SelectableDataType>>([])\n  const [rawDataset, setRawDataset] = useState<Array<SelectableDataType>>([])\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const handleListItemClick = useCallback(\n    (optionKey: SampleDataset) => {\n      setIsSampleDataDialogOpen(false)\n      const dataset = sampleDatasets[optionKey]\n      setDataset(addSelected(dataset))\n      setDataLoadState(DataLoadState.Loaded)\n    },\n    [setDataLoadState, setDataset],\n  )\n\n  const closeDialog = useCallback(() => {\n    setIsNullDialogOpen(false)\n    setRawDataset([])\n    setNullContainingAttributes([])\n  }, [])\n\n  const getDatasetFromFile = useCallback(\n    async (fileType: AcceptableFileTypes | string, selectedFile: File): Promise<DataType[] | null> => {\n      switch (fileType) {\n        case AcceptableFileTypes.json: {\n          const text = await selectedFile.text()\n          return JSON.parse(text)\n        }\n        case AcceptableFileTypes.csv: {\n          const textCsv = await selectedFile.text()\n          return CsvParse(textCsv)\n        }\n        default: {\n          return null\n        }\n      }\n    },\n    [],\n  )\n\n  const handleFileChange = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files?.length) {\n        setDataLoadState(DataLoadState.Loading)\n        const selectedFile = e.target.files[0]\n        const fileType = selectedFile.type\n        const dataset = await getDatasetFromFile(fileType, selectedFile)\n\n        if (dataset === null || !isArrayOfDataType(dataset)) {\n          const dataLoadErrorType = dataset === null ? DataLoadError.unsupportedFile : DataLoadError.unsupportedFormat\n          setDataLoadState(DataLoadState.NoData)\n          setAlertDialogText(FILE_READER_TEXT.alertDialog[dataLoadErrorType])\n          setIsAlertDialogOpen(true)\n          setDataset(null)\n          return\n        }\n\n        const selectableDataset = addSelected(dataset)\n        const nullContainingAttributes = getAttributeKeys(selectableDataset).filter((att) =>\n          dataset.some((data) => data[att] === null),\n        )\n        if (nullContainingAttributes.length) {\n          setNullContainingAttributes(nullContainingAttributes)\n          setRawDataset(selectableDataset)\n          setIsNullDialogOpen(true)\n          const fileEl = document.getElementById(FILE_INPUT_ID) as unknown as { value: null }\n          fileEl.value = null\n          return\n        }\n        setDataset(selectableDataset)\n        setDataLoadState(DataLoadState.Loaded)\n      }\n    },\n    [getDatasetFromFile, setDataLoadState, setDataset],\n  )\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={FILE_READER_TEXT.sampleDataDialogTitle}\n        options={SAMPLE_DATASET_OPTIONS.map((key) => ({\n          key,\n          label: FILE_READER_TEXT.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={FILE_READER_TEXT.alertDialog.confirm}\n        alert={true}\n      />\n      <NullDialog\n        isOpen={isNullDialogOpen}\n        onClose={() => {\n          setDataLoadState(DataLoadState.NoData)\n          closeDialog()\n        }}\n        nullContainingAttributes={nullContainingAttributes}\n        dataset={rawDataset}\n        setDataset={(dataset) => {\n          setDataset(dataset)\n          setDataLoadState(DataLoadState.Loaded)\n          closeDialog()\n        }}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={FILE_READER_TEXT.sampleDataLabel}\n        />\n        <Button sx={fileReaderStyle.button} variant={BUTTON_VARIANT.contained} component={COMPONENT_TYPE.label}>\n          <Tooltip title={FILE_READER_TEXT.button}>\n            <UploadFile />\n          </Tooltip>\n          <span>{FILE_READER_TEXT.button}</span>\n          <input type={INPUT_TYPE.file} hidden id={FILE_INPUT_ID} onChange={handleFileChange} />\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction, useCallback } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\nconst ON_VALUE = `on`\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = useCallback(\n    (event: MouseEvent<HTMLElement>, checked: string[]) => {\n      if (checked.length && checked[0] === ON_VALUE) {\n        return setValue(true)\n      }\n      return setValue(false)\n    },\n    [setValue],\n  )\n  return (\n    <ToggleButtonGroup value={value ? [ON_VALUE] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={ON_VALUE} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    padding: px(4),\n    color: BUTTON_COLORS.buttonOnBackground,\n    minWidth: 0,\n    '& svg': {\n      fontSize: px(30),\n    },\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Settings } from '@mui/icons-material'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../../text/siteText'\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <Button disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Tooltip title={TOP_TOOLBAR_TEXT.settings}>\n      <Settings />\n    </Tooltip>\n  </Button>\n)\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const getColorInputStyle = (disabled?: boolean): SxProps => ({\n  display: `flex`,\n  '& .MuiSvgIcon-root': {\n    color: disabled ? BUTTON_COLORS.fontDisabled : BUTTON_COLORS.buttonOnBackground,\n  },\n})\n\nexport const getColorInputBoxStyle = (color: string, disabled?: boolean): SxProps => ({\n  bgcolor: disabled ? BUTTON_COLORS.fontDisabled : color,\n  minWidth: px(25),\n  minHeight: px(25),\n  borderRadius: px(5),\n  ml: px(2),\n  border: border(1, disabled ? BUTTON_COLORS.buttonDisableBackground : BUTTON_COLORS.colorBorder),\n})\n\nexport const colorInputStyle: Record<string, SxProps> = {\n  inputBox: {\n    position: `relative`,\n    '& input': {\n      width: `100%`,\n      opacity: 0,\n      position: `absolute`,\n      left: 0,\n    },\n  },\n}\n","import { useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Box, Tooltip } from '@mui/material'\n\nimport { useDebounce } from '../../../../../helpers/react/useDebounce'\n\nimport { COLOR_DEBOUNCE } from '../../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../../constants/others'\n\nimport {\n  colorInputStyle,\n  getColorInputBoxStyle,\n  getColorInputStyle,\n} from '../../../../../components-style/content/top-toolbar/items/buttons/colorButtonStyle'\n\nexport interface ColorButtonProps {\n  color: string\n  handleSetColor: (color: string) => void\n  tooltip: string\n  disabled?: boolean\n  icon: JSX.Element\n}\n\nexport const ColorButton: VoidFunctionComponent<ColorButtonProps> = ({\n  color,\n  handleSetColor,\n  tooltip,\n  disabled,\n  icon,\n}) => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n  useEffect(() => {\n    handleSetColor(debouncedColor)\n  }, [debouncedColor, handleSetColor])\n\n  return (\n    <Tooltip title={tooltip} disableHoverListener={disabled}>\n      <Box sx={colorInputStyle.inputBox}>\n        <input\n          disabled={disabled}\n          type={INPUT_TYPE.color}\n          value={color}\n          onChange={(e) => setCurrentColor(e.target.value)}\n        />\n        <Box sx={getColorInputStyle(disabled)}>\n          {icon}\n          <Box sx={getColorInputBoxStyle(color, disabled)} />\n        </Box>\n      </Box>\n    </Tooltip>\n  )\n}\n","/**\n * Debounce time on text input\n */\nexport const TEXT_INPUT_DEBOUNCE = 400\n\n/**\n * Debounce time on brushing change\n */\nexport const BRUSH_DEBOUNCE = 10\n\n/**\n * Debounce time on color input\n */\nexport const COLOR_DEBOUNCE = 60\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box } from '@mui/material'\nimport { AddCircle, Brush, Dashboard, SkipNext } from '@mui/icons-material'\n\nimport { BrushOffSvg } from '../../../../icons/BrushOffSvg'\nimport { TooltipSvg } from '../../../../icons/TooltipSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\nimport { ColorButton } from './items/buttons/ColorButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: () => void\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsLayoutDialogOpen: Dispatch<SetStateAction<boolean>>\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  removeLayout: () => void\n\n  brushColor: string\n  setBrushColor: Dispatch<SetStateAction<string>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n  setIsLayoutDialogOpen,\n  removeLayout,\n  brushColor,\n  setBrushColor,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.addView}\n      />\n      <ClickableButton\n        onClick={() => {\n          setIsLayoutDialogOpen(true)\n          removeLayout()\n        }}\n        icon={<Dashboard />}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.layout}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ToggleButtonSingle\n        icon={<TooltipSvg />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.detailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.brushingOnEOM}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.middle}>\n      <ColorButton\n        color={brushColor}\n        handleSetColor={(color) => setBrushColor(color)}\n        icon={<Brush />}\n        disabled={isToolsDisabled}\n        tooltip={TOP_TOOLBAR_TEXT.brushColor}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<BrushOffSvg />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.clearBrushes}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Constants to work with D3.js. SVG\n */\nexport const SVG = {\n  elements: {\n    svg: `svg` as `svg`,\n    g: `g` as `g`,\n    circle: `circle` as `circle`,\n    rect: `rect` as `rect`,\n    path: `path` as `path`,\n    text: `text` as `text`,\n    div: `div` as `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    stroke: `stroke`,\n    strokeWidth: `stroke-width`,\n    textAnchor: `text-anchor`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n    start: `start`,\n    end: `end`,\n    middle: `middle`,\n  },\n}\n","/**\n * Function to display elements\n */\nimport { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from '../stringGetters'\n\n/**\n * Set if the elements are displayed (in d3.js manner)\n * @param isVisible - true if they should be visible, false if not)\n * @param displayClass - class of elements to be shown/hidden\n */\nexport const setDisplay = (isVisible: boolean | undefined, displayClass: string): void => {\n  if (isVisible) {\n    selectAll(getClass(displayClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(displayClass)).style(SVG.style.display, SVG.values.none)\n}\n","/**\n * Class of the tooltip\n */\nexport const TOOLTIP_CLASS = `tooltip-class`\n\n/**\n * Tooltip visibility settings\n */\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n}\n","import { ViewType } from '../constants/views-general/ViewType'\n\n/**\n * Names of the views\n */\nexport const VIEWS_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.ParallelSetsBundled]: `Parallel Sets (bundled layout)`,\n  [ViewType.DataTable]: `Data Table`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(5, 5, 10),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","/**\n * Text on bottom of the drawer\n */\nexport const SETTINGS_DRAWER_BOTTOM_TEXT = {\n  description: `This application uses React and D3.js.`,\n  hide: `Hide`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, calc, px } from '../../../helpers/stringGetters'\n\nimport { SETTINGS_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const settingsDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: SETTINGS_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, SETTINGS_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  fill: {\n    flexGrow: 1,\n  },\n  header: {},\n  chevron: {\n    color: SETTINGS_DRAWER_COLORS.icon,\n  },\n  setting: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n  footer: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n  },\n  text: {\n    color: SETTINGS_DRAWER_COLORS.icon,\n    fontSize: px(9),\n  },\n  button: {\n    minWidth: 0,\n  },\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\n\n/**\n * Minimal attribute count for parallel coordinates\n */\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\n/**\n * Default values for parallel coordinates settings\n */\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [10, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","/**\n * Text for views settings\n */\n\n/**\n * Text for any settings\n */\nexport const SETTINGS_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\n/**\n * Text for settings for d3.js views\n */\nexport const SETTINGS_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...SETTINGS_BASE_TEXT,\n}\n\n/**\n * Text for margin settings\n */\nexport const MARGIN_SETTINGS_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\n/**\n * Text for opacity settings\n */\nexport const OPACITY_SETTINGS_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\n/**\n * Text for palette picker settings\n */\nexport const PALETTE_PICKER_SETTINGS_TEXT = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n","/**\n * Text for parallel coordinates\n */\nimport { ViewType } from '../../constants/views-general/ViewType'\n\nimport { VIEWS_NAMES } from '../viewsNames'\nimport { SETTINGS_TEXT } from './common'\n\n/**\n * Text in parallel coordinates\n */\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `The parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the settings.`,\n}\n\n/**\n * Text in parallel coordinates settings\n */\nexport const PARALLEL_COORDINATES_SETTINGS_TEXT = {\n  header: VIEWS_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data have less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...SETTINGS_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/stringGetters'\n\nimport { SETTINGS_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\n\nexport const settingsDrawerItemStyle: Record<string, SxProps> = {\n  drawerSettings: {\n    width: calc(-22, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: SETTINGS_DRAWER_COLORS.drawerItemBackground,\n    border: border(1, SETTINGS_DRAWER_COLORS.drawerItemBorder),\n    borderRadius: px(4),\n    borderBottom: border(2, SETTINGS_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, SETTINGS_DRAWER_COLORS.drawerItemBorder),\n      fontSize: 15,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: `0.8em`,\n      color: SETTINGS_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: px(12),\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: SETTINGS_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<Opt extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: Opt) => Partial<Opt>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <Opt extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<Opt>): JSX.Element => {\n  const handleCheckboxChange = useCallback(\n    (eventChecked: boolean, key: keyof SelectableDataType) => {\n      const newChecked = { ...checked, [key]: eventChecked }\n      setChecked(newChecked)\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        const newSettings = getNewSettings(newChecked, prevSettings)\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            ...newSettings,\n          },\n        }\n      })\n    },\n    [checked, getNewSettings, handleChangeSettings, setChecked, setSettings, viewType],\n  )\n  const handleMove = useCallback(\n    (newAttributesKeys: Array<keyof SelectableDataType>) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setAttributesKeys(newAttributesKeys)\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n          },\n        }\n      })\n    },\n    [checked, handleChangeSettings, setAttributesKeys, setSettings, viewType],\n  )\n\n  const onUpButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  const onDownButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT } from '../../../../text/views-and-settings/common'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n  handleChangeSettings?: () => void\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  handleChangeSettings,\n}) => {\n  const handleSelectCategoryChange = useCallback(\n    (categoryAttribute: keyof SelectableDataType | -1) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n          },\n        }\n      })\n    },\n    [setSettings, viewType, handleChangeSettings],\n  )\n\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{SETTINGS_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const settingsTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(12),\n    padding: px(6, 5, 3),\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_PROPS, INPUT_TYPE } from '../../../../constants/others'\n\nimport { MARGIN_SETTINGS_TEXT } from '../../../../text/views-and-settings/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  handleChangeSettings?: () => void\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({\n  margins,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentMargins, setCurrentMargins] = useState<MarginArray>(margins)\n  const debouncedMargins = useDebounce(currentMargins, TEXT_INPUT_DEBOUNCE)\n\n  const handleMarginChange = useCallback((newMargin: number, idx: number) => {\n    setCurrentMargins((oldMargins) => {\n      const newMargins: MarginArray = [...oldMargins]\n      newMargins[idx] = newMargin\n      return newMargins\n    })\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: debouncedMargins,\n        },\n      }\n    })\n  }, [debouncedMargins, handleChangeSettings, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={settingsTextStyle.text}>{MARGIN_SETTINGS_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.top}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.right}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.bottom}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.left}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { InputBaseComponentProps } from '@mui/material/InputBase'\n\nimport { INPUT_PROPS } from '../../constants/others'\n\n/**\n * Get input props for number input with min and max values\n * @param min\n * @param max\n */\nexport const getInputPropsPositiveNumber = ({ min, max }: { min?: number; max?: number }): InputBaseComponentProps => {\n  const minVal = min ? { min } : {}\n  const maxVal = max ? { max } : {}\n  return {\n    ...INPUT_PROPS.positiveNumber,\n    ...minVal,\n    ...maxVal,\n  }\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { getInputPropsPositiveNumber } from '../../../../helpers/basic/getInputPropsPositiveNumber'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { OPACITY_SETTINGS_TEXT } from '../../../../text/views-and-settings/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacities: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({\n  header,\n  opacities,\n  setSettings,\n  viewType,\n}) => {\n  const [currentOpacities, setCurrentOpacities] = useState<Opacity>(opacities)\n  const debouncedOpacities = useDebounce(currentOpacities, TEXT_INPUT_DEBOUNCE)\n\n  const handleOpacityChange = useCallback((newOpacity: number, idx: number) => {\n    setCurrentOpacities((oldOpacities) => {\n      const newOpacities: Opacity = [...oldOpacities]\n      newOpacities[idx] = newOpacity\n      return newOpacities\n    })\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: debouncedOpacities,\n        },\n      }\n    })\n  }, [debouncedOpacities, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={settingsTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_SETTINGS_TEXT.all}\n        type={INPUT_TYPE.number}\n        defaultValue={opacities[0]}\n        sx={numberInputStyles.textField}\n        inputProps={getInputPropsPositiveNumber({ max: 100 })}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_SETTINGS_TEXT.selected}\n          type={INPUT_TYPE.number}\n          defaultValue={opacities[1]}\n          sx={numberInputStyles.textField}\n          inputProps={getInputPropsPositiveNumber({ max: 100 })}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_SETTINGS_TEXT.notSelected}\n          type={INPUT_TYPE.number}\n          defaultValue={opacities[2]}\n          sx={numberInputStyles.textField}\n          inputProps={getInputPropsPositiveNumber({ max: 100 })}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { getInputPropsPositiveNumber } from '../../../../helpers/basic/getInputPropsPositiveNumber'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nexport interface NumberInputProps<Opt> {\n  viewType: ViewType\n  label: string\n  valueKey: keyof Opt\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <Opt,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<Opt>): JSX.Element => {\n  const [currentValue, setCurrentValue] = useState(value)\n  const debouncedValue = useDebounce(currentValue, TEXT_INPUT_DEBOUNCE)\n\n  const handleChangeValue = useCallback((newValue: number) => {\n    setCurrentValue(newValue)\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: debouncedValue,\n        },\n      }\n    })\n  }, [debouncedValue, setSettings, valueKey, viewType, handleChangeValue, handleChangeSettings])\n\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type={INPUT_TYPE.number}\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={getInputPropsPositiveNumber({ min, max })}\n        onChange={(e) => handleChangeValue(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const getPalettePickerColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(12),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useEffect, useCallback } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { PALETTE_PICKER_SETTINGS_TEXT } from '../../../../text/views-and-settings/common'\n\nimport {\n  getPalettePickerColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({\n  colors,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentColors, setCurrentColors] = useState<ColorArray>(colors)\n  const debouncedColors = useDebounce(currentColors, COLOR_DEBOUNCE)\n\n  const handleSetColor = useCallback((newColor: string, idx: number) => {\n    if (newColor) {\n      setCurrentColors((oldColors) => {\n        const newColors: ColorArray = [...oldColors]\n        newColors[idx] = newColor\n        return newColors\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          colorCategory: debouncedColors,\n        },\n      }\n    })\n  }, [debouncedColors, setSettings, viewType, handleChangeSettings])\n\n  const getInput = useCallback(\n    (idx: number) => (\n      <Box sx={palettePickerStyle.col} key={idx}>\n        <label>{PALETTE_PICKER_SETTINGS_TEXT.categoriesLabel[idx]}</label>\n        <Box sx={getPalettePickerColorInputStyle(colors, idx)}>\n          <input type={INPUT_TYPE.color} value={colors[idx]} onChange={(e) => handleSetColor(e.target.value, idx)} />\n        </Box>\n      </Box>\n    ),\n    [colors, handleSetColor],\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER_SETTINGS_TEXT.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { PARALLEL_COORDINATES_SETTINGS_TEXT } from '../../../../text/views-and-settings/parallelCoordinates'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelCoordinatesSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesSettings(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ParallelCoordinates),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{PARALLEL_COORDINATES_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_SETTINGS_TEXT.category}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_SETTINGS_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_SETTINGS_TEXT.opacity}\n                  opacities={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>\n            {PARALLEL_COORDINATES_SETTINGS_TEXT.unavailable}\n          </Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","/**\n * Settings for parallel coordinates\n */\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\n// keys for additional attributes\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for parallel coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\n\n/**\n * Minimal attribute count for scatter plot matrix\n */\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\n/**\n * Default values for scatter plot matrix settings\n */\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","/**\n * Text for scatter plot matrix\n */\nimport { ViewType } from '../../constants/views-general/ViewType'\n\nimport { VIEWS_NAMES } from '../viewsNames'\nimport { SETTINGS_TEXT } from './common'\n\n/**\n * Text in scatter plot matrix\n */\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `The scatter plot cannot be displayed because the window is too small. Change the size, number of attributes displayed, or margin to display scatter plot matrix.`,\n  unavailable: `The scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the settings.`,\n}\n\n/**\n * Text in scatter plot matrix settings\n */\nexport const SCATTER_PLOT_MATRIX_SETTINGS_TEXT = {\n  header: VIEWS_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data have less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...SETTINGS_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_SETTINGS_TEXT } from '../../../../text/views-and-settings/scatterPlotMatrix'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createScatterPlotMatrixSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixSettings(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotMatrix),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{SCATTER_PLOT_MATRIX_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.category}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <Typography sx={settingsTextStyle.text}>{SCATTER_PLOT_MATRIX_SETTINGS_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.opacity}\n                  opacities={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>\n            {SCATTER_PLOT_MATRIX_SETTINGS_TEXT.unavailable}\n          </Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","/**\n * Settings for scatter plot matrix\n */\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\n// keys for additional attributes\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for scatter plot matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\n\nimport { SortType } from '../sort/SortType'\n\n/**\n * Minimal attribute count for glyphs\n */\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\n/**\n * Default values for glyphs settings\n */\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","/**\n * types of brushing display in parallel coordinates\n */\nexport enum ParallelSetsBrushingType {\n  top = `top`,\n  overlay = `overlay`,\n}\n","/**\n * Text for glyphs\n */\nimport { ViewType } from '../../constants/views-general/ViewType'\n\nimport { VIEWS_NAMES } from '../viewsNames'\nimport { SETTINGS_TEXT } from './common'\n\n/**\n * Text in glyphs\n */\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the settings.`,\n}\n\n/**\n * Text in glyphs settings\n */\nexport const GLYPHS_SETTINGS_TEXT = {\n  header: VIEWS_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data have less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  sort: `Sort...`,\n  ...SETTINGS_TEXT,\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = useCallback(\n    (newValue: keyof SelectableDataType) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [handleChangeSettings, setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { important, px } from '../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  box: {\n    marginTop: important(0),\n  },\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = useCallback(\n    (newValue: T | null) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        const newSetting = newValue ? { [settingsKey]: newValue } : {}\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            ...newSetting,\n          },\n        }\n      })\n    },\n    [setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <Box sx={toggleButtonsStyle.box}>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SortType } from '../../../../constants/sort/SortType'\n\nimport { GLYPHS_SETTINGS_TEXT } from '../../../../text/views-and-settings/glyphs'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\n\nexport const GlyphsSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n}) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createGlyphsSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsSettings(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType, prevSettings: GlyphsSettings): Partial<GlyphsSettings> => {\n      const displayAttributes = getCurrentDisplayAttributes(newChecked)\n      const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n      const sortAttribute = newChecked[prevSettings.sortAttribute]\n        ? prevSettings.sortAttribute\n        : newSortableAttributes?.[0]\n      return { displayAttributes, sortAttribute }\n    },\n    [getCurrentDisplayAttributes, quantitativeAttributesKeys],\n  )\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{GLYPHS_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_SETTINGS_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_SETTINGS_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <Typography sx={settingsTextStyle.text}>{GLYPHS_SETTINGS_TEXT.sort}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_SETTINGS_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_SETTINGS_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_SETTINGS_TEXT.opacity}\n                  opacities={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>{GLYPHS_SETTINGS_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","/**\n * Settings for glyphs\n */\nimport { SelectableDataType } from '../../data/data'\n\nimport { SortType } from '../../../constants/sort/SortType'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\n// keys for additional attributes\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\n\n/**\n * Minimal attribute count for scatter plot glyphs\n */\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\n/**\n * Default values for scatter plot glyphs settings\n */\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 20, 30],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","/**\n * Text for scatter plot glyphs\n */\nimport { ViewType } from '../../constants/views-general/ViewType'\n\nimport { VIEWS_NAMES } from '../viewsNames'\nimport { SETTINGS_TEXT } from './common'\n\n/**\n * Text in scatter plot glyphs\n */\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the settings.`,\n}\n\n/**\n * Text in scatter plot glyphs settings\n */\nexport const SCATTER_PLOT_GLYPHS_SETTINGS_TEXT = {\n  header: VIEWS_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data have less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...SETTINGS_TEXT,\n}\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  glyphSizeKey,\n  ScatterPlotGlyphsSettings,\n  xAttributeKey,\n  yAttributeKey,\n} from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { SCATTER_PLOT_GLYPHS_SETTINGS_TEXT } from '../../../../text/views-and-settings/scatterPlotGlyphs'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createScatterPlotGlyphsSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsSettings(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<ScatterPlotGlyphsSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotGlyphs),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.category}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.opacity}\n                  opacities={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>\n            {SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.unavailable}\n          </Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","/**\n * Settings for scatter plot glyphs\n */\nimport { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\n// keys for additional attributes\nexport const glyphSizeKey = `glyphSize`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for scatter plot glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\n\nimport { DEFAULT_BRUSH_BG_COLOR_TABLE, DEFAULT_BRUSH_FONT_COLOR_TABLE } from '../views-general/defaultSettableColors'\n\n/**\n * Minimal attribute count for data table\n */\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\n/**\n * Default values for data table settings\n */\nexport const DATA_TABLE_DEFAULT: Pick<\n  DataTableSettings,\n  `rowHeight` | `selectedBackgroundColor` | `selectedFontColor`\n> = {\n  rowHeight: 45,\n  selectedBackgroundColor: DEFAULT_BRUSH_BG_COLOR_TABLE,\n  selectedFontColor: DEFAULT_BRUSH_FONT_COLOR_TABLE,\n}\n","/**\n * Default color of the brush\n */\nexport const DEFAULT_BRUSH_COLOR = `#830606`\n\n/**\n * Default background color of the table while data selected\n */\nexport const DEFAULT_BRUSH_BG_COLOR_TABLE = `#ffcfcf`\n\n/**\n * Default font color of the table while data selected\n */\nexport const DEFAULT_BRUSH_FONT_COLOR_TABLE = `#111111`\n\n/**\n * Default font color for parallel sets values\n */\nexport const DEFAULT_FONT_COLOR_PARALLEL_SETS = `#252525`\n","/**\n * Text for data table\n */\nimport { ViewType } from '../../constants/views-general/ViewType'\nimport { SortType } from '../../constants/sort/SortType'\n\nimport { VIEWS_NAMES } from '../viewsNames'\nimport { SETTINGS_BASE_TEXT } from './common'\n\n/**\n * Text in data table\n */\nexport const DATA_TABLE_SETTINGS_TEXT = {\n  header: VIEWS_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes it invalid. Please, choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  selectedBackgroundColor: `Selected background color`,\n  selectedFontColor: `Selected font color`,\n  ...SETTINGS_BASE_TEXT,\n}\n\n/**\n * Text in data table settings\n */\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascending`,\n  [SortType.desc]: `Sort descending`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from the settings.`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const getColorPickerInputStyle = (color: string): SxProps => ({\n  bgcolor: color,\n  width: px(25),\n  borderRadius: px(5),\n  '& input': {\n    width: `100%`,\n    height: px(25),\n    opacity: 0,\n  },\n})\n\nexport const colorPickerStyle: Record<string, SxProps> = {\n  picker: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `center`,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport {\n  colorPickerStyle,\n  getColorPickerInputStyle,\n} from '../../../../components-style/content/data-drawer/items/colorPickerStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nexport interface ColorPickerProps<Opt> {\n  viewType: ViewType\n  color: string\n  settingsKey: keyof Opt\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const ColorPicker = <Opt,>({\n  viewType,\n  color,\n  settingsKey,\n  setSettings,\n  label,\n}: ColorPickerProps<Opt>): JSX.Element => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n\n  const handleChangeColor = useCallback((newColor: string) => {\n    if (newColor) {\n      setCurrentColor(newColor)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: debouncedColor,\n        },\n      }\n    })\n  }, [debouncedColor, setSettings, settingsKey, viewType])\n  return (\n    <Box sx={colorPickerStyle.picker}>\n      <Typography sx={settingsTextStyle.text}>{label}</Typography>\n      <Box sx={getColorPickerInputStyle(color)}>\n        <input type={INPUT_TYPE.color} value={color} onChange={(e) => handleChangeColor(e.target.value)} />\n      </Box>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  DataTableSettings,\n  rowHeightKey,\n  selectedBackgroundColorKey,\n  selectedFontColorKey,\n} from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_SETTINGS_TEXT } from '../../../../text/views-and-settings/dataTable'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const DataTableSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n}) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => attributesKeys.filter((key) => currChecked[key]),\n    [attributesKeys],\n  )\n\n  const createDataTableSettings = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableSettings(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{DATA_TABLE_SETTINGS_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  viewType={viewType}\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_SETTINGS_TEXT.rowHeight}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedBackgroundColor}\n                  settingsKey={selectedBackgroundColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_SETTINGS_TEXT.selectedBackgroundColor}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedFontColor}\n                  settingsKey={selectedFontColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_SETTINGS_TEXT.selectedFontColor}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>{DATA_TABLE_SETTINGS_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","/**\n * Settings for data table\n */\nimport { VisualizationSettings } from './VisualizationSettings'\n\n// keys for additional attributes\nexport const rowHeightKey = `rowHeight`\nexport const selectedBackgroundColorKey = `selectedBackgroundColor`\nexport const selectedFontColorKey = `selectedFontColor`\n\n/**\n * Settings for data table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n\n  /**\n   * Selected background color\n   */\n  [selectedBackgroundColorKey]: string\n\n  /**\n   * Selected font color\n   */\n  [selectedFontColorKey]: string\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { ParallelSetsBrushingType } from '../brushing-type/ParallelSetsBrushingType'\nimport { DEFAULT_FONT_COLOR_PARALLEL_SETS } from '../views-general/defaultSettableColors'\n\n/**\n * Minimal attribute count for parallel sets\n */\nexport const MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT = 2\n\n/**\n * Default values for parallel sets (bundled) settings\n */\nexport const PARALLEL_SETS_BUNDLED_DEFAULT: Pick<\n  ParallelSetsBundledSettings,\n  `margins` | `opacity` | `colorCategory` | `tabWidth` | `tabSpacing` | `tabGap` | `brushingType` | `fontColor`\n> = {\n  margins: [5, 50, 10, 50],\n  opacity: [60, 70, 25],\n  colorCategory: schemeCategory10 as ColorArray,\n  tabWidth: 8,\n  tabSpacing: 3,\n  tabGap: 10,\n  brushingType: ParallelSetsBrushingType.top,\n  fontColor: DEFAULT_FONT_COLOR_PARALLEL_SETS,\n}\n","/**\n * Brush action\n */\nexport enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","/**\n * Mouse event action\n */\nexport enum MouseAction {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","/**\n * Text for parallel sets (bundled)\n */\nimport { ViewType } from '../../constants/views-general/ViewType'\n\nimport { VIEWS_NAMES } from '../viewsNames'\nimport { SETTINGS_TEXT } from './common'\n\n/**\n * Text in parallel sets settings\n */\nexport const PARALLEL_SETS_BUNDLED_TEXT = {\n  unavailable: `The parallel sets plot cannot be displayed with a single attribute. To generate a parallel sets plot, select multiple attributes from the settings.`,\n}\n\n/**\n * Text in parallel sets settings settings\n */\nexport const PARALLEL_SETS_SETTINGS_TEXT = {\n  header: VIEWS_NAMES[ViewType.ParallelSetsBundled],\n  unavailable: `The parallel sets plot cannot be used while data have less than 2 nominal attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of connectors`,\n  tabWidth: `Width of the tabs`,\n  tabSpacing: `Spacing between tabs`,\n  tabGap: `Gap between tabs`,\n  brushing: `Brushing...`,\n  fontColor: `Inner font color`,\n  ...SETTINGS_TEXT,\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  ParallelSetsBundledSettings,\n  brushingTypeKey,\n  fontColorKey,\n  tabGapKey,\n  tabSpacingKey,\n  tabWidthKey,\n} from '../../../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { getCategoryAttributesKeys, getDefaultNominalAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport {\n  MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT,\n  PARALLEL_SETS_BUNDLED_DEFAULT,\n} from '../../../../constants/views/parallelSetsBundled'\nimport { ParallelSetsBrushingType } from '../../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_SETTINGS_TEXT } from '../../../../text/views-and-settings/parallelSetsBundled'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const ParallelSetsBundledSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n}) => {\n  const viewType = ViewType.ParallelSetsBundled\n  const parallelSetsBundledSettings = settings[viewType]\n\n  const [nominalAttributesKeys, setNominalAttributesKeys] = useState(getCategoryAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultNominalAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => nominalAttributesKeys.filter((key) => currChecked[key]),\n    [nominalAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelSetsBundledSettings = useCallback(() => {\n    const newChecked = getDefaultNominalAttributesChecked(dataset)\n    const newCatKeys = getCategoryAttributesKeys(dataset)\n    setChecked(newChecked)\n    setNominalAttributesKeys(newCatKeys)\n    setSettings((prev) => {\n      const newParallelSetsBundled: ParallelSetsBundledSettings = {\n        displayAttributes: newCatKeys.filter((key) => newChecked[key]),\n        categoryAttribute: newCatKeys[0],\n        ...PARALLEL_SETS_BUNDLED_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelSetsBundled]: newParallelSetsBundled }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelSetsBundledSettings(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (parallelSetsBundledSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{PARALLEL_SETS_SETTINGS_TEXT.header}</h1>\n        {nominalAttributesKeys.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={nominalAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_SETS_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setNominalAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelSetsBundledSettings.categoryAttribute!}\n              attributesKeys={nominalAttributesKeys}\n              setSettings={setSettings}\n              label={PARALLEL_SETS_SETTINGS_TEXT.category}\n            />\n            <Typography sx={settingsTextStyle.text}>{PARALLEL_SETS_SETTINGS_TEXT.brushing}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={parallelSetsBundledSettings.brushingType}\n              options={Object.values<ParallelSetsBrushingType>(ParallelSetsBrushingType)}\n              setSettings={setSettings}\n              settingsKey={brushingTypeKey}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_SETS_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelSetsBundledSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.tabWidth}\n                  valueKey={tabWidthKey}\n                  value={parallelSetsBundledSettings.tabWidth}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.tabSpacing}\n                  valueKey={tabSpacingKey}\n                  value={parallelSetsBundledSettings.tabSpacing}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.tabGap}\n                  valueKey={tabGapKey}\n                  value={parallelSetsBundledSettings.tabGap}\n                  setSettings={setSettings}\n                />\n                <Divider />\n                <ColorPicker\n                  viewType={viewType}\n                  color={parallelSetsBundledSettings.fontColor}\n                  settingsKey={fontColorKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.fontColor}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_SETS_SETTINGS_TEXT.opacity}\n                  opacities={parallelSetsBundledSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelSetsBundledSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>{PARALLEL_SETS_SETTINGS_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","/**\n * Settings for parallel sets bundled\n */\nimport { ParallelSetsBrushingType } from '../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\n// keys for additional attributes\nexport const tabWidthKey = `tabWidth`\nexport const tabSpacingKey = `tabSpacing`\nexport const tabGapKey = `tabGap`\nexport const brushingTypeKey = `brushingType`\nexport const fontColorKey = `fontColor`\n\n/**\n * Settings for parallel sets bundled view\n */\nexport interface ParallelSetsBundledSettings extends ViewVisualizationSettings {\n  /**\n   * Brushing - displayed from top or overlay\n   */\n  [brushingTypeKey]: ParallelSetsBrushingType\n\n  /**\n   * Width of a tab\n   */\n  [tabWidthKey]: number\n\n  /**\n   * Spacing of tabs\n   */\n  [tabSpacingKey]: number\n\n  /**\n   * Gap between tabs (vertically)\n   */\n  [tabGapKey]: number\n\n  /**\n   * Font color\n   */\n  [fontColorKey]: string\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useMemo } from 'react'\nimport { Box, Divider, Drawer, Button, Tooltip, Typography } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { ANCHOR, DRAWER_VARIANT } from '../../../constants/mui'\n\nimport { SETTINGS_DRAWER_BOTTOM_TEXT } from '../../../text/settingsDrawerBottomText'\n\nimport { settingsDrawerStyle } from '../../../components-style/content/data-drawer/settingsDrawerStyle'\n\nimport { ParallelCoordinatesSettingsComponent } from '../views/parallel-coordinates/ParallelCoordinatesSettingsComponent'\nimport { ScatterPlotMatrixSettingsComponent } from '../views/scatter-plot-matrix/ScatterPlotMatrixSettingsComponent'\nimport { GlyphsSettingsComponent } from '../views/glyphs/GlyphsSettingsComponent'\nimport { ScatterPlotGlyphsSettingsComponent } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsSettingsComponent'\nimport { DataTableSettingsComponent } from '../views/data-table/DataTableSettingsComponent'\nimport { ParallelSetsBundledSettingsComponent } from '../views/parallel-sets-bundeled/ParallelSetsBundledSettingsComponent'\n\nexport interface SettingsDrawerProps {\n  isOpen: boolean\n  close: () => void\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const SettingsDrawer: VoidFunctionComponent<SettingsDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const settingsComponents = useMemo(\n    () =>\n      views.map((view, idx) => {\n        switch (view) {\n          case ViewType.Glyphs:\n            return (\n              <GlyphsSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelCoordinates:\n            return (\n              <ParallelCoordinatesSettingsComponent\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotMatrix:\n            return (\n              <ScatterPlotMatrixSettingsComponent\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotGlyphs:\n            return (\n              <ScatterPlotGlyphsSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.DataTable:\n            return (\n              <DataTableSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelSetsBundled:\n            return (\n              <ParallelSetsBundledSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          default:\n            return null\n        }\n      }),\n    [cleanSelectedIfViewWasBrushing, dataset, setSettings, settings, views],\n  )\n  return (\n    <Drawer variant={DRAWER_VARIANT.persistent} anchor={ANCHOR.right} open={isOpen} sx={settingsDrawerStyle.drawer}>\n      <Box sx={settingsDrawerStyle.header}>\n        <Button onClick={close} sx={settingsDrawerStyle.button}>\n          <Tooltip title={SETTINGS_DRAWER_BOTTOM_TEXT.hide}>\n            <ChevronRight sx={settingsDrawerStyle.chevron} />\n          </Tooltip>\n        </Button>\n      </Box>\n      <Divider />\n      <Box sx={settingsDrawerStyle.setting}>{settingsComponents}</Box>\n      <Box sx={settingsDrawerStyle.fill} />\n      <Box sx={settingsDrawerStyle.footer}>\n        <Typography sx={settingsDrawerStyle.text}>{SETTINGS_DRAWER_BOTTOM_TEXT.description}</Typography>\n      </Box>\n    </Drawer>\n  )\n}\n","/**\n * Paths to files in the public directory\n */\nimport { ViewType } from './views-general/ViewType'\n\nexport const PUBLIC_PATH = `/tabular-data-visualization/`\n\nexport const PUBLIC_IMAGE_PATH = PUBLIC_PATH + `images/`\n\nexport const LAYOUT_IMAGES = [`layout_0.png`, `layout_1.png`, `layout_2.png`, `layout_3.png`, `layout_4.png`].map(\n  (imgName) => PUBLIC_IMAGE_PATH + imgName,\n)\n\nexport const BRUSHING_IMAGES = Object.fromEntries(\n  [\n    [ViewType.ParallelCoordinates, `brushing_pc.png`],\n    [ViewType.ScatterPlotMatrix, `brushing_spm.png`],\n    [ViewType.Glyphs, `brushing_g.png`],\n    [ViewType.ScatterPlotGlyphs, `brushing_spg.png`],\n    [ViewType.DataTable, `brushing_dt.png`],\n    [ViewType.ParallelSetsBundled, `brushing_psb.png`],\n  ].map(([view, address]) => [view, PUBLIC_IMAGE_PATH + address]),\n)\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Card, CardContent, CardMedia, Dialog, DialogContent, DialogTitle, Divider, Typography } from '@mui/material'\n\nimport { GridLayoutItem } from '../../../../../types/views/Grid'\n\nimport { otherCasesToWhitespaces } from '../../../../../helpers/data/formatText'\n\nimport { LAYOUT_OPTIONS } from '../../../../../constants/layout/layout'\nimport { LAYOUT_IMAGES } from '../../../../../constants/public-path'\nimport { COMPONENT_TYPE } from '../../../../../constants/mui'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../../text/siteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface LayoutDialogProps {\n  isOpen: boolean\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  onClose: () => void\n  lastLayout: GridLayoutItem[] | null\n}\n\nexport const LayoutDialog: VoidFunctionComponent<LayoutDialogProps> = ({ isOpen, onClose, setLayout, lastLayout }) => {\n  const handleClose = () => {\n    setLayout(lastLayout)\n    onClose()\n  }\n  return (\n    <Dialog onClose={handleClose} open={isOpen}>\n      <DialogTitle>{TOP_TOOLBAR_TEXT.layoutDialog.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        {LAYOUT_OPTIONS.map((layoutItems, idx) => (\n          <Card\n            key={idx}\n            onClick={() => {\n              setLayout(layoutItems)\n              onClose()\n            }}\n            sx={dialogStyle.card}\n          >\n            <CardContent sx={dialogStyle.cardContent}>\n              {layoutItems.map((item) => (\n                <Typography sx={dialogStyle.itemText} key={item.i}>\n                  {otherCasesToWhitespaces(item.i)}\n                </Typography>\n              ))}\n            </CardContent>\n            <CardMedia\n              component={COMPONENT_TYPE.image}\n              sx={dialogStyle.image}\n              image={LAYOUT_IMAGES[idx]}\n              alt={TOP_TOOLBAR_TEXT.layoutDialog.alt + idx}\n            />\n          </Card>\n        ))}\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { GRID_ITEM_HEADER_HEIGHT } from '../../../constants/layout/layout'\n\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  right: {\n    display: `flex`,\n    flexWrap: `nowrap`,\n    paddingLeft: px(5),\n  },\n  textBox: {\n    padding: px(0, 8),\n    display: `flex`,\n    whiteSpace: `nowrap`,\n    overflow: `hidden`,\n    textOverflow: `ellipsis`,\n  },\n  text: {\n    padding: px(0, 5),\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `center`,\n    fontSize: px(12),\n  },\n  textIcon: {\n    fontSize: px(14),\n    padding: px(4),\n  },\n  header: {\n    height: GRID_ITEM_HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","/**\n * Types to work with margin\n */\n\nimport { px } from '../../helpers/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { Extent } from '../../types/d3-types'\n\n/**\n * Return true if number is in range\n * @param number\n * @param range\n */\nexport const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\n/**\n * Returns true if point [cx, cy] is in x and y ranges\n * @param ranges = [[xFrom, xTo], [yFrom, yTo]]\n * @param cx - X center of point\n * @param cy - Y center of point\n */\nexport const isInRanges = (ranges: Extent, cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","/**\n * Functions to get value extents\n */\nimport { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\n/**\n * Return extent of values for given attributes (domains)\n * @param domains - attributes for which we determine the extent\n * @param dataset\n */\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\n/**\n * Return extent of values for given attributes (domains), with the extension up and down by percent (moves minimum/maximum)\n * @param domains - attributes for which we determine the extent\n * @param dataset\n * @param percentDown - how many percent should be added on minima side\n * @param percentUp - how many percent should be added on maxima side\n */\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","/**\n * Function to move toggling labels for parallel views\n */\n\nimport { DataEach } from '../../types/d3-types'\n\n/**\n * y shift for parallel coordinates/sets axes labels\n */\nconst TEXT_Y_SHIFTS = { odd: 9, even: 19 }\n\n/**\n * Bigger of the Y shifts\n */\nexport const TOGGLE_Y_SHIFT = Math.max(...Object.values(TEXT_Y_SHIFTS))\n\n/**\n * Get Y toggle for toggling axes labels\n * @param _\n * @param idx - index of the axis\n */\nexport const getTogglingYShift: DataEach<unknown, SVGTextElement, number> = (_, idx) =>\n  idx % 2 === 0 ? -TEXT_Y_SHIFTS.odd : -TEXT_Y_SHIFTS.even // index 0 is first, so odd\n","/**\n * Functions to work with category coloring\n */\nimport { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nconst SINGLE = `1` // on constant only one (first) color is used\n\n/**\n * Return category color for given attribute and color scale\n * @param categoryAttribute - attribute that is coloring, if undefined, return one (first) color\n * @param color - color scale\n */\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(SINGLE)\n","/**\n * Tooltip and it's actions\n */\nimport { select } from 'd3'\nimport { MouseEvent } from 'react'\nimport { OnMouseEvent } from '../../types/d3-types'\n\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../constants/views-general/tooltip'\nimport { SVG } from '../../constants/svg'\nimport { HTML } from '../../constants/others'\n\nimport { getClass, px } from '../stringGetters'\n\nexport const onMouseOverTooltip =\n  <T>(stringFunction: (data: T) => string[]): OnMouseEvent<T> =>\n  ({ clientX, clientY }: MouseEvent, data: T): void => {\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n    tooltip\n      .html(stringFunction(data).join(HTML.newLine))\n      .style(SVG.style.left, px(clientX))\n      .style(SVG.style.top, px(clientY))\n  }\n\nexport const onMouseOutTooltip = (): null => {\n  select(getClass(TOOLTIP_CLASS)).transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n  return null\n}\n","import { ViewType } from '../views-general/ViewType'\n\n/**\n * IDs for SVGs that can be saved\n */\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.ParallelSetsBundled]: `psbSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n}\n\n/**\n * IDs for containers of SVGs that can be saved\n */\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.ParallelSetsBundled]: `C_psbSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n}\n\n/**\n * IDs for containers when there is no SVG (to disable)\n */\nexport const CONTAINER_EMPTY: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_E_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_E_spmSvgId`,\n  [ViewType.Glyphs]: `C_E_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_E_spgSvgId`,\n  [ViewType.ParallelSetsBundled]: `C_E_psbSvgId`,\n  [ViewType.DataTable]: `C_E_dataTableId`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important, px } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\n// all styles need to be in one sxProps for the view saving with css\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: px(12),\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Extent, DataEachG, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getTogglingYShift, TOGGLE_Y_SHIFT } from '../../../../helpers/views/togglingYShift'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { PLOT_FONT_BOX_SIZE } from '../../../../constants/others'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-settings/parallelCoordinates'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  refreshViews,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TOGGLE_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(displayAttributes.map((attribute) => String(attribute)))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      if (displayAttributes.every((dimension) => selections[dimension] === null)) {\n        // check selections, if there is none in every line, false\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n        return\n      }\n      dataset.forEach((data) => {\n        data.selected = displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        })\n      })\n      refreshViews()\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, keyof SelectableDataType>> = {\n      [BrushAction.start]: () => setComponentBrushing(ViewType.ParallelCoordinates),\n      [BrushAction.move]: (brushEvent, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      },\n      [BrushAction.end]: (brushEvent, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      },\n    }\n    const brushExtent: Extent = [\n      [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n      [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n    ]\n\n    const brush = brushY<keyof SelectableDataType>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath: DataEachP<SelectableDataType, string | null> = (data) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n      .on(MouseAction.mouseOut, onMouseOutTooltip)\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    const getAxisTransform: DataEachG<keyof SelectableDataType, string> = (attribute) =>\n      getTranslate([xScale(String(attribute))!, 0])\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, getTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      Object.keys(selections).forEach((selLKey) => (selections[selLKey] = null))\n    })\n\n    // selected coloring\n    selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ParallelCoordinates]}>\n      {PARALLEL_COORDINATES_TEXT.unavailable}\n    </Box>\n  )\n}\n","/**\n * Functions to work with scatter plot matrix\n */\nimport { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\n\nimport { getTranslate } from '../stringGetters'\n\n/**\n * Creates matrix from given attributes\n * @param keys - attributes of the dataset\n */\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\n/**\n * Returns inner size of the cell\n * @param length - length of the cell\n * @param spacing - spacing between cells\n */\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\n/**\n * Returns translate for the matrix cell\n * @param rect - which rectangle is translated\n * @param maxIdx - maximal index that it can be moved to\n */\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\n// all styles need to be in one sxProps for the view saving with css\nexport const getScatterPlotMatrixStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { Extent, DataEachC, DataEachG, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/views/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { setDisplay } from '../../../../helpers/d3/setDisplay'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-settings/scatterPlotMatrix'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { PLOT_FONT_BOX_SIZE } from '../../../../constants/others'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\ntype CellBrushing = { cell: MatrixPosition | null }\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  // selected coloring\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  setDisplay(isDetailsVisible, DUPLICATES_CLASS)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachC<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachC<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: CellBrushing = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) => (data.selected = isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, MatrixItem>> = {\n      [BrushAction.start]: (_, { rowIdx, colIdx, rowKey, colKey }) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      },\n      [BrushAction.move]: ({ selection }, matrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }, matrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [0, 0],\n      [rect.width, rect.height],\n    ]\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // selected coloring\n    selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    refreshViews,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return (\n      <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotMatrix]}>\n        {SCATTER_PLOT_MATRIX_TEXT.tooSmall}\n      </Box>\n    )\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotMatrixStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotMatrix]}>\n      {SCATTER_PLOT_MATRIX_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\n\nimport { SortType } from '../../constants/sort/SortType'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T extends SelectableDataType>(a: T, b: T, orderBy: keyof T) => {\n  if (a[orderBy] === true) return b[orderBy] === true ? 0 : 1\n  if (a[orderBy] === false) return b[orderBy] === false ? 0 : -1\n\n  return b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n}\n\n/**\n * Get comparator for given sort type and attribute from object to sort by\n * @param sortType - asc or desc\n * @param orderBy - key that is used for sorting\n */\nexport const getComparator = (sortType: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sortType === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\n// all styles need to be in one sxProps for the view saving with css\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataEachP, OnMouseEvent } from '../../../../types/d3-types'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { getAttributeValuesWithLabel, getClass, getEverything, getTranslate } from '../../../../helpers/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { GLYPHS_MIN_PERCENT_SHIFT } from '../../../../constants/views-general/glyphs-general'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-settings/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  refreshViews,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, GLYPHS_MIN_PERCENT_SHIFT)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform: DataEachP<SelectableDataType, string> = (data) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const onMouseClick: OnMouseEvent<SelectableDataType> = (_, changedData) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.Glyphs)\n      refreshViews()\n    }\n\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n          .on(MouseAction.click, onMouseClick)\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    // selected coloring, needed again\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive, brushColor)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.Glyphs]}>\n      {GLYPHS_TEXT.unavailable}\n    </Box>\n  )\n}\n","/**\n * Glyphs percent shift of minimum\n */\nexport const GLYPHS_MIN_PERCENT_SHIFT = 5\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important, px } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotGlyphsAxis`\nexport const AXIS_TEXT_CLASS = `scatterPlotGlyphsAxisText`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\n// all styles need to be in one sxProps for the view saving with css\nexport const getScatterPlotGlyphsStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotGlyphsAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n  '& .scatterPlotGlyphsAxisText': {\n    fill: PLOT_COLORS.fontColor,\n    fontSize: px(13),\n    fontWeight: `bold`,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisBottom, axisLeft, brush, lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { Extent, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getRotate,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { setDisplay } from '../../../../helpers/d3/setDisplay'\nimport { getExtendedExtentInDomains, getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { TOOLTIP_CLASS } from '../../../../constants/views-general/tooltip'\nimport { GLYPHS_MIN_PERCENT_SHIFT } from '../../../../constants/views-general/glyphs-general'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-settings/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  AXIS_TEXT_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nconst Y_AXIS_TEXT_SHIFT = 30\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  // selected coloring\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  setDisplay(isDetailsVisible, TOOLTIP_CLASS)\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const linearExtentInDomains = getExtentInDomains([xAttribute, yAttribute], dataset)\n    const radialExtentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, GLYPHS_MIN_PERCENT_SHIFT)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(linearExtentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(linearExtentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(radialExtentInDomains[attribute]),\n    )\n\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .append(SVG.elements.g)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n            .on(MouseAction.mouseOut, onMouseOutTooltip)\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data([xAttribute])\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n\n    const axisY = svg\n      .selectAll(AXIS_Y)\n      .data([yAttribute])\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n\n    axisX.call(axisBottom(xScale))\n    axisY.call(axisLeft(yScale))\n\n    // axis X label\n    axisX\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, innerWidth)\n      .attr(SVG.attributes.y, Y_AXIS_TEXT_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXIS_TEXT_CLASS)\n      .attr(SVG.attributes.textAnchor, SVG.values.end)\n    // axis Y label\n    axisY\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.transform, getRotate(-90))\n      .attr(SVG.attributes.y, -Y_AXIS_TEXT_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXIS_TEXT_CLASS)\n      .attr(SVG.attributes.textAnchor, SVG.values.end)\n\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) =>\n            (data.selected = isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType>> = {\n      [BrushAction.start]: () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      },\n      [BrushAction.move]: ({ selection }) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [-glyphSize / 2, -glyphSize / 2],\n      [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n    ]\n\n    const makeBrush = brush()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n\n    // selected coloring, first time\n    selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotGlyphs]}>\n      {SCATTER_PLOT_GLYPHS_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, important, px } from '../../../../helpers/stringGetters'\n\nimport { TABLE_COLORS } from '../../../../styles/colors'\n\nexport const getDataTableRowStyle = (\n  rowHeight: number,\n  selected: boolean,\n  selectedBackgroundColor: string,\n  selectedFontColor: string,\n): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? important(selectedBackgroundColor) : ``,\n  '& .MuiTableCell-root': {\n    color: selected ? important(selectedFontColor) : ``,\n  },\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const getFilterDisplayed = (showFilter: boolean): SxProps => {\n  const display = !showFilter ? { display: `none` } : {}\n  return { bgcolor: TABLE_COLORS.filterBackground, ...display }\n}\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    bgcolor: TABLE_COLORS.headerBackground,\n  },\n  tableHeadRow: {\n    height: 30,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  filterCell: {\n    padding: px(5),\n  },\n  filter: {\n    width: `90%`,\n    bgcolor: TABLE_COLORS.rowsBackground,\n    borderRadius: px(5),\n    '&.MuiFormControl-root': {\n      margin: 0,\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n  filterIcon: {\n    paddingLeft: px(12),\n    color: TABLE_COLORS.filterIconFont,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n  checkboxAll: {\n    display: `flex`,\n    height: calc(-10, `100%`),\n    padding: px(5),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Checkbox, TableBody, TableCell, TableRow } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable } from '../../../../helpers/data/formatText'\n\nimport { CELL_PADDING } from '../../../../constants/mui'\n\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableBodyProps {\n  displayAttributes: Array<keyof SelectableDataType>\n  sortedDataset: SelectableDataType[]\n  handleSelectClick: (data: SelectableDataType) => void\n  rowHeight: number\n  selectedBackgroundColor: string\n  selectedFontColor: string\n  redrawTime: number\n}\n\nexport const DataTableBody: VoidFunctionComponent<DataTableBodyProps> = ({\n  displayAttributes,\n  sortedDataset,\n  handleSelectClick,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n}) => (\n  <TableBody sx={dataTableStyle.tableBody}>\n    {sortedDataset.map((data, idx) => (\n      <TableRow\n        hover\n        onClick={() => handleSelectClick(data)}\n        key={idx}\n        sx={getDataTableRowStyle(rowHeight, data.selected, selectedBackgroundColor, selectedFontColor)}\n      >\n        <TableCell padding={CELL_PADDING.checkbox}>\n          <Checkbox checked={data.selected} />\n        </TableCell>\n        {displayAttributes.map((attribute) => (\n          <TableCell key={`${idx}-${attribute}`}>{dataToReadable(data[attribute])}</TableCell>\n        ))}\n      </TableRow>\n    ))}\n  </TableBody>\n)\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TextField,\n  Tooltip,\n} from '@mui/material'\nimport { FilterListOutlined } from '@mui/icons-material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { SelectableDataType, SelectedKey } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SortType } from '../../../../constants/sort/SortType'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { CELL_PADDING } from '../../../../constants/mui'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-settings/dataTable'\n\nimport {\n  dataTableStyle,\n  getFilterDisplayed,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nimport { DataTableBody } from './DataTableBody'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {\n  showFilter: boolean\n}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  refreshViews,\n  setComponentBrushing,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n  showFilter,\n  redrawTime,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const [doResort, setDoResort] = useState(0)\n  const [filterValues, setFilterValues] = useState<{ [p: keyof SelectableDataType]: string }>(\n    Object.fromEntries(displayAttributes.map((key) => [key, ``])),\n  )\n\n  const filteredDataset = useMemo<SelectableDataType[]>(\n    () =>\n      [...dataset].filter((data) =>\n        displayAttributes.every((attribute) =>\n          String(data[attribute]).toLowerCase().includes(filterValues[attribute].toLowerCase()),\n        ),\n      ),\n    [dataset, displayAttributes, filterValues],\n  )\n\n  const sortedDataset = useMemo(\n    () => filteredDataset.sort(getComparator(order, orderBy)),\n    // `doResort` is needed for resorting after changing select\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [filteredDataset, order, orderBy, doResort],\n  )\n\n  useEffect(\n    () => () => {\n      if (orderBy === SelectedKey) {\n        setDoResort((prev) => prev + 1) // reorder\n      }\n    },\n    [orderBy, redrawTime],\n  )\n\n  const handleSelectClick = useCallback(\n    (changedData: SelectableDataType) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing],\n  )\n\n  const handleSelectAllClick = useCallback(\n    (checked: boolean) => {\n      sortedDataset.forEach((data) => (data.selected = checked))\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing, sortedDataset],\n  )\n\n  const handleRequestSort = useCallback(\n    (property: keyof SelectableDataType) => {\n      const isAsc = orderBy === property && order === SortType.asc\n      setOrder(isAsc ? SortType.desc : SortType.asc)\n      setOrderBy(property)\n    },\n    [order, orderBy],\n  )\n\n  const handleFilterValueChange = useCallback((newValue: string, key: keyof SelectableDataType) => {\n    setFilterValues((prev) => ({\n      ...prev,\n      [key]: newValue,\n    }))\n  }, [])\n\n  const createSortHandler = useCallback(\n    (property: keyof SelectableDataType) => () => {\n      handleRequestSort(property)\n    },\n    [handleRequestSort],\n  )\n\n  const sortTooltipTitle = useCallback(\n    (headCellId: keyof SelectableDataType) =>\n      orderBy === headCellId\n        ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n        : DATA_TABLE_TEXT[SortType.asc],\n    [order, orderBy],\n  )\n\n  const getTableHead = useCallback(\n    (indeterminate: boolean, allChecked: boolean) => (\n      <TableHead sx={dataTableStyle.tableHead}>\n        <TableRow sx={dataTableStyle.tableHeadRow}>\n          <TableCell padding={CELL_PADDING.none}>\n            <Box sx={dataTableStyle.checkboxAll}>\n              <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                <Checkbox\n                  sx={dataTableStyle.checkAll}\n                  indeterminate={indeterminate && !allChecked}\n                  checked={allChecked}\n                  onChange={(event) => handleSelectAllClick(event.target.checked)}\n                />\n              </Tooltip>\n              <TableSortLabel\n                active={orderBy === SelectedKey}\n                direction={orderBy === SelectedKey ? order : SortType.asc}\n                onClick={createSortHandler(SelectedKey)}\n              />\n            </Box>\n          </TableCell>\n          {displayAttributes.map((attribute) => {\n            const orderedByActive = orderBy === attribute\n            return (\n              <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                <Tooltip title={sortTooltipTitle(attribute)}>\n                  <TableSortLabel\n                    active={orderedByActive}\n                    direction={orderedByActive ? order : SortType.asc}\n                    onClick={createSortHandler(attribute)}\n                  >\n                    {otherCasesToWhitespaces(attribute)}\n                  </TableSortLabel>\n                </Tooltip>\n              </TableCell>\n            )\n          })}\n        </TableRow>\n        <TableRow sx={getFilterDisplayed(showFilter)}>\n          <TableCell padding={CELL_PADDING.none}>\n            <FilterListOutlined sx={dataTableStyle.filterIcon} />\n          </TableCell>\n          {displayAttributes.map((attribute, idx) => (\n            <TableCell sx={dataTableStyle.filterCell} key={`filter-${attribute}`}>\n              <TextField\n                defaultValue={filterValues[idx]}\n                sx={dataTableStyle.filter}\n                onChange={(e) => handleFilterValueChange(e.target.value, attribute)}\n              />\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    ),\n    [\n      createSortHandler,\n      displayAttributes,\n      filterValues,\n      handleFilterValueChange,\n      handleSelectAllClick,\n      order,\n      orderBy,\n      showFilter,\n      sortTooltipTitle,\n    ],\n  )\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table sx={dataTableStyle.container}>\n          {getTableHead(\n            sortedDataset.some((data) => data.selected),\n            sortedDataset.every((data) => data.selected),\n          )}\n          <DataTableBody\n            displayAttributes={displayAttributes}\n            sortedDataset={sortedDataset}\n            handleSelectClick={handleSelectClick}\n            rowHeight={rowHeight}\n            selectedBackgroundColor={selectedBackgroundColor}\n            selectedFontColor={selectedFontColor}\n            redrawTime={redrawTime}\n          />\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import {min} from \"d3-array\";\n\nfunction targetDepth(d) {\n  return d.target.depth;\n}\n\nexport function left(node) {\n  return node.depth;\n}\n\nexport function right(node, n) {\n  return n - 1 - node.height;\n}\n\nexport function justify(node, n) {\n  return node.sourceLinks.length ? node.depth : n - 1;\n}\n\nexport function center(node) {\n  return node.targetLinks.length ? node.depth\n      : node.sourceLinks.length ? min(node.sourceLinks, targetDepth) - 1\n      : 0;\n}\n","export default function constant(x) {\n  return function() {\n    return x;\n  };\n}\n","import {max, min, sum} from \"d3-array\";\nimport {justify} from \"./align.js\";\nimport constant from \"./constant.js\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nfunction computeLinkBreadths({nodes}) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport default function Sankey() {\n  let x0 = 0, y0 = 0, x1 = 1, y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8, py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey() {\n    const graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeSort = function(_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function(_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks({nodes, links}) {\n    for (const [i, node] of nodes.entries()) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    }\n    const nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d]));\n    for (const [i, link] of links.entries()) {\n      link.index = i;\n      let {source, target} = link;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    }\n    if (linkSort != null) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({nodes}) {\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined\n          ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.depth = x;\n        for (const {target} of node.sourceLinks) {\n          next.add(target);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeHeights({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.height = x;\n        for (const {source} of node.targetLinks) {\n          next.add(source);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeLayers({nodes}) {\n    const x = max(nodes, d => d.depth) + 1;\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {source, value} of target.targetLinks) {\n          let v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {target, value} of source.sourceLinks) {\n          let v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({sourceLinks, targetLinks}) {\n    if (linkSort === undefined) {\n      for (const {source: {sourceLinks}} of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {target: {targetLinks}} of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  return sankey;\n}\n","import {linkHorizontal} from \"d3-shape\";\n\nfunction horizontalSource(d) {\n  return [d.source.x1, d.y0];\n}\n\nfunction horizontalTarget(d) {\n  return [d.target.x0, d.y1];\n}\n\nexport default function() {\n  return linkHorizontal()\n      .source(horizontalSource)\n      .target(horizontalTarget);\n}\n","/**\n * Functions to compute line shifts for sankey graph in parallel sets\n */\nimport { LinkDataPoint } from '../../types/d3-sankey'\n\n/**\n * Get width with the selection\n * @param all - count of all\n * @param selected - count of selected\n * @param width - total width of all-values line\n * @param isBrush - true if this is the selection, false if it is the other part\n */\nconst getSelectionWidth = (all: number, selected: number, width: number, isBrush: boolean) => {\n  if (width === 0) return 0\n  const selectedFraction = selected / all\n  return width * (isBrush ? selectedFraction : 1 - selectedFraction)\n}\n\n/**\n Get a shift of previously processed values\n * @param valuesCount - list of values counts or undefined, if there is no color category selected\n * @param all - count of all values\n * @param width - total width of all-values line\n * @param idx - index of current value\n */\nconst getYFormerShift = (valuesCount: number[] | undefined, all: number, width: number, idx: number) => {\n  if (!valuesCount) return 0\n  const formerCount = valuesCount.slice(0, idx).reduce((sum, curr) => sum + curr, 0)\n  const formerFraction = formerCount / all\n  return width * formerFraction\n}\n\n/**\n * Get width for the given count\n * @param currentCount - count given\n * @param all - count of all\n * @param width - total width of all-values line\n */\nconst getCurrentWidth = (currentCount: number, all: number, width: number | undefined) => {\n  if (!width || !currentCount) return 0\n  const fraction = currentCount / all\n  return width * fraction\n}\n\n/**\n * Get shift for current count and brush\n * @param currentCount - count given\n * @param selected - count of selected\n * @param all - count of all\n * @param width - total width of all-values line\n * @param valuesCounts - counts of values of given category attribute to color with due to this line\n * @param idx - index of the value processed\n * @param isBrush - true if this is the selection, false if it is the other part\n * @param isOverlay - true if brushing is in overlay mode, false if it is on top\n */\nconst getShift = (\n  currentCount: number,\n  selected: number,\n  all: number,\n  width: number,\n  valuesCounts: number[] | undefined,\n  idx: number,\n  isBrush: boolean,\n  isOverlay: boolean,\n): number => {\n  if (!currentCount) return 0\n\n  const currentWidth = getCurrentWidth(currentCount, all, width)\n\n  const yFormerShift = getYFormerShift(valuesCounts, all, width, idx)\n  const yCatShift = -width / 2 + yFormerShift + currentWidth / 2\n\n  if (isOverlay) {\n    return yCatShift\n  }\n  const selectedFraction = selected / currentCount\n  const yBrushShift = (currentWidth * (isBrush ? -1 * (1 - selectedFraction) : selectedFraction)) / 2\n  return yCatShift + yBrushShift\n}\n\nexport const getStrokeWidth = (d: LinkDataPoint, idx: number, isBrush: boolean, isOverlay?: boolean): number => {\n  const currentCount = d.catAttributeValuesCounts ? d.catAttributeValuesCounts[idx] : d.value\n  const currentWidth = getCurrentWidth(currentCount, d.value, d.width)\n\n  if (!isBrush && isOverlay) return currentWidth\n  return getSelectionWidth(currentCount, d.selected[idx], currentWidth, isBrush)\n}\n\nexport const getYShift = (d: LinkDataPoint, idx: number, isBrush: boolean, isOverlay: boolean): number => {\n  const currentCount = d.catAttributeValuesCounts ? d.catAttributeValuesCounts[idx] : d.value\n  if (!d.width) return 0\n\n  return getShift(currentCount, d.selected[idx], d.value, d.width, d.catAttributeValuesCounts, idx, isBrush, isOverlay)\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SELECTED_CLASS = `parallelSetsBundledSelected`\nexport const TABS_CLASS = `psbTabs`\nexport const LINE_NOT_SELECTED_CLASS = `psbLine`\nexport const CONNECTORS_CLASS = `psbConnector`\nexport const INNER_TEXT_CLASS = `psbInnerText`\nexport const TABS_SELECTED_CLASS = `psbTabsSelected`\n\n// all styles need to be in one sxProps for the view saving with css\nexport const getParallelSetsBundledStyle = (\n  opacity: Opacity,\n  isBrushActive: boolean,\n  brushColor: string,\n  fontColorInner: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .psbConnector': {\n    fill: `none`,\n  },\n  '& .psbTabs': {\n    cursor: `pointer`,\n    '&.psbTabsSelected': {\n      fill: important(brushColor),\n    },\n  },\n  '& path': {\n    '&.parallelSetsBundledSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n    '&.psbLine': {\n      opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n      mixBlendMode: `multiply`,\n    },\n  },\n  '& .psbInnerText': {\n    fill: fontColorInner,\n  },\n})\n","import { useCallback, useEffect, useMemo, useRef, useState, VoidFunctionComponent } from 'react'\nimport { scaleOrdinal, select } from 'd3'\nimport { Box } from '@mui/material'\nimport { sankey, sankeyLinkHorizontal } from '../../../../../lib/d3-sankey'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ParallelSetsBundledSettings } from '../../../../types/views/settings/ParallelSetsBundledSettings'\nimport { DataLink, NominalValueProperties } from '../../../../types/data/data'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { NodeDataPoint } from '../../../../types/d3-sankey'\nimport { DataEach, Extent, OnMouseEvent } from '../../../../types/d3-types'\n\nimport { getTogglingYShift, TOGGLE_Y_SHIFT } from '../../../../helpers/views/togglingYShift'\nimport {\n  getAttributeFormatted,\n  getEverything,\n  getLinkDataPointValuesWithLabel,\n  getNodeDataPointValuesWithLabel,\n  getSpaced,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { getGraph, getNeighborAttributes, getNominalValuesRecord } from '../../../../helpers/data/data'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\nimport { getStrokeWidth, getYShift } from '../../../../helpers/data/lineShifts'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelSetsBundled'\nimport { SVG } from '../../../../constants/svg'\nimport { AXES_TEXT_CLASS } from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ParallelSetsBrushingType } from '../../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_BUNDLED_TEXT } from '../../../../text/views-and-settings/parallelSetsBundled'\n\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport {\n  CONNECTORS_CLASS,\n  getParallelSetsBundledStyle,\n  INNER_TEXT_CLASS,\n  LINE_NOT_SELECTED_CLASS,\n  SELECTED_CLASS,\n  TABS_CLASS,\n  TABS_SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle'\nimport { PLOT_FONT_BOX_SIZE } from '../../../../constants/others'\n\nexport interface ParallelSetsBundledProps extends VisualizationView, Brushable, ParallelSetsBundledSettings {}\n\nexport const CONNECTORS = `CONNECTORS`\nexport const TEXT = `TEXT`\nexport const AXES_TEXT = `AXES_TEXT`\nexport const TABS = `TABS`\n\nexport const TEXT_SHIFT = 2\n\nexport const ParallelSetsBundled: VoidFunctionComponent<ParallelSetsBundledProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  isBrushingActive,\n  colorCategory,\n  margins,\n  opacity,\n  brushColor,\n  redrawTime,\n  setComponentBrushing,\n  refreshViews,\n  tabWidth,\n  tabSpacing,\n  tabGap,\n  brushingType,\n  fontColor,\n  categoryAttribute,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const upperPadding = TOGGLE_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  const [nominalValuesRecord, setNominalValuesRecord] = useState(getNominalValuesRecord(dataset))\n  // redraw time needed because it is changing selected\n  useEffect(() => {\n    setNominalValuesRecord(getNominalValuesRecord(dataset))\n  }, [dataset, redrawTime, displayAttributes])\n\n  const createParallelSetsBundled = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const displayPairs = getNeighborAttributes(displayAttributes)\n    const pairWidth = (innerWidth - (displayAttributes.length - 2) * tabSpacing) / (displayAttributes.length - 1)\n    const valueCounts = displayAttributes.map((att) => nominalValuesRecord[att]).map((arr) => arr.length)\n    const spacesAllMax = Math.max(...valueCounts) - 1\n    const isLeft = (d: NodeDataPoint): boolean => Number(d.x0) < pairWidth / 2\n\n    const half = (displayAttributes.length - 1) / 2\n\n    // brushing\n    const onMouseClick: OnMouseEvent<NodeDataPoint> = (_, { attribute, name, count, countSelected }) => {\n      dataset.forEach((data) => {\n        if (String(data[attribute]) === name) {\n          data.selected = count !== countSelected\n        }\n      })\n\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.ParallelSetsBundled)\n      refreshViews()\n    }\n\n    displayPairs.forEach((displayPair, pairIdx) => {\n      const spacesPairMax = Math.max(valueCounts[pairIdx], valueCounts[pairIdx + 1]) - 1\n      const pairExtent: Extent = [\n        [0, 0],\n        [pairWidth, innerHeight - (spacesAllMax - spacesPairMax) * tabGap],\n      ]\n\n      const color = scaleOrdinal(colorCategory)\n      const sankeyLayout = sankey<NominalValueProperties, DataLink>()\n        .nodeWidth(tabWidth)\n        .nodePadding(tabGap)\n        .nodeSort((a, b) => a.order - b.order)\n        .extent(pairExtent)\n\n      const graph = getGraph(dataset, categoryAttribute, nominalValuesRecord, displayPair[0], displayPair[1])\n      const { nodes, links } = sankeyLayout(graph)\n      const getPath = sankeyLinkHorizontal()\n\n      const xShift = pairIdx * (pairWidth + tabSpacing)\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TABS)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, (node) =>\n          node.count === node.countSelected ? getSpaced(TABS_CLASS, TABS_SELECTED_CLASS) : TABS_CLASS,\n        )\n        .attr(SVG.attributes.x, (node) => Number(node.x0) + xShift)\n        .attr(SVG.attributes.y, (node) => Number(node.y0))\n        .attr(SVG.attributes.height, (node) => Number(node.y1) - Number(node.y0))\n        .attr(SVG.attributes.width, (node) => Number(node.x1) - Number(node.x0))\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getNodeDataPointValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .on(MouseAction.click, onMouseClick)\n\n      // connectors\n      const connectors = svg\n        .append(SVG.elements.g)\n        .attr(SVG.attributes.class, CONNECTORS_CLASS)\n        .attr(SVG.attributes.transform, getTranslate([pairIdx * (pairWidth + tabSpacing), 0]))\n        .selectAll(CONNECTORS)\n        .data(links)\n        .enter()\n\n      const colorCategories = categoryAttribute ? nominalValuesRecord[categoryAttribute].map((att) => att.name) : [`1`] // one category\n      const isOverlay = brushingType === ParallelSetsBrushingType.overlay\n      // for each value runs once\n      colorCategories.forEach((category, idx) => {\n        // base\n        connectors\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, LINE_NOT_SELECTED_CLASS)\n          .attr(SVG.attributes.d, getPath)\n          .attr(SVG.attributes.stroke, color(category))\n          .attr(SVG.attributes.strokeWidth, (link) => getStrokeWidth(link, idx, false, isOverlay))\n          .attr(SVG.attributes.transform, (link) => getTranslate([0, getYShift(link, idx, false, isOverlay)]))\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n\n        // brushing\n        connectors\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, SELECTED_CLASS)\n          .attr(SVG.attributes.d, getPath)\n          .attr(SVG.attributes.strokeWidth, (link) => getStrokeWidth(link, idx, true))\n          .attr(SVG.attributes.transform, (link) => getTranslate([0, getYShift(link, idx, true, isOverlay)]))\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n      })\n\n      const getTextVisible: DataEach<NodeDataPoint, SVGTextElement, number> = (node) => {\n        if (pairIdx === Math.floor(half)) return 1\n        if ((isLeft(node) && pairIdx > half) || (!isLeft(node) && pairIdx < half)) return 0\n        return 1\n      }\n\n      // line text\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TEXT)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.text)\n        .attr(SVG.attributes.class, INNER_TEXT_CLASS)\n        .attr(\n          SVG.attributes.x,\n          (node) => (isLeft(node) ? Number(node.x1) + TEXT_SHIFT : Number(node.x0) - TEXT_SHIFT) + xShift,\n        )\n        .attr(SVG.attributes.y, (node) => (Number(node.y1) + Number(node.y0)) / 2)\n        .attr(SVG.attributes.textAnchor, (node) => (isLeft(node) ? SVG.values.start : SVG.values.end))\n        .style(SVG.style.opacity, getTextVisible)\n        .text((node) => getAttributeFormatted(node.name))\n    })\n    // axis text\n    svg\n      .append(SVG.elements.g)\n      .selectAll(AXES_TEXT)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.textAnchor, SVG.values.middle)\n      .attr(SVG.attributes.x, (_, idx) => idx * (pairWidth + tabSpacing))\n      .attr(SVG.attributes.y, getTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n  }, [\n    displayAttributes,\n    innerWidth,\n    tabWidth,\n    nominalValuesRecord,\n    dataset,\n    setComponentBrushing,\n    refreshViews,\n    innerHeight,\n    tabGap,\n    colorCategory,\n    tabSpacing,\n    categoryAttribute,\n    brushingType,\n  ])\n\n  useEffect(\n    () => createParallelSetsBundled(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      innerWidth,\n      innerHeight,\n      colorCategory,\n      nominalValuesRecord,\n      tabWidth,\n      tabSpacing,\n      tabGap,\n      categoryAttribute,\n      brushingType,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelSetsBundledStyle(opacity, isBrushingActive, brushColor, fontColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelSetsBundled]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelSetsBundled]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ParallelSetsBundled]}>\n      {PARALLEL_SETS_BUNDLED_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { VisualizationView } from '../../types/views/VisualizationView'\nimport { Brushable } from '../../types/brushing/Brushable'\nimport { SettingsType } from '../../types/views/settings/Settings'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { ParallelCoordinates } from '../../components/content/views/parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from '../../components/content/views/scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from '../../components/content/views/glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from '../../components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from '../../components/content/views/data-table/DataTable'\nimport { ParallelSetsBundled } from '../../components/content/views/parallel-sets-bundeled/ParallelSetsBundled'\n\nimport { ViewType } from './ViewType'\n\n/**\n * Size of a view border\n */\nexport const VIEW_BORDER_SIZE = 5\n\ntype ViewElementFunction = (\n  props: Brushable & VisualizationView,\n  settings: SettingsType,\n  showFilter?: boolean,\n) => JSX.Element\n\n/**\n * Record of view types and their creation functions.\n * Functions take general props and settings (and filters in case of data table) and returns the view.\n */\nexport const getViewRecord: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.ParallelSetsBundled]: (p, s) => <ParallelSetsBundled {...p} {...(s as ParallelSetsBundledSettings)} />,\n  [ViewType.DataTable]: (p, s, f) => <DataTable {...p} {...(s as DataTableSettings)} showFilter={!!f} />,\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { VIEW_BORDER_SIZE, getViewRecord } from '../../../constants/views-general/view'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  viewType: ViewType\n  settings: Settings\n  brushColor: string\n  showFilter?: boolean\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({\n  width,\n  height,\n  viewType,\n  settings,\n  showFilter,\n  ...dataProps\n}) => {\n  const graph = getViewRecord[viewType]\n  const settingsCurr = settings[viewType]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr, showFilter)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","/**\n * Text on view top bar\n */\nimport { ViewType } from '../constants/views-general/ViewType'\n\nexport const VIEW_TOP_TEXT = {\n  filter: `Filter`,\n  save: `Save as SVG`,\n  close: `Close`,\n  glyphAxes: `Glyph axes from top, clockwise:`,\n  saveDialog: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n  closeDialog: {\n    header: `Close the view`,\n    description: `Do you really want to close the view?`,\n    confirm: `Close`,\n    cancel: `Cancel`,\n  },\n  info: `Show view information`,\n  infoDialog: {\n    brushing: `Brushing`,\n    settings: `Settings`,\n    options: `Options`,\n    close: `Close`,\n  },\n}\n\ninterface InfoDialogText {\n  description: string\n  descriptionBrushing: string\n  descriptionSettings: string\n  descriptionSettingsMore: string\n}\n\n/**\n * Texts of info dialogs for all views\n */\nexport const INFO_DIALOG_TEXT: Record<ViewType, InfoDialogText> = {\n  [ViewType.ParallelCoordinates]: {\n    description: `Parallel coordinates are used to display the values of quantitative attributes. Each axis corresponds to one attribute, and its range is from the minimum to the maximum of its values. The individual items are then displayed as a polyline between these axes. To use this method, the dataset must contain at least two numeric attributes.`,\n    descriptionBrushing: `Parallel coordinates use brushing on their axes. On them, you can drag to select the ranges that determine the selected items. Items that traverse all ranges are selected. Brushing is exclusive for parallel coordinates, so it deletes the previous selection from other views.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed on the axes or change their order. You can also specify the nominal attribute according to which the individual polylines will be colored.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the width of the polyline, the transparency when brushing or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    description: `The scatter plot matrix is used to display the values of quantitative attributes. Attributes are assigned to the rows and columns of the matrix so that each has exactly one row and one column of the same index. In the matrix, the value of the attribute is plotted on the y-axis in each row and on the x-axis in each column, so it creates a scatter plot in every cell. The items are displayed in each of these scatter plots as data points.  To use this method, the dataset must contain at least two numeric attributes.`,\n    descriptionBrushing: `The scatter plot matrix uses brushing in one of its cells. In the cell, select desired points with rectangle selection; in other scatter plots, selected points will be highlighted. Brushing is exclusive for the scatter plot matrix, so it deletes the previous selection from other views.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed in the matrix or change their order.  You can also specify the nominal attribute according to which the individual points will be colored.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the size of the point, horizontal or vertical spacing between cells, the transparency when brushing, or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.Glyphs]: {\n    description: `Glyphs are used to display the values of quantitative attributes. An axis is created for each attribute, and these axes are arranged in a circle, gradually from the upper axis in a clockwise direction. Values are plotted on these axes so that the minima are close to the center and the maxima are far from it. The glyphs are then sorted by one attribute and displayed in lines (as in text). To use this method, the dataset must contain at least three numeric attributes.`,\n    descriptionBrushing: `Glyphs use brushing by clicking on them. After clicking on an unselected glyph, it is added to the selection; if it is already selected, it is removed. Brushing is not exclusive for glyphs, so the previous selection is used.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed on radial scales (on glyph), or change their order. You can also specify a nominal attribute to color individual glyphs and choose which attribute to use for sorting and whether to sort ascending or descending.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg, the size of the glyph, spacing between glyphs, the transparency when brushing, or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    description: `Scatter plot glyphs are used to display the values of quantitative attributes. An axis is created for each attribute, and these axes are arranged in a circle, gradually from the upper axis in a clockwise direction. Values are plotted on these axes so that the minima are close to the center and the maxima are far from it. Two attributes are used for the x and y axes, and the glyphs are then positioned according to the values of these attributes. To use this method, the dataset must contain at least three numeric attributes.`,\n    descriptionBrushing: `Scatter plot glyphs use brushes in the form of a rectangular selection; glyphs are selected if their center is inside it. Brushing is exclusive for scatter plot glyphs, so it deletes the previous selection from other views.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed on radial scales (on glyph), or change their order. You can select the attributes to be used for the x-axis and y-axis. You can also specify a nominal attribute to color individual glyphs.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the size of the glyph, the transparency when brushing, or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.ParallelSetsBundled]: {\n    description: `Parallel sets (bundled) are used to display the ratios of the nominal attribute values. Each axis corresponds to one nominal attribute and is divided into parts according to the possible values of the attribute. The length of the parts is then determined by the ratio of the values to the total number of items. From these parts, the curves lead to parts of adjacent axes, with thickness according to the ratio of items that have both values of the attributes, relative to the length of the part. To use this method, the dataset must contain at least two nominal attributes.`,\n    descriptionBrushing: `Parallel sets use brushing on their axes by clicking on parts with specific values. When you click on this section, the highlighted ratios with this value will be displayed on each curve. If the part is already selected (the line is brushed - colored), all items with this value are removed from the selection and are thus also removed from the ratios. This allows various set operations by this brushing. Brushing is not exclusive for parallel sets, so the previous selection is used.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed on the axes or change their order. You can also specify the nominal attribute according to which the individual curves will be divided (with their value ratio) and colored, and you can choose whether brushing will be displayed over the curves or in the top part.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the width of the tabs, horizontal spacing between tabs, vertical gaps between tabs, color of inner value font, the transparency when brushing, or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.DataTable]: {\n    description: `The data table is used to display the values of all attributes. Items are displayed in rows; they can be filtered (the filter can be turned on in the view top bar), sorted by any attribute (by clicking on the arrow next to the label, also by selected) ascending or descending.`,\n    descriptionBrushing: `The table allows brushing using the check box in the row. The table also has a Select All checkbox, which selects/deselects all values that pass filters when clicked. Brushing is not exclusive for the data table, so the previous selection is used.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed in the columns or change their order.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the table row height, selected background color, and selected font color.`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../styles/colors'\n\nconst inlineButton = {\n  margin: 0,\n  padding: px(0, 4),\n  minWidth: 0,\n}\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    ...inlineButton,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n  buttonClose: {\n    ...inlineButton,\n    color: BUTTON_COLORS.buttonClose,\n  },\n  buttonActive: {\n    color: BUTTON_COLORS.buttonInlinedFontOn,\n    bgcolor: BUTTON_COLORS.buttonInlinedBgOn,\n    borderRadius: px(5),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { BUTTON_VARIANT } from '../../../../constants/mui'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant={BUTTON_VARIANT.contained} autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant={BUTTON_VARIANT.outlined}>\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import React, { useCallback, useState, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Close } from '@mui/icons-material'\n\nimport { VIEW_TOP_TEXT } from '../../../../text/viewTopText'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from '../../common/dialogs/ConfirmationDialog'\n\ninterface ViewCloseButtonProps {\n  onRemove: () => void\n}\n\nexport const ViewCloseButton: VoidFunctionComponent<ViewCloseButtonProps> = ({ onRemove }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const onConfirm = useCallback(() => {\n    onRemove()\n    setIsDialogOpen(false)\n  }, [onRemove])\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={VIEW_TOP_TEXT.closeDialog.header}\n        description={VIEW_TOP_TEXT.closeDialog.description}\n        onConfirm={onConfirm}\n        onClose={() => setIsDialogOpen(false)}\n        confirmText={VIEW_TOP_TEXT.closeDialog.confirm}\n        cancelText={VIEW_TOP_TEXT.closeDialog.cancel}\n      />\n      <Button onClick={() => setIsDialogOpen(true)} sx={inlineButtonStyles.buttonClose}>\n        <Tooltip title={VIEW_TOP_TEXT.close}>\n          <Close />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { DIALOG_COLORS } from '../../../styles/colors'\n\nexport const helpDialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      textAlign: `justify`,\n    },\n  },\n  iconedHeaderBox: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `flex-end`,\n    '& svg': {\n      fontSize: px(20),\n      opacity: 0.5,\n      paddingBottom: px(2),\n    },\n  },\n  header: {\n    fontWeight: `bold`,\n    fontSize: px(16),\n    paddingTop: px(10),\n  },\n  brushContainer: {\n    minWidth: px(0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    margin: px(2),\n    '@media (max-width: 630px)': {\n      flexWrap: `wrap`,\n    },\n  },\n  topText: {\n    padding: px(8, 0, 6),\n    color: DIALOG_COLORS.font,\n  },\n  text: {\n    padding: px(9, 10, 5),\n    color: DIALOG_COLORS.font,\n  },\n  image: {\n    height: px(130),\n    width: px(238),\n  },\n  iconTextBox: {\n    display: `flex`,\n    alignItems: `flex-start`,\n    '& p': {\n      padding: px(1, 5, 4),\n    },\n  },\n  inlineIcon: {\n    fontSize: px(15),\n    marginRight: px(3),\n  },\n}\n","import { useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  CardMedia,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport { Brush, Help, Settings } from '@mui/icons-material'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { BUTTON_VARIANT, COMPONENT_TYPE, DIALOG_MAX_WIDTH } from '../../../../constants/mui'\nimport { BRUSHING_IMAGES } from '../../../../constants/public-path'\n\nimport { VIEWS_NAMES } from '../../../../text/viewsNames'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\nimport { helpDialogStyle } from '../../../../components-style/content/common/helpDialogStyle'\nimport { INFO_DIALOG_TEXT, VIEW_TOP_TEXT } from '../../../../text/viewTopText'\n\nexport interface ViewHelpButtonProps {\n  viewType: ViewType\n}\n\nexport const ViewHelpButton: VoidFunctionComponent<ViewHelpButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n\n  return (\n    <>\n      <Dialog\n        onClose={() => setIsDialogOpen(false)}\n        open={isDialogOpen}\n        sx={helpDialogStyle.dialog}\n        fullWidth\n        maxWidth={DIALOG_MAX_WIDTH.m}\n      >\n        <DialogTitle>{VIEWS_NAMES[viewType]}</DialogTitle>\n        <Divider />\n        <DialogContent>\n          <DialogContentText sx={helpDialogStyle.text}>{INFO_DIALOG_TEXT[viewType].description}</DialogContentText>\n          <Box sx={helpDialogStyle.iconedHeaderBox}>\n            <Typography sx={helpDialogStyle.header}>{VIEW_TOP_TEXT.infoDialog.brushing}</Typography>\n            <Brush />\n          </Box>\n          <Divider />\n          <Box sx={helpDialogStyle.brushContainer}>\n            <CardMedia\n              component={COMPONENT_TYPE.image}\n              sx={helpDialogStyle.image}\n              image={BRUSHING_IMAGES[viewType]}\n              alt={viewType}\n            />\n            <DialogContentText sx={helpDialogStyle.text}>\n              {INFO_DIALOG_TEXT[viewType].descriptionBrushing}\n            </DialogContentText>\n          </Box>\n          <Box sx={helpDialogStyle.iconedHeaderBox}>\n            <Typography sx={helpDialogStyle.header}>{VIEW_TOP_TEXT.infoDialog.settings}</Typography>\n            <Settings />\n          </Box>\n          <Divider />\n          <DialogContentText sx={helpDialogStyle.text}>\n            {INFO_DIALOG_TEXT[viewType].descriptionSettings}\n          </DialogContentText>\n          <DialogContentText sx={helpDialogStyle.text}>\n            {INFO_DIALOG_TEXT[viewType].descriptionSettingsMore}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDialogOpen(false)} variant={BUTTON_VARIANT.contained} autoFocus>\n            {VIEW_TOP_TEXT.infoDialog.close}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Button onClick={() => setIsDialogOpen(true)} sx={inlineButtonStyles.button}>\n        <Tooltip title={VIEW_TOP_TEXT.info}>\n          <Help />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","/**\n * Functions to save view as an SVG file\n */\nimport { ViewType } from '../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\ntype StyleNode = { sheet: CSSStyleSheet }\n\nconst xmlnsSvg = `http://www.w3.org/2000/svg`\nconst preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\nconst options = { type: `image/svg+xml;charset=utf-8` }\nconst linkElement = `a`\n\n/**\n * Save given element to an SVG file\n * @param svgEl - svg element\n * @param fileName - name of the file\n */\nconst saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, xmlnsSvg)\n\n  const svgBlob = new Blob([preface, svgEl.outerHTML], options)\n  const svgUrl = URL.createObjectURL(svgBlob)\n\n  // create download link element, append, click and remove\n  const downloadLink = document.createElement(linkElement)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\n/**\n * Save given view to an SVG file\n * @param viewType\n */\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n  const newStyleNodes = ([...document.querySelectorAll(`[data-emotion]`)] as unknown as Array<StyleNode>)\n    .flatMap(({ sheet }) => [...sheet.cssRules].map((rules) => rules.cssText))\n    .filter((sheet) => sheet.includes(`.${containerClass}`))\n    .map((sheet) => sheet.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n\n/**\n * Returns true, if the view has not save container and have emptycontainer\n * @param viewType\n */\nexport const getSaveIsDisabled = (viewType: ViewType): boolean =>\n  document.querySelector(`#${CONTAINER_EMPTY[viewType]}`) !== null &&\n  document.querySelector(`#${SAVE_ID[viewType]}`) === null\n","import { useCallback, useState, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { getSaveIsDisabled, saveSvg } from '../../../../helpers/d3/saveSvg'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from '../../common/dialogs/ConfirmationDialog'\nimport { VIEW_TOP_TEXT } from '../../../../text/viewTopText'\n\nexport interface ViewSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const ViewSaveButton: VoidFunctionComponent<ViewSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n\n  const onConfirm = useCallback(() => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }, [viewType])\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={VIEW_TOP_TEXT.saveDialog.header}\n        description={VIEW_TOP_TEXT.saveDialog.description}\n        onConfirm={onConfirm}\n        onClose={() => setIsDialogOpen(false)}\n        confirmText={VIEW_TOP_TEXT.saveDialog.confirm}\n        cancelText={VIEW_TOP_TEXT.saveDialog.cancel}\n      />\n      <Button\n        onClick={() => setIsDialogOpen(true)}\n        disabled={getSaveIsDisabled(viewType)}\n        sx={inlineButtonStyles.button}\n      >\n        <Tooltip title={VIEW_TOP_TEXT.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import React, { VoidFunctionComponent } from 'react'\nimport { Tooltip, Typography } from '@mui/material'\nimport { RotateRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { getDisplayAttributesInParentheses, getSpaced } from '../../../../helpers/stringGetters'\n\nimport { VIEW_TOP_TEXT } from '../../../../text/viewTopText'\n\nimport { gridItemStyle } from '../../../../components-style/content/views/gridItemStyle'\n\nexport interface GlyphAxesTextProps {\n  displayAttributes: Array<keyof SelectableDataType>\n}\n\nexport const GlyphAxesText: VoidFunctionComponent<GlyphAxesTextProps> = ({ displayAttributes }) => (\n  <Tooltip title={getSpaced(VIEW_TOP_TEXT.glyphAxes, getDisplayAttributesInParentheses(displayAttributes))}>\n    <Typography sx={gridItemStyle.text}>\n      <RotateRight sx={gridItemStyle.textIcon} />\n      {getDisplayAttributesInParentheses(displayAttributes)}\n    </Typography>\n  </Tooltip>\n)\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { FilterList } from '@mui/icons-material'\n\nimport { BUTTON_VARIANT } from '../../../../constants/mui'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\nimport { VIEW_TOP_TEXT } from '../../../../text/viewTopText'\n\nexport interface DataFilterButtonProps {\n  showFilter?: boolean\n  setShowFilter: Dispatch<SetStateAction<boolean | undefined>>\n}\n\nexport const DataFilterButton: VoidFunctionComponent<DataFilterButtonProps> = ({ showFilter, setShowFilter }) => (\n  <Button variant={BUTTON_VARIANT.text} onClick={() => setShowFilter(!showFilter)} sx={inlineButtonStyles.button}>\n    <Tooltip title={VIEW_TOP_TEXT.filter}>\n      <FilterList sx={showFilter ? inlineButtonStyles.buttonActive : {}} />\n    </Tooltip>\n  </Button>\n)\n","import React, { ComponentProps, useState, VoidFunctionComponent } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, Typography } from '@mui/material'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { DRAG_HANDLE, GRID_ITEM_HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/layout/layout'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { View } from '../views/View'\nimport { ViewCloseButton } from './items/ViewCloseButton'\nimport { ViewHelpButton } from './items/ViewHelpButton'\nimport { ViewSaveButton } from './items/ViewSaveButton'\nimport { GlyphAxesText } from './items/GlyphAxesText'\nimport { DataFilterButton } from './items/DataFilterButton'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isResizeFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isResizeFinished, viewType, ...rest }) => {\n  const [showFilter, setShowFilter] = useState<boolean | undefined>(undefined)\n  const contextButton =\n    viewType !== ViewType.DataTable ? (\n      <ViewSaveButton viewType={viewType} />\n    ) : (\n      <DataFilterButton showFilter={showFilter} setShowFilter={setShowFilter} />\n    )\n\n  const isGlyphs = (viewType === ViewType.Glyphs || viewType === ViewType.ScatterPlotGlyphs) && rest.settings[viewType]\n\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Box sx={gridItemStyle.textBox}>\n            <Typography>{title}</Typography>\n            {isGlyphs && <GlyphAxesText displayAttributes={rest.settings[viewType]!.displayAttributes} />}\n          </Box>\n          <Box sx={gridItemStyle.right}>\n            <ViewHelpButton viewType={viewType} />\n            {contextButton}\n            <ViewCloseButton onRemove={onRemove} />\n          </Box>\n        </Box>\n        {isResizeFinished && (\n          <View\n            width={width}\n            height={height - GRID_ITEM_HEADER_HEIGHT}\n            viewType={viewType}\n            {...rest}\n            showFilter={showFilter}\n          />\n        )}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import React, { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, memo, useEffect } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { useWindowSize } from 'react-use'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/stringGetters'\nimport { setDisplay } from '../../../helpers/d3/setDisplay'\n\nimport { brushView, brushViewType, isBrushView, isViewType, ViewType } from '../../../constants/views-general/ViewType'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/layout/layout'\nimport { TOOLTIP_CLASS } from '../../../constants/views-general/tooltip'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\nimport { VIEWS_NAMES } from '../../../text/viewsNames'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { SettingsDrawer } from '../data-drawer/SettingsDrawer'\nimport { LayoutDialog } from '../top-toolbar/items/layout/LayoutDialog'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Omit<Brushable, `registerCleanBrushing`> {\n  dataset: ReadonlyArray<SelectableDataType>\n  registerCleanBrushingAll: (viewType: ViewType, clean: () => void) => void\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: () => void\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType | brushViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isLayoutDialogOpen: boolean\n  setIsLayoutDialogOpen: Dispatch<SetStateAction<boolean>>\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  brushColor: string\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nconst BaseViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  isLayoutDialogOpen,\n  setIsLayoutDialogOpen,\n  layout,\n  setLayout,\n  registerCleanBrushingAll,\n  ...viewProps\n}) => {\n  const [viewResizing, setViewResizing] = useState<ViewType | null>(null)\n  const [lastLayout, setLastLayout] = useState(layout)\n  const { width: windowWidth, height: windowHeight } = useWindowSize()\n\n  useEffect(\n    () => () => {\n      if (layout !== null) setLastLayout(layout)\n    },\n    [layout],\n  )\n\n  useEffect(\n    () => () => {\n      cleanSelectedIfViewWasBrushing(brushView)\n    },\n    [windowWidth, windowHeight, cleanSelectedIfViewWasBrushing],\n  )\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout || layout.length === 0) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout, layout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        return layout.filter((item) => item.i !== viewType)\n      })\n    },\n    [setLayout],\n  )\n\n  setDisplay(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEWS_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addDialog.title}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.addDialog.noOption}\n        handleListItemClick={addView}\n      />\n      <LayoutDialog\n        isOpen={isLayoutDialogOpen}\n        setLayout={setLayout}\n        onClose={() => setIsLayoutDialogOpen(false)}\n        lastLayout={lastLayout}\n      />\n      <SettingsDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        style={{ overflowX: `hidden` }}\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={(_, view) => {\n          const viewType = view.i as ViewType\n          if (isBrushView(viewType)) cleanSelectedIfViewWasBrushing(viewType)\n          setViewResizing(viewType)\n        }}\n        onResizeStop={() => setViewResizing(null)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isResizeFinished={view.i !== viewResizing}\n              title={VIEWS_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              viewType={view.i}\n              settings={settings}\n              registerCleanBrushing={(clean: () => void) => registerCleanBrushingAll(view.i, clean)}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n\n// do not rerender if props not change\nexport const ViewGrid = memo(BaseViewGrid)\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  content: {\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  icon: {\n    marginRight: px(6),\n    opacity: 0.6,\n  },\n  text: {\n    paddingTop: px(40),\n    color: SITE_COLORS.font,\n  },\n  button: {\n    marginTop: px(45),\n    opacity: 0.7,\n  },\n}\n","import { useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  Typography,\n} from '@mui/material'\nimport { AddCircle, AutoGraph, Brush, Dashboard, Help, Settings, SkipNext, UploadFile } from '@mui/icons-material'\n\nimport { TooltipSvg } from '../../../../icons/TooltipSvg'\nimport { BrushOffSvg } from '../../../../icons/BrushOffSvg'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/siteText'\n\nimport { BUTTON_VARIANT, DIALOG_MAX_WIDTH } from '../../../constants/mui'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\nimport { helpDialogStyle } from '../../../components-style/content/common/helpDialogStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n\n  return (\n    <>\n      <Dialog\n        onClose={() => setIsDialogOpen(false)}\n        open={isDialogOpen}\n        sx={helpDialogStyle.dialog}\n        fullWidth\n        maxWidth={DIALOG_MAX_WIDTH.m}\n      >\n        <DialogTitle>{EMPTY_DATA_TEXT.helpDialog.header}</DialogTitle>\n        <Divider />\n        <DialogContent>\n          <DialogContentText sx={helpDialogStyle.topText}>{EMPTY_DATA_TEXT.helpDialog.description}</DialogContentText>\n          <DialogContentText sx={helpDialogStyle.topText}>\n            <AutoGraph sx={helpDialogStyle.inlineIcon} />\n            {EMPTY_DATA_TEXT.helpDialog.sample}\n          </DialogContentText>\n          <DialogContentText sx={helpDialogStyle.topText}>\n            <UploadFile sx={helpDialogStyle.inlineIcon} />\n            {EMPTY_DATA_TEXT.helpDialog.file}\n          </DialogContentText>\n          <DialogContentText sx={helpDialogStyle.topText}>\n            <Help sx={helpDialogStyle.inlineIcon} />\n            {EMPTY_DATA_TEXT.helpDialog.viewsHelp}\n          </DialogContentText>\n\n          <Typography sx={helpDialogStyle.header}>{EMPTY_DATA_TEXT.helpDialog.subHeader}</Typography>\n          <Divider />\n\n          <Box sx={helpDialogStyle.iconTextBox}>\n            <AddCircle />\n            <DialogContentText sx={helpDialogStyle.text}>{EMPTY_DATA_TEXT.helpDialog.add}</DialogContentText>\n          </Box>\n          <Box sx={helpDialogStyle.iconTextBox}>\n            <Dashboard />\n            <DialogContentText sx={helpDialogStyle.text}>{EMPTY_DATA_TEXT.helpDialog.layout}</DialogContentText>\n          </Box>\n          <Box sx={helpDialogStyle.iconTextBox}>\n            <TooltipSvg />\n            <DialogContentText sx={helpDialogStyle.text}>{EMPTY_DATA_TEXT.helpDialog.tooltip}</DialogContentText>\n          </Box>\n          <Box sx={helpDialogStyle.iconTextBox}>\n            <SkipNext />\n            <DialogContentText sx={helpDialogStyle.text}>{EMPTY_DATA_TEXT.helpDialog.skip}</DialogContentText>\n          </Box>\n          <Box sx={helpDialogStyle.iconTextBox}>\n            <Brush />\n            <DialogContentText sx={helpDialogStyle.text}>{EMPTY_DATA_TEXT.helpDialog.brush}</DialogContentText>\n          </Box>\n          <Box sx={helpDialogStyle.iconTextBox}>\n            <BrushOffSvg />\n            <DialogContentText sx={helpDialogStyle.text}>{EMPTY_DATA_TEXT.helpDialog.brushOff}</DialogContentText>\n          </Box>\n          <Box sx={helpDialogStyle.iconTextBox}>\n            <Settings />\n            <DialogContentText sx={helpDialogStyle.text}>{EMPTY_DATA_TEXT.helpDialog.settings}</DialogContentText>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDialogOpen(false)} variant={BUTTON_VARIANT.contained} autoFocus>\n            {EMPTY_DATA_TEXT.helpDialog.close}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Box sx={emptyDataStyle.content}>\n        <Box sx={emptyDataStyle.text}>{EMPTY_DATA_TEXT.content}</Box>\n        <Button variant={BUTTON_VARIANT.outlined} sx={emptyDataStyle.button} onClick={() => setIsDialogOpen(true)}>\n          <Help sx={emptyDataStyle.icon} />\n          {EMPTY_DATA_TEXT.firstTime}\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/siteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={emptyDataStyle.text}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GridLayoutItem } from '../../../types/views/Grid'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\nimport { useDebounce } from '../../../helpers/react/useDebounce'\nimport { getCategoryAttributesKeys, getDefaultQuantitativeAttributesKeys } from '../../../helpers/data/data'\n\nimport { DataLoadState } from '../../../constants/data/DataLoadState'\nimport { brushView, brushViewType, isBrushView, ViewType } from '../../../constants/views-general/ViewType'\nimport { DEFAULT_GRID_LAYOUT_QUANTITATIVE, DEFAULT_GRID_LAYOUT_NOMINAL } from '../../../constants/layout/layout'\nimport { DEFAULT_BRUSH_COLOR } from '../../../constants/views-general/defaultSettableColors'\nimport { BRUSH_DEBOUNCE } from '../../../constants/debounce/debounce'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../grid/ViewGrid'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<Partial<Record<ViewType, () => void>>>({})\n  const [currentRedrawTime, setRedrawTime] = useState(Date.now())\n\n  const redrawTime = useDebounce(currentRedrawTime, BRUSH_DEBOUNCE) // used for less component re-renders\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isLayoutDialogOpen, setIsLayoutDialogOpen] = useState(false)\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[] | null>(null)\n  const [brushColor, setBrushColor] = useState<string>(DEFAULT_BRUSH_COLOR)\n\n  useEffect(() => {\n    if (!dataset || layout !== null) return\n    setLayout(\n      getCategoryAttributesKeys(dataset).length > getDefaultQuantitativeAttributesKeys(dataset).length\n        ? DEFAULT_GRID_LAYOUT_NOMINAL\n        : DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n    )\n  }, [dataset, layout])\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = useCallback((data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }, [])\n\n  const refreshViews = useCallback((): void => {\n    setRedrawTime(Date.now()) // redraw component\n  }, [])\n\n  const cleanAllBrushes = useCallback(\n    (deletePrevSelection = true) => {\n      if (dataset && deletePrevSelection) {\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n      }\n      Object.values(cleanBrushingRef.current).forEach((f) => f())\n    },\n    [cleanBrushingRef, dataset, refreshViews],\n  )\n\n  const clearBrushesOnButton = useCallback(() => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }, [cleanAllBrushes])\n\n  const setComponentBrushing: SetComponentBrushing = useCallback(\n    (newComponent) => {\n      if (componentBrushingRef.current !== newComponent) {\n        cleanAllBrushes(isBrushView(newComponent) || newComponent === null)\n      }\n      setCurrentComponentBrushing(newComponent)\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const registerCleanBrushingAll = useCallback((viewType: ViewType, cleanBrushing: () => void) => {\n    setCleanBrushing((prev) => ({\n      ...prev,\n      [viewType]: cleanBrushing,\n    }))\n  }, [])\n\n  const cleanSelectedIfViewWasBrushing = useCallback(\n    (component: ViewType | brushViewType) => {\n      if (\n        componentBrushingRef.current === component ||\n        (component === brushView && isBrushView(componentBrushingRef.current))\n      ) {\n        cleanAllBrushes()\n        setCurrentComponentBrushing(null)\n      }\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = useCallback(\n    (newIsBrushingOnEndOfMove: boolean) => {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n      setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n    },\n    [cleanAllBrushes],\n  )\n\n  const closeDrawer = useCallback(() => setDrawerOpen(false), [])\n  const openDrawer = useCallback(() => setDrawerOpen(true), [])\n\n  const topToolbarComponent = (\n    <TopToolbar\n      openDrawer={openDrawer}\n      isToolsDisabled={dataset === null}\n      isDetailsVisible={isDetailsVisible}\n      setIsDetailsVisible={setIsDetailsVisible}\n      isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n      isBrushingActive={componentBrushingRef.current !== null}\n      clearBrushes={clearBrushesOnButton}\n      setDataset={setDatasetAndRemoveBrushing}\n      setDataLoadState={setDataLoadState}\n      setIsLayoutDialogOpen={setIsLayoutDialogOpen}\n      removeLayout={() => setLayout([])}\n      setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n      brushColor={brushColor}\n      setBrushColor={setBrushColor}\n    />\n  )\n\n  if (dataLoadState === DataLoadState.NoData) {\n    return (\n      <>\n        {topToolbarComponent}\n        <EmptyData />\n      </>\n    )\n  }\n  if (dataLoadState === DataLoadState.Loading || !dataset) {\n    return (\n      <>\n        {topToolbarComponent}\n        <Loading />\n      </>\n    )\n  }\n\n  if (!layout) return null\n\n  return (\n    <>\n      {topToolbarComponent}\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={closeDrawer}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isLayoutDialogOpen={isLayoutDialogOpen}\n        setIsLayoutDialogOpen={setIsLayoutDialogOpen}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        brushColor={brushColor}\n        registerCleanBrushingAll={registerCleanBrushingAll}\n        setComponentBrushing={setComponentBrushing}\n        refreshViews={refreshViews}\n        redrawTime={redrawTime}\n        isBrushingActive={componentBrushingRef.current !== null}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      />\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","/**\n * Application root\n */\nimport { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}