{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/constants/views/ViewTypes.ts","app/text/HeaderText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/FooterText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/constants/data/sampleDataset.tsx","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/text/SiteText.ts","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/helpers/data/comparator.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components-style/content/top-toolbar/items/buttons/colorButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ColorButton.tsx","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/constants/views/common.ts","app/constants/views/tooltip.ts","app/text/views-and-menus/common.ts","app/components-style/content/views/viewGridStyle.ts","app/components-style/content/data-drawer/dataDrawerStyle.ts","app/helpers/data/data.ts","app/constants/data/data.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseAction.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/glyphs.ts","app/components-style/content/data-drawer/dataDrawerMenuStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components-style/content/data-drawer/items/menuTextStyle.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components/content/data-drawer/items/OpacityInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/settings/ParallelCoordinatesSettings.tsx","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixMenu.tsx","app/types/views/settings/ScatterPlotMatrixSettings.tsx","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-menus/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsMenu.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/text/views-and-menus/dataTable.ts","app/components-style/content/data-drawer/items/colorPickerStyle.ts","app/components/content/data-drawer/items/ColorPicker.tsx","app/components/content/views/data-table/DataTableMenu.tsx","app/types/views/settings/DataTableSettings.ts","app/components/content/data-drawer/DataDrawer.tsx","app/components-style/content/views/gridItemStyle.ts","app/constants/save/save.ts","app/helpers/d3/saveSvg.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/common/DataSaveButton.tsx","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/d3/attributeGetters.ts","app/constants/html.ts","app/helpers/d3/tooltip.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/constants/form.ts","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTable.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/components/content/views/GridItem.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/loadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","DataLoadError","ViewType","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","dataToReadable","data","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","VIEW_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","SampleDataset","flower","bird","car","AcceptableFileTypes","sampleDatasetIcons","LocalFlorist","Air","DirectionsCar","sampleDatasets","flowerJson","birdJson","carJson","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","labelDetailsVisible","labelClearBrushes","labelAddView","labelBrushingOnEOM","labelBrushColor","addViewDialogTitle","noOption","fileReader","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFileFormat","saveText","header","save","confirm","cancel","topToolbarStyle","toolbar","separator","height","margin","borderLeft","left","middle","right","topToolbarButtonStyle","button","minWidth","ClickableButton","icon","onClick","disabled","label","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","keys","Object","every","key","idx","CsvParse","textCsv","parse","output","fromEntries","toLowerCase","numValue","Number","isNaN","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","dialogStyle","dialog","alert","SelectionDialog","isOpen","onClose","options","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","addSelected","d","selected","SortType","FileReader","setDataset","setDataLoadState","useState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionsKeys","optionKey","Loaded","AutoGraph","type","onChange","e","a","target","files","Loading","selectedFile","fileType","json","csv","JSON","NoData","ToggleButtonSingle","setValue","onValue","ToggleButtonGroup","event","checked","ToggleButton","openSettingsButtonStyle","settings","OpenSettingsButton","IconButton","size","Settings","getColorInputStyle","getColorInputBoxStyle","minHeight","ml","colorInputStyle","inputBox","position","opacity","ColorButton","handleSetColor","tooltip","disableHoverListener","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","brushColor","setBrushColor","Info","SkipNext","AutoFixOff","AddCircle","Brush","SVG","svg","g","circle","rect","path","div","class","transform","x","y","cx","cy","r","strokeWidth","fill","stroke","top","none","block","displayDetails","tooltipClass","selectAll","style","DRAG_HANDLE","VIEW_DEFAULT_SIZE","VIEW_LIMITS","ParallelCoordinates","minW","minH","ScatterPlotMatrix","Glyphs","ScatterPlotGlyphs","DataTable","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT","i","TOOLTIP_CLASS","TOOLTIP","bottom","lr","MENU_BASE_TEXT","more","empty","MENU_TEXT","attributes","category","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","PALETTE_PICKER_TEXT","categoriesLabel","VIEW_NAMES","viewGridStyle","pointerEvents","zIndex","dataDrawerStyle","drawer","flexShrink","chevron","menu","flexGrow","getAttributeKeys","getDatasetSample","filter","getQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","getDefaultAllAttributesChecked","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","getDefaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","descCompare","b","orderBy","BrushAction","MouseAction","getComparator","sort","desc","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","margins","colorCategory","schemeCategory10","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","dataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleMove","newAttributesKeys","prev","prevSettings","displayAttributes","FormControlLabel","onUpButton","ArrowDropUp","onDownButton","ArrowDropDown","Checkbox","eventChecked","newChecked","newSettings","handleCheckboxChange","CategorySelector","TextField","categoryAttribute","undefined","select","MenuItem","Selector","settingsKey","newValue","numberInputStyles","vertical","horizontal","textField","menuTextStyle","MarginInput","handleMarginChange","newMargin","newMargins","defaultValue","inputProps","inputMode","min","NumberInput","valueKey","max","minVal","maxVal","OpacityInput","handleOpacityChange","newOpacity","newOpacities","getPalettePickerColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","getInput","newColor","newColors","toggleButtonsStyle","group","ToggleButtons","exclusive","opt","GlyphsMenu","glyphsSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","sortableAttributes","categoricalAttributes","createGlyphsMenu","useCallback","newQaKeys","defaultSortAttribute","defaultCategoryAttribute","newGlyphs","sortAttribute","useEffect","currChecked","newSortableAttributes","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","PARALLEL_COORDINATES_DEFAULT","lineWidth","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","sizes","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","createScatterPlotMatrixMenu","newScatterPlotMatrix","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_MENU_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsMenu","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsMenu","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","selectedBackgroundColor","selectedFontColor","DATA_TABLE_MENU_TEXT","DATA_TABLE_TEXT","checkboxTooltip","getColorPickerInputStyle","colorPickerStyle","ColorPicker","DataTableMenu","dataTableSettings","createDataTableMenu","newKeys","newDataTableSettings","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","SAVE_ID","CONTAINER_SAVE_ID","saveSvg","svgContainer","document","querySelector","console","log","querySelectorAll","flatMap","sheet","cssRules","rules","cssText","containerClass","from","classList","cls","includes","newStyleNodes","innerHTML","node","createElement","insertBefore","firstChild","svgEl","fileName","setAttribute","svgData","outerHTML","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","removeChild","saveSvgToFile","forEach","remove","error","inlineButtonStyles","ConfirmationDialog","onConfirm","cancelText","DataSaveButton","isDialogOpen","setIsDialogOpen","Save","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getCategoryColor","TEXT_Y_SHIFTS","odd","even","TOGGLE_TEXT_Y_SHIFT","Math","getTextTogglingYShift","_","HTML","onMouseOverTooltip","clientX","clientY","duration","html","getAttributeValuesWithLabel","onMouseOutTooltip","PARALLEL_COORDINATES_CLASS","getParallelCoordinatesStyle","isBrushActive","font","textAnchor","fontWeight","getViewsNotDisplayStyle","refreshViews","registerCleanBrushing","setComponentBrushing","component","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","onBrush","start","move","brushEvent","axisName","selection","end","brushExtent","BRUSH_WIDTH","brush","brushY","on","enter","append","attr","line","mouseOver","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","id","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","brushing","clearBrush","brushSelection","makeBrush","GLYPHS_CLASS","SELECTED_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","onMouseClick","changedData","SCATTER_PLOT_GLYPHS_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","makeGlyphs","FORM","getDataTableRowStyle","paddingTop","paddingBottom","dataTableStyle","tableHead","tableBody","notDisplayed","order","setOrder","setOrderBy","createSortHandler","property","isAsc","handleRequestSort","numSelected","someSelected","allSelected","TableContainer","Table","TableHead","TableRow","TableCell","checkAll","indeterminate","headCellId","orderedByActive","sortDirection","TableSortLabel","active","direction","TableBody","hover","handleSelectClick","s","View","dataProps","graph","settingsCurr","overflowX","overflowY","GridItem","onRemove","isResizeFinished","rest","useSize","Close","ReactGridLayout","WidthProvider","GridLayout","ViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","layout","setLayout","viewProps","viewResizing","setViewResizing","updateLayout","newLayout","filteredLayout","addView","find","posY","reduce","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","emptyDataStyle","site","EmptyData","loadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","redrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","cleanAllBrushes","deletePrevSelection","f","newComponent","newIsBrushingOnEndOfMove","appStyle","app","content","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.614c6c70.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFileFormat = `unsupportedFileFormat`,\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  DataTable = `DataTable`,\n}\n\nexport const isViewType = (viewType: string): viewType is ViewType =>\n  (Object.values(ViewType) as string[]).includes(viewType)\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim()\n\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface for Selectable data type with index (for sorting etc.)\n */\nexport interface IndexedSelectableDataType extends SelectableDataType {\n  index: number\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  border: `rgba(0, 0, 0, 0.12)`,\n  colorBorder: `#42495d`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { calc } from '../helpers/d3/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/HeaderText'\n\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { FOOTER_TEXT } from '../../text/FooterText'\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n    <Box sx={footerStyle.text}>\n      &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n    </Box>\n  </Box>\n)\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { Air, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flower = `flower`,\n  bird = `bird`,\n  car = `car`,\n}\n\nexport const sampleDatasetFiles: Record<SampleDataset, string> = {\n  [SampleDataset.flower]: `flowerData.json`,\n  [SampleDataset.bird]: `birdData.json`,\n  [SampleDataset.car]: `carData.json`,\n}\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flower]: <LocalFlorist />,\n  [SampleDataset.bird]: <Air />,\n  [SampleDataset.car]: <DirectionsCar />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flower]: flowerJson,\n  [SampleDataset.bird]: birdJson,\n  [SampleDataset.car]: carJson,\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState } from 'react'\nimport { AutoGraph } from '@mui/icons-material'\nimport { Box } from '@mui/material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadError, DataLoadState } from '../../../../../constants/data/dataLoadState'\nimport { SampleDataset, sampleDatasetIcons, sampleDatasets } from '../../../../../constants/data/sampleDataset'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../../text/SiteText'\n\nimport { getFileReaderBoxStyle } from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\nimport { ClickableButton } from '../buttons/ClickableButton'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: ReadonlyArray<DataType>): ReadonlyArray<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const text = TOP_TOOLBAR_TEXT.fileReader\n  const optionsKeys = Object.values(SampleDataset)\n  const handleListItemClick = (optionKey: SampleDataset) => {\n    setIsSampleDataDialogOpen(false)\n    const dataset = sampleDatasets[optionKey]\n    setDataset(addSelected(dataset))\n    setDataLoadState(DataLoadState.Loaded)\n  }\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={text.sampleDataDialogTitle}\n        options={optionsKeys.map((key) => ({\n          key,\n          label: text.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={text.alertDialog.confirm}\n        alert={true}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={text.sampleDataLabel}\n        />\n        <input\n          type=\"file\"\n          onChange={async (e) => {\n            if (e.target.files?.length) {\n              setDataLoadState(DataLoadState.Loading)\n              const selectedFile = e.target.files[0]\n              const fileType = selectedFile.type\n              let dataset: DataType[] = []\n\n              switch (fileType) {\n                case AcceptableFileTypes.json: {\n                  const text = await selectedFile.text()\n                  dataset = JSON.parse(text)\n                  break\n                }\n                case AcceptableFileTypes.csv: {\n                  const textCsv = await selectedFile.text()\n                  dataset = CsvParse(textCsv)\n                  break\n                }\n                default: {\n                  setDataLoadState(DataLoadState.NoData)\n                  setAlertDialogText(text.alertDialog[DataLoadError.unsupportedFile])\n                  setDataset(null)\n                  setIsAlertDialogOpen(true)\n                  return\n                }\n              }\n              if (!isArrayOfDataType(dataset)) {\n                setDataLoadState(DataLoadState.NoData)\n                setAlertDialogText(text.alertDialog[DataLoadError.unsupportedFileFormat])\n                setDataset(null)\n                setIsAlertDialogOpen(true)\n                return\n              }\n              setDataset(addSelected(dataset))\n              setDataLoadState(DataLoadState.Loaded)\n            }\n          }}\n        />\n      </Box>\n    </>\n  )\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataLoadError } from '../constants/data/dataLoadState'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  labelBrushColor: `Brush color`,\n  addViewDialogTitle: `Add a view`,\n  noOption: `All view options are currently displayed.`,\n  fileReader: {\n    sampleDataLabel: `Try it on the sample data`,\n    sampleDataDialogTitle: `Select sample dataset`,\n    sampleDataDialogText: {\n      [SampleDataset.flower]: `Flower dataset`,\n      [SampleDataset.bird]: `Bird dataset`,\n      [SampleDataset.car]: `Car dataset`,\n    },\n    alertDialog: {\n      [DataLoadError.unsupportedFile]: {\n        title: `File type not supported`,\n        description: `This file type is not supported. Use JSON or CSV file.`,\n      },\n      [DataLoadError.unsupportedFileFormat]: {\n        title: `File format not supported`,\n        description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n      },\n      confirm: `OK`,\n    },\n  },\n  saveText: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    save: `Save`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  middle: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n  right: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant=\"contained\" onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n\n  padding: isHighlighted ? px(10, 0) : 0,\n  borderRadius: px(10),\n  '& input': {\n    width: px(220),\n  },\n})\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS, ERROR_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  text: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.text}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { SelectableDataType } from '../../types/data/data'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T>(a: T, b: T, orderBy: keyof T) =>\n  b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n\nexport enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n\nexport const getComparator = (sort: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sort === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = (event: MouseEvent<HTMLElement>, checked: string[]) => {\n    if (checked.length && checked[0] === onValue) {\n      return setValue(true)\n    }\n    return setValue(false)\n  }\n  const onValue = `on`\n  return (\n    <ToggleButtonGroup value={value ? [onValue] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={onValue} aria-label={label} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    color: BUTTON_COLORS.buttonOnBackground,\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Settings } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\n\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <IconButton size=\"small\" disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Settings />\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const getColorInputStyle = (disabled?: boolean): SxProps => ({\n  display: `flex`,\n  '& .MuiSvgIcon-root': {\n    color: disabled ? BUTTON_COLORS.fontDisabled : BUTTON_COLORS.buttonOnBackground,\n  },\n})\n\nexport const getColorInputBoxStyle = (color: string, disabled?: boolean): SxProps => ({\n  bgcolor: disabled ? BUTTON_COLORS.fontDisabled : color,\n  minWidth: px(25),\n  minHeight: px(25),\n  borderRadius: px(5),\n  ml: px(2),\n  border: border(1, disabled ? BUTTON_COLORS.buttonDisableBackground : BUTTON_COLORS.colorBorder),\n})\n\nexport const colorInputStyle: Record<string, SxProps> = {\n  inputBox: {\n    position: `relative`,\n    '& input': {\n      width: `100%`,\n      opacity: 0,\n      position: `absolute`,\n      left: 0,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box, Tooltip } from '@mui/material'\n\nimport {\n  colorInputStyle,\n  getColorInputBoxStyle,\n  getColorInputStyle,\n} from '../../../../../components-style/content/top-toolbar/items/buttons/colorButtonStyle'\n\nexport interface ColorButtonProps {\n  color: string\n  handleSetColor: (color: string) => void\n  tooltip: string\n  disabled?: boolean\n  icon: JSX.Element\n}\n\nexport const ColorButton: VoidFunctionComponent<ColorButtonProps> = ({\n  color,\n  handleSetColor,\n  tooltip,\n  disabled,\n  icon,\n}) => (\n  <Tooltip title={tooltip} disableHoverListener={disabled}>\n    <Box sx={colorInputStyle.inputBox}>\n      <input disabled={disabled} type=\"color\" value={color} onChange={(e) => handleSetColor(e.target.value)} />\n      <Box sx={getColorInputStyle(disabled)}>\n        {icon}\n        <Box sx={getColorInputBoxStyle(color, disabled)} />\n      </Box>\n    </Box>\n  </Tooltip>\n)\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { AddCircle, AutoFixOff, Brush, SkipNext } from '@mui/icons-material'\nimport { Info } from '@mui/icons-material'\n\nimport { Box } from '@mui/material'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\nimport { ColorButton } from './items/buttons/ColorButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n\n  brushColor: string\n  setBrushColor: Dispatch<SetStateAction<string>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n  brushColor,\n  setBrushColor,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ToggleButtonSingle\n        icon={<Info />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<AutoFixOff />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n      />\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelAddView}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.middle}>\n      <ColorButton\n        color={brushColor}\n        handleSetColor={(color) => setBrushColor(color)}\n        icon={<Brush />}\n        disabled={isToolsDisabled}\n        tooltip={TOP_TOOLBAR_TEXT.labelBrushColor}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n    strokeWidth: `stroke-width`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    strokeWidth: `stroke-width`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","import { GridLayoutItem } from '../../types/views/Grid'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { ViewType } from './ViewTypes'\n\nexport const DEFAULT_BRUSH_COLOR = `#830606`\nexport const DEFAULT_BRUSH_BG_COLOR_TABLE = `#ffcfcf`\nexport const DEFAULT_BRUSH_FONT_COLOR_TABLE = `#111111`\n\nexport const VIEW_BORDER_SIZE = 5\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const HEADER_HEIGHT = 30\n\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 200,\n  height: 200,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n}\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n}\n\nexport const DEFAULT_GRID_LAYOUT: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\n\nexport const MENU_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER_TEXT = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.DataTable]: `Data Table`,\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { TOOLTIP } from '../../../constants/views/tooltip'\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const dataDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n}\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n","export const CATEGORY_LIMIT = 10\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseAction {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { schemeCategory10 } from 'd3'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { SortType } from '../../helpers/data/comparator'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const dataDrawerMenuStyle: Record<string, SxProps> = {\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<Opt extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: Opt) => Partial<Opt>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <Opt extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<Opt>): JSX.Element => {\n  const handleCheckboxChange = (eventChecked: boolean, key: keyof SelectableDataType) => {\n    const newChecked = { ...checked, [key]: eventChecked }\n    setChecked(newChecked)\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as Opt\n      const newSettings = getNewSettings(newChecked, prevSettings)\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          ...newSettings,\n        },\n      }\n    })\n  }\n  const handleMove = (newAttributesKeys: Array<keyof SelectableDataType>) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setAttributesKeys(newAttributesKeys)\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as Opt\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n        },\n      }\n    })\n  }\n  const onUpButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  const onDownButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = (categoryAttribute: keyof SelectableDataType | -1) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n        },\n      }\n    })\n  }\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = (newValue: keyof SelectableDataType) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: newValue,\n        },\n      }\n    })\n  }\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const menuTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n    padding: px(6, 5, 3),\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({ margins, setSettings, viewType }) => {\n  const handleMarginChange = (newMargin: number, idx: number) => {\n    const newMargins = [...margins]\n    newMargins[idx] = newMargin\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: newMargins,\n        },\n      }\n    })\n  }\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type=\"number\"\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type=\"number\"\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type=\"number\"\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type=\"number\"\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface NumberInputProps<Opt> {\n  viewType: ViewType\n  label: string\n  valueKey: keyof Opt\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <Opt,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<Opt>): JSX.Element => {\n  const handleValueChange = (newValue: number) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: newValue,\n        },\n      }\n    })\n  }\n  const minVal = min ? { min } : { min: 0 }\n  const maxVal = max ? { max } : {}\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type=\"number\"\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={{ inputMode: `numeric`, ...minVal, ...maxVal }}\n        onChange={(e) => handleValueChange(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacity: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({ header, opacity, setSettings, viewType }) => {\n  const handleOpacityChange = (newOpacity: number, idx: number) => {\n    const newOpacities = [...opacity]\n    newOpacities[idx] = newOpacity\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: newOpacities,\n        },\n      }\n    })\n  }\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type=\"number\"\n        defaultValue={opacity[0]}\n        sx={numberInputStyles.textField}\n        inputProps={{ min: 0, max: 100 }}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type=\"number\"\n          defaultValue={opacity[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type=\"number\"\n          defaultValue={opacity[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const getPalettePickerColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PALETTE_PICKER_TEXT } from '../../../../text/views-and-menus/common'\n\nimport {\n  getPalettePickerColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({ colors, setSettings, viewType }) => {\n  const handleSetColor = (newColor: string, idx: number) => {\n    if (newColor) {\n      const newColors = [...colors]\n      newColors[idx] = newColor\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            colorCategory: newColors,\n          },\n        }\n      })\n    }\n  }\n  const getInput = (idx: number) => (\n    <Box sx={palettePickerStyle.col} key={idx}>\n      <label>{PALETTE_PICKER_TEXT.categoriesLabel[idx]}</label>\n      <Box sx={getPalettePickerColorInputStyle(colors, idx)}>\n        <input type=\"color\" value={colors[idx]} onChange={(e) => handleSetColor(e.target.value, idx)} />\n      </Box>\n    </Box>\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER_TEXT.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = (newValue: T) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: newValue,\n        },\n      }\n    })\n  }\n  return (\n    <Box>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { SortType } from '../../../../helpers/data/comparator'\n\nexport const GlyphsMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n    prevSettings: GlyphsSettings,\n  ): Partial<GlyphsSettings> => {\n    const displayAttributes = getCurrentDisplayAttributes(newChecked)\n    const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n    const sortAttribute = newChecked[prevSettings.sortAttribute]\n      ? prevSettings.sortAttribute\n      : newSortableAttributes?.[0]\n    return { displayAttributes, sortAttribute }\n  }\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacity={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SortType } from '../../../helpers/data/comparator'\n\nimport { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [10, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacity={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `Scatter plot cannot be displayed, window is too small. Change the size, number of attributes displayed or margin to display scatter plot matrix`,\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <Typography sx={menuTextStyle.text}>{SCATTER_PLOT_MATRIX_MENU_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacity={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 10, 20],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport { glyphSizeKey, xAttributeKey, yAttributeKey } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { SCATTER_PLOT_GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createScatterPlotGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n  ): Partial<ScatterPlotGlyphsSettings> => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n  const handleChangeSettings = () => cleanSelectedIfViewWasBrushing(viewType)\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_MENU_TEXT.opacity}\n                  opacity={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { DEFAULT_BRUSH_BG_COLOR_TABLE, DEFAULT_BRUSH_FONT_COLOR_TABLE } from './common'\n\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\nexport const DATA_TABLE_DEFAULT: Pick<\n  DataTableSettings,\n  `rowHeight` | `selectedBackgroundColor` | `selectedFontColor`\n> = {\n  rowHeight: 45,\n  selectedBackgroundColor: DEFAULT_BRUSH_BG_COLOR_TABLE,\n  selectedFontColor: DEFAULT_BRUSH_FONT_COLOR_TABLE,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { SortType } from '../../helpers/data/comparator'\nimport { MENU_BASE_TEXT, VIEW_NAMES } from './common'\n\nexport const DATA_TABLE_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes him not valid. Please choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  selectedBackgroundColor: `Selected background color`,\n  selectedFontColor: `Selected font color`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascendant`,\n  [SortType.desc]: `Sort descendant`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from the menu.`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const getColorPickerInputStyle = (color: string): SxProps => ({\n  bgcolor: color,\n  width: px(25),\n  borderRadius: px(5),\n  '& input': {\n    width: `100%`,\n    height: px(25),\n    opacity: 0,\n  },\n})\n\nexport const colorPickerStyle: Record<string, SxProps> = {\n  picker: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `center`,\n  },\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport {\n  colorPickerStyle,\n  getColorPickerInputStyle,\n} from '../../../../components-style/content/data-drawer/items/colorPickerStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface ColorPickerProps<Opt> {\n  viewType: ViewType\n  color: string\n  settingsKey: keyof Opt\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const ColorPicker = <Opt,>({\n  viewType,\n  color,\n  settingsKey,\n  setSettings,\n  label,\n}: ColorPickerProps<Opt>): JSX.Element => {\n  const handleSetColor = (newColor: string) => {\n    if (newColor) {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newColor,\n          },\n        }\n      })\n    }\n  }\n  return (\n    <Box sx={colorPickerStyle.picker}>\n      <Typography sx={menuTextStyle.text}>{label}</Typography>\n      <Box sx={getColorPickerInputStyle(color)}>\n        <input type=\"color\" value={color} onChange={(e) => handleSetColor(e.target.value)} />\n      </Box>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  DataTableSettings,\n  rowHeightKey,\n  selectedBackgroundColorKey,\n  selectedFontColorKey,\n} from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_MENU_TEXT } from '../../../../text/views-and-menus/dataTable'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const DataTableMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    attributesKeys.filter((key) => currChecked[key])\n\n  const createDataTableMenu = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{DATA_TABLE_MENU_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  viewType={viewType}\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.rowHeight}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedBackgroundColor}\n                  settingsKey={selectedBackgroundColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedBackgroundColor}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedFontColor}\n                  settingsKey={selectedFontColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedFontColor}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{DATA_TABLE_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { VisualizationSettings } from './VisualizationSettings'\n\nexport const rowHeightKey = `rowHeight`\nexport const selectedBackgroundColorKey = `selectedBackgroundColor`\nexport const selectedFontColorKey = `selectedFontColor`\n\n/**\n * Settings for Data Table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n\n  /**\n   * Selected background color\n   */\n  [selectedBackgroundColorKey]: string\n  /**\n   * Selected font color\n   */\n  [selectedFontColorKey]: string\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box, Divider, Drawer, IconButton } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { dataDrawerStyle } from '../../../components-style/content/data-drawer/dataDrawerStyle'\n\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot-matrix/ScatterPlotMatrixMenu'\nimport { ScatterPlotGlyphsMenu } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsMenu'\nimport { DataTableMenu } from '../views/data-table/DataTableMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: VoidFunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const menus = views.map((view, idx) => {\n    switch (view) {\n      case ViewType.Glyphs:\n        return (\n          <GlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ParallelCoordinates:\n        return (\n          <ParallelCoordinatesMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotMatrix:\n        return (\n          <ScatterPlotMatrixMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotGlyphs:\n        return (\n          <ScatterPlotGlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.DataTable:\n        return (\n          <DataTableMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      default:\n        return null\n    }\n  })\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} sx={dataDrawerStyle.drawer}>\n      <Box sx={dataDrawerStyle.header}>\n        <IconButton onClick={close}>\n          <ChevronRight sx={dataDrawerStyle.chevron} />\n        </IconButton>\n      </Box>\n      <Divider />\n      <Box sx={dataDrawerStyle.menu}>{menus.map((menu) => menu)}</Box>\n    </Drawer>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { HEADER_HEIGHT } from '../../../constants/views/common'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  text: {\n    padding: px(0, 8),\n  },\n  header: {\n    height: HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","import { ViewType } from '../views/ViewTypes'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n}\n\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, `http://www.w3.org/2000/svg`)\n  const svgData = svgEl.outerHTML\n  const preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\n  const svgBlob = new Blob([preface, svgData], { type: `image/svg+xml;charset=utf-8` })\n  const svgUrl = URL.createObjectURL(svgBlob)\n  const downloadLink = document.createElement(`a`)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    // eslint-disable-next-line no-console\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  console.log([...document.querySelectorAll(`[data-emotion]`)].flatMap(({ sheet }) => [...sheet.cssRules].map(rules => rules.cssText)).join('\\n'))\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n  console.log(containerClass)\n\n  const newStyleNodes = Array.from(document.querySelectorAll(`style`))\n    .filter((e) => e.innerHTML.includes(`.${containerClass}`))\n    .map((style) => style.innerHTML.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      console.log(style)\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n","import { SxProps } from '@mui/system'\nimport { BUTTON_COLORS } from '../../../styles/colors'\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    margin: 0,\n    padding: 0,\n    minWidth: 0,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant=\"contained\" autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant=\"outlined\">\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useState, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { saveSvg } from '../../../helpers/d3/saveSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { inlineButtonStyles } from '../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from './dialogs/ConfirmationDialog'\n\nexport interface DataSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const DataSaveButton: VoidFunctionComponent<DataSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const onConfirm = () => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={TOP_TOOLBAR_TEXT.saveText.header}\n        description={TOP_TOOLBAR_TEXT.saveText.description}\n        onConfirm={onConfirm}\n        onClose={() => setIsDialogOpen(false)}\n        confirmText={TOP_TOOLBAR_TEXT.saveText.confirm}\n        cancelText={TOP_TOOLBAR_TEXT.saveText.cancel}\n      />\n      <Button\n        variant=\"text\"\n        onClick={() => setIsDialogOpen(true)}\n        sx={inlineButtonStyles.button}\n        aria-label={TOP_TOOLBAR_TEXT.saveText.save}\n      >\n        <Tooltip title={TOP_TOOLBAR_TEXT.saveText.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { BrushExtent } from '../../types/d3-types'\n\nexport const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: BrushExtent, cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\nimport { DataEach } from '../../types/d3-types'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(`1`)\n\nconst TEXT_Y_SHIFTS = { odd: 9, even: 19 }\nexport const TOGGLE_TEXT_Y_SHIFT = Math.max(...Object.values(TEXT_Y_SHIFTS))\n\nexport const getTextTogglingYShift: DataEach<keyof SelectableDataType, SVGTextElement, number> = (_, idx) =>\n  idx % 2 === 0 ? -TEXT_Y_SHIFTS.odd : -TEXT_Y_SHIFTS.even // index 0 is first, so odd\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","/**\n * tooltip and it's actions\n */\nimport { select } from 'd3'\n\nimport { OnMouseEvent } from '../../types/d3-types'\nimport { SelectableDataType } from '../../types/data/data'\n\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../constants/views/tooltip'\nimport { SVG } from '../../constants/svg'\nimport { HTML } from '../../constants/html'\n\nimport { getAttributeValuesWithLabel, getClass, px } from './stringGetters'\n\nexport const onMouseOverTooltip: OnMouseEvent<SelectableDataType> = ({ clientX, clientY }, data) => {\n  const tooltip = select(getClass(TOOLTIP_CLASS))\n  tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n  tooltip\n    .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n    .style(SVG.style.left, px(clientX))\n    .style(SVG.style.top, px(clientY))\n}\n\nexport const onMouseOutTooltip: OnMouseEvent<SelectableDataType> = () => {\n  select(getClass(TOOLTIP_CLASS)).transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushExtent, DataEachG, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getCategoryColor, getTextTogglingYShift, TOGGLE_TEXT_Y_SHIFT } from '../../../../helpers/d3/attributeGetters'\nimport { getAttributeFormatted, getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  refreshViews,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TOGGLE_TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      dataset.forEach((data) => {\n        data.selected = displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        })\n      })\n      refreshViews()\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, keyof SelectableDataType>> = {\n      [BrushAction.start]: () => setComponentBrushing(ViewType.ParallelCoordinates),\n      [BrushAction.move]: (brushEvent, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      },\n      [BrushAction.end]: (brushEvent, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n      [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n    ]\n\n    const brush = brushY<keyof SelectableDataType>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath: DataEachP<SelectableDataType, string | null> = (data) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseAction.mouseOver, onMouseOverTooltip)\n      .on(MouseAction.mouseOut, onMouseOutTooltip)\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    const getAxisTransform: DataEachG<keyof SelectableDataType, string> = (attribute) =>\n      getTranslate([xScale(String(attribute))!, 0])\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, getTextTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{PARALLEL_COORDINATES_TEXT.unavailable}</Box>\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\nexport const getScatterPlotMatrixStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    fontSize: PLOT_FONT.fontSize,\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { BrushExtent, DataEachC, DataEachG, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\ntype CellBrushing = { cell: MatrixPosition | null }\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  // selected coloring\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, DUPLICATES_CLASS)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachC<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachC<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseAction.mouseOver, onMouseOverTooltip)\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: CellBrushing = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) => (data.selected = isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, MatrixItem>> = {\n      [BrushAction.start]: (_, { rowIdx, colIdx, rowKey, colKey }) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      },\n      [BrushAction.move]: ({ selection }, matrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }, matrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [0, 0],\n      [rect.width, rect.height],\n    ]\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    refreshViews,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.tooSmall}</Box> // rect not big enough\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotMatrixStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { DataEachP, OnMouseEvent } from '../../../../types/d3-types'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  refreshViews,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform: DataEachP<SelectableDataType, string> = (data) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const onMouseClick: OnMouseEvent<SelectableDataType> = (_, changedData) => {\n      const idx = dataset.indexOf(changedData)\n      dataset[idx].selected = !dataset[idx].selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.Glyphs)\n      refreshViews()\n    }\n\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseAction.mouseOver, onMouseOverTooltip)\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n          .on(MouseAction.click, onMouseClick)\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    // selected coloring, needed again\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive, brushColor)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{GLYPHS_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotAxis`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\nexport const getScatterPlotGlyphsStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisBottom, axisLeft, brush, lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\n\nimport { getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { BrushExtent, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\nimport { TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  // selected coloring\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, TOOLTIP_CLASS)\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains([...displayAttributes, xAttribute, yAttribute], dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(extentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(extentInDomains[attribute]),\n    )\n\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseAction.mouseOver, onMouseOverTooltip)\n            .on(MouseAction.mouseOut, onMouseOutTooltip)\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n    axisX.call(axisBottom(xScale))\n    svg\n      .selectAll(AXIS_Y)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .call(axisLeft(yScale))\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) =>\n            (data.selected = isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType>> = {\n      [BrushAction.start]: () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      },\n      [BrushAction.move]: ({ selection }) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [-glyphSize / 2, -glyphSize / 2],\n      [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n    ]\n\n    const makeBrush = brush()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_GLYPHS_TEXT.unavailable}</Box>\n}\n","interface FormType {\n  checkbox: `checkbox`\n}\n\nexport const FORM: FormType = {\n  checkbox: `checkbox`,\n}\n","import { SxProps } from '@mui/system'\nimport { TABLE_COLORS } from '../../../../styles/colors'\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nexport const getDataTableRowStyle = (\n  rowHeight: number,\n  selected: boolean,\n  selectedBackgroundColor: string,\n  selectedFontColor: string,\n): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? important(selectedBackgroundColor) : ``,\n  '& .MuiTableCell-root': {\n    color: selected ? important(selectedFontColor) : ``,\n  },\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    height: 30,\n    bgcolor: TABLE_COLORS.headerBackground,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n}\n","import { useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Tooltip,\n} from '@mui/material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable, otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator, SortType } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { FORM } from '../../../../constants/form'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-menus/dataTable'\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  refreshViews,\n  setComponentBrushing,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(order, orderBy)),\n    [sortableDataset, order, orderBy],\n  )\n\n  const handleSelectClick = (changedData: SelectableDataType) => {\n    const idx = dataset.indexOf(changedData)\n    dataset[idx].selected = !dataset[idx].selected\n    if (dataset.every((data) => !data.selected)) {\n      setComponentBrushing(null)\n      return\n    }\n    setComponentBrushing(ViewType.DataTable)\n    refreshViews()\n  }\n\n  const handleSelectAllClick = (checked: boolean) => {\n    if (!checked) {\n      setComponentBrushing(null)\n      return\n    }\n    setComponentBrushing(ViewType.DataTable)\n    dataset.forEach((data) => (data.selected = true))\n    refreshViews()\n  }\n\n  const handleRequestSort = (property: keyof SelectableDataType) => {\n    const isAsc = orderBy === property && order === SortType.asc\n    setOrder(isAsc ? SortType.desc : SortType.asc)\n    setOrderBy(property)\n  }\n\n  const createSortHandler = (property: keyof SelectableDataType) => () => {\n    handleRequestSort(property)\n  }\n  const sortTooltipTitle = (headCellId: keyof SelectableDataType) =>\n    orderBy === headCellId\n      ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n      : DATA_TABLE_TEXT[SortType.asc]\n\n  const numSelected = dataset.filter((data) => data.selected).length\n  const someSelected = numSelected > 0 && numSelected < dataset.length\n  const allSelected = numSelected === dataset.length\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHead sx={dataTableStyle.tableHead}>\n            <TableRow>\n              <TableCell padding={FORM.checkbox}>\n                <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                  <Checkbox\n                    sx={dataTableStyle.checkAll}\n                    indeterminate={someSelected}\n                    checked={allSelected}\n                    onChange={(event) => handleSelectAllClick(event.target.checked)}\n                  />\n                </Tooltip>\n              </TableCell>\n              {displayAttributes.map((attribute) => {\n                const orderedByActive = orderBy === attribute\n                return (\n                  <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                    <Tooltip title={sortTooltipTitle(attribute)}>\n                      <TableSortLabel\n                        active={orderedByActive}\n                        direction={orderedByActive ? order : SortType.asc}\n                        onClick={createSortHandler(attribute)}\n                      >\n                        {otherCasesToWhitespaces(attribute)}\n                      </TableSortLabel>\n                    </Tooltip>\n                  </TableCell>\n                )\n              })}\n            </TableRow>\n          </TableHead>\n          <TableBody sx={dataTableStyle.tableBody}>\n            {sortedDataset.map((data, idx) => {\n              const selected = data.selected\n              return (\n                <TableRow\n                  hover\n                  onClick={() => handleSelectClick(data)}\n                  key={idx}\n                  sx={getDataTableRowStyle(rowHeight, selected, selectedBackgroundColor, selectedFontColor)}\n                >\n                  <TableCell padding={FORM.checkbox}>\n                    <Checkbox checked={selected} />\n                  </TableCell>\n                  {displayAttributes.map((attribute) => (\n                    <TableCell key={`${idx}-${attribute}`}>{dataToReadable(data[attribute])}</TableCell>\n                  ))}\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { ParallelCoordinatesSettings } from '../../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../../types/views/settings/DataTableSettings'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { VIEW_BORDER_SIZE } from '../../../constants/views/common'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nimport { Settings, SettingsType } from '../../../types/views/settings/Settings'\nimport { ParallelCoordinates } from './parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from './scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from './glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from './scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from './data-table/DataTable'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  component: ViewType\n  settings: Settings\n  brushColor: string\n}\n\ntype ViewElementFunction = (props: Brushable & VisualizationView, settings: SettingsType) => JSX.Element\n\nconst options: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.DataTable]: (p, s) => <DataTable {...p} {...(s as DataTableSettings)} />,\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({ width, height, component, settings, ...dataProps }) => {\n  const graph = options[component]\n  const settingsCurr = settings[component]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","import React, { VoidFunctionComponent, ComponentProps } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, IconButton, Typography } from '@mui/material'\nimport { Close } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { DRAG_HANDLE, HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/views/common'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { DataSaveButton } from '../common/DataSaveButton'\nimport { View } from './View'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isResizeFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isResizeFinished, ...rest }) => {\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Typography sx={gridItemStyle.text}>{title}</Typography>\n          <Box>\n            {rest.component !== ViewType.DataTable && <DataSaveButton viewType={rest.component} />}\n            <IconButton onClick={onRemove}>\n              <Close />\n            </IconButton>\n          </Box>\n        </Box>\n        {isResizeFinished && <View width={width} height={height - HEADER_HEIGHT} {...rest} />}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../helpers/d3/displayDetails'\n\nimport { isViewType, ViewType } from '../../../constants/views/ViewTypes'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/views/common'\nimport { TOOLTIP_CLASS } from '../../../constants/views/tooltip'\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\nimport { VIEW_NAMES } from '../../../text/views-and-menus/common'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[]>>\n  brushColor: string\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nexport const ViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  layout,\n  setLayout,\n  ...viewProps\n}) => {\n  const [viewResizing, setViewResizing] = useState<ViewType | null>(null)\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => layout.filter((item) => item.i !== viewType))\n    },\n    [setLayout],\n  )\n\n  displayDetails(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={(_, view) => setViewResizing(view.i as ViewType)}\n        onResizeStop={() => setViewResizing(null)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isResizeFinished={view.i !== viewResizing}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              component={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => <Box sx={emptyDataStyle.site}>{EMPTY_DATA_TEXT.content}</Box>\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const loadingStyle: Record<string, SxProps> = {\n  load: {\n    paddingTop: px(40),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { loadingStyle } from '../../../components-style/content/no-data/loadingStyle'\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={loadingStyle.load}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid, ViewGridProps } from '../views/ViewGrid'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\nimport { GridLayoutItem } from '../../../types/views/Grid'\nimport { DEFAULT_BRUSH_COLOR, DEFAULT_GRID_LAYOUT } from '../../../constants/views/common'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [redrawTime, setRedrawTime] = useState(Date.now())\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[]>(DEFAULT_GRID_LAYOUT)\n  const [brushColor, setBrushColor] = useState<string>(DEFAULT_BRUSH_COLOR)\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = (data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }\n\n  const refreshViews = (): void => {\n    setRedrawTime(Date.now()) // redraw component\n  }\n\n  const cleanAllBrushes = (deletePrevSelection = true) => {\n    if (dataset && deletePrevSelection) {\n      dataset.forEach((data) => (data.selected = false))\n      refreshViews()\n    }\n    cleanBrushingRef.current.forEach((f) => f())\n  }\n\n  const clearBrushesOnButton = () => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }\n\n  const setComponentBrushing: SetComponentBrushing = (newComponent) => {\n    if (componentBrushingRef.current !== newComponent) {\n      cleanAllBrushes(newComponent !== ViewType.DataTable && newComponent !== ViewType.Glyphs)\n    }\n    setCurrentComponentBrushing(newComponent)\n  }\n\n  const registerCleanBrushing = (cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }\n\n  const cleanSelectedIfViewWasBrushing = (component: ViewType) => {\n    if (componentBrushingRef.current === component) {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n    }\n  }\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = (newIsBrushingOnEndOfMove: boolean) => {\n    cleanAllBrushes()\n    setCurrentComponentBrushing(null)\n    setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n  }\n\n  const isBrushingActive = componentBrushingRef.current !== null\n\n  const viewProps: Pick<\n    ViewGridProps,\n    | `registerCleanBrushing`\n    | `setComponentBrushing`\n    | `refreshViews`\n    | `redrawTime`\n    | `isBrushingActive`\n    | `isBrushingOnEndOfMove`\n  > = {\n    registerCleanBrushing,\n    setComponentBrushing,\n    refreshViews,\n    redrawTime,\n    isBrushingActive,\n    isBrushingOnEndOfMove,\n  }\n\n  const getViewGrid = () => {\n    if (dataLoadState === DataLoadState.NoData) {\n      return <EmptyData />\n    }\n    if (dataLoadState === DataLoadState.Loading || !dataset) {\n      return <Loading />\n    }\n    return (\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={() => setDrawerOpen(false)}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        brushColor={brushColor}\n        {...viewProps}\n      />\n    )\n  }\n\n  return (\n    <>\n      <TopToolbar\n        openDrawer={() => setDrawerOpen(true)}\n        isToolsDisabled={dataset === null}\n        isDetailsVisible={isDetailsVisible}\n        setIsDetailsVisible={setIsDetailsVisible}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n        setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n        isBrushingActive={isBrushingActive}\n        clearBrushes={clearBrushesOnButton}\n        setDataset={setDatasetAndRemoveBrushing}\n        setDataLoadState={setDataLoadState}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        brushColor={brushColor}\n        setBrushColor={setBrushColor}\n      />\n      {getViewGrid()}\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}