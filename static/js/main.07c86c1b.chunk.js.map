{"version":3,"sources":["app/constants/data/data.ts","app/text/headerText.ts","app/types/data/data.ts","app/helpers/data/formatText.ts","app/helpers/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/footerText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/helpers/react/useDebounce.ts","app/constants/data/DataLoadState.ts","app/constants/views-general/ViewType.ts","app/helpers/data/data.ts","app/constants/data/sampleDataset.tsx","app/constants/layout/layout.ts","app/constants/data/DataLoadError.ts","app/text/siteText.ts","app/constants/sort/SortType.ts","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/constants/mui.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/constants/others.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/components/content/top-toolbar/items/file-reader/NullDialog.tsx","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components-style/content/top-toolbar/items/buttons/colorButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ColorButton.tsx","app/constants/debounce/debounce.ts","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/setDisplay.ts","app/constants/views-general/tooltip.ts","app/text/views-and-menus/common.ts","app/components-style/content/views/viewGridStyle.ts","app/text/dataDrawerText.ts","app/components-style/content/data-drawer/dataDrawerStyle.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components-style/content/data-drawer/dataDrawerMenuStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components-style/content/data-drawer/items/menuTextStyle.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/helpers/basic/getInputPropsPositiveNumber.ts","app/components/content/data-drawer/items/OpacityInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/settings/ParallelCoordinatesSettings.ts","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixMenu.tsx","app/types/views/settings/ScatterPlotMatrixSettings.ts","app/constants/views/glyphs.ts","app/constants/brushing-type/ParallelSetsBrushingType.ts","app/text/views-and-menus/glyphs.ts","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-menus/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsMenu.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/constants/views-general/defaultSettableColors.ts","app/text/views-and-menus/dataTable.ts","app/components-style/content/data-drawer/items/colorPickerStyle.ts","app/components/content/data-drawer/items/ColorPicker.tsx","app/components/content/views/data-table/DataTableMenu.tsx","app/types/views/settings/DataTableSettings.ts","app/constants/views/parallelSetsBundled.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseAction.ts","app/text/views-and-menus/parallelSetsBundled.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundledMenu.tsx","app/types/views/settings/ParallelSetsBundledSettings.ts","app/components/content/data-drawer/DataDrawer.tsx","app/constants/public-path.ts","app/components/content/top-toolbar/items/layout/LayoutDialog.tsx","app/components-style/content/views/gridItemStyle.ts","app/constants/save/save.ts","app/helpers/d3/saveSvg.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/common/DataSaveButton.tsx","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/views/togglingYShift.ts","app/helpers/d3/categoryColor.ts","app/helpers/d3/tooltip.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/views/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/helpers/data/comparator.ts","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/constants/views-general/glyphs-general.ts","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTableBody.tsx","app/components/content/views/data-table/DataTable.tsx","lib/d3-sankey/src/align.js","lib/d3-sankey/src/constant.js","lib/d3-sankey/src/sankey.js","lib/d3-sankey/src/sankeyLinkHorizontal.js","app/helpers/data/lineShifts.ts","app/components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundled.tsx","app/constants/views-general/view.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/components/content/views/data-table/DataFilterButton.tsx","app/components/content/views/GridItem.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/loadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["AcceptableFileTypes","DataNullOptionType","HEADER_TEXT","SelectedKey","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","toLowerCase","dataToReadable","data","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getSpaced","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","Object","keys","filter","key","getLinkDataPointValuesWithLabel","filteredData","from","names","to","count","selected","reduce","acc","sel","getNodeDataPointValuesWithLabel","name","countSelected","getLabelledAttribute","label","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","CARD_COLORS","VIEW_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","DataLoadState","ViewType","DATA_NULL_OPTION_TYPES","getAttributeKeys","dataset","getDatasetSample","getDefaultQuantitativeAttributesKeys","getQuantitativeAttributesKeys","every","isNaN","Number","getCategoryAttributesKeys","Set","size","getDefaultAllAttributesChecked","fromEntries","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","getDefaultNominalAttributesChecked","getNominalValueProperties","nominalValuePropertiesArr","containedIdx","findIndex","prev","newNominalValueProperties","sort","a","b","nvp","idx","order","getNominalValuesRecord","SampleDataset","DRAG_HANDLE","VIEW_DEFAULT_SIZE","height","VIEW_LIMITS","ParallelCoordinates","minW","minH","ScatterPlotMatrix","Glyphs","ScatterPlotGlyphs","DataTable","ParallelSetsBundled","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT_QUANTITATIVE","i","x","y","DEFAULT_GRID_LAYOUT_NOMINAL","LAYOUT_OPT_2","LAYOUT_OPT_3","LAYOUT_OPT_4","LAYOUT_OPTIONS","DataLoadError","SAMPLE_DATASET_OPTIONS","sampleDatasetIcons","flowers","LocalFlorist","birds","Air","cars","DirectionsCar","titanic","DirectionsBoat","parallelCars","AirportShuttle","sampleDatasets","flowerJson","birdJson","carJson","titanicJson","parallelCarsJson","SortType","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","header","save","confirm","cancel","FILE_READER_TEXT","button","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFormat","nullDialog","optionsText","leave","change","optionsDescription","changeTo","LAYOUT_DIALOG_TEXT","topToolbarStyle","toolbar","separator","margin","borderLeft","left","middle","right","COMPONENT_TYPE","BUTTON_VARIANT","DRAWER_VARIANT","ANCHOR","CELL_PADDING","topToolbarButtonStyle","minWidth","ClickableButton","icon","onClick","disabled","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","Array","isArray","length","example","CsvParse","textCsv","parse","output","numValue","HTML","INPUT_TYPE","INPUT_PROPS","positiveNumber","inputMode","min","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","fileReaderStyle","dialogStyle","dialog","alert","innerContent","contentBox","toggleDialogGroup","marginBottom","toggleDialogButton","flexGrow","attHeader","fontWeight","paddingBottom","textInput","alignSelf","card","opacity","image","cardContent","itemText","SelectionDialog","isOpen","onClose","options","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","NullDialog","nullContainingAttributes","setDataset","att","optionsChosen","setOptionsChosen","replaceValue","setReplaceValue","getFixedDataset","useCallback","newValue","handleNullDialogConfirm","datasetFixed","forEach","handleToggleChange","handleReplaceChange","ToggleButtonGroup","exclusive","onChange","e","optType","ToggleButton","TextField","defaultValue","target","addSelected","d","FILE_INPUT_ID","FileReader","setDataLoadState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isNullDialogOpen","setIsNullDialogOpen","setNullContainingAttributes","rawDataset","setRawDataset","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionKey","Loaded","closeDialog","getDatasetFromFile","fileType","selectedFile","json","csv","JSON","handleFileChange","files","Loading","type","dataLoadErrorType","NoData","selectableDataset","document","getElementById","AutoGraph","component","Add","hidden","id","ON_VALUE","ToggleButtonSingle","setValue","handleChange","event","checked","openSettingsButtonStyle","settings","OpenSettingsButton","IconButton","Settings","getColorInputStyle","getColorInputBoxStyle","minHeight","ml","colorInputStyle","inputBox","position","ColorButton","handleSetColor","tooltip","currentColor","setCurrentColor","debouncedColor","disableHoverListener","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","setIsLayoutDialogOpen","removeLayout","brushColor","setBrushColor","AddCircle","Dashboard","Info","SkipNext","Brush","AutoFixOff","SVG","svg","g","circle","rect","path","div","class","transform","cx","cy","r","stroke","strokeWidth","textAnchor","fill","top","none","block","start","end","setDisplay","isVisible","displayClass","selectAll","style","TOOLTIP_CLASS","TOOLTIP","bottom","lr","MENU_BASE_TEXT","more","empty","MENU_TEXT","attributes","category","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","PALETTE_PICKER_TEXT","categoriesLabel","VIEW_NAMES","viewGridStyle","pointerEvents","zIndex","DATA_DRAWER_TEXT","dataDrawerStyle","drawer","flexShrink","chevron","menu","footer","githubIcon","paddingRight","PARALLEL_COORDINATES_DEFAULT","margins","lineWidth","colorCategory","schemeCategory10","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","unavailable","dataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleCheckboxChange","eventChecked","newChecked","prevSettings","newSettings","handleMove","newAttributesKeys","displayAttributes","onUpButton","onDownButton","FormControlLabel","ArrowDropUp","ArrowDropDown","Checkbox","CategorySelector","handleSelectCategoryChange","categoryAttribute","undefined","select","MenuItem","numberInputStyles","vertical","horizontal","textField","menuTextStyle","MarginInput","currentMargins","setCurrentMargins","debouncedMargins","handleMarginChange","newMargin","oldMargins","newMargins","inputProps","getInputPropsPositiveNumber","max","minVal","maxVal","OpacityInput","opacities","currentOpacities","setCurrentOpacities","debouncedOpacities","handleOpacityChange","newOpacity","oldOpacities","newOpacities","NumberInput","valueKey","currentValue","setCurrentValue","handleChangeValue","getPalettePickerColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","currentColors","setCurrentColors","debouncedColors","newColor","oldColors","newColors","getInput","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","categoricalAttributes","getCurrentDisplayAttributes","currChecked","createParallelCoordinatesMenu","newQaKeys","defaultCategoryAttribute","newParallelCoordinates","getNewSettingsForAttributeChecker","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","sizes","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","createScatterPlotMatrixMenu","newScatterPlotMatrix","ParallelSetsBrushingType","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","Selector","settingsKey","handleSelectChange","toggleButtonsStyle","box","group","ToggleButtons","handleToggleButtonChange","opt","GlyphsMenu","glyphsSettings","sortableAttributes","createGlyphsMenu","defaultSortAttribute","newGlyphs","sortAttribute","newSortableAttributes","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_MENU_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsMenu","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsMenu","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","selectedBackgroundColor","selectedFontColor","DATA_TABLE_MENU_TEXT","DATA_TABLE_TEXT","checkboxTooltip","desc","getColorPickerInputStyle","colorPickerStyle","ColorPicker","handleChangeColor","DataTableMenu","dataTableSettings","createDataTableMenu","newKeys","newDataTableSettings","BrushAction","MouseAction","PARALLEL_SETS_BUNDLED_DEFAULT","tabWidth","tabSpacing","tabGap","brushingType","fontColor","PARALLEL_SETS_BUNDLED_TEXT","PARALLEL_SETS_MENU_TEXT","brushing","ParallelSetsBundledMenu","parallelSetsBundledSettings","nominalAttributesKeys","setNominalAttributesKeys","createParallelSetsBundledMenu","newCatKeys","newParallelSetsBundled","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","Link","href","GitHub","LAYOUT_IMAGES","imgName","PUBLIC_PATH","LayoutDialog","setLayout","lastLayout","layoutItems","Card","CardContent","CardMedia","alt","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","flexWrap","paddingLeft","textBox","whiteSpace","overflow","textOverflow","textIcon","GRID_HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","SAVE_ID","CONTAINER_SAVE_ID","CONTAINER_EMPTY","saveSvg","svgContainer","querySelector","containerClass","classList","cls","includes","newStyleNodes","querySelectorAll","flatMap","sheet","cssRules","rules","cssText","node","createElement","innerHTML","insertBefore","firstChild","svgEl","fileName","setAttribute","svgBlob","Blob","outerHTML","svgUrl","URL","createObjectURL","downloadLink","download","body","appendChild","click","removeChild","saveSvgToFile","remove","console","error","getSaveIsDisabled","inlineButtonStyles","buttonActive","ConfirmationDialog","onConfirm","cancelText","DataSaveButton","isDialogOpen","setIsDialogOpen","openDialog","Save","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getExtendedExtentInDomains","percentDown","percentUp","extentSize","p","finalExtent","TEXT_Y_SHIFTS","odd","even","TOGGLE_Y_SHIFT","Math","getTogglingYShift","_","getCategoryColor","onMouseOverTooltip","stringFunction","clientX","clientY","duration","html","onMouseOutTooltip","PARALLEL_COORDINATES_CLASS","SELECTED_CLASS","AXES_TEXT_CLASS","getParallelCoordinatesStyle","isBrushActive","font","getViewsNotDisplayStyle","refreshViews","registerCleanBrushing","setComponentBrushing","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","extentInDomains","xScale","scalePoint","domain","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","onBrush","move","brushEvent","axisName","selection","brushExtent","BRUSH_WIDTH","brush","brushY","on","enter","append","attr","line","mouseOver","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","selLKey","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","clearBrush","brushSelection","makeBrush","descCompare","orderBy","getComparator","GLYPHS_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","onMouseClick","changedData","SCATTER_PLOT_GLYPHS_CLASS","AXIS_TEXT_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","linearExtentInDomains","radialExtentInDomains","makeGlyphs","rotate","axisX","axisY","getDataTableRowStyle","paddingTop","dataTableStyle","tableHead","tableHeadRow","tableBody","filterRow","filterCell","filterIcon","notDisplayed","checkboxAll","DataTableBody","handleSelectClick","TableBody","TableRow","hover","TableCell","showFilter","redrawTime","setOrder","setOrderBy","doResort","setDoResort","filterValues","setFilterValues","filteredDataset","handleSelectAllClick","handleRequestSort","property","isAsc","handleFilterValueChange","createSortHandler","sortTooltipTitle","headCellId","getTableHead","indeterminate","allChecked","TableHead","checkAll","TableSortLabel","active","direction","orderedByActive","sortDirection","FilterListOutlined","TableContainer","Table","container","justify","n","sourceLinks","depth","constant","ascendingSourceBreadth","ascendingBreadth","source","ascendingTargetBreadth","y0","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","get","computeLinkBreadths","y1","link","targetLinks","Sankey","py","linkSort","x0","x1","dx","dy","align","iterations","sankey","apply","arguments","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeHeights","computeNodeBreadths","entries","Map","push","fixedValue","sum","next","add","columns","kx","layer","computeNodeLayers","c","ky","reorderLinks","initializeNodeBreadths","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","column","v","reorderNodeLinks","resolveCollisions","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","update","nodeId","nodeAlign","nodeSort","nodeWidth","nodePadding","horizontalSource","horizontalTarget","getCurrentWidth","currentCount","all","getStrokeWidth","isBrush","isOverlay","catAttributesCounts","currentWidth","selectedFraction","getSelectionWidth","getYShift","formerCount","slice","curr","yCatShift","getYCatShiftAndCurrentWidth","TABS_CLASS","getParallelSetsBundledStyle","fontColorInner","mixBlendMode","nominalValuesRecord","setNominalValuesRecord","createParallelSetsBundled","displayPairs","getNeighborAttributes","pairWidth","valueCounts","arr","spacesAllMax","isLeft","half","displayPair","pairIdx","spacesPairMax","pairExtent","sankeyLayout","record","attFrom","attTo","toIdxStart","catAttributeOptions","props","idxFrom","idxTo","filtered","getGraph","getPath","linkHorizontal","xShift","connectors","colorCategories","overlay","getViewRecord","s","f","View","dataProps","settingsCurr","overflowX","overflowY","DataFilterButton","setShowFilter","FilterList","GridItem","onRemove","isResizeFinished","rest","topButton","glyphAxesText","RotateRight","useSize","Close","ReactGridLayout","WidthProvider","GridLayout","BaseViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","isLayoutDialogOpen","layout","viewProps","viewResizing","setViewResizing","setLastLayout","updateLayout","newLayout","filteredLayout","addView","posY","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","ViewGrid","memo","emptyDataStyle","site","EmptyData","loadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","currentRedrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setDatasetAndRemoveBrushing","cleanAllBrushes","deletePrevSelection","clearBrushesOnButton","newComponent","setIsBrushingOnEndOfMoveAndRemoveBrushing","newIsBrushingOnEndOfMove","topToolbarComponent","appStyle","app","content","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.07c86c1b.chunk.js","sourcesContent":["export const CATEGORY_LIMIT = 10\n\nexport enum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nexport enum DataNullOptionType {\n  leave = `leave`,\n  change = `change`,\n  filter = `filter`,\n}\n\nexport const DATA_NULL_OPTION_TYPES = Object.values(DataNullOptionType)\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface for nominal value properties\n */\nexport interface NominalValueProperties {\n  name: string\n  attribute: keyof SelectableDataType\n  count: number\n  order: number\n  countSelected: number\n}\n\nexport interface NominalRecord {\n  [key: keyof SelectableDataType]: Array<NominalValueProperties>\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\n/**\n * Interface that assigns attributes numerical extent.\n * Used for axes' range.\n */\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim().toLowerCase()\n\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","import { SelectableDataType, SelectedKey } from '../types/data/data'\nimport { MatrixItem } from '../types/data/MatrixData'\nimport { LinkDataPoint, NodeDataPoint } from '../types/d3-sankey'\n\nimport { otherCasesToWhitespaces } from './data/formatText'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getRotate = (rotate: number): string => `rotate(${rotate})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getSpaced = (...values: string[]): string => values.join(` `)\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n\nexport type FilterKeys = Pick<LinkDataPoint, `y0` | `y1` | `width`>\n\nexport const getLinkDataPointValuesWithLabel = (data: LinkDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    from: data.names[0],\n    to: data.names[1],\n    count: String(data.value),\n    selected: String(data.selected.reduce((acc, sel) => acc + sel, 0)),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n\nexport const getNodeDataPointValuesWithLabel = (data: NodeDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    attribute: otherCasesToWhitespaces(data.attribute),\n    name: data.name,\n    count: String(data.count),\n    selected: String(data.countSelected),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n\nexport const getLabelledAttribute = (label: string, attribute: keyof SelectableDataType): string =>\n  getSpaced(label, otherCasesToWhitespaces(attribute))\n\nexport const getDisplayAttributesInParentheses = (displayAttributes: Array<keyof SelectableDataType>): string =>\n  `(` + displayAttributes.map((attribute) => otherCasesToWhitespaces(attribute)).join(`; `) + `)`\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonHoverBackground: `#b3bede`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  buttonInlinedFontOn: `#3965c4`,\n  buttonInlinedBgOn: `#e9eeff`,\n  border: `rgba(0, 0, 0, 0.12)`,\n  colorBorder: `#42495d`,\n  buttonDialogBackground: `#363a46`,\n  buttonDialogHoverBackground: `#1f2528`,\n  buttonDialogFont: `#d6e1ff`,\n}\n\nexport const CARD_COLORS = {\n  background: `#f7f8fd`,\n  backgroundHover: `#dce1ef`,\n  border: `#b3bede`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  filterIconFont: `#656d86`,\n  filterBackground: `#52586c`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { calc } from '../helpers/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/stringGetters'\n\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/headerText'\n\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/stringGetters'\n\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { FOOTER_TEXT } from '../../text/footerText'\n\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n    <Box sx={footerStyle.text}>\n      &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n    </Box>\n  </Box>\n)\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { useEffect, useState } from 'react'\n\nexport const useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n  return debouncedValue\n}\n","export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  DataTable = `dataTable`,\n  ParallelSetsBundled = `parallelSetsBundled`,\n}\n\nexport const isViewType = (viewType: string): viewType is ViewType => Object.values<string>(ViewType).includes(viewType)\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  NominalRecord,\n  NominalValueProperties,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\nimport { NodeDataPoint, SankeyGraph } from '../../types/d3-sankey'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultNominalAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => Object.fromEntries(getCategoryAttributesKeys(dataset).map((key) => [key, true]))\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n\nexport const getNominalValueProperties = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  attribute: keyof SelectableDataType,\n): Array<NominalValueProperties> =>\n  dataset\n    .reduce((nominalValuePropertiesArr, data) => {\n      const containedIdx = nominalValuePropertiesArr.findIndex((values) => values.name === String(data[attribute]))\n      if (containedIdx !== -1) {\n        const prev = nominalValuePropertiesArr[containedIdx]\n        nominalValuePropertiesArr[containedIdx] = {\n          ...prev,\n          count: prev.count + 1,\n          countSelected: prev.countSelected + (data.selected ? 1 : 0),\n        }\n        return nominalValuePropertiesArr\n      }\n      const newNominalValueProperties: Omit<NominalValueProperties, `order`> = {\n        name: String(data[attribute]),\n        attribute,\n        count: 1,\n        countSelected: data.selected ? 1 : 0,\n      }\n      nominalValuePropertiesArr = [...nominalValuePropertiesArr, newNominalValueProperties]\n      return nominalValuePropertiesArr\n    }, [] as Array<Omit<NominalValueProperties, `order`>>)\n    .sort((a, b) => (b.name < a.name ? 1 : b.name > a.name ? -1 : 0))\n    .map((nvp, idx) => ({ ...nvp, order: idx }))\n\nexport const getNominalValuesRecord = (dataset: ReadonlyArray<SelectableDataType>): NominalRecord =>\n  Object.fromEntries(\n    getCategoryAttributesKeys(dataset).map((attribute) => [attribute, getNominalValueProperties(dataset, attribute)]),\n  )\n\nexport const getNeighborAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): Array<[keyof SelectableDataType, keyof SelectableDataType]> =>\n  displayAttributes.slice(0, -1).map((att, idx) => [att, displayAttributes[idx + 1]])\n\nexport const getGraph = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  categoryAttribute: keyof SelectableDataType | undefined,\n  record: NominalRecord,\n  attFrom: keyof SelectableDataType,\n  attTo: keyof SelectableDataType,\n): SankeyGraph => {\n  const nodes: Array<NodeDataPoint> = [...record[attFrom], ...record[attTo]]\n  const toIdxStart = record[attFrom].length\n\n  const catAttributeOptions = categoryAttribute ? record[categoryAttribute].map((props) => props.name) : []\n\n  const links = record[attFrom].flatMap((from, idxFrom) =>\n    record[attTo].map((to, idxTo) => {\n      const filtered = dataset.filter(\n        (data) => String(data[attFrom]) === String(from.name) && String(data[attTo]) === String(to.name),\n      )\n      return {\n        source: idxFrom,\n        target: idxTo + toIdxStart,\n        names: [from.name, to.name],\n        catAttributesCounts: catAttributeOptions.length\n          ? catAttributeOptions.map(\n              (value) => filtered.filter((data) => String(data[categoryAttribute!]) === value).length,\n            )\n          : undefined,\n        selected: catAttributeOptions.length\n          ? catAttributeOptions.map(\n              (value) => filtered.filter((data) => data.selected && String(data[categoryAttribute!]) === value).length,\n            )\n          : [filtered.filter((data) => data.selected).length],\n        value: filtered.length,\n      }\n    }),\n  )\n\n  return { nodes, links }\n}\n","import { Air, AirportShuttle, DirectionsBoat, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport titanicJson from '../../../test-data/titanicData.json'\nimport parallelCarsJson from '../../../test-data/parallelCarsData.json'\n\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flowers = `flower`,\n  birds = `bird`,\n  cars = `car`,\n  titanic = `titanic`,\n  parallelCars = `parallelCars`,\n}\n\nexport const SAMPLE_DATASET_OPTIONS = Object.values(SampleDataset)\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flowers]: <LocalFlorist />,\n  [SampleDataset.birds]: <Air />,\n  [SampleDataset.cars]: <DirectionsCar />,\n  [SampleDataset.titanic]: <DirectionsBoat />,\n  [SampleDataset.parallelCars]: <AirportShuttle />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flowers]: flowerJson,\n  [SampleDataset.birds]: birdJson,\n  [SampleDataset.cars]: carJson,\n  [SampleDataset.titanic]: titanicJson,\n  [SampleDataset.parallelCars]: parallelCarsJson,\n}\n","import { Dimensions } from '../../types/basic/dimensions'\nimport { GridLayoutItem } from '../../types/views/Grid'\nimport { ViewType } from '../views-general/ViewType'\n\nexport const GRID_HEADER_HEIGHT = 30\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 0,\n  height: 0,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n  [ViewType.ParallelSetsBundled]: {\n    minW: 4,\n    minH: 8,\n  },\n}\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n  [ViewType.ParallelSetsBundled]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n}\n\nexport const DEFAULT_GRID_LAYOUT_QUANTITATIVE: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n\nexport const DEFAULT_GRID_LAYOUT_NOMINAL: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 25,\n    h: 20,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n\nexport const LAYOUT_OPT_2: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 30,\n    h: 16,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 30,\n    h: 14,\n    x: 17,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n\nexport const LAYOUT_OPT_3: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 16,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 20,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 11,\n    h: 10,\n    x: 14,\n    y: 20,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 14,\n    h: 14,\n    x: 0,\n    y: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\nexport const LAYOUT_OPT_4: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 15,\n    x: 11,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.ScatterPlotGlyphs,\n    w: 14,\n    h: 15,\n    x: 11,\n    y: 15,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n]\n\nexport const LAYOUT_OPTIONS = [\n  DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n  DEFAULT_GRID_LAYOUT_NOMINAL,\n  LAYOUT_OPT_2,\n  LAYOUT_OPT_3,\n  LAYOUT_OPT_4,\n]\n","export enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFormat = `unsupportedFileFormat`,\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataNullOptionType } from '../constants/data/data'\nimport { DataLoadError } from '../constants/data/DataLoadError'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  labelBrushColor: `Brush color`,\n  addViewDialogTitle: `Add a view`,\n  labelDialogTitle: `Set predefined layout`,\n  noOption: `All view options are currently displayed.`,\n  saveText: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    save: `Save`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n  filter: `Filter`,\n}\n\nexport const FILE_READER_TEXT = {\n  button: `Select a file`,\n  sampleDataLabel: `Try it on the sample data`,\n  sampleDataDialogTitle: `Select sample dataset`,\n  sampleDataDialogText: {\n    [SampleDataset.flowers]: `Flower dataset`,\n    [SampleDataset.birds]: `Bird dataset`,\n    [SampleDataset.cars]: `Car dataset`,\n    [SampleDataset.titanic]: `Titanic dataset`,\n    [SampleDataset.parallelCars]: `Car parallel dataset`,\n  },\n  alertDialog: {\n    [DataLoadError.unsupportedFile]: {\n      title: `File type not supported`,\n      description: `This file type is not supported. Use JSON or CSV file.`,\n    },\n    [DataLoadError.unsupportedFormat]: {\n      title: `File format not supported`,\n      description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n    },\n    confirm: `OK`,\n  },\n  nullDialog: {\n    title: `Data with null values occurred!`,\n    description: `This application provides only basic operations for modifying null data values. For better processing, use applications designed for this purpose.`,\n    confirm: `Confirm`,\n    optionsText: {\n      [DataNullOptionType.leave]: `Leave as is`,\n      [DataNullOptionType.filter]: `Filter`,\n      [DataNullOptionType.change]: `Change all`,\n    },\n    optionsDescription: {\n      [DataNullOptionType.leave]: `This option leaves the data as is. On numeric scales, null values will be cast to 0, in the table they will be displayed as null, for categorical data a separate category will be created.`,\n      [DataNullOptionType.filter]: `This option filters out all data with null values. These data will not be considered further in the application.`,\n      [DataNullOptionType.change]: `This option replaces all null values with the value entered below.`,\n    },\n    changeTo: `Change to`,\n    attribute: `Attribute:`,\n  },\n}\n\nexport const LAYOUT_DIALOG_TEXT = {\n  title: `Set a layout`,\n  alt: `Layout `,\n}\n","export enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/stringGetters'\n\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  middle: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n  right: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n}\n","/**\n * mui types\n */\nexport const COMPONENT_TYPE = {\n  image: `img` as `img`,\n  label: `label` as `label`,\n}\n\nexport const BUTTON_VARIANT = {\n  text: `text` as `text`,\n  outlined: `outlined` as `outlined`,\n  contained: `contained` as `contained`,\n}\n\nexport const DRAWER_VARIANT = {\n  permanent: `permanent` as `permanent`,\n  persistent: `persistent` as `persistent`,\n  temporary: `temporary` as `temporary`,\n}\n\nexport const ANCHOR = {\n  left: `left` as `left`,\n  top: `top` as `top`,\n  right: `right` as `right`,\n  bottom: `bottom` as `bottom`,\n}\n\nexport const CELL_PADDING = {\n  checkbox: `checkbox` as `checkbox`,\n  none: `none` as `none`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonHoverBackground,\n      },\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { BUTTON_VARIANT } from '../../../../../constants/mui'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant={BUTTON_VARIANT.contained} onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { InputBaseComponentProps } from '@mui/material/InputBase'\n\nexport const HTML = {\n  newLine: `<br/>`,\n}\n\nexport const INPUT_TYPE = {\n  color: `color`,\n  number: `number`,\n  file: `file`,\n}\n\nexport const INPUT_PROPS: Record<string, InputBaseComponentProps> = {\n  positiveNumber: { inputMode: `numeric`, min: 0 },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS, HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n\n  padding: isHighlighted ? px(8, 2) : 0,\n  borderRadius: px(10),\n})\n\nexport const fileReaderStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 6, 0, 2),\n    bgcolor: BUTTON_COLORS.buttonOnBackground,\n    color: BUTTON_COLORS.fontOn,\n    '&:hover': {\n      bgcolor: BUTTON_COLORS.buttonHoverBackground,\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, important, px } from '../../../helpers/stringGetters'\n\nimport { SITE_COLORS, ERROR_COLORS, BUTTON_COLORS, CARD_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  description: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n  innerContent: {\n    padding: px(0, 40, 10),\n  },\n  contentBox: {\n    height: px(120),\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  text: {\n    color: SITE_COLORS.font,\n  },\n  toggleDialogGroup: {\n    width: `100%`,\n    marginBottom: px(5),\n    display: `flex`,\n  },\n  toggleDialogButton: {\n    flexGrow: 1,\n    padding: px(6),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonDialogBackground,\n      color: BUTTON_COLORS.buttonDialogFont,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonDialogHoverBackground,\n      },\n    },\n  },\n  button: {\n    margin: px(0, 20, 20),\n  },\n  attHeader: {\n    fontSize: px(16),\n    fontWeight: `bold`,\n    paddingBottom: px(4),\n    color: SITE_COLORS.font,\n  },\n  textInput: {\n    minWidth: `95%`,\n    alignSelf: `center`,\n    '&.MuiFormControl-root': {\n      margin: px(20, 6, 6),\n    },\n    '& input': {\n      padding: px(8, 10, 6),\n    },\n  },\n  card: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    minWidth: px(400),\n    border: border(1, CARD_COLORS.border),\n    margin: px(2),\n    bgcolor: CARD_COLORS.background,\n    '&:hover': {\n      bgcolor: important(CARD_COLORS.backgroundHover),\n      '& img': {\n        opacity: 0.6,\n      },\n    },\n  },\n  image: {\n    width: 220,\n    height: 85,\n    borderRadius: px(2),\n  },\n  cardContent: {\n    padding: px(10),\n  },\n  itemText: {\n    fontSize: px(10),\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.description}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  TextField,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material'\n\nimport { SelectableDataType } from '../../../../../types/data/data'\n\nimport { getLabelledAttribute } from '../../../../../helpers/stringGetters'\n\nimport { DATA_NULL_OPTION_TYPES, DataNullOptionType } from '../../../../../constants/data/data'\nimport { BUTTON_VARIANT } from '../../../../../constants/mui'\n\nimport { FILE_READER_TEXT } from '../../../../../text/siteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface NullDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  nullContainingAttributes: Array<keyof SelectableDataType>\n  dataset: Array<SelectableDataType>\n  setDataset: (dataset: Array<SelectableDataType>) => void\n}\n\nexport const NullDialog: VoidFunctionComponent<NullDialogProps> = ({\n  isOpen,\n  onClose,\n  nullContainingAttributes,\n  dataset,\n  setDataset,\n}) => {\n  const [optionsChosen, setOptionsChosen] = useState<Record<keyof SelectableDataType, DataNullOptionType>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, DataNullOptionType.leave])),\n  )\n  const [replaceValue, setReplaceValue] = useState<Record<keyof SelectableDataType, string>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])),\n  )\n\n  useEffect(() => {\n    setOptionsChosen(Object.fromEntries(nullContainingAttributes.map((att) => [att, DataNullOptionType.leave])))\n    setReplaceValue(Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])))\n  }, [nullContainingAttributes])\n\n  const getFixedDataset = useCallback(\n    (dataset: SelectableDataType[], attribute: keyof SelectableDataType) => {\n      switch (optionsChosen[attribute]) {\n        case DataNullOptionType.filter:\n          return dataset.filter((data) => data[attribute] !== null)\n        case DataNullOptionType.change: {\n          const newValue = !isNaN(Number(replaceValue[attribute]))\n            ? Number(replaceValue[attribute])\n            : replaceValue[attribute]\n          return dataset.map((data) => ({\n            ...data,\n            [attribute]: data[attribute] === null ? newValue : data[attribute],\n          }))\n        }\n        case DataNullOptionType.leave:\n        default:\n          return dataset\n      }\n    },\n    [optionsChosen, replaceValue],\n  )\n\n  const handleNullDialogConfirm = useCallback(() => {\n    let datasetFixed: SelectableDataType[] = dataset\n    nullContainingAttributes.forEach((attribute) => {\n      datasetFixed = getFixedDataset(datasetFixed, attribute)\n    })\n    setDataset(datasetFixed)\n  }, [dataset, getFixedDataset, nullContainingAttributes, setDataset])\n\n  const handleToggleChange = useCallback(\n    (value: DataNullOptionType, attribute: keyof SelectableDataType) =>\n      setOptionsChosen((prev) => ({\n        ...prev,\n        [attribute]: value,\n      })),\n    [],\n  )\n  const handleReplaceChange = useCallback(\n    (value: string, attribute: keyof SelectableDataType) =>\n      setReplaceValue((prev) => ({\n        ...prev,\n        [attribute]: value,\n      })),\n    [],\n  )\n\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{FILE_READER_TEXT.nullDialog.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        <DialogContentText sx={dialogStyle.description}>{FILE_READER_TEXT.nullDialog.description}</DialogContentText>\n        {nullContainingAttributes.map((attribute) => {\n          const option = optionsChosen[attribute]\n          return (\n            <Box key={attribute} sx={dialogStyle.innerContent}>\n              <Typography sx={dialogStyle.attHeader}>\n                {getLabelledAttribute(FILE_READER_TEXT.nullDialog.attribute, attribute)}\n              </Typography>\n              <ToggleButtonGroup\n                sx={dialogStyle.toggleDialogGroup}\n                value={option}\n                exclusive\n                onChange={(e, value) => handleToggleChange(value, attribute)}\n              >\n                {DATA_NULL_OPTION_TYPES.map((optType, idx) => (\n                  <ToggleButton sx={dialogStyle.toggleDialogButton} value={optType} key={idx}>\n                    {FILE_READER_TEXT.nullDialog.optionsText[optType]}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n              <Box sx={dialogStyle.contentBox}>\n                <Typography sx={dialogStyle.text}>{FILE_READER_TEXT.nullDialog.optionsDescription[option]}</Typography>\n                {option === DataNullOptionType.change && (\n                  <TextField\n                    label={FILE_READER_TEXT.nullDialog.changeTo}\n                    sx={dialogStyle.textInput}\n                    defaultValue={replaceValue[attribute]}\n                    onChange={(e) => handleReplaceChange(e.target.value, attribute)}\n                  />\n                )}\n              </Box>\n            </Box>\n          )\n        })}\n      </DialogContent>\n      <DialogActions>\n        <Button variant={BUTTON_VARIANT.contained} onClick={handleNullDialogConfirm} sx={dialogStyle.button} autoFocus>\n          {FILE_READER_TEXT.nullDialog.confirm}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, ChangeEvent } from 'react'\nimport { Box, Button } from '@mui/material'\nimport { Add, AutoGraph } from '@mui/icons-material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\nimport { getAttributeKeys } from '../../../../../helpers/data/data'\n\nimport { AcceptableFileTypes } from '../../../../../constants/data/data'\nimport { DataLoadState } from '../../../../../constants/data/DataLoadState'\nimport {\n  SAMPLE_DATASET_OPTIONS,\n  SampleDataset,\n  sampleDatasetIcons,\n  sampleDatasets,\n} from '../../../../../constants/data/sampleDataset'\nimport { BUTTON_VARIANT, COMPONENT_TYPE } from '../../../../../constants/mui'\nimport { INPUT_TYPE } from '../../../../../constants/others'\nimport { DataLoadError } from '../../../../../constants/data/DataLoadError'\n\nimport { FILE_READER_TEXT } from '../../../../../text/siteText'\n\nimport {\n  fileReaderStyle,\n  getFileReaderBoxStyle,\n} from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\n\nimport { ClickableButton } from '../buttons/ClickableButton'\nimport { NullDialog } from './NullDialog'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: Array<DataType>): Array<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nconst FILE_INPUT_ID = `FILE_INPUT`\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isNullDialogOpen, setIsNullDialogOpen] = useState(false)\n  const [nullContainingAttributes, setNullContainingAttributes] = useState<Array<keyof SelectableDataType>>([])\n  const [rawDataset, setRawDataset] = useState<Array<SelectableDataType>>([])\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const handleListItemClick = useCallback(\n    (optionKey: SampleDataset) => {\n      setIsSampleDataDialogOpen(false)\n      const dataset = sampleDatasets[optionKey]\n      setDataset(addSelected(dataset))\n      setDataLoadState(DataLoadState.Loaded)\n    },\n    [setDataLoadState, setDataset],\n  )\n\n  const closeDialog = useCallback(() => {\n    setIsNullDialogOpen(false)\n    setRawDataset([])\n    setNullContainingAttributes([])\n  }, [])\n\n  const getDatasetFromFile = useCallback(\n    async (fileType: AcceptableFileTypes | string, selectedFile: File): Promise<DataType[] | null> => {\n      switch (fileType) {\n        case AcceptableFileTypes.json: {\n          const text = await selectedFile.text()\n          return JSON.parse(text)\n        }\n        case AcceptableFileTypes.csv: {\n          const textCsv = await selectedFile.text()\n          return CsvParse(textCsv)\n        }\n        default: {\n          return null\n        }\n      }\n    },\n    [],\n  )\n\n  const handleFileChange = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files?.length) {\n        setDataLoadState(DataLoadState.Loading)\n        const selectedFile = e.target.files[0]\n        const fileType = selectedFile.type\n        const dataset = await getDatasetFromFile(fileType, selectedFile)\n\n        if (dataset === null || !isArrayOfDataType(dataset)) {\n          const dataLoadErrorType = dataset === null ? DataLoadError.unsupportedFile : DataLoadError.unsupportedFormat\n          setDataLoadState(DataLoadState.NoData)\n          setAlertDialogText(FILE_READER_TEXT.alertDialog[dataLoadErrorType])\n          setIsAlertDialogOpen(true)\n          setDataset(null)\n          return\n        }\n\n        const selectableDataset = addSelected(dataset)\n        const nullContainingAttributes = getAttributeKeys(selectableDataset).filter((att) =>\n          dataset.some((data) => data[att] === null),\n        )\n        if (nullContainingAttributes.length) {\n          setNullContainingAttributes(nullContainingAttributes)\n          setRawDataset(selectableDataset)\n          setIsNullDialogOpen(true)\n          const fileEl = document.getElementById(FILE_INPUT_ID) as unknown as { value: null }\n          fileEl.value = null\n          return\n        }\n        setDataset(selectableDataset)\n        setDataLoadState(DataLoadState.Loaded)\n      }\n    },\n    [getDatasetFromFile, setDataLoadState, setDataset],\n  )\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={FILE_READER_TEXT.sampleDataDialogTitle}\n        options={SAMPLE_DATASET_OPTIONS.map((key) => ({\n          key,\n          label: FILE_READER_TEXT.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={FILE_READER_TEXT.alertDialog.confirm}\n        alert={true}\n      />\n      <NullDialog\n        isOpen={isNullDialogOpen}\n        onClose={() => {\n          setDataLoadState(DataLoadState.NoData)\n          closeDialog()\n        }}\n        nullContainingAttributes={nullContainingAttributes}\n        dataset={rawDataset}\n        setDataset={(dataset) => {\n          setDataset(dataset)\n          setDataLoadState(DataLoadState.Loaded)\n          closeDialog()\n        }}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={FILE_READER_TEXT.sampleDataLabel}\n        />\n        <Button sx={fileReaderStyle.button} variant={BUTTON_VARIANT.contained} component={COMPONENT_TYPE.label}>\n          <Add />\n          {FILE_READER_TEXT.button}\n          <input type={INPUT_TYPE.file} hidden id={FILE_INPUT_ID} onChange={handleFileChange} />\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction, useCallback } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\nconst ON_VALUE = `on`\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = useCallback(\n    (event: MouseEvent<HTMLElement>, checked: string[]) => {\n      if (checked.length && checked[0] === ON_VALUE) {\n        return setValue(true)\n      }\n      return setValue(false)\n    },\n    [setValue],\n  )\n  return (\n    <ToggleButtonGroup value={value ? [ON_VALUE] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={ON_VALUE} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    padding: px(4),\n    color: BUTTON_COLORS.buttonOnBackground,\n    '& svg': {\n      fontSize: px(30),\n    },\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { IconButton } from '@mui/material'\nimport { Settings } from '@mui/icons-material'\n\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <IconButton disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Settings />\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const getColorInputStyle = (disabled?: boolean): SxProps => ({\n  display: `flex`,\n  '& .MuiSvgIcon-root': {\n    color: disabled ? BUTTON_COLORS.fontDisabled : BUTTON_COLORS.buttonOnBackground,\n  },\n})\n\nexport const getColorInputBoxStyle = (color: string, disabled?: boolean): SxProps => ({\n  bgcolor: disabled ? BUTTON_COLORS.fontDisabled : color,\n  minWidth: px(25),\n  minHeight: px(25),\n  borderRadius: px(5),\n  ml: px(2),\n  border: border(1, disabled ? BUTTON_COLORS.buttonDisableBackground : BUTTON_COLORS.colorBorder),\n})\n\nexport const colorInputStyle: Record<string, SxProps> = {\n  inputBox: {\n    position: `relative`,\n    '& input': {\n      width: `100%`,\n      opacity: 0,\n      position: `absolute`,\n      left: 0,\n    },\n  },\n}\n","import { useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Box, Tooltip } from '@mui/material'\n\nimport { useDebounce } from '../../../../../helpers/react/useDebounce'\n\nimport { COLOR_DEBOUNCE } from '../../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../../constants/others'\n\nimport {\n  colorInputStyle,\n  getColorInputBoxStyle,\n  getColorInputStyle,\n} from '../../../../../components-style/content/top-toolbar/items/buttons/colorButtonStyle'\n\nexport interface ColorButtonProps {\n  color: string\n  handleSetColor: (color: string) => void\n  tooltip: string\n  disabled?: boolean\n  icon: JSX.Element\n}\n\nexport const ColorButton: VoidFunctionComponent<ColorButtonProps> = ({\n  color,\n  handleSetColor,\n  tooltip,\n  disabled,\n  icon,\n}) => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n  useEffect(() => {\n    handleSetColor(debouncedColor)\n  }, [debouncedColor, handleSetColor])\n\n  return (\n    <Tooltip title={tooltip} disableHoverListener={disabled}>\n      <Box sx={colorInputStyle.inputBox}>\n        <input\n          disabled={disabled}\n          type={INPUT_TYPE.color}\n          value={color}\n          onChange={(e) => setCurrentColor(e.target.value)}\n        />\n        <Box sx={getColorInputStyle(disabled)}>\n          {icon}\n          <Box sx={getColorInputBoxStyle(color, disabled)} />\n        </Box>\n      </Box>\n    </Tooltip>\n  )\n}\n","export const TEXT_INPUT_DEBOUNCE = 400\n\nexport const BRUSH_DEBOUNCE = 10\n\nexport const COLOR_DEBOUNCE = 60\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box } from '@mui/material'\nimport { AddCircle, AutoFixOff, Brush, Dashboard, Info, SkipNext } from '@mui/icons-material'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\nimport { ColorButton } from './items/buttons/ColorButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: () => void\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsLayoutDialogOpen: Dispatch<SetStateAction<boolean>>\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  removeLayout: () => void\n\n  brushColor: string\n  setBrushColor: Dispatch<SetStateAction<string>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n  setIsLayoutDialogOpen,\n  removeLayout,\n  brushColor,\n  setBrushColor,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelAddView}\n      />\n      <ClickableButton\n        onClick={() => {\n          setIsLayoutDialogOpen(true)\n          removeLayout()\n        }}\n        icon={<Dashboard />}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDialogTitle}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ToggleButtonSingle\n        icon={<Info />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.middle}>\n      <ColorButton\n        color={brushColor}\n        handleSetColor={(color) => setBrushColor(color)}\n        icon={<Brush />}\n        disabled={isToolsDisabled}\n        tooltip={TOP_TOOLBAR_TEXT.labelBrushColor}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<AutoFixOff />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Constants to work with svg D3.js.\n */\nexport const SVG = {\n  elements: {\n    svg: `svg` as `svg`,\n    g: `g` as `g`,\n    circle: `circle` as `circle`,\n    rect: `rect` as `rect`,\n    path: `path` as `path`,\n    text: `text` as `text`,\n    div: `div` as `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    stroke: `stroke`,\n    strokeWidth: `stroke-width`,\n    textAnchor: `text-anchor`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n    start: `start`,\n    end: `end`,\n    middle: `middle`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from '../stringGetters'\n\nexport const setDisplay = (isVisible: boolean | undefined, displayClass: string): void => {\n  if (isVisible) {\n    selectAll(getClass(displayClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(displayClass)).style(SVG.style.display, SVG.values.none)\n}\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nexport const MENU_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER_TEXT = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.DataTable]: `Data Table`,\n  [ViewType.ParallelSetsBundled]: `Parallel Sets (bundled layout)`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { TOOLTIP } from '../../../constants/views-general/tooltip'\n\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","export const DATA_DRAWER_TEXT = {\n  description: `This application uses React and D3.js.`,\n  openSource: `Source code is available at`,\n  github: `Github`,\n}\n\nexport const GITHUB_LINK = `https://github.com/stetizu1/table-data-visualization`\n","import { SxProps } from '@mui/system'\n\nimport { border, calc, px } from '../../../helpers/stringGetters'\n\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const dataDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  fill: {\n    flexGrow: 1,\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n  footer: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n  },\n  githubIcon: {\n    paddingRight: px(6),\n    fontSize: px(18),\n  },\n  text: {\n    color: DATA_DRAWER_COLORS.icon,\n    fontSize: px(9),\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `center`,\n  },\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [10, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/stringGetters'\n\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const dataDrawerMenuStyle: Record<string, SxProps> = {\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<Opt extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: Opt) => Partial<Opt>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <Opt extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<Opt>): JSX.Element => {\n  const handleCheckboxChange = useCallback(\n    (eventChecked: boolean, key: keyof SelectableDataType) => {\n      const newChecked = { ...checked, [key]: eventChecked }\n      setChecked(newChecked)\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        const newSettings = getNewSettings(newChecked, prevSettings)\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            ...newSettings,\n          },\n        }\n      })\n    },\n    [checked, getNewSettings, handleChangeSettings, setChecked, setSettings, viewType],\n  )\n  const handleMove = useCallback(\n    (newAttributesKeys: Array<keyof SelectableDataType>) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setAttributesKeys(newAttributesKeys)\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n          },\n        }\n      })\n    },\n    [checked, handleChangeSettings, setAttributesKeys, setSettings, viewType],\n  )\n\n  const onUpButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  const onDownButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = useCallback(\n    (categoryAttribute: keyof SelectableDataType | -1) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n          },\n        }\n      })\n    },\n    [setSettings, viewType],\n  )\n\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const menuTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n    padding: px(6, 5, 3),\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_PROPS, INPUT_TYPE } from '../../../../constants/others'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  handleChangeSettings?: () => void\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({\n  margins,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentMargins, setCurrentMargins] = useState<MarginArray>(margins)\n  const debouncedMargins = useDebounce(currentMargins, TEXT_INPUT_DEBOUNCE)\n\n  const handleMarginChange = useCallback((newMargin: number, idx: number) => {\n    setCurrentMargins((oldMargins) => {\n      const newMargins: MarginArray = [...oldMargins]\n      newMargins[idx] = newMargin\n      return newMargins\n    })\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: debouncedMargins,\n        },\n      }\n    })\n  }, [debouncedMargins, handleChangeSettings, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { InputBaseComponentProps } from '@mui/material/InputBase'\n\nimport { INPUT_PROPS } from '../../constants/others'\n\nexport const getInputPropsPositiveNumber = ({ min, max }: { min?: number; max?: number }): InputBaseComponentProps => {\n  const minVal = min ? { min } : {}\n  const maxVal = max ? { max } : {}\n  return {\n    ...INPUT_PROPS.positiveNumber,\n    ...minVal,\n    ...maxVal,\n  }\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { getInputPropsPositiveNumber } from '../../../../helpers/basic/getInputPropsPositiveNumber'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacities: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({\n  header,\n  opacities,\n  setSettings,\n  viewType,\n}) => {\n  const [currentOpacities, setCurrentOpacities] = useState<Opacity>(opacities)\n  const debouncedOpacities = useDebounce(currentOpacities, TEXT_INPUT_DEBOUNCE)\n\n  const handleOpacityChange = useCallback((newOpacity: number, idx: number) => {\n    setCurrentOpacities((oldOpacities) => {\n      const newOpacities: Opacity = [...oldOpacities]\n      newOpacities[idx] = newOpacity\n      return newOpacities\n    })\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: debouncedOpacities,\n        },\n      }\n    })\n  }, [debouncedOpacities, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type={INPUT_TYPE.number}\n        defaultValue={opacities[0]}\n        sx={numberInputStyles.textField}\n        inputProps={getInputPropsPositiveNumber({ max: 100 })}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type={INPUT_TYPE.number}\n          defaultValue={opacities[1]}\n          sx={numberInputStyles.textField}\n          inputProps={getInputPropsPositiveNumber({ max: 100 })}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type={INPUT_TYPE.number}\n          defaultValue={opacities[2]}\n          sx={numberInputStyles.textField}\n          inputProps={getInputPropsPositiveNumber({ max: 100 })}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { getInputPropsPositiveNumber } from '../../../../helpers/basic/getInputPropsPositiveNumber'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nexport interface NumberInputProps<Opt> {\n  viewType: ViewType\n  label: string\n  valueKey: keyof Opt\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <Opt,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<Opt>): JSX.Element => {\n  const [currentValue, setCurrentValue] = useState(value)\n  const debouncedValue = useDebounce(currentValue, TEXT_INPUT_DEBOUNCE)\n\n  const handleChangeValue = useCallback((newValue: number) => {\n    setCurrentValue(newValue)\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: debouncedValue,\n        },\n      }\n    })\n  }, [debouncedValue, setSettings, valueKey, viewType, handleChangeValue, handleChangeSettings])\n\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type={INPUT_TYPE.number}\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={getInputPropsPositiveNumber({ min, max })}\n        onChange={(e) => handleChangeValue(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const getPalettePickerColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useEffect, useCallback } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { PALETTE_PICKER_TEXT } from '../../../../text/views-and-menus/common'\n\nimport {\n  getPalettePickerColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({\n  colors,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentColors, setCurrentColors] = useState<ColorArray>(colors)\n  const debouncedColors = useDebounce(currentColors, COLOR_DEBOUNCE)\n\n  const handleSetColor = useCallback((newColor: string, idx: number) => {\n    if (newColor) {\n      setCurrentColors((oldColors) => {\n        const newColors: ColorArray = [...oldColors]\n        newColors[idx] = newColor\n        return newColors\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          colorCategory: debouncedColors,\n        },\n      }\n    })\n  }, [debouncedColors, setSettings, viewType, handleChangeSettings])\n\n  const getInput = useCallback(\n    (idx: number) => (\n      <Box sx={palettePickerStyle.col} key={idx}>\n        <label>{PALETTE_PICKER_TEXT.categoriesLabel[idx]}</label>\n        <Box sx={getPalettePickerColorInputStyle(colors, idx)}>\n          <input type={INPUT_TYPE.color} value={colors[idx]} onChange={(e) => handleSetColor(e.target.value, idx)} />\n        </Box>\n      </Box>\n    ),\n    [colors, handleSetColor],\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER_TEXT.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ParallelCoordinates),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacities={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `Scatter plot cannot be displayed, window is too small. Change the size, number of attributes displayed or margin to display scatter plot matrix`,\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotMatrix),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <Typography sx={menuTextStyle.text}>{SCATTER_PLOT_MATRIX_MENU_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacities={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\n\nimport { SortType } from '../sort/SortType'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","export enum ParallelSetsBrushingType {\n  top = `top`,\n  overlay = `overlay`,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  sort: `Sort...`,\n  ...MENU_TEXT,\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = useCallback(\n    (newValue: keyof SelectableDataType) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [handleChangeSettings, setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { important, px } from '../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  box: {\n    marginTop: important(0),\n  },\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = useCallback(\n    (newValue: T) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <Box sx={toggleButtonsStyle.box}>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SortType } from '../../../../constants/sort/SortType'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\n\nexport const GlyphsMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType, prevSettings: GlyphsSettings): Partial<GlyphsSettings> => {\n      const displayAttributes = getCurrentDisplayAttributes(newChecked)\n      const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n      const sortAttribute = newChecked[prevSettings.sortAttribute]\n        ? prevSettings.sortAttribute\n        : newSortableAttributes?.[0]\n      return { displayAttributes, sortAttribute }\n    },\n    [getCurrentDisplayAttributes, quantitativeAttributesKeys],\n  )\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <Typography sx={menuTextStyle.text}>{GLYPHS_MENU_TEXT.sort}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacities={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { SortType } from '../../../constants/sort/SortType'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 20, 30],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  glyphSizeKey,\n  ScatterPlotGlyphsSettings,\n  xAttributeKey,\n  yAttributeKey,\n} from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { SCATTER_PLOT_GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createScatterPlotGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<ScatterPlotGlyphsSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotGlyphs),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_MENU_TEXT.opacity}\n                  opacities={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\n\nimport { DEFAULT_BRUSH_BG_COLOR_TABLE, DEFAULT_BRUSH_FONT_COLOR_TABLE } from '../views-general/defaultSettableColors'\n\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\nexport const DATA_TABLE_DEFAULT: Pick<\n  DataTableSettings,\n  `rowHeight` | `selectedBackgroundColor` | `selectedFontColor`\n> = {\n  rowHeight: 45,\n  selectedBackgroundColor: DEFAULT_BRUSH_BG_COLOR_TABLE,\n  selectedFontColor: DEFAULT_BRUSH_FONT_COLOR_TABLE,\n}\n","export const DEFAULT_BRUSH_COLOR = `#830606`\nexport const DEFAULT_BRUSH_BG_COLOR_TABLE = `#ffcfcf`\nexport const DEFAULT_BRUSH_FONT_COLOR_TABLE = `#111111`\nexport const DEFAULT_FONT_COLOR_PARALLEL_SETS = `#252525`\n","import { ViewType } from '../../constants/views-general/ViewType'\nimport { SortType } from '../../constants/sort/SortType'\n\nimport { MENU_BASE_TEXT, VIEW_NAMES } from './common'\n\nexport const DATA_TABLE_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes him not valid. Please choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  selectedBackgroundColor: `Selected background color`,\n  selectedFontColor: `Selected font color`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascending`,\n  [SortType.desc]: `Sort descending`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from the menu.`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const getColorPickerInputStyle = (color: string): SxProps => ({\n  bgcolor: color,\n  width: px(25),\n  borderRadius: px(5),\n  '& input': {\n    width: `100%`,\n    height: px(25),\n    opacity: 0,\n  },\n})\n\nexport const colorPickerStyle: Record<string, SxProps> = {\n  picker: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `center`,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport {\n  colorPickerStyle,\n  getColorPickerInputStyle,\n} from '../../../../components-style/content/data-drawer/items/colorPickerStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface ColorPickerProps<Opt> {\n  viewType: ViewType\n  color: string\n  settingsKey: keyof Opt\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const ColorPicker = <Opt,>({\n  viewType,\n  color,\n  settingsKey,\n  setSettings,\n  label,\n}: ColorPickerProps<Opt>): JSX.Element => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n\n  const handleChangeColor = useCallback((newColor: string) => {\n    if (newColor) {\n      setCurrentColor(newColor)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: debouncedColor,\n        },\n      }\n    })\n  }, [debouncedColor, setSettings, settingsKey, viewType])\n  return (\n    <Box sx={colorPickerStyle.picker}>\n      <Typography sx={menuTextStyle.text}>{label}</Typography>\n      <Box sx={getColorPickerInputStyle(color)}>\n        <input type={INPUT_TYPE.color} value={color} onChange={(e) => handleChangeColor(e.target.value)} />\n      </Box>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  DataTableSettings,\n  rowHeightKey,\n  selectedBackgroundColorKey,\n  selectedFontColorKey,\n} from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_MENU_TEXT } from '../../../../text/views-and-menus/dataTable'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const DataTableMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => attributesKeys.filter((key) => currChecked[key]),\n    [attributesKeys],\n  )\n\n  const createDataTableMenu = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{DATA_TABLE_MENU_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  viewType={viewType}\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.rowHeight}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedBackgroundColor}\n                  settingsKey={selectedBackgroundColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedBackgroundColor}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedFontColor}\n                  settingsKey={selectedFontColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedFontColor}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{DATA_TABLE_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { VisualizationSettings } from './VisualizationSettings'\n\nexport const rowHeightKey = `rowHeight`\nexport const selectedBackgroundColorKey = `selectedBackgroundColor`\nexport const selectedFontColorKey = `selectedFontColor`\n\n/**\n * Settings for Data Table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n\n  /**\n   * Selected background color\n   */\n  [selectedBackgroundColorKey]: string\n\n  /**\n   * Selected font color\n   */\n  [selectedFontColorKey]: string\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { ParallelSetsBrushingType } from '../brushing-type/ParallelSetsBrushingType'\nimport { DEFAULT_FONT_COLOR_PARALLEL_SETS } from '../views-general/defaultSettableColors'\n\nexport const MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_SETS_BUNDLED_DEFAULT: Pick<\n  ParallelSetsBundledSettings,\n  `margins` | `opacity` | `colorCategory` | `tabWidth` | `tabSpacing` | `tabGap` | `brushingType` | `fontColor`\n> = {\n  margins: [5, 50, 10, 50],\n  opacity: [60, 70, 25],\n  colorCategory: schemeCategory10 as ColorArray,\n  tabWidth: 8,\n  tabSpacing: 3,\n  tabGap: 10,\n  brushingType: ParallelSetsBrushingType.top,\n  fontColor: DEFAULT_FONT_COLOR_PARALLEL_SETS,\n}\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseAction {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_SETS_BUNDLED_TEXT = {\n  unavailable: `Parallel sets plot cannot be displayed with a single attribute. To generate a parallel sets plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_SETS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelSetsBundled],\n  unavailable: `The parallel sets plot cannot be used while data has less than 2 nominal attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of connectors`,\n  tabWidth: `Width of the tabs`,\n  tabSpacing: `Spacing between tabs`,\n  tabGap: `Gap between tabs`,\n  brushing: `Brushing...`,\n  fontColor: `Inner font color`,\n  ...MENU_TEXT,\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  ParallelSetsBundledSettings,\n  brushingTypeKey,\n  fontColorKey,\n  tabGapKey,\n  tabSpacingKey,\n  tabWidthKey,\n} from '../../../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { getCategoryAttributesKeys, getDefaultNominalAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport {\n  MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT,\n  PARALLEL_SETS_BUNDLED_DEFAULT,\n} from '../../../../constants/views/parallelSetsBundled'\nimport { ParallelSetsBrushingType } from '../../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_MENU_TEXT } from '../../../../text/views-and-menus/parallelSetsBundled'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const ParallelSetsBundledMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.ParallelSetsBundled\n  const parallelSetsBundledSettings = settings[viewType]\n\n  const [nominalAttributesKeys, setNominalAttributesKeys] = useState(getCategoryAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultNominalAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => nominalAttributesKeys.filter((key) => currChecked[key]),\n    [nominalAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelSetsBundledMenu = useCallback(() => {\n    const newChecked = getDefaultNominalAttributesChecked(dataset)\n    const newCatKeys = getCategoryAttributesKeys(dataset)\n    setChecked(newChecked)\n    setNominalAttributesKeys(newCatKeys)\n    setSettings((prev) => {\n      const newParallelSetsBundled: ParallelSetsBundledSettings = {\n        displayAttributes: newCatKeys.filter((key) => newChecked[key]),\n        categoryAttribute: newCatKeys[0],\n        ...PARALLEL_SETS_BUNDLED_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelSetsBundled]: newParallelSetsBundled }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelSetsBundledMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (parallelSetsBundledSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_SETS_MENU_TEXT.header}</h1>\n        {nominalAttributesKeys.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={nominalAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_SETS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setNominalAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelSetsBundledSettings.categoryAttribute!}\n              attributesKeys={nominalAttributesKeys}\n              setSettings={setSettings}\n              label={PARALLEL_SETS_MENU_TEXT.category}\n            />\n            <Typography sx={menuTextStyle.text}>{PARALLEL_SETS_MENU_TEXT.brushing}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={parallelSetsBundledSettings.brushingType}\n              options={Object.values<ParallelSetsBrushingType>(ParallelSetsBrushingType)}\n              setSettings={setSettings}\n              settingsKey={brushingTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_SETS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelSetsBundledSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_MENU_TEXT.tabWidth}\n                  valueKey={tabWidthKey}\n                  value={parallelSetsBundledSettings.tabWidth}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_MENU_TEXT.tabSpacing}\n                  valueKey={tabSpacingKey}\n                  value={parallelSetsBundledSettings.tabSpacing}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_MENU_TEXT.tabGap}\n                  valueKey={tabGapKey}\n                  value={parallelSetsBundledSettings.tabGap}\n                  setSettings={setSettings}\n                />\n                <Divider />\n                <ColorPicker\n                  viewType={viewType}\n                  color={parallelSetsBundledSettings.fontColor}\n                  settingsKey={fontColorKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_SETS_MENU_TEXT.fontColor}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_SETS_MENU_TEXT.opacity}\n                  opacities={parallelSetsBundledSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelSetsBundledSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_SETS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ParallelSetsBrushingType } from '../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const tabWidthKey = `tabWidth`\nexport const tabSpacingKey = `tabSpacing`\nexport const tabGapKey = `tabGap`\nexport const brushingTypeKey = `brushingType`\nexport const fontColorKey = `fontColor`\n\n/**\n * Settings for Parallel Sets Bundled view\n */\nexport interface ParallelSetsBundledSettings extends ViewVisualizationSettings {\n  /**\n   * Brushing - displayed from top top or overlay\n   */\n  [brushingTypeKey]: ParallelSetsBrushingType\n\n  /**\n   * Width of a tab\n   */\n  [tabWidthKey]: number\n\n  /**\n   * Spacing of tabs\n   */\n  [tabSpacingKey]: number\n\n  /**\n   * Gap between tabs (vertically)\n   */\n  [tabGapKey]: number\n\n  /**\n   * Font color\n   */\n  [fontColorKey]: string\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useMemo } from 'react'\nimport { Box, Divider, Drawer, IconButton, Link, Typography } from '@mui/material'\nimport { ChevronRight, GitHub } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { ANCHOR, DRAWER_VARIANT } from '../../../constants/mui'\n\nimport { DATA_DRAWER_TEXT, GITHUB_LINK } from '../../../text/dataDrawerText'\n\nimport { dataDrawerStyle } from '../../../components-style/content/data-drawer/dataDrawerStyle'\n\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot-matrix/ScatterPlotMatrixMenu'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ScatterPlotGlyphsMenu } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsMenu'\nimport { DataTableMenu } from '../views/data-table/DataTableMenu'\nimport { ParallelSetsBundledMenu } from '../views/parallel-sets-bundeled/ParallelSetsBundledMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: () => void\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: VoidFunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const menus = useMemo(\n    () =>\n      views.map((view, idx) => {\n        switch (view) {\n          case ViewType.Glyphs:\n            return (\n              <GlyphsMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelCoordinates:\n            return (\n              <ParallelCoordinatesMenu\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotMatrix:\n            return (\n              <ScatterPlotMatrixMenu\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotGlyphs:\n            return (\n              <ScatterPlotGlyphsMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.DataTable:\n            return (\n              <DataTableMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelSetsBundled:\n            return (\n              <ParallelSetsBundledMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          default:\n            return null\n        }\n      }),\n    [cleanSelectedIfViewWasBrushing, dataset, setSettings, settings, views],\n  )\n  return (\n    <Drawer variant={DRAWER_VARIANT.persistent} anchor={ANCHOR.right} open={isOpen} sx={dataDrawerStyle.drawer}>\n      <Box sx={dataDrawerStyle.header}>\n        <IconButton onClick={close}>\n          <ChevronRight sx={dataDrawerStyle.chevron} />\n        </IconButton>\n      </Box>\n      <Divider />\n      <Box sx={dataDrawerStyle.menu}>{menus.map((menu) => menu)}</Box>\n      <Box sx={dataDrawerStyle.fill} />\n      <Box sx={dataDrawerStyle.footer}>\n        <Typography sx={dataDrawerStyle.text}>{DATA_DRAWER_TEXT.description}</Typography>\n        <Typography sx={dataDrawerStyle.text}>{DATA_DRAWER_TEXT.openSource}</Typography>\n        <Link href={GITHUB_LINK} sx={dataDrawerStyle.text}>\n          <GitHub sx={dataDrawerStyle.githubIcon} />\n          {DATA_DRAWER_TEXT.github}\n        </Link>\n      </Box>\n    </Drawer>\n  )\n}\n","export const PUBLIC_PATH = `/table-data-visualization/`\n\nexport const PUBLIC_IMAGE_PATH = PUBLIC_PATH + `images/`\n\nexport const LAYOUT_IMAGES = [`layout_0.png`, `layout_1.png`, `layout_2.png`, `layout_3.png`, `layout_4.png`].map(\n  (imgName) => PUBLIC_IMAGE_PATH + imgName,\n)\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Card, CardContent, CardMedia, Dialog, DialogContent, DialogTitle, Divider, Typography } from '@mui/material'\n\nimport { GridLayoutItem } from '../../../../../types/views/Grid'\n\nimport { otherCasesToWhitespaces } from '../../../../../helpers/data/formatText'\n\nimport { LAYOUT_OPTIONS } from '../../../../../constants/layout/layout'\nimport { LAYOUT_IMAGES } from '../../../../../constants/public-path'\nimport { COMPONENT_TYPE } from '../../../../../constants/mui'\n\nimport { LAYOUT_DIALOG_TEXT } from '../../../../../text/siteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface LayoutDialogProps {\n  isOpen: boolean\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  onClose: () => void\n  lastLayout: GridLayoutItem[] | null\n}\n\nexport const LayoutDialog: VoidFunctionComponent<LayoutDialogProps> = ({ isOpen, onClose, setLayout, lastLayout }) => {\n  const handleClose = () => {\n    setLayout(lastLayout)\n    onClose()\n  }\n  return (\n    <Dialog onClose={handleClose} open={isOpen}>\n      <DialogTitle>{LAYOUT_DIALOG_TEXT.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        {LAYOUT_OPTIONS.map((layoutItems, idx) => (\n          <Card\n            key={idx}\n            onClick={() => {\n              setLayout(layoutItems)\n              onClose()\n            }}\n            sx={dialogStyle.card}\n          >\n            <CardContent sx={dialogStyle.cardContent}>\n              {layoutItems.map((item) => (\n                <Typography sx={dialogStyle.itemText} key={item.i}>\n                  {otherCasesToWhitespaces(item.i)}\n                </Typography>\n              ))}\n            </CardContent>\n            <CardMedia\n              component={COMPONENT_TYPE.image}\n              sx={dialogStyle.image}\n              image={LAYOUT_IMAGES[idx]}\n              alt={LAYOUT_DIALOG_TEXT.alt + idx}\n            />\n          </Card>\n        ))}\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { GRID_HEADER_HEIGHT } from '../../../constants/layout/layout'\n\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  right: {\n    display: `flex`,\n    flexWrap: `nowrap`,\n    paddingLeft: px(5),\n  },\n  textBox: {\n    padding: px(0, 8),\n    display: `flex`,\n    whiteSpace: `nowrap`,\n    overflow: `hidden`,\n    textOverflow: `ellipsis`,\n  },\n  text: {\n    padding: px(0, 5),\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `center`,\n    fontSize: px(12),\n  },\n  textIcon: {\n    fontSize: px(14),\n    padding: px(4),\n  },\n  header: {\n    height: GRID_HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","import { ViewType } from '../views-general/ViewType'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n  [ViewType.ParallelSetsBundled]: `psbSvgId`,\n}\n\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n  [ViewType.ParallelSetsBundled]: `C_psbSvgId`,\n}\n\nexport const CONTAINER_EMPTY: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_E_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_E_spmSvgId`,\n  [ViewType.Glyphs]: `C_E_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_E_spgSvgId`,\n  [ViewType.DataTable]: `C_E_dataTableId`,\n  [ViewType.ParallelSetsBundled]: `C_E_psbSvgId`,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\nconst xmlnsSvg = `http://www.w3.org/2000/svg`\nconst preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\nconst options = { type: `image/svg+xml;charset=utf-8` }\nconst linkElement = `a`\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, xmlnsSvg)\n\n  const svgBlob = new Blob([preface, svgEl.outerHTML], options)\n  const svgUrl = URL.createObjectURL(svgBlob)\n\n  // create download link element, append, click and remove\n  const downloadLink = document.createElement(linkElement)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\ntype StyleNode = { sheet: CSSStyleSheet }\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n  const newStyleNodes = ([...document.querySelectorAll(`[data-emotion]`)] as unknown as Array<StyleNode>)\n    .flatMap(({ sheet }) => [...sheet.cssRules].map((rules) => rules.cssText))\n    .filter((sheet) => sheet.includes(`.${containerClass}`))\n    .map((sheet) => sheet.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n\nexport const getSaveIsDisabled = (viewType: ViewType): boolean =>\n  document.querySelector(`#${CONTAINER_EMPTY[viewType]}`) !== null &&\n  document.querySelector(`#${SAVE_ID[viewType]}`) === null\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../styles/colors'\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    margin: 0,\n    padding: 0,\n    minWidth: 0,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n  buttonActive: {\n    color: BUTTON_COLORS.buttonInlinedFontOn,\n    bgcolor: BUTTON_COLORS.buttonInlinedBgOn,\n    borderRadius: px(5),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { BUTTON_VARIANT } from '../../../../constants/mui'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant={BUTTON_VARIANT.contained} autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant={BUTTON_VARIANT.outlined}>\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useCallback, useState, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { getSaveIsDisabled, saveSvg } from '../../../helpers/d3/saveSvg'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { BUTTON_VARIANT } from '../../../constants/mui'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\n\nimport { inlineButtonStyles } from '../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from './dialogs/ConfirmationDialog'\n\nexport interface DataSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const DataSaveButton: VoidFunctionComponent<DataSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const openDialog = useCallback(() => setIsDialogOpen(true), [])\n  const closeDialog = useCallback(() => setIsDialogOpen(false), [])\n\n  const onConfirm = useCallback(() => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }, [viewType])\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={TOP_TOOLBAR_TEXT.saveText.header}\n        description={TOP_TOOLBAR_TEXT.saveText.description}\n        onConfirm={onConfirm}\n        onClose={closeDialog}\n        confirmText={TOP_TOOLBAR_TEXT.saveText.confirm}\n        cancelText={TOP_TOOLBAR_TEXT.saveText.cancel}\n      />\n      <Button\n        variant={BUTTON_VARIANT.text}\n        onClick={openDialog}\n        disabled={getSaveIsDisabled(viewType)}\n        sx={inlineButtonStyles.button}\n        aria-label={TOP_TOOLBAR_TEXT.saveText.save}\n      >\n        <Tooltip title={TOP_TOOLBAR_TEXT.saveText.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { px } from '../../helpers/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { Extent } from '../../types/d3-types'\n\nexport const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: Extent, cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { DataEach } from '../../types/d3-types'\n\n/**\n * y shift for parallel coordinates/sets axes labels\n */\nconst TEXT_Y_SHIFTS = { odd: 9, even: 19 }\n\nexport const TOGGLE_Y_SHIFT = Math.max(...Object.values(TEXT_Y_SHIFTS))\n\nexport const getTogglingYShift: DataEach<unknown, SVGTextElement, number> = (_, idx) =>\n  idx % 2 === 0 ? -TEXT_Y_SHIFTS.odd : -TEXT_Y_SHIFTS.even // index 0 is first, so odd\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nconst SINGLE = `1` // on constant only one (first) color is used\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(SINGLE)\n","/**\n * tooltip and it's actions\n */\nimport { select } from 'd3'\nimport { MouseEvent } from 'react'\nimport { OnMouseEvent } from '../../types/d3-types'\n\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../constants/views-general/tooltip'\nimport { SVG } from '../../constants/svg'\nimport { HTML } from '../../constants/others'\n\nimport { getClass, px } from '../stringGetters'\n\nexport const onMouseOverTooltip =\n  <T>(stringFunction: (data: T) => string[]): OnMouseEvent<T> =>\n  ({ clientX, clientY }: MouseEvent, data: T): void => {\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n    tooltip\n      .html(stringFunction(data).join(HTML.newLine))\n      .style(SVG.style.left, px(clientX))\n      .style(SVG.style.top, px(clientY))\n  }\n\nexport const onMouseOutTooltip = (): null => {\n  select(getClass(TOOLTIP_CLASS)).transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n  return null\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Extent, DataEachG, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getTogglingYShift, TOGGLE_Y_SHIFT } from '../../../../helpers/views/togglingYShift'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  refreshViews,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TOGGLE_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(displayAttributes.map((attribute) => String(attribute)))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      if (displayAttributes.every((dimension) => selections[dimension] === null)) {\n        // check selections, if there is none in every line, false\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n        return\n      }\n      dataset.forEach((data) => {\n        data.selected = displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        })\n      })\n      refreshViews()\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, keyof SelectableDataType>> = {\n      [BrushAction.start]: () => setComponentBrushing(ViewType.ParallelCoordinates),\n      [BrushAction.move]: (brushEvent, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      },\n      [BrushAction.end]: (brushEvent, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      },\n    }\n    const brushExtent: Extent = [\n      [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n      [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n    ]\n\n    const brush = brushY<keyof SelectableDataType>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath: DataEachP<SelectableDataType, string | null> = (data) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n      .on(MouseAction.mouseOut, onMouseOutTooltip)\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    const getAxisTransform: DataEachG<keyof SelectableDataType, string> = (attribute) =>\n      getTranslate([xScale(String(attribute))!, 0])\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, getTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      Object.keys(selections).forEach((selLKey) => (selections[selLKey] = null))\n    })\n\n    // selected coloring\n    selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ParallelCoordinates]}>\n      {PARALLEL_COORDINATES_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\n\nimport { getTranslate } from '../stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\nexport const getScatterPlotMatrixStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    fontSize: PLOT_FONT.fontSize,\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { Extent, DataEachC, DataEachG, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/views/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { setDisplay } from '../../../../helpers/d3/setDisplay'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\ntype CellBrushing = { cell: MatrixPosition | null }\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  // selected coloring\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  setDisplay(isDetailsVisible, DUPLICATES_CLASS)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachC<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachC<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: CellBrushing = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) => (data.selected = isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, MatrixItem>> = {\n      [BrushAction.start]: (_, { rowIdx, colIdx, rowKey, colKey }) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      },\n      [BrushAction.move]: ({ selection }, matrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }, matrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [0, 0],\n      [rect.width, rect.height],\n    ]\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // selected coloring\n    selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    refreshViews,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return (\n      <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotMatrix]}>\n        {SCATTER_PLOT_MATRIX_TEXT.tooSmall}\n      </Box>\n    )\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotMatrixStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotMatrix]}>\n      {SCATTER_PLOT_MATRIX_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\n\nimport { SortType } from '../../constants/sort/SortType'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T extends SelectableDataType>(a: T, b: T, orderBy: keyof T) => {\n  if (a[orderBy] === true) return b[orderBy] === true ? 0 : 1\n  if (a[orderBy] === false) return b[orderBy] === false ? 0 : -1\n\n  return b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n}\n\nexport const getComparator = (sort: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sort === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataEachP, OnMouseEvent } from '../../../../types/d3-types'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { getAttributeValuesWithLabel, getClass, getEverything, getTranslate } from '../../../../helpers/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { GLYPHS_MIN_PERCENT_SHIFT } from '../../../../constants/views-general/glyphs-general'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  refreshViews,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, GLYPHS_MIN_PERCENT_SHIFT)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform: DataEachP<SelectableDataType, string> = (data) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const onMouseClick: OnMouseEvent<SelectableDataType> = (_, changedData) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.Glyphs)\n      refreshViews()\n    }\n\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n          .on(MouseAction.click, onMouseClick)\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    // selected coloring, needed again\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive, brushColor)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.Glyphs]}>\n      {GLYPHS_TEXT.unavailable}\n    </Box>\n  )\n}\n","export const GLYPHS_MIN_PERCENT_SHIFT = 5\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important, px } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotGlyphsAxis`\nexport const AXIS_TEXT_CLASS = `scatterPlotGlyphsAxisText`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\nexport const getScatterPlotGlyphsStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotGlyphsAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n  '& .scatterPlotGlyphsAxisText': {\n    fill: PLOT_COLORS.fontColor,\n    fontSize: px(13),\n    fontWeight: `bold`,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisBottom, axisLeft, brush, lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { Extent, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getRotate,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { setDisplay } from '../../../../helpers/d3/setDisplay'\nimport { getExtendedExtentInDomains, getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { TOOLTIP_CLASS } from '../../../../constants/views-general/tooltip'\nimport { GLYPHS_MIN_PERCENT_SHIFT } from '../../../../constants/views-general/glyphs-general'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  AXIS_TEXT_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nconst Y_AXIS_TEXT_SHIFT = 30\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  // selected coloring\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  setDisplay(isDetailsVisible, TOOLTIP_CLASS)\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const linearExtentInDomains = getExtentInDomains([xAttribute, yAttribute], dataset)\n    const radialExtentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, GLYPHS_MIN_PERCENT_SHIFT)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(linearExtentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(linearExtentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(radialExtentInDomains[attribute]),\n    )\n\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .append(SVG.elements.g)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n            .on(MouseAction.mouseOut, onMouseOutTooltip)\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data([xAttribute])\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n\n    const axisY = svg\n      .selectAll(AXIS_Y)\n      .data([yAttribute])\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n\n    axisX.call(axisBottom(xScale))\n    axisY.call(axisLeft(yScale))\n\n    // axis X label\n    axisX\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, innerWidth)\n      .attr(SVG.attributes.y, Y_AXIS_TEXT_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXIS_TEXT_CLASS)\n      .attr(SVG.attributes.textAnchor, SVG.values.end)\n    // axis Y label\n    axisY\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.transform, getRotate(-90))\n      .attr(SVG.attributes.y, -Y_AXIS_TEXT_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXIS_TEXT_CLASS)\n      .attr(SVG.attributes.textAnchor, SVG.values.end)\n\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) =>\n            (data.selected = isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType>> = {\n      [BrushAction.start]: () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      },\n      [BrushAction.move]: ({ selection }) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [-glyphSize / 2, -glyphSize / 2],\n      [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n    ]\n\n    const makeBrush = brush()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotGlyphs]}>\n      {SCATTER_PLOT_GLYPHS_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, important, px } from '../../../../helpers/stringGetters'\n\nimport { TABLE_COLORS } from '../../../../styles/colors'\n\nexport const getDataTableRowStyle = (\n  rowHeight: number,\n  selected: boolean,\n  selectedBackgroundColor: string,\n  selectedFontColor: string,\n): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? important(selectedBackgroundColor) : ``,\n  '& .MuiTableCell-root': {\n    color: selected ? important(selectedFontColor) : ``,\n  },\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    bgcolor: TABLE_COLORS.headerBackground,\n  },\n  tableHeadRow: {\n    height: 30,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  filterRow: {\n    bgcolor: TABLE_COLORS.filterBackground,\n  },\n  filterCell: {\n    padding: px(5),\n  },\n  filter: {\n    width: `90%`,\n    bgcolor: TABLE_COLORS.rowsBackground,\n    borderRadius: px(5),\n    '&.MuiFormControl-root': {\n      margin: 0,\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n  filterIcon: {\n    paddingLeft: px(12),\n    color: TABLE_COLORS.filterIconFont,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n  checkboxAll: {\n    display: `flex`,\n    height: calc(-10, `100%`),\n    padding: px(5),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Checkbox, TableBody, TableCell, TableRow } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable } from '../../../../helpers/data/formatText'\n\nimport { CELL_PADDING } from '../../../../constants/mui'\n\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableBodyProps {\n  displayAttributes: Array<keyof SelectableDataType>\n  sortedDataset: SelectableDataType[]\n  handleSelectClick: (data: SelectableDataType) => void\n  rowHeight: number\n  selectedBackgroundColor: string\n  selectedFontColor: string\n  redrawTime: number\n}\n\nexport const DataTableBody: VoidFunctionComponent<DataTableBodyProps> = ({\n  displayAttributes,\n  sortedDataset,\n  handleSelectClick,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n}) => (\n  <TableBody sx={dataTableStyle.tableBody}>\n    {sortedDataset.map((data, idx) => (\n      <TableRow\n        hover\n        onClick={() => handleSelectClick(data)}\n        key={idx}\n        sx={getDataTableRowStyle(rowHeight, data.selected, selectedBackgroundColor, selectedFontColor)}\n      >\n        <TableCell padding={CELL_PADDING.checkbox}>\n          <Checkbox checked={data.selected} />\n        </TableCell>\n        {displayAttributes.map((attribute) => (\n          <TableCell key={`${idx}-${attribute}`}>{dataToReadable(data[attribute])}</TableCell>\n        ))}\n      </TableRow>\n    ))}\n  </TableBody>\n)\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TextField,\n  Tooltip,\n} from '@mui/material'\nimport { FilterListOutlined } from '@mui/icons-material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { SelectableDataType, SelectedKey } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SortType } from '../../../../constants/sort/SortType'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { CELL_PADDING } from '../../../../constants/mui'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-menus/dataTable'\n\nimport { dataTableStyle } from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nimport { DataTableBody } from './DataTableBody'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {\n  showFilter: boolean\n}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  refreshViews,\n  setComponentBrushing,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n  showFilter,\n  redrawTime,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const [doResort, setDoResort] = useState(0)\n  const [filterValues, setFilterValues] = useState<{ [p: keyof SelectableDataType]: string }>(\n    Object.fromEntries(displayAttributes.map((key) => [key, ``])),\n  )\n\n  const filteredDataset = useMemo<SelectableDataType[]>(\n    () =>\n      [...dataset].filter((data) =>\n        displayAttributes.every((attribute) => String(data[attribute]).includes(filterValues[attribute])),\n      ),\n    [dataset, displayAttributes, filterValues],\n  )\n\n  const sortedDataset = useMemo(\n    () => filteredDataset.sort(getComparator(order, orderBy)),\n    // `doResort` is needed for resorting after changing select\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [filteredDataset, order, orderBy, doResort],\n  )\n\n  useEffect(\n    () => () => {\n      if (orderBy === SelectedKey) {\n        setDoResort((prev) => prev + 1) // reorder\n      }\n    },\n    [orderBy, redrawTime],\n  )\n\n  const handleSelectClick = useCallback(\n    (changedData: SelectableDataType) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing],\n  )\n\n  const handleSelectAllClick = useCallback(\n    (checked: boolean) => {\n      sortedDataset.forEach((data) => (data.selected = checked))\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing, sortedDataset],\n  )\n\n  const handleRequestSort = useCallback(\n    (property: keyof SelectableDataType) => {\n      const isAsc = orderBy === property && order === SortType.asc\n      setOrder(isAsc ? SortType.desc : SortType.asc)\n      setOrderBy(property)\n    },\n    [order, orderBy],\n  )\n\n  const handleFilterValueChange = useCallback((newValue: string, key: keyof SelectableDataType) => {\n    setFilterValues((prev) => ({\n      ...prev,\n      [key]: newValue,\n    }))\n  }, [])\n\n  const createSortHandler = useCallback(\n    (property: keyof SelectableDataType) => () => {\n      handleRequestSort(property)\n    },\n    [handleRequestSort],\n  )\n\n  const sortTooltipTitle = useCallback(\n    (headCellId: keyof SelectableDataType) =>\n      orderBy === headCellId\n        ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n        : DATA_TABLE_TEXT[SortType.asc],\n    [order, orderBy],\n  )\n\n  const getTableHead = useCallback(\n    (indeterminate: boolean, allChecked: boolean) => (\n      <TableHead sx={dataTableStyle.tableHead}>\n        <TableRow sx={dataTableStyle.tableHeadRow}>\n          <TableCell padding={CELL_PADDING.none}>\n            <Box sx={dataTableStyle.checkboxAll}>\n              <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                <Checkbox\n                  sx={dataTableStyle.checkAll}\n                  indeterminate={indeterminate && !allChecked}\n                  checked={allChecked}\n                  onChange={(event) => handleSelectAllClick(event.target.checked)}\n                />\n              </Tooltip>\n              <TableSortLabel\n                active={orderBy === SelectedKey}\n                direction={orderBy === SelectedKey ? order : SortType.asc}\n                onClick={createSortHandler(SelectedKey)}\n              />\n            </Box>\n          </TableCell>\n          {displayAttributes.map((attribute) => {\n            const orderedByActive = orderBy === attribute\n            return (\n              <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                <Tooltip title={sortTooltipTitle(attribute)}>\n                  <TableSortLabel\n                    active={orderedByActive}\n                    direction={orderedByActive ? order : SortType.asc}\n                    onClick={createSortHandler(attribute)}\n                  >\n                    {otherCasesToWhitespaces(attribute)}\n                  </TableSortLabel>\n                </Tooltip>\n              </TableCell>\n            )\n          })}\n        </TableRow>\n        {showFilter && (\n          <TableRow sx={dataTableStyle.filterRow}>\n            <TableCell padding={CELL_PADDING.none}>\n              <FilterListOutlined sx={dataTableStyle.filterIcon} />\n            </TableCell>\n            {displayAttributes.map((attribute, idx) => (\n              <TableCell sx={dataTableStyle.filterCell} key={`filter-${attribute}`}>\n                <TextField\n                  defaultValue={filterValues[idx]}\n                  sx={dataTableStyle.filter}\n                  onChange={(e) => handleFilterValueChange(e.target.value, attribute)}\n                />\n              </TableCell>\n            ))}\n          </TableRow>\n        )}\n      </TableHead>\n    ),\n    [\n      createSortHandler,\n      displayAttributes,\n      filterValues,\n      handleFilterValueChange,\n      handleSelectAllClick,\n      order,\n      orderBy,\n      showFilter,\n      sortTooltipTitle,\n    ],\n  )\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table sx={dataTableStyle.container}>\n          {getTableHead(\n            sortedDataset.some((data) => data.selected),\n            sortedDataset.every((data) => data.selected),\n          )}\n          <DataTableBody\n            displayAttributes={displayAttributes}\n            sortedDataset={sortedDataset}\n            handleSelectClick={handleSelectClick}\n            rowHeight={rowHeight}\n            selectedBackgroundColor={selectedBackgroundColor}\n            selectedFontColor={selectedFontColor}\n            redrawTime={redrawTime}\n          />\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import {min} from \"d3-array\";\n\nfunction targetDepth(d) {\n  return d.target.depth;\n}\n\nexport function left(node) {\n  return node.depth;\n}\n\nexport function right(node, n) {\n  return n - 1 - node.height;\n}\n\nexport function justify(node, n) {\n  return node.sourceLinks.length ? node.depth : n - 1;\n}\n\nexport function center(node) {\n  return node.targetLinks.length ? node.depth\n      : node.sourceLinks.length ? min(node.sourceLinks, targetDepth) - 1\n      : 0;\n}\n","export default function constant(x) {\n  return function() {\n    return x;\n  };\n}\n","import {max, min, sum} from \"d3-array\";\nimport {justify} from \"./align.js\";\nimport constant from \"./constant.js\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nfunction computeLinkBreadths({nodes}) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport default function Sankey() {\n  let x0 = 0, y0 = 0, x1 = 1, y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8, py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey() {\n    const graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeSort = function(_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function(_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks({nodes, links}) {\n    for (const [i, node] of nodes.entries()) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    }\n    const nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d]));\n    for (const [i, link] of links.entries()) {\n      link.index = i;\n      let {source, target} = link;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    }\n    if (linkSort != null) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({nodes}) {\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined\n          ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.depth = x;\n        for (const {target} of node.sourceLinks) {\n          next.add(target);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeHeights({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.height = x;\n        for (const {source} of node.targetLinks) {\n          next.add(source);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeLayers({nodes}) {\n    const x = max(nodes, d => d.depth) + 1;\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {source, value} of target.targetLinks) {\n          let v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {target, value} of source.sourceLinks) {\n          let v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({sourceLinks, targetLinks}) {\n    if (linkSort === undefined) {\n      for (const {source: {sourceLinks}} of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {target: {targetLinks}} of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  return sankey;\n}\n","import {linkHorizontal} from \"d3-shape\";\n\nfunction horizontalSource(d) {\n  return [d.source.x1, d.y0];\n}\n\nfunction horizontalTarget(d) {\n  return [d.target.x0, d.y1];\n}\n\nexport default function() {\n  return linkHorizontal()\n      .source(horizontalSource)\n      .target(horizontalTarget);\n}\n","import { LinkDataPoint } from '../../types/d3-sankey'\n\nconst getCurrentWidth = (currentCount: number, all: number, width: number | undefined) => {\n  if (!width || !currentCount) return 0\n  const fraction = currentCount / all\n  return width * fraction\n}\n\nconst getSelectionWidth = (all: number, selected: number, width: number, isBrush: boolean) => {\n  if (width === 0) return 0\n  const selectedFraction = selected / all\n  return width * (isBrush ? selectedFraction : 1 - selectedFraction)\n}\n\nconst getYCatShiftAndCurrentWidth = (\n  currentCount: number,\n  selected: number,\n  all: number,\n  width: number,\n  attributesCount: number[] | undefined,\n  idx: number,\n  isBrush: boolean,\n  isOverlay: boolean,\n): number => {\n  if (!currentCount || !attributesCount) return 0\n\n  const currentWidth = getCurrentWidth(currentCount, all, width)\n\n  const formerCount = attributesCount.slice(0, idx).reduce((sum, curr) => sum + curr, 0)\n  const formerFraction = formerCount / all\n  const yFormerShift = width * formerFraction\n  const yCatShift = -width / 2 + yFormerShift + currentWidth / 2\n\n  if (isOverlay) {\n    return yCatShift\n  }\n  const selectedFraction = selected / currentCount\n  const yBrushShift = (currentWidth * (isBrush ? -1 * (1 - selectedFraction) : selectedFraction)) / 2\n  return yCatShift + yBrushShift\n}\n\nexport const getStrokeWidth = (d: LinkDataPoint, idx: number, isBrush: boolean, isOverlay?: boolean): number => {\n  const currentCount = d.catAttributesCounts ? d.catAttributesCounts[idx] : d.value\n  const currentWidth = getCurrentWidth(currentCount, d.value, d.width)\n\n  if (!isBrush && isOverlay) return currentWidth\n  return getSelectionWidth(currentCount, d.selected[idx], currentWidth, isBrush)\n}\n\nexport const getYShift = (d: LinkDataPoint, idx: number, isBrush: boolean, isOverlay: boolean): number => {\n  const currentCount = d.catAttributesCounts ? d.catAttributesCounts[idx] : d.value\n  if (!d.width) return 0\n\n  return getYCatShiftAndCurrentWidth(\n    currentCount,\n    d.selected[idx],\n    d.value,\n    d.width,\n    d.catAttributesCounts,\n    idx,\n    isBrush,\n    isOverlay,\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SELECTED_CLASS = `parallelSetsBundledSelected`\nexport const TABS_CLASS = `psbTabs`\nexport const LINE_NOT_SELECTED_CLASS = `psbLine`\nexport const CONNECTORS_CLASS = `psbConnector`\nexport const INNER_TEXT_CLASS = `psbInnerText`\nexport const TABS_SELECTED_CLASS = `psbTabsSelected`\n\nexport const getParallelSetsBundledStyle = (\n  opacity: Opacity,\n  isBrushActive: boolean,\n  brushColor: string,\n  fontColorInner: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .psbConnector': {\n    fill: `none`,\n  },\n  '& .psbTabs': {\n    cursor: `pointer`,\n    '&.psbTabsSelected': {\n      fill: important(brushColor),\n    },\n  },\n  '& path': {\n    '&.parallelSetsBundledSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n    '&.psbLine': {\n      opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n      mixBlendMode: `multiply`,\n    },\n  },\n  '& .psbInnerText': {\n    fill: fontColorInner,\n  },\n})\n","import { useCallback, useEffect, useMemo, useRef, useState, VoidFunctionComponent } from 'react'\nimport { scaleOrdinal, select } from 'd3'\nimport { Box } from '@mui/material'\nimport { sankey, sankeyLinkHorizontal } from '../../../../../lib/d3-sankey'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ParallelSetsBundledSettings } from '../../../../types/views/settings/ParallelSetsBundledSettings'\nimport { NominalValueProperties } from '../../../../types/data/data'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataLink, NodeData, NodeDataPoint } from '../../../../types/d3-sankey'\nimport { DataEach, Extent, OnMouseEvent } from '../../../../types/d3-types'\n\nimport { getTogglingYShift, TOGGLE_Y_SHIFT } from '../../../../helpers/views/togglingYShift'\nimport {\n  getAttributeFormatted,\n  getEverything,\n  getLinkDataPointValuesWithLabel,\n  getNodeDataPointValuesWithLabel,\n  getSpaced,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { getGraph, getNeighborAttributes, getNominalValuesRecord } from '../../../../helpers/data/data'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\nimport { getStrokeWidth, getYShift } from '../../../../helpers/data/lineShifts'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelSetsBundled'\nimport { SVG } from '../../../../constants/svg'\nimport { AXES_TEXT_CLASS } from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ParallelSetsBrushingType } from '../../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_BUNDLED_TEXT } from '../../../../text/views-and-menus/parallelSetsBundled'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport {\n  CONNECTORS_CLASS,\n  getParallelSetsBundledStyle,\n  INNER_TEXT_CLASS,\n  LINE_NOT_SELECTED_CLASS,\n  SELECTED_CLASS,\n  TABS_CLASS,\n  TABS_SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle'\n\nexport interface ParallelSetsBundledProps extends VisualizationView, Brushable, ParallelSetsBundledSettings {}\n\nexport const CONNECTORS = `CONNECTORS`\nexport const TEXT = `TEXT`\nexport const AXES_TEXT = `AXES_TEXT`\nexport const TABS = `TABS`\n\nexport const TEXT_SHIFT = 2\n\nexport const ParallelSetsBundled: VoidFunctionComponent<ParallelSetsBundledProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  isBrushingActive,\n  colorCategory,\n  margins,\n  opacity,\n  brushColor,\n  redrawTime,\n  setComponentBrushing,\n  refreshViews,\n  tabWidth,\n  tabSpacing,\n  tabGap,\n  brushingType,\n  fontColor,\n  categoryAttribute,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const upperPadding = TOGGLE_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  const [nominalValuesRecord, setNominalValuesRecord] = useState(getNominalValuesRecord(dataset))\n  // redraw time needed because it is changing selected\n  useEffect(() => {\n    setNominalValuesRecord(getNominalValuesRecord(dataset))\n  }, [dataset, redrawTime, displayAttributes])\n\n  const createParallelSetsBundled = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const displayPairs = getNeighborAttributes(displayAttributes)\n    const pairWidth = (innerWidth - (displayAttributes.length - 2) * tabSpacing) / (displayAttributes.length - 1)\n    const valueCounts = displayAttributes.map((att) => nominalValuesRecord[att]).map((arr) => arr.length)\n    const spacesAllMax = Math.max(...valueCounts) - 1\n    const isLeft = (d: NodeData): boolean => Number(d.x0) < pairWidth / 2\n\n    const half = (displayAttributes.length - 1) / 2\n\n    // brushing\n    const onMouseClick: OnMouseEvent<NodeDataPoint> = (_, { attribute, name, count, countSelected }) => {\n      dataset.forEach((data) => {\n        if (String(data[attribute]) === name) {\n          data.selected = count !== countSelected\n        }\n      })\n\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.ParallelSetsBundled)\n      refreshViews()\n    }\n\n    displayPairs.forEach((displayPair, pairIdx) => {\n      const spacesPairMax = Math.max(valueCounts[pairIdx], valueCounts[pairIdx + 1]) - 1\n      const pairExtent: Extent = [\n        [0, 0],\n        [pairWidth, innerHeight - (spacesAllMax - spacesPairMax) * tabGap],\n      ]\n\n      const color = scaleOrdinal(colorCategory)\n      const sankeyLayout = sankey<NominalValueProperties, DataLink>()\n        .nodeWidth(tabWidth)\n        .nodePadding(tabGap)\n        .nodeSort((a, b) => a.order - b.order)\n        .extent(pairExtent)\n\n      const graph = getGraph(dataset, categoryAttribute, nominalValuesRecord, displayPair[0], displayPair[1])\n      const { nodes, links } = sankeyLayout(graph)\n      const getPath = sankeyLinkHorizontal()\n\n      const xShift = pairIdx * (pairWidth + tabSpacing)\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TABS)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, (node) =>\n          node.count === node.countSelected ? getSpaced(TABS_CLASS, TABS_SELECTED_CLASS) : TABS_CLASS,\n        )\n        .attr(SVG.attributes.x, (node) => Number(node.x0) + xShift)\n        .attr(SVG.attributes.y, (node) => Number(node.y0))\n        .attr(SVG.attributes.height, (node) => Number(node.y1) - Number(node.y0))\n        .attr(SVG.attributes.width, (node) => Number(node.x1) - Number(node.x0))\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getNodeDataPointValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .on(MouseAction.click, onMouseClick)\n\n      // connectors\n      const connectors = svg\n        .append(SVG.elements.g)\n        .attr(SVG.attributes.class, CONNECTORS_CLASS)\n        .attr(SVG.attributes.transform, getTranslate([pairIdx * (pairWidth + tabSpacing), 0]))\n        .selectAll(CONNECTORS)\n        .data(links)\n        .enter()\n\n      const colorCategories = categoryAttribute ? nominalValuesRecord[categoryAttribute].map((att) => att.name) : [`1`] // one category\n      const isOverlay = brushingType === ParallelSetsBrushingType.overlay\n      // for each value runs once\n      colorCategories.forEach((category, idx) => {\n        // base\n        connectors\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, LINE_NOT_SELECTED_CLASS)\n          .attr(SVG.attributes.d, getPath)\n          .attr(SVG.attributes.stroke, color(category))\n          .attr(SVG.attributes.strokeWidth, (link) => getStrokeWidth(link, idx, false, isOverlay))\n          .attr(SVG.attributes.transform, (link) => getTranslate([0, getYShift(link, idx, false, isOverlay)]))\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n\n        // brushing\n        connectors\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, SELECTED_CLASS)\n          .attr(SVG.attributes.d, getPath)\n          .attr(SVG.attributes.strokeWidth, (link) => getStrokeWidth(link, idx, true))\n          .attr(SVG.attributes.transform, (link) => getTranslate([0, getYShift(link, idx, true, isOverlay)]))\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n      })\n\n      const getTextVisible: DataEach<NodeData, SVGTextElement, number> = (node) => {\n        if (pairIdx === Math.floor(half)) return 1\n        if ((isLeft(node) && pairIdx > half) || (!isLeft(node) && pairIdx < half)) return 0\n        return 1\n      }\n\n      // line text\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TEXT)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.text)\n        .attr(SVG.attributes.class, INNER_TEXT_CLASS)\n        .attr(\n          SVG.attributes.x,\n          (node) => (isLeft(node) ? Number(node.x1) + TEXT_SHIFT : Number(node.x0) - TEXT_SHIFT) + xShift,\n        )\n        .attr(SVG.attributes.y, (node) => (Number(node.y1) + Number(node.y0)) / 2)\n        .attr(SVG.attributes.textAnchor, (node) => (isLeft(node) ? SVG.values.start : SVG.values.end))\n        .style(SVG.style.opacity, getTextVisible)\n        .text((node) => getAttributeFormatted(node.name))\n    })\n    // axis text\n    svg\n      .append(SVG.elements.g)\n      .selectAll(AXES_TEXT)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.textAnchor, SVG.values.middle)\n      .attr(SVG.attributes.x, (_, idx) => idx * (pairWidth + tabSpacing))\n      .attr(SVG.attributes.y, getTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n  }, [\n    displayAttributes,\n    innerWidth,\n    tabWidth,\n    nominalValuesRecord,\n    dataset,\n    setComponentBrushing,\n    refreshViews,\n    innerHeight,\n    tabGap,\n    colorCategory,\n    tabSpacing,\n    categoryAttribute,\n    brushingType,\n  ])\n\n  useEffect(\n    () => createParallelSetsBundled(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      innerWidth,\n      innerHeight,\n      colorCategory,\n      nominalValuesRecord,\n      tabWidth,\n      tabSpacing,\n      tabGap,\n      categoryAttribute,\n      brushingType,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelSetsBundledStyle(opacity, isBrushingActive, brushColor, fontColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelSetsBundled]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelSetsBundled]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ParallelSetsBundled]}>\n      {PARALLEL_SETS_BUNDLED_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { VisualizationView } from '../../types/views/VisualizationView'\nimport { Brushable } from '../../types/brushing/Brushable'\nimport { SettingsType } from '../../types/views/settings/Settings'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { ParallelCoordinates } from '../../components/content/views/parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from '../../components/content/views/scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from '../../components/content/views/glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from '../../components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from '../../components/content/views/data-table/DataTable'\nimport { ParallelSetsBundled } from '../../components/content/views/parallel-sets-bundeled/ParallelSetsBundled'\n\nimport { ViewType } from './ViewType'\n\nexport const VIEW_BORDER_SIZE = 5\n\ntype ViewElementFunction = (\n  props: Brushable & VisualizationView,\n  settings: SettingsType,\n  showFilter?: boolean,\n) => JSX.Element\n\nexport const getViewRecord: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.DataTable]: (p, s, f) => <DataTable {...p} {...(s as DataTableSettings)} showFilter={!!f} />,\n  [ViewType.ParallelSetsBundled]: (p, s) => <ParallelSetsBundled {...p} {...(s as ParallelSetsBundledSettings)} />,\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { VIEW_BORDER_SIZE, getViewRecord } from '../../../constants/views-general/view'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  viewType: ViewType\n  settings: Settings\n  brushColor: string\n  showFilter?: boolean\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({\n  width,\n  height,\n  viewType,\n  settings,\n  showFilter,\n  ...dataProps\n}) => {\n  const graph = getViewRecord[viewType]\n  const settingsCurr = settings[viewType]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr, showFilter)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { FilterList } from '@mui/icons-material'\n\nimport { BUTTON_VARIANT } from '../../../../constants/mui'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../text/siteText'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\n\nexport interface DataSaveButtonProps {\n  showFilter?: boolean\n  setShowFilter: Dispatch<SetStateAction<boolean | undefined>>\n}\n\nexport const DataFilterButton: VoidFunctionComponent<DataSaveButtonProps> = ({ showFilter, setShowFilter }) => (\n  <>\n    <Button variant={BUTTON_VARIANT.text} onClick={() => setShowFilter(!showFilter)} sx={inlineButtonStyles.button}>\n      <Tooltip title={TOP_TOOLBAR_TEXT.filter}>\n        <FilterList sx={showFilter ? inlineButtonStyles.buttonActive : {}} />\n      </Tooltip>\n    </Button>\n  </>\n)\n","import React, { ComponentProps, useState, VoidFunctionComponent } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, IconButton, Typography } from '@mui/material'\nimport { Close, RotateRight } from '@mui/icons-material'\n\nimport { getDisplayAttributesInParentheses } from '../../../helpers/stringGetters'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { DRAG_HANDLE, GRID_HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/layout/layout'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { DataSaveButton } from '../common/DataSaveButton'\nimport { View } from './View'\nimport { DataFilterButton } from './data-table/DataFilterButton'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isResizeFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isResizeFinished, viewType, ...rest }) => {\n  const [showFilter, setShowFilter] = useState<boolean | undefined>(undefined)\n  const topButton =\n    viewType !== ViewType.DataTable ? (\n      <DataSaveButton viewType={viewType} />\n    ) : (\n      <DataFilterButton showFilter={showFilter} setShowFilter={setShowFilter} />\n    )\n  const glyphAxesText =\n    (viewType === ViewType.Glyphs || viewType === ViewType.ScatterPlotGlyphs) && rest.settings[viewType] ? (\n      <Typography sx={gridItemStyle.text}>\n        <RotateRight sx={gridItemStyle.textIcon} />\n        {getDisplayAttributesInParentheses(rest.settings[viewType]!.displayAttributes)}\n      </Typography>\n    ) : null\n\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Box sx={gridItemStyle.textBox}>\n            <Typography> {title} </Typography>\n            {glyphAxesText}\n          </Box>\n          <Box sx={gridItemStyle.right}>\n            {topButton}\n            <IconButton onClick={onRemove}>\n              <Close />\n            </IconButton>\n          </Box>\n        </Box>\n        {isResizeFinished && (\n          <View\n            width={width}\n            height={height - GRID_HEADER_HEIGHT}\n            viewType={viewType}\n            {...rest}\n            showFilter={showFilter}\n          />\n        )}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import React, { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, memo, useEffect } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/stringGetters'\nimport { setDisplay } from '../../../helpers/d3/setDisplay'\n\nimport { isViewType, ViewType } from '../../../constants/views-general/ViewType'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/layout/layout'\nimport { TOOLTIP_CLASS } from '../../../constants/views-general/tooltip'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\nimport { VIEW_NAMES } from '../../../text/views-and-menus/common'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\nimport { LayoutDialog } from '../top-toolbar/items/layout/LayoutDialog'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: () => void\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isLayoutDialogOpen: boolean\n  setIsLayoutDialogOpen: Dispatch<SetStateAction<boolean>>\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  brushColor: string\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nconst BaseViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  isLayoutDialogOpen,\n  setIsLayoutDialogOpen,\n  layout,\n  setLayout,\n  ...viewProps\n}) => {\n  const [viewResizing, setViewResizing] = useState<ViewType | null>(null)\n  const [lastLayout, setLastLayout] = useState(layout)\n\n  useEffect(\n    () => () => {\n      if (layout !== null) setLastLayout(layout)\n    },\n    [layout],\n  )\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout || layout.length === 0) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout, layout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        return layout.filter((item) => item.i !== viewType)\n      })\n    },\n    [setLayout],\n  )\n\n  setDisplay(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <LayoutDialog\n        isOpen={isLayoutDialogOpen}\n        setLayout={setLayout}\n        onClose={() => setIsLayoutDialogOpen(false)}\n        lastLayout={lastLayout}\n      />\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={(_, view) => setViewResizing(view.i as ViewType)}\n        onResizeStop={() => setViewResizing(null)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isResizeFinished={view.i !== viewResizing}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              viewType={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n\n// do not rerender if props not change\nexport const ViewGrid = memo(BaseViewGrid)\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/siteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => <Box sx={emptyDataStyle.site}>{EMPTY_DATA_TEXT.content}</Box>\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nexport const loadingStyle: Record<string, SxProps> = {\n  load: {\n    paddingTop: px(40),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/siteText'\n\nimport { loadingStyle } from '../../../components-style/content/no-data/loadingStyle'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={loadingStyle.load}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GridLayoutItem } from '../../../types/views/Grid'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\nimport { useDebounce } from '../../../helpers/react/useDebounce'\nimport { getCategoryAttributesKeys, getDefaultQuantitativeAttributesKeys } from '../../../helpers/data/data'\n\nimport { DataLoadState } from '../../../constants/data/DataLoadState'\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { DEFAULT_GRID_LAYOUT_QUANTITATIVE, DEFAULT_GRID_LAYOUT_NOMINAL } from '../../../constants/layout/layout'\nimport { DEFAULT_BRUSH_COLOR } from '../../../constants/views-general/defaultSettableColors'\nimport { BRUSH_DEBOUNCE } from '../../../constants/debounce/debounce'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../views/ViewGrid'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<(() => void)[]>([])\n  const [currentRedrawTime, setRedrawTime] = useState(Date.now())\n\n  const redrawTime = useDebounce(currentRedrawTime, BRUSH_DEBOUNCE) // used for less component re-renders\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isLayoutDialogOpen, setIsLayoutDialogOpen] = useState(false)\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[] | null>(null)\n  const [brushColor, setBrushColor] = useState<string>(DEFAULT_BRUSH_COLOR)\n\n  useEffect(() => {\n    if (!dataset || layout !== null) return\n    setLayout(\n      getCategoryAttributesKeys(dataset).length > getDefaultQuantitativeAttributesKeys(dataset).length\n        ? DEFAULT_GRID_LAYOUT_NOMINAL\n        : DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n    )\n  }, [dataset, layout])\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = useCallback((data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }, [])\n\n  const refreshViews = useCallback((): void => {\n    setRedrawTime(Date.now()) // redraw component\n  }, [])\n\n  const cleanAllBrushes = useCallback(\n    (deletePrevSelection = true) => {\n      if (dataset && deletePrevSelection) {\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n      }\n      cleanBrushingRef.current.forEach((f) => f())\n    },\n    [cleanBrushingRef, dataset, refreshViews],\n  )\n\n  const clearBrushesOnButton = useCallback(() => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }, [cleanAllBrushes])\n\n  const setComponentBrushing: SetComponentBrushing = useCallback(\n    (newComponent) => {\n      if (componentBrushingRef.current !== newComponent) {\n        cleanAllBrushes(\n          newComponent !== ViewType.DataTable &&\n            newComponent !== ViewType.Glyphs &&\n            newComponent !== ViewType.ParallelSetsBundled,\n        )\n      }\n      setCurrentComponentBrushing(newComponent)\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const registerCleanBrushing = useCallback((cleanBrushing: () => void) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }, [])\n\n  const cleanSelectedIfViewWasBrushing = useCallback(\n    (component: ViewType) => {\n      if (componentBrushingRef.current === component) {\n        cleanAllBrushes()\n        setCurrentComponentBrushing(null)\n      }\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = useCallback(\n    (newIsBrushingOnEndOfMove: boolean) => {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n      setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n    },\n    [cleanAllBrushes],\n  )\n\n  const closeDrawer = useCallback(() => setDrawerOpen(false), [])\n  const openDrawer = useCallback(() => setDrawerOpen(true), [])\n\n  const topToolbarComponent = (\n    <TopToolbar\n      openDrawer={openDrawer}\n      isToolsDisabled={dataset === null}\n      isDetailsVisible={isDetailsVisible}\n      setIsDetailsVisible={setIsDetailsVisible}\n      isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n      isBrushingActive={componentBrushingRef.current !== null}\n      clearBrushes={clearBrushesOnButton}\n      setDataset={setDatasetAndRemoveBrushing}\n      setDataLoadState={setDataLoadState}\n      setIsLayoutDialogOpen={setIsLayoutDialogOpen}\n      removeLayout={() => setLayout([])}\n      setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n      brushColor={brushColor}\n      setBrushColor={setBrushColor}\n    />\n  )\n\n  if (dataLoadState === DataLoadState.NoData) {\n    return (\n      <>\n        {topToolbarComponent}\n        <EmptyData />\n      </>\n    )\n  }\n  if (dataLoadState === DataLoadState.Loading || !dataset) {\n    return (\n      <>\n        {topToolbarComponent}\n        <Loading />\n      </>\n    )\n  }\n\n  if (!layout) return null\n\n  return (\n    <>\n      {topToolbarComponent}\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={closeDrawer}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isLayoutDialogOpen={isLayoutDialogOpen}\n        setIsLayoutDialogOpen={setIsLayoutDialogOpen}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        brushColor={brushColor}\n        registerCleanBrushing={registerCleanBrushing}\n        setComponentBrushing={setComponentBrushing}\n        refreshViews={refreshViews}\n        redrawTime={redrawTime}\n        isBrushingActive={componentBrushingRef.current !== null}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      />\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}