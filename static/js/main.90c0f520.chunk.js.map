{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/constants/views/ViewType.ts","app/text/headerText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/footerText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/helpers/react/useDebounce.ts","app/constants/data/sampleDataset.tsx","app/constants/views/common.ts","app/constants/data/data.ts","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/text/siteText.ts","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/helpers/data/data.ts","app/components/content/top-toolbar/items/file-reader/NullDialog.tsx","app/helpers/data/comparator.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components-style/content/top-toolbar/items/buttons/colorButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ColorButton.tsx","app/constants/debounce/debounce.ts","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/constants/views/tooltip.ts","app/text/views-and-menus/common.ts","app/components-style/content/views/viewGridStyle.ts","app/components-style/content/data-drawer/dataDrawerStyle.ts","app/constants/data/ColoringType.ts","app/constants/data/ParallelSetsBrushingType.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/glyphs.ts","app/components-style/content/data-drawer/dataDrawerMenuStyle.ts","app/components-style/content/data-drawer/items/menuTextStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components/content/data-drawer/items/OpacityInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/settings/ParallelCoordinatesSettings.ts","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixMenu.tsx","app/types/views/settings/ScatterPlotMatrixSettings.ts","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-menus/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsMenu.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/text/views-and-menus/dataTable.ts","app/components-style/content/data-drawer/items/colorPickerStyle.ts","app/components/content/data-drawer/items/ColorPicker.tsx","app/components/content/views/data-table/DataTableMenu.tsx","app/types/views/settings/DataTableSettings.ts","app/constants/views/parallelSetsBundled.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseAction.ts","app/text/views-and-menus/parallelSetsBundled.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundledMenu.tsx","app/types/views/settings/ParallelSetsBundledSettings.ts","app/text/dataDrawerText.ts","app/components/content/data-drawer/DataDrawer.tsx","app/components/content/top-toolbar/items/layout/LayoutDialog.tsx","app/components-style/content/views/gridItemStyle.ts","app/constants/save/save.ts","app/helpers/d3/saveSvg.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/common/DataSaveButton.tsx","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/d3/attributeGetters.ts","app/constants/html.ts","app/helpers/d3/tooltip.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/constants/form.ts","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTableBody.tsx","app/components/content/views/data-table/DataTable.tsx","lib/d3-sankey/src/align.js","lib/d3-sankey/src/constant.js","lib/d3-sankey/src/sankey.js","lib/d3-sankey/src/sankeyLinkHorizontal.js","app/components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundled.tsx","app/constants/views/getViewRecord.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/components/content/views/data-table/DataFilterButton.tsx","app/components/content/views/GridItem.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/loadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","DataLoadError","ViewType","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","toLowerCase","dataToReadable","data","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","Object","keys","filter","key","getLinkDataPointValuesWithLabel","filteredData","from","names","to","count","selected","getNodeDataPointValuesWithLabel","name","countSelected","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","CARD_COLORS","VIEW_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","SampleDataset","DRAG_HANDLE","VIEW_DEFAULT_SIZE","height","VIEW_LIMITS","ParallelCoordinates","minW","minH","ScatterPlotMatrix","Glyphs","ScatterPlotGlyphs","DataTable","ParallelSetsBundled","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT_QUANTITATIVE","i","x","y","DEFAULT_GRID_LAYOUT_NOMINAL","LAYOUT_OPT_2","LAYOUT_OPT_3","LAYOUT_OPT_4","LAYOUT_OPTIONS","LAYOUT_IMAGES","OptionType","SAMPLE_DATASET_OPTIONS","sampleDatasetIcons","flowers","LocalFlorist","birds","Air","cars","DirectionsCar","titanic","DirectionsBoat","parallelCars","AirportShuttle","sampleDatasets","flowerJson","birdJson","carJson","titanicJson","parallelCarsJson","AcceptableFileTypes","OPTION_TYPES","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","header","save","confirm","cancel","FILE_READER_TEXT","button","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFormat","nullDialog","optionsText","leave","change","optionsDescription","changeTo","LAYOUT_DIALOG_TEXT","topToolbarStyle","toolbar","separator","margin","borderLeft","left","middle","right","topToolbarButtonStyle","minWidth","ClickableButton","icon","onClick","disabled","label","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","every","idx","CsvParse","textCsv","parse","output","fromEntries","numValue","Number","isNaN","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","fileReaderStyle","dialogStyle","dialog","alert","innerContent","contentBox","toggleDialogGroup","marginBottom","toggleDialogButton","flexGrow","attHeader","fontWeight","paddingBottom","textInput","alignSelf","card","image","cardContent","itemText","SelectionDialog","isOpen","onClose","options","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","getAttributeKeys","getDatasetSample","getDefaultQuantitativeAttributesKeys","getQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","size","getDefaultAllAttributesChecked","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","getDefaultNominalAttributesChecked","getNominalValueProperties","reduce","nominalValuePropertiesArr","containedIdx","findIndex","prev","newNominalValueProperties","getNominalValuesRecord","NullDialog","nullContainingAttributes","setDataset","att","optionsChosen","setOptionsChosen","replaceValue","setReplaceValue","getFixedDataset","useCallback","newValue","handleNullDialogConfirm","datasetFixed","forEach","handleToggleChange","handleReplaceChange","ToggleButtonGroup","exclusive","onChange","e","optType","ToggleButton","TextField","defaultValue","target","addSelected","d","SortType","FILE_INPUT_ID","FileReader","setDataLoadState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isNullDialogOpen","setIsNullDialogOpen","setNullContainingAttributes","rawDataset","setRawDataset","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionKey","Loaded","closeDialog","getDatasetFromFile","fileType","selectedFile","a","json","csv","JSON","handleFileChange","files","Loading","type","dataLoadErrorType","NoData","selectableDataset","document","getElementById","AutoGraph","component","Add","hidden","id","ON_VALUE","ToggleButtonSingle","setValue","handleChange","event","checked","openSettingsButtonStyle","settings","OpenSettingsButton","IconButton","Settings","getColorInputStyle","getColorInputBoxStyle","minHeight","ml","colorInputStyle","inputBox","position","opacity","ColorButton","handleSetColor","tooltip","currentColor","setCurrentColor","debouncedColor","disableHoverListener","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","setIsLayoutDialogOpen","removeLayout","brushColor","setBrushColor","AddCircle","Dashboard","Info","SkipNext","Brush","AutoFixOff","SVG","svg","g","circle","rect","path","div","class","transform","cx","cy","r","stroke","strokeWidth","textAnchor","fill","top","none","block","start","end","displayDetails","tooltipClass","selectAll","style","TOOLTIP_CLASS","TOOLTIP","bottom","lr","MENU_BASE_TEXT","more","empty","MENU_TEXT","attributes","category","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","PALETTE_PICKER_TEXT","categoriesLabel","VIEW_NAMES","viewGridStyle","pointerEvents","zIndex","dataDrawerStyle","drawer","flexShrink","chevron","menu","footer","githubIcon","paddingRight","descCompare","b","orderBy","ColoringType","ParallelSetsBrushingType","getComparator","sort","desc","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","margins","colorCategory","schemeCategory10","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","dataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","menuTextStyle","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleCheckboxChange","eventChecked","newChecked","prevSettings","newSettings","handleMove","newAttributesKeys","displayAttributes","onUpButton","onDownButton","FormControlLabel","ArrowDropUp","ArrowDropDown","Checkbox","CategorySelector","handleSelectCategoryChange","categoryAttribute","undefined","select","MenuItem","Selector","settingsKey","handleSelectChange","numberInputStyles","vertical","horizontal","textField","MarginInput","currentMargins","setCurrentMargins","debouncedMargins","handleMarginChange","newMargin","oldMargins","newMargins","inputProps","inputMode","min","NumberInput","valueKey","max","currentValue","setCurrentValue","handleChangeValue","minVal","maxVal","OpacityInput","opacities","currentOpacities","setCurrentOpacities","debouncedOpacities","handleOpacityChange","newOpacity","oldOpacities","newOpacities","getPalettePickerColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","currentColors","setCurrentColors","debouncedColors","newColor","oldColors","newColors","getInput","toggleButtonsStyle","box","group","ToggleButtons","handleToggleButtonChange","opt","GlyphsMenu","glyphsSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","sortableAttributes","categoricalAttributes","getCurrentDisplayAttributes","currChecked","createGlyphsMenu","newQaKeys","defaultSortAttribute","defaultCategoryAttribute","newGlyphs","sortAttribute","getNewSettingsForAttributeChecker","newSortableAttributes","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","PARALLEL_COORDINATES_DEFAULT","lineWidth","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","sizes","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","createScatterPlotMatrixMenu","newScatterPlotMatrix","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_MENU_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsMenu","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsMenu","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","selectedBackgroundColor","selectedFontColor","DATA_TABLE_MENU_TEXT","DATA_TABLE_TEXT","checkboxTooltip","getColorPickerInputStyle","colorPickerStyle","ColorPicker","handleChangeColor","DataTableMenu","dataTableSettings","createDataTableMenu","newKeys","newDataTableSettings","BrushAction","MouseAction","PARALLEL_SETS_BUNDLED_DEFAULT","tabWidth","tabSpacing","tabGap","coloringType","brushingType","fontColor","PARALLEL_SETS_BUNDLED_TEXT","PARALLEL_SETS_MENU_TEXT","brushing","ParallelSetsBundledMenu","parallelSetsBundledSettings","nominalAttributesKeys","setNominalAttributesKeys","createParallelSetsBundledMenu","newCatKeys","newParallelSetsBundled","DATA_DRAWER_TEXT","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","Link","href","GitHub","LayoutDialog","setLayout","lastLayout","layoutItems","Card","CardContent","CardMedia","alt","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","flexWrap","paddingLeft","textBox","whiteSpace","overflow","textOverflow","textIcon","HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","SAVE_ID","CONTAINER_SAVE_ID","CONTAINER_EMPTY","saveSvg","svgContainer","querySelector","containerClass","classList","cls","includes","newStyleNodes","querySelectorAll","flatMap","sheet","cssRules","rules","cssText","node","createElement","innerHTML","insertBefore","firstChild","svgEl","fileName","setAttribute","svgData","outerHTML","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","download","body","appendChild","click","removeChild","saveSvgToFile","remove","console","error","getSaveIsDisabled","inlineButtonStyles","buttonActive","ConfirmationDialog","onConfirm","cancelText","DataSaveButton","isDialogOpen","setIsDialogOpen","openDialog","Save","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getCategoryColor","TEXT_Y_SHIFTS","odd","even","TOGGLE_TEXT_Y_SHIFT","Math","getTextTogglingYShift","_","HTML","onMouseOverTooltip","stringFunction","clientX","clientY","duration","html","onMouseOutTooltip","PARALLEL_COORDINATES_CLASS","SELECTED_CLASS","AXES_TEXT_CLASS","getParallelCoordinatesStyle","isBrushActive","font","getViewsNotDisplayStyle","refreshViews","registerCleanBrushing","setComponentBrushing","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","onBrush","move","brushEvent","axisName","selection","brushExtent","BRUSH_WIDTH","brush","brushY","on","enter","append","attr","line","mouseOver","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","selLKey","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","clearBrush","brushSelection","makeBrush","GLYPHS_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","onMouseClick","changedData","SCATTER_PLOT_GLYPHS_CLASS","AXIS_TEXT_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","makeGlyphs","axisX","axisY","FORM","getDataTableRowStyle","paddingTop","dataTableStyle","tableHead","tableHeadRow","tableBody","filterRow","filterCell","filterIcon","notDisplayed","checkboxAll","DataTableBody","handleSelectClick","TableBody","TableRow","hover","TableCell","showFilter","redrawTime","order","setOrder","setOrderBy","doResort","setDoResort","filterValues","setFilterValues","filteredDataset","handleSelectAllClick","handleRequestSort","property","isAsc","handleFilterValueChange","createSortHandler","sortTooltipTitle","headCellId","getTableHead","indeterminate","allChecked","TableHead","checkAll","TableSortLabel","active","direction","orderedByActive","sortDirection","FilterListOutlined","TableContainer","Table","container","justify","n","sourceLinks","depth","constant","ascendingSourceBreadth","ascendingBreadth","source","ascendingTargetBreadth","y0","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","get","computeLinkBreadths","y1","link","targetLinks","Sankey","py","linkSort","x0","x1","dx","dy","align","iterations","sankey","apply","arguments","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeHeights","computeNodeBreadths","entries","Map","push","fixedValue","sum","next","add","columns","kx","layer","computeNodeLayers","c","ky","reorderLinks","initializeNodeBreadths","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","column","reorderNodeLinks","resolveCollisions","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","update","nodeId","nodeAlign","nodeSort","nodeWidth","nodePadding","horizontalSource","horizontalTarget","linkHorizontal","TABS_CLASS","getParallelSetsBundledStyle","fontColorInner","mixBlendMode","nominalValuesRecord","setNominalValuesRecord","createParallelSetsBundled","displayPairs","slice","getNeighborAttributes","pairWidth","valueCounts","arr","spacesAllMax","isLeft","half","displayPair","pairIdx","spacesPairMax","pairExtent","sankeyLayout","record","attFrom","attTo","toIdxStart","idxFrom","idxTo","filtered","getGraph","xShift","connectors","sankeyLinkHorizontal","no","overlay","yShift","getViewRecord","s","f","View","dataProps","settingsCurr","overflowX","overflowY","DataFilterButton","setShowFilter","FilterList","GridItem","onRemove","isResizeFinished","rest","topButton","glyphAxesText","RotateRight","useSize","Close","ReactGridLayout","WidthProvider","GridLayout","BaseViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","isLayoutDialogOpen","layout","viewProps","viewResizing","setViewResizing","setLastLayout","updateLayout","newLayout","filteredLayout","addView","posY","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","ViewGrid","memo","emptyDataStyle","site","EmptyData","loadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","currentRedrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setDatasetAndRemoveBrushing","cleanAllBrushes","deletePrevSelection","clearBrushesOnButton","newComponent","setIsBrushingOnEndOfMoveAndRemoveBrushing","newIsBrushingOnEndOfMove","topToolbarComponent","appStyle","app","content","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.90c0f520.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFormat = `unsupportedFileFormat`,\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  DataTable = `dataTable`,\n  ParallelSetsBundled = `parallelSetsBundled`,\n}\n\nexport const isViewType = (viewType: string): viewType is ViewType =>\n  (Object.values(ViewType) as string[]).includes(viewType)\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim().toLowerCase()\n\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface for nominal value properties\n */\nexport interface NominalValueProperties {\n  name: string\n  attribute: keyof SelectableDataType\n  count: number\n  countSelected: number\n}\n\nexport interface NominalRecord {\n  [key: keyof SelectableDataType]: Array<NominalValueProperties>\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\n/**\n * Interface that assigns attributes numerical extent.\n * Used for axes' range.\n */\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { LinkDataPoint, NodeDataPoint } from '../../types/d3-sankey'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n\nexport type FilterKeys = Pick<LinkDataPoint, `y0` | `y1` | `width`>\n\nexport const getLinkDataPointValuesWithLabel = (data: LinkDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    from: data.names[0],\n    to: data.names[0],\n    count: String(data.value),\n    selected: String(data.selected),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n\nexport const getNodeDataPointValuesWithLabel = (data: NodeDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    attribute: otherCasesToWhitespaces(data.attribute),\n    name: data.name,\n    count: String(data.count),\n    selected: String(data.countSelected),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonHoverBackground: `#b3bede`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  buttonInlinedFontOn: `#3965c4`,\n  buttonInlinedBgOn: `#e9eeff`,\n  border: `rgba(0, 0, 0, 0.12)`,\n  colorBorder: `#42495d`,\n  buttonDialogBackground: `#363a46`,\n  buttonDialogHoverBackground: `#1f2528`,\n  buttonDialogFont: `#d6e1ff`,\n}\n\nexport const CARD_COLORS = {\n  background: `#f7f8fd`,\n  backgroundHover: `#dce1ef`,\n  border: `#b3bede`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  filterIconFont: `#656d86`,\n  filterBackground: `#52586c`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { calc } from '../helpers/d3/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/headerText'\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { FOOTER_TEXT } from '../../text/footerText'\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n    <Box sx={footerStyle.text}>\n      &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n    </Box>\n  </Box>\n)\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { useEffect, useState } from 'react'\n\nexport const useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n  return debouncedValue\n}\n","import { Air, AirportShuttle, DirectionsBoat, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport titanicJson from '../../../test-data/titanicData.json'\nimport parallelCarsJson from '../../../test-data/parallelCarsData.json'\n\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flowers = `flower`,\n  birds = `bird`,\n  cars = `car`,\n  titanic = `titanic`,\n  parallelCars = `parallelCars`,\n}\n\nexport const SAMPLE_DATASET_OPTIONS = Object.values(SampleDataset)\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flowers]: <LocalFlorist />,\n  [SampleDataset.birds]: <Air />,\n  [SampleDataset.cars]: <DirectionsCar />,\n  [SampleDataset.titanic]: <DirectionsBoat />,\n  [SampleDataset.parallelCars]: <AirportShuttle />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flowers]: flowerJson,\n  [SampleDataset.birds]: birdJson,\n  [SampleDataset.cars]: carJson,\n  [SampleDataset.titanic]: titanicJson,\n  [SampleDataset.parallelCars]: parallelCarsJson,\n}\n","import { GridLayoutItem } from '../../types/views/Grid'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { ViewType } from './ViewType'\n\nexport const DEFAULT_BRUSH_COLOR = `#830606`\nexport const DEFAULT_BRUSH_BG_COLOR_TABLE = `#ffcfcf`\nexport const DEFAULT_BRUSH_FONT_COLOR_TABLE = `#111111`\nexport const DEFAULT_FONT_COLOR_PARALLEL_SETS = `#252525`\n\nexport const VIEW_BORDER_SIZE = 5\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const HEADER_HEIGHT = 30\n\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 0,\n  height: 0,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n  [ViewType.ParallelSetsBundled]: {\n    minW: 4,\n    minH: 8,\n  },\n}\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n  [ViewType.ParallelSetsBundled]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n}\n\nexport const DEFAULT_GRID_LAYOUT_QUANTITATIVE: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n\nexport const DEFAULT_GRID_LAYOUT_NOMINAL: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 25,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n  {\n    i: ViewType.DataTable,\n    w: 25,\n    h: 13,\n    x: 23,\n    y: 0,\n  },\n]\n\nexport const LAYOUT_OPT_2: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 30,\n    h: 16,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 30,\n    h: 14,\n    x: 17,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n\nexport const LAYOUT_OPT_3: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 16,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 20,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 11,\n    h: 10,\n    x: 14,\n    y: 20,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 14,\n    h: 14,\n    x: 0,\n    y: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\nexport const LAYOUT_OPT_4: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 15,\n    x: 11,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.ScatterPlotGlyphs,\n    w: 14,\n    h: 15,\n    x: 11,\n    y: 15,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n]\n\nexport const LAYOUT_OPTIONS = [\n  DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n  DEFAULT_GRID_LAYOUT_NOMINAL,\n  LAYOUT_OPT_2,\n  LAYOUT_OPT_3,\n  LAYOUT_OPT_4,\n]\n\nexport const LAYOUT_IMAGES = [\n  `/table-data-visualization/images/layout_0.png`,\n  `/table-data-visualization/images/layout_1.png`,\n  `/table-data-visualization/images/layout_2.png`,\n  `/table-data-visualization/images/layout_3.png`,\n  `/table-data-visualization/images/layout_4.png`,\n]\n","export const CATEGORY_LIMIT = 10\n\nexport enum OptionType {\n  leave = `leave`,\n  change = `change`,\n  filter = `filter`,\n}\n\nexport const OPTION_TYPES = Object.values(OptionType)\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, ChangeEvent } from 'react'\nimport { Add, AutoGraph } from '@mui/icons-material'\nimport { Box, Button } from '@mui/material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadError, DataLoadState } from '../../../../../constants/data/dataLoadState'\nimport {\n  SAMPLE_DATASET_OPTIONS,\n  SampleDataset,\n  sampleDatasetIcons,\n  sampleDatasets,\n} from '../../../../../constants/data/sampleDataset'\n\nimport { FILE_READER_TEXT } from '../../../../../text/siteText'\n\nimport {\n  fileReaderStyle,\n  getFileReaderBoxStyle,\n} from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\nimport { ClickableButton } from '../buttons/ClickableButton'\nimport { getAttributeKeys } from '../../../../../helpers/data/data'\nimport { NullDialog } from './NullDialog'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: Array<DataType>): Array<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nconst FILE_INPUT_ID = `FILE_INPUT`\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isNullDialogOpen, setIsNullDialogOpen] = useState(false)\n  const [nullContainingAttributes, setNullContainingAttributes] = useState<Array<keyof SelectableDataType>>([])\n  const [rawDataset, setRawDataset] = useState<Array<SelectableDataType>>([])\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const handleListItemClick = useCallback(\n    (optionKey: SampleDataset) => {\n      setIsSampleDataDialogOpen(false)\n      const dataset = sampleDatasets[optionKey]\n      setDataset(addSelected(dataset))\n      setDataLoadState(DataLoadState.Loaded)\n    },\n    [setDataLoadState, setDataset],\n  )\n\n  const closeDialog = useCallback(() => {\n    setIsNullDialogOpen(false)\n    setRawDataset([])\n    setNullContainingAttributes([])\n  }, [])\n\n  const getDatasetFromFile = useCallback(\n    async (fileType: AcceptableFileTypes | string, selectedFile: File): Promise<DataType[] | null> => {\n      switch (fileType) {\n        case AcceptableFileTypes.json: {\n          const text = await selectedFile.text()\n          return JSON.parse(text)\n        }\n        case AcceptableFileTypes.csv: {\n          const textCsv = await selectedFile.text()\n          return CsvParse(textCsv)\n        }\n        default: {\n          return null\n        }\n      }\n    },\n    [],\n  )\n\n  const handleFileChange = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files?.length) {\n        setDataLoadState(DataLoadState.Loading)\n        const selectedFile = e.target.files[0]\n        const fileType = selectedFile.type\n        const dataset = await getDatasetFromFile(fileType, selectedFile)\n\n        if (dataset === null || !isArrayOfDataType(dataset)) {\n          const dataLoadErrorType = dataset === null ? DataLoadError.unsupportedFile : DataLoadError.unsupportedFormat\n          setDataLoadState(DataLoadState.NoData)\n          setAlertDialogText(FILE_READER_TEXT.alertDialog[dataLoadErrorType])\n          setIsAlertDialogOpen(true)\n          setDataset(null)\n          return\n        }\n\n        const selectableDataset = addSelected(dataset)\n        const nullContainingAttributes = getAttributeKeys(selectableDataset).filter((att) =>\n          dataset.some((data) => data[att] === null),\n        )\n        if (nullContainingAttributes.length) {\n          setNullContainingAttributes(nullContainingAttributes)\n          setRawDataset(selectableDataset)\n          setIsNullDialogOpen(true)\n          const fileEl = document.getElementById(FILE_INPUT_ID) as unknown as { value: null }\n          fileEl.value = null\n          return\n        }\n        setDataset(selectableDataset)\n        setDataLoadState(DataLoadState.Loaded)\n      }\n    },\n    [getDatasetFromFile, setDataLoadState, setDataset],\n  )\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={FILE_READER_TEXT.sampleDataDialogTitle}\n        options={SAMPLE_DATASET_OPTIONS.map((key) => ({\n          key,\n          label: FILE_READER_TEXT.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={FILE_READER_TEXT.alertDialog.confirm}\n        alert={true}\n      />\n      <NullDialog\n        isOpen={isNullDialogOpen}\n        onClose={() => {\n          setDataLoadState(DataLoadState.NoData)\n          closeDialog()\n        }}\n        nullContainingAttributes={nullContainingAttributes}\n        dataset={rawDataset}\n        setDataset={(dataset) => {\n          setDataset(dataset)\n          setDataLoadState(DataLoadState.Loaded)\n          closeDialog()\n        }}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={FILE_READER_TEXT.sampleDataLabel}\n        />\n        <Button sx={fileReaderStyle.button} variant=\"contained\" component=\"label\">\n          <Add />\n          {FILE_READER_TEXT.button}\n          <input type=\"file\" hidden id={FILE_INPUT_ID} onChange={handleFileChange} />\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataLoadError } from '../constants/data/dataLoadState'\nimport { OptionType } from '../constants/data/data'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  labelBrushColor: `Brush color`,\n  addViewDialogTitle: `Add a view`,\n  labelDialogTitle: `Set predefined layout`,\n  noOption: `All view options are currently displayed.`,\n  saveText: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    save: `Save`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n  filter: `Filter`,\n}\n\nexport const FILE_READER_TEXT = {\n  button: `Select a file`,\n  sampleDataLabel: `Try it on the sample data`,\n  sampleDataDialogTitle: `Select sample dataset`,\n  sampleDataDialogText: {\n    [SampleDataset.flowers]: `Flower dataset`,\n    [SampleDataset.birds]: `Bird dataset`,\n    [SampleDataset.cars]: `Car dataset`,\n    [SampleDataset.titanic]: `Titanic dataset`,\n    [SampleDataset.parallelCars]: `Car parallel dataset`,\n  },\n  alertDialog: {\n    [DataLoadError.unsupportedFile]: {\n      title: `File type not supported`,\n      description: `This file type is not supported. Use JSON or CSV file.`,\n    },\n    [DataLoadError.unsupportedFormat]: {\n      title: `File format not supported`,\n      description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n    },\n    confirm: `OK`,\n  },\n  nullDialog: {\n    title: `Data with null values occurred!`,\n    description: `This application provides only basic operations for modifying null data values. For better processing, use applications designed for this purpose.`,\n    confirm: `Confirm`,\n    optionsText: {\n      [OptionType.leave]: `Leave as is`,\n      [OptionType.filter]: `Filter`,\n      [OptionType.change]: `Change all`,\n    },\n    optionsDescription: {\n      [OptionType.leave]: `This option leaves the data as is. On numeric scales, null values will be cast to 0, in the table they will be displayed as null, for categorical data a separate category will be created.`,\n      [OptionType.filter]: `This option filters out all data with null values. These data will not be considered further in the application.`,\n      [OptionType.change]: `This option replaces all null values with the value entered below.`,\n    },\n    changeTo: `Change to`,\n    attribute: `Attribute:`,\n  },\n}\n\nexport const LAYOUT_DIALOG_TEXT = {\n  title: `Set a layout`,\n  alt: `Layout `,\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  middle: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n  right: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonHoverBackground,\n      },\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant=\"contained\" onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS, HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n\n  padding: isHighlighted ? px(8, 2) : 0,\n  borderRadius: px(10),\n})\n\nexport const fileReaderStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 6, 0, 2),\n    bgcolor: BUTTON_COLORS.buttonOnBackground,\n    color: BUTTON_COLORS.fontOn,\n    '&:hover': {\n      bgcolor: BUTTON_COLORS.buttonHoverBackground,\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { border, important, px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS, ERROR_COLORS, BUTTON_COLORS, CARD_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  description: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n  innerContent: {\n    padding: px(0, 40, 10),\n  },\n  contentBox: {\n    height: px(120),\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  text: {\n    color: SITE_COLORS.font,\n  },\n  toggleDialogGroup: {\n    width: `100%`,\n    marginBottom: px(5),\n    display: `flex`,\n  },\n  toggleDialogButton: {\n    flexGrow: 1,\n    padding: px(6),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonDialogBackground,\n      color: BUTTON_COLORS.buttonDialogFont,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonDialogHoverBackground,\n      },\n    },\n  },\n  button: {\n    margin: px(0, 20, 20),\n  },\n  attHeader: {\n    fontSize: px(16),\n    fontWeight: `bold`,\n    paddingBottom: px(4),\n    color: SITE_COLORS.font,\n  },\n  textInput: {\n    minWidth: `95%`,\n    alignSelf: `center`,\n    '&.MuiFormControl-root': {\n      margin: px(20, 6, 6),\n    },\n    '& input': {\n      padding: px(8, 10, 6),\n    },\n  },\n  card: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    minWidth: px(400),\n    border: border(1, CARD_COLORS.border),\n    margin: px(2),\n    bgcolor: CARD_COLORS.background,\n    '&:hover': {\n      bgcolor: important(CARD_COLORS.backgroundHover),\n    },\n  },\n  image: {\n    width: 220,\n    height: 85,\n    borderRadius: px(2),\n  },\n  cardContent: {\n    padding: px(10),\n  },\n  itemText: {\n    fontSize: px(10),\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.description}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  NominalRecord,\n  NominalValueProperties,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\nimport { NodeDataPoint, SankeyGraph } from '../../types/d3-sankey'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultNominalAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => Object.fromEntries(getCategoryAttributesKeys(dataset).map((key) => [key, true]))\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n\nexport const getNominalValueProperties = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  attribute: keyof SelectableDataType,\n): Array<NominalValueProperties> =>\n  dataset.reduce((nominalValuePropertiesArr, data) => {\n    const containedIdx = nominalValuePropertiesArr.findIndex((values) => values.name === String(data[attribute]))\n    if (containedIdx !== -1) {\n      const prev = nominalValuePropertiesArr[containedIdx]\n      nominalValuePropertiesArr[containedIdx] = {\n        ...prev,\n        count: nominalValuePropertiesArr[containedIdx].count + 1,\n        countSelected: nominalValuePropertiesArr[containedIdx].countSelected + (data.selected ? 1 : 0),\n      }\n      return nominalValuePropertiesArr\n    }\n    const newNominalValueProperties: NominalValueProperties = {\n      name: String(data[attribute]),\n      attribute,\n      count: 1,\n      countSelected: data.selected ? 1 : 0,\n    }\n    nominalValuePropertiesArr = [...nominalValuePropertiesArr, newNominalValueProperties]\n    return nominalValuePropertiesArr\n  }, [] as Array<NominalValueProperties>)\n\nexport const getNominalValuesRecord = (dataset: ReadonlyArray<SelectableDataType>): NominalRecord =>\n  Object.fromEntries(\n    getCategoryAttributesKeys(dataset).map((attribute) => [attribute, getNominalValueProperties(dataset, attribute)]),\n  )\n\nexport const getNeighborAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): Array<[keyof SelectableDataType, keyof SelectableDataType]> =>\n  displayAttributes.slice(0, -1).map((att, idx) => [att, displayAttributes[idx + 1]])\n\nexport const getGraph = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  record: NominalRecord,\n  attFrom: keyof SelectableDataType,\n  attTo: keyof SelectableDataType,\n): SankeyGraph => {\n  const nodes: Array<NodeDataPoint> = [...record[attFrom], ...record[attTo]]\n  const toIdxStart = record[attFrom].length\n\n  const links = record[attFrom].flatMap((from, idxFrom) =>\n    record[attTo].map((to, idxTo) => {\n      const filtered = dataset.filter(\n        (data) => String(data[attFrom]) === String(from.name) && String(data[attTo]) === String(to.name),\n      )\n      return {\n        source: idxFrom,\n        target: idxTo + toIdxStart,\n        names: [from.name, to.name],\n        selected: filtered.filter((data) => data.selected).length,\n        value: filtered.length,\n      }\n    }),\n  )\n\n  return { nodes, links }\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  TextField,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material'\n\nimport { SelectableDataType } from '../../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../../helpers/data/formatText'\n\nimport { OPTION_TYPES, OptionType } from '../../../../../constants/data/data'\n\nimport { FILE_READER_TEXT } from '../../../../../text/siteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface NullDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  nullContainingAttributes: Array<keyof SelectableDataType>\n  dataset: Array<SelectableDataType>\n  setDataset: (dataset: Array<SelectableDataType>) => void\n}\n\nexport const NullDialog: VoidFunctionComponent<NullDialogProps> = ({\n  isOpen,\n  onClose,\n  nullContainingAttributes,\n  dataset,\n  setDataset,\n}) => {\n  const [optionsChosen, setOptionsChosen] = useState<Record<keyof SelectableDataType, OptionType>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, OptionType.leave])),\n  )\n  const [replaceValue, setReplaceValue] = useState<Record<keyof SelectableDataType, string>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])),\n  )\n\n  useEffect(() => {\n    setOptionsChosen(Object.fromEntries(nullContainingAttributes.map((att) => [att, OptionType.leave])))\n    setReplaceValue(Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])))\n  }, [nullContainingAttributes])\n\n  const getFixedDataset = useCallback(\n    (dataset: SelectableDataType[], attribute: keyof SelectableDataType) => {\n      switch (optionsChosen[attribute]) {\n        case OptionType.filter:\n          return dataset.filter((data) => data[attribute] !== null)\n        case OptionType.change: {\n          const newValue = !isNaN(Number(replaceValue[attribute]))\n            ? Number(replaceValue[attribute])\n            : replaceValue[attribute]\n          return dataset.map((data) => ({\n            ...data,\n            [attribute]: data[attribute] === null ? newValue : data[attribute],\n          }))\n        }\n        case OptionType.leave:\n          return dataset\n      }\n    },\n    [optionsChosen, replaceValue],\n  )\n\n  const handleNullDialogConfirm = useCallback(() => {\n    let datasetFixed: SelectableDataType[] = dataset\n    nullContainingAttributes.forEach((attribute) => {\n      datasetFixed = getFixedDataset(datasetFixed, attribute)\n    })\n    setDataset(datasetFixed)\n  }, [dataset, getFixedDataset, nullContainingAttributes, setDataset])\n\n  const handleToggleChange = useCallback(\n    (value: OptionType, attribute: keyof SelectableDataType) =>\n      setOptionsChosen((prev) => ({\n        ...prev,\n        [attribute]: value,\n      })),\n    [],\n  )\n  const handleReplaceChange = useCallback(\n    (value: string, attribute: keyof SelectableDataType) =>\n      setReplaceValue((prev) => ({\n        ...prev,\n        [attribute]: value,\n      })),\n    [],\n  )\n\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{FILE_READER_TEXT.nullDialog.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        <DialogContentText sx={dialogStyle.description}>{FILE_READER_TEXT.nullDialog.description}</DialogContentText>\n        {nullContainingAttributes.map((attribute) => {\n          const option = optionsChosen[attribute]\n          return (\n            <Box key={attribute} sx={dialogStyle.innerContent}>\n              <Typography sx={dialogStyle.attHeader}>{`${\n                FILE_READER_TEXT.nullDialog.attribute\n              } ${otherCasesToWhitespaces(attribute)}`}</Typography>\n              <ToggleButtonGroup\n                sx={dialogStyle.toggleDialogGroup}\n                value={option}\n                exclusive\n                onChange={(e, value) => handleToggleChange(value, attribute)}\n              >\n                {OPTION_TYPES.map((optType, idx) => (\n                  <ToggleButton sx={dialogStyle.toggleDialogButton} value={optType} key={idx}>\n                    {FILE_READER_TEXT.nullDialog.optionsText[optType]}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n              <Box sx={dialogStyle.contentBox}>\n                <Typography sx={dialogStyle.text}>{FILE_READER_TEXT.nullDialog.optionsDescription[option]}</Typography>\n                {option === OptionType.change && (\n                  <TextField\n                    label={FILE_READER_TEXT.nullDialog.changeTo}\n                    sx={dialogStyle.textInput}\n                    defaultValue={replaceValue[attribute]}\n                    onChange={(e) => handleReplaceChange(e.target.value, attribute)}\n                  />\n                )}\n              </Box>\n            </Box>\n          )\n        })}\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"contained\" onClick={handleNullDialogConfirm} sx={dialogStyle.button} autoFocus>\n          {FILE_READER_TEXT.nullDialog.confirm}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T extends SelectableDataType>(a: T, b: T, orderBy: keyof T) => {\n  if (a[orderBy] === true) return b[orderBy] === true ? 0 : 1\n  if (a[orderBy] === false) return b[orderBy] === false ? 0 : -1\n\n  return b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n}\n\nexport enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n\nexport const getComparator = (sort: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sort === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction, useCallback } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\nconst ON_VALUE = `on`\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = useCallback(\n    (event: MouseEvent<HTMLElement>, checked: string[]) => {\n      if (checked.length && checked[0] === ON_VALUE) {\n        return setValue(true)\n      }\n      return setValue(false)\n    },\n    [setValue],\n  )\n  return (\n    <ToggleButtonGroup value={value ? [ON_VALUE] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={ON_VALUE} aria-label={label} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    color: BUTTON_COLORS.buttonOnBackground,\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Settings } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\n\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <IconButton size=\"small\" disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Settings />\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const getColorInputStyle = (disabled?: boolean): SxProps => ({\n  display: `flex`,\n  '& .MuiSvgIcon-root': {\n    color: disabled ? BUTTON_COLORS.fontDisabled : BUTTON_COLORS.buttonOnBackground,\n  },\n})\n\nexport const getColorInputBoxStyle = (color: string, disabled?: boolean): SxProps => ({\n  bgcolor: disabled ? BUTTON_COLORS.fontDisabled : color,\n  minWidth: px(25),\n  minHeight: px(25),\n  borderRadius: px(5),\n  ml: px(2),\n  border: border(1, disabled ? BUTTON_COLORS.buttonDisableBackground : BUTTON_COLORS.colorBorder),\n})\n\nexport const colorInputStyle: Record<string, SxProps> = {\n  inputBox: {\n    position: `relative`,\n    '& input': {\n      width: `100%`,\n      opacity: 0,\n      position: `absolute`,\n      left: 0,\n    },\n  },\n}\n","import { useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Box, Tooltip } from '@mui/material'\n\nimport { useDebounce } from '../../../../../helpers/react/useDebounce'\n\nimport { COLOR_DEBOUNCE } from '../../../../../constants/debounce/debounce'\n\nimport {\n  colorInputStyle,\n  getColorInputBoxStyle,\n  getColorInputStyle,\n} from '../../../../../components-style/content/top-toolbar/items/buttons/colorButtonStyle'\n\nexport interface ColorButtonProps {\n  color: string\n  handleSetColor: (color: string) => void\n  tooltip: string\n  disabled?: boolean\n  icon: JSX.Element\n}\n\nexport const ColorButton: VoidFunctionComponent<ColorButtonProps> = ({\n  color,\n  handleSetColor,\n  tooltip,\n  disabled,\n  icon,\n}) => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n  useEffect(() => {\n    handleSetColor(debouncedColor)\n  }, [debouncedColor, handleSetColor])\n\n  return (\n    <Tooltip title={tooltip} disableHoverListener={disabled}>\n      <Box sx={colorInputStyle.inputBox}>\n        <input disabled={disabled} type=\"color\" value={color} onChange={(e) => setCurrentColor(e.target.value)} />\n        <Box sx={getColorInputStyle(disabled)}>\n          {icon}\n          <Box sx={getColorInputBoxStyle(color, disabled)} />\n        </Box>\n      </Box>\n    </Tooltip>\n  )\n}\n","export const TEXT_INPUT_DEBOUNCE = 400\n\nexport const BRUSH_DEBOUNCE = 10\n\nexport const COLOR_DEBOUNCE = 60\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { AddCircle, AutoFixOff, Brush, Dashboard, Info, SkipNext } from '@mui/icons-material'\nimport { Box } from '@mui/material'\n\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\nimport { ColorButton } from './items/buttons/ColorButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsLayoutDialogOpen: Dispatch<SetStateAction<boolean>>\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  removeLayout: () => void\n\n  brushColor: string\n  setBrushColor: Dispatch<SetStateAction<string>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n  setIsLayoutDialogOpen,\n  removeLayout,\n  brushColor,\n  setBrushColor,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelAddView}\n      />\n      <ClickableButton\n        onClick={() => {\n          setIsLayoutDialogOpen(true)\n          removeLayout()\n        }}\n        icon={<Dashboard />}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDialogTitle}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ToggleButtonSingle\n        icon={<Info />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.middle}>\n      <ColorButton\n        color={brushColor}\n        handleSetColor={(color) => setBrushColor(color)}\n        icon={<Brush />}\n        disabled={isToolsDisabled}\n        tooltip={TOP_TOOLBAR_TEXT.labelBrushColor}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<AutoFixOff />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n    stroke: `stroke`\n    strokeWidth: `stroke-width`\n    textAnchor: `text-anchor`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n    start: `start`\n    end: `end`\n    middle: `middle`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    stroke: `stroke`,\n    strokeWidth: `stroke-width`,\n    textAnchor: `text-anchor`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n    start: `start`,\n    end: `end`,\n    middle: `middle`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views/ViewType'\n\nexport const MENU_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER_TEXT = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.DataTable]: `Data Table`,\n  [ViewType.ParallelSetsBundled]: `Parallel Sets (bundled layout)`,\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { TOOLTIP } from '../../../constants/views/tooltip'\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, calc, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const dataDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  fill: {\n    flexGrow: 1,\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n  footer: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n  },\n  githubIcon: {\n    paddingRight: px(6),\n    fontSize: px(18),\n  },\n  text: {\n    color: DATA_DRAWER_COLORS.icon,\n    fontSize: px(9),\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `center`,\n  },\n}\n","export enum ColoringType {\n  left = `Left`,\n  right = `Right`,\n  no = `No color`,\n}\n","export enum ParallelSetsBrushingType {\n  top = `top`,\n  overlay = `overlay`,\n}\n","import { schemeCategory10 } from 'd3'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { SortType } from '../../helpers/data/comparator'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewType'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  sort: `Sort...`,\n  ...MENU_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const dataDrawerMenuStyle: Record<string, SxProps> = {\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const menuTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n    padding: px(6, 5, 3),\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\n\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<Opt extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: Opt) => Partial<Opt>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <Opt extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<Opt>): JSX.Element => {\n  const handleCheckboxChange = useCallback(\n    (eventChecked: boolean, key: keyof SelectableDataType) => {\n      const newChecked = { ...checked, [key]: eventChecked }\n      setChecked(newChecked)\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        const newSettings = getNewSettings(newChecked, prevSettings)\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            ...newSettings,\n          },\n        }\n      })\n    },\n    [checked, getNewSettings, handleChangeSettings, setChecked, setSettings, viewType],\n  )\n  const handleMove = useCallback(\n    (newAttributesKeys: Array<keyof SelectableDataType>) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setAttributesKeys(newAttributesKeys)\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n          },\n        }\n      })\n    },\n    [checked, handleChangeSettings, setAttributesKeys, setSettings, viewType],\n  )\n\n  const onUpButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  const onDownButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = useCallback(\n    (categoryAttribute: keyof SelectableDataType | -1) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n          },\n        }\n      })\n    },\n    [setSettings, viewType],\n  )\n\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = useCallback(\n    (newValue: keyof SelectableDataType) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [handleChangeSettings, setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  handleChangeSettings?: () => void\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({\n  margins,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentMargins, setCurrentMargins] = useState<MarginArray>(margins)\n  const debouncedMargins = useDebounce(currentMargins, TEXT_INPUT_DEBOUNCE)\n\n  const handleMarginChange = useCallback((newMargin: number, idx: number) => {\n    setCurrentMargins((oldMargins) => {\n      const newMargins: MarginArray = [...oldMargins]\n      newMargins[idx] = newMargin\n      return newMargins\n    })\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: debouncedMargins,\n        },\n      }\n    })\n  }, [debouncedMargins, handleChangeSettings, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type=\"number\"\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type=\"number\"\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type=\"number\"\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type=\"number\"\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nexport interface NumberInputProps<Opt> {\n  viewType: ViewType\n  label: string\n  valueKey: keyof Opt\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <Opt,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<Opt>): JSX.Element => {\n  const [currentValue, setCurrentValue] = useState(value)\n  const debouncedValue = useDebounce(currentValue, TEXT_INPUT_DEBOUNCE)\n\n  const handleChangeValue = useCallback((newValue: number) => {\n    setCurrentValue(newValue)\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: debouncedValue,\n        },\n      }\n    })\n  }, [debouncedValue, setSettings, valueKey, viewType, handleChangeValue, handleChangeSettings])\n\n  const minVal = min ? { min } : { min: 0 }\n  const maxVal = max ? { max } : {}\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type=\"number\"\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={{ inputMode: `numeric`, ...minVal, ...maxVal }}\n        onChange={(e) => handleChangeValue(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacities: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({\n  header,\n  opacities,\n  setSettings,\n  viewType,\n}) => {\n  const [currentOpacities, setCurrentOpacities] = useState<Opacity>(opacities)\n  const debouncedOpacities = useDebounce(currentOpacities, TEXT_INPUT_DEBOUNCE)\n\n  const handleOpacityChange = useCallback((newOpacity: number, idx: number) => {\n    setCurrentOpacities((oldOpacities) => {\n      const newOpacities: Opacity = [...oldOpacities]\n      newOpacities[idx] = newOpacity\n      return newOpacities\n    })\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: debouncedOpacities,\n        },\n      }\n    })\n  }, [debouncedOpacities, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type=\"number\"\n        defaultValue={opacities[0]}\n        sx={numberInputStyles.textField}\n        inputProps={{ min: 0, max: 100 }}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type=\"number\"\n          defaultValue={opacities[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type=\"number\"\n          defaultValue={opacities[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const getPalettePickerColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useEffect, useCallback } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport { PALETTE_PICKER_TEXT } from '../../../../text/views-and-menus/common'\n\nimport {\n  getPalettePickerColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({\n  colors,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentColors, setCurrentColors] = useState<ColorArray>(colors)\n  const debouncedColors = useDebounce(currentColors, COLOR_DEBOUNCE)\n\n  const handleSetColor = useCallback((newColor: string, idx: number) => {\n    if (newColor) {\n      setCurrentColors((oldColors) => {\n        const newColors: ColorArray = [...oldColors]\n        newColors[idx] = newColor\n        return newColors\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          colorCategory: debouncedColors,\n        },\n      }\n    })\n  }, [debouncedColors, setSettings, viewType, handleChangeSettings])\n\n  const getInput = useCallback(\n    (idx: number) => (\n      <Box sx={palettePickerStyle.col} key={idx}>\n        <label>{PALETTE_PICKER_TEXT.categoriesLabel[idx]}</label>\n        <Box sx={getPalettePickerColorInputStyle(colors, idx)}>\n          <input type=\"color\" value={colors[idx]} onChange={(e) => handleSetColor(e.target.value, idx)} />\n        </Box>\n      </Box>\n    ),\n    [colors, handleSetColor],\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER_TEXT.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  box: {\n    marginTop: important(0),\n  },\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = useCallback(\n    (newValue: T) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <Box sx={toggleButtonsStyle.box}>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewType'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { SortType } from '../../../../helpers/data/comparator'\n\nexport const GlyphsMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType, prevSettings: GlyphsSettings): Partial<GlyphsSettings> => {\n      const displayAttributes = getCurrentDisplayAttributes(newChecked)\n      const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n      const sortAttribute = newChecked[prevSettings.sortAttribute]\n        ? prevSettings.sortAttribute\n        : newSortableAttributes?.[0]\n      return { displayAttributes, sortAttribute }\n    },\n    [getCurrentDisplayAttributes, quantitativeAttributesKeys],\n  )\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <Typography sx={menuTextStyle.text}>{GLYPHS_MENU_TEXT.sort}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacities={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SortType } from '../../../helpers/data/comparator'\n\nimport { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [10, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewType'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewType'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ParallelCoordinates),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacities={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewType'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `Scatter plot cannot be displayed, window is too small. Change the size, number of attributes displayed or margin to display scatter plot matrix`,\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotMatrix),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <Typography sx={menuTextStyle.text}>{SCATTER_PLOT_MATRIX_MENU_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacities={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 20, 30],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewType'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  glyphSizeKey,\n  ScatterPlotGlyphsSettings,\n  xAttributeKey,\n  yAttributeKey,\n} from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views/ViewType'\n\nimport { SCATTER_PLOT_GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createScatterPlotGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<ScatterPlotGlyphsSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotGlyphs),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_MENU_TEXT.opacity}\n                  opacities={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { DEFAULT_BRUSH_BG_COLOR_TABLE, DEFAULT_BRUSH_FONT_COLOR_TABLE } from './common'\n\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\nexport const DATA_TABLE_DEFAULT: Pick<\n  DataTableSettings,\n  `rowHeight` | `selectedBackgroundColor` | `selectedFontColor`\n> = {\n  rowHeight: 45,\n  selectedBackgroundColor: DEFAULT_BRUSH_BG_COLOR_TABLE,\n  selectedFontColor: DEFAULT_BRUSH_FONT_COLOR_TABLE,\n}\n","import { ViewType } from '../../constants/views/ViewType'\nimport { SortType } from '../../helpers/data/comparator'\nimport { MENU_BASE_TEXT, VIEW_NAMES } from './common'\n\nexport const DATA_TABLE_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes him not valid. Please choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  selectedBackgroundColor: `Selected background color`,\n  selectedFontColor: `Selected font color`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascending`,\n  [SortType.desc]: `Sort descending`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from the menu.`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const getColorPickerInputStyle = (color: string): SxProps => ({\n  bgcolor: color,\n  width: px(25),\n  borderRadius: px(5),\n  '& input': {\n    width: `100%`,\n    height: px(25),\n    opacity: 0,\n  },\n})\n\nexport const colorPickerStyle: Record<string, SxProps> = {\n  picker: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `center`,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport {\n  colorPickerStyle,\n  getColorPickerInputStyle,\n} from '../../../../components-style/content/data-drawer/items/colorPickerStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface ColorPickerProps<Opt> {\n  viewType: ViewType\n  color: string\n  settingsKey: keyof Opt\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const ColorPicker = <Opt,>({\n  viewType,\n  color,\n  settingsKey,\n  setSettings,\n  label,\n}: ColorPickerProps<Opt>): JSX.Element => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n\n  const handleChangeColor = useCallback((newColor: string) => {\n    if (newColor) {\n      setCurrentColor(newColor)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: debouncedColor,\n        },\n      }\n    })\n  }, [debouncedColor, setSettings, settingsKey, viewType])\n  return (\n    <Box sx={colorPickerStyle.picker}>\n      <Typography sx={menuTextStyle.text}>{label}</Typography>\n      <Box sx={getColorPickerInputStyle(color)}>\n        <input type=\"color\" value={color} onChange={(e) => handleChangeColor(e.target.value)} />\n      </Box>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  DataTableSettings,\n  rowHeightKey,\n  selectedBackgroundColorKey,\n  selectedFontColorKey,\n} from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_MENU_TEXT } from '../../../../text/views-and-menus/dataTable'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const DataTableMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => attributesKeys.filter((key) => currChecked[key]),\n    [attributesKeys],\n  )\n\n  const createDataTableMenu = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{DATA_TABLE_MENU_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  viewType={viewType}\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.rowHeight}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedBackgroundColor}\n                  settingsKey={selectedBackgroundColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedBackgroundColor}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedFontColor}\n                  settingsKey={selectedFontColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedFontColor}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{DATA_TABLE_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { VisualizationSettings } from './VisualizationSettings'\n\nexport const rowHeightKey = `rowHeight`\nexport const selectedBackgroundColorKey = `selectedBackgroundColor`\nexport const selectedFontColorKey = `selectedFontColor`\n\n/**\n * Settings for Data Table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n\n  /**\n   * Selected background color\n   */\n  [selectedBackgroundColorKey]: string\n  /**\n   * Selected font color\n   */\n  [selectedFontColorKey]: string\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ColoringType } from '../data/ColoringType'\nimport { ParallelSetsBrushingType } from '../data/ParallelSetsBrushingType'\nimport { DEFAULT_FONT_COLOR_PARALLEL_SETS } from './common'\n\nexport const MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_SETS_BUNDLED_DEFAULT: Pick<\n  ParallelSetsBundledSettings,\n  | `margins`\n  | `opacity`\n  | `colorCategory`\n  | `tabWidth`\n  | `tabSpacing`\n  | `tabGap`\n  | `coloringType`\n  | `brushingType`\n  | `fontColor`\n> = {\n  margins: [5, 50, 10, 50],\n  opacity: [60, 70, 25],\n  colorCategory: schemeCategory10 as ColorArray,\n  tabWidth: 8,\n  tabSpacing: 3,\n  tabGap: 10,\n  coloringType: ColoringType.left,\n  brushingType: ParallelSetsBrushingType.top,\n  fontColor: DEFAULT_FONT_COLOR_PARALLEL_SETS,\n}\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseAction {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { ViewType } from '../../constants/views/ViewType'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_SETS_BUNDLED_TEXT = {\n  unavailable: `Parallel sets plot cannot be displayed with a single attribute. To generate a parallel sets plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_SETS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelSetsBundled],\n  unavailable: `The parallel sets plot cannot be used while data has less than 2 nominal attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of connectors`,\n  tabWidth: `Width of the tabs`,\n  tabSpacing: `Spacing between tabs`,\n  tabGap: `Gap between tabs`,\n  coloringType: `Coloring from...`,\n  brushing: `Brushing...`,\n  fontColor: `Inner font color`,\n  ...MENU_TEXT,\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  brushingTypeKey,\n  coloringTypeKey,\n  fontColorKey,\n  ParallelSetsBundledSettings,\n  tabGapKey,\n  tabSpacingKey,\n  tabWidthKey,\n} from '../../../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { getCategoryAttributesKeys, getDefaultNominalAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport {\n  MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT,\n  PARALLEL_SETS_BUNDLED_DEFAULT,\n} from '../../../../constants/views/parallelSetsBundled'\nimport { ColoringType } from '../../../../constants/data/ColoringType'\nimport { ParallelSetsBrushingType } from '../../../../constants/data/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_MENU_TEXT } from '../../../../text/views-and-menus/parallelSetsBundled'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const ParallelSetsBundledMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.ParallelSetsBundled\n  const parallelSetsBundledSettings = settings[viewType]\n\n  const [nominalAttributesKeys, setNominalAttributesKeys] = useState(getCategoryAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultNominalAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => nominalAttributesKeys.filter((key) => currChecked[key]),\n    [nominalAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelSetsBundledMenu = useCallback(() => {\n    const newChecked = getDefaultNominalAttributesChecked(dataset)\n    const newCatKeys = getCategoryAttributesKeys(dataset)\n    setChecked(newChecked)\n    setNominalAttributesKeys(newCatKeys)\n    setSettings((prev) => {\n      const newParallelSetsBundled: ParallelSetsBundledSettings = {\n        displayAttributes: newCatKeys.filter((key) => newChecked[key]),\n        ...PARALLEL_SETS_BUNDLED_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelSetsBundled]: newParallelSetsBundled }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelSetsBundledMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (parallelSetsBundledSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_SETS_MENU_TEXT.header}</h1>\n        {nominalAttributesKeys.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={nominalAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_SETS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setNominalAttributesKeys}\n            />\n            <Typography sx={menuTextStyle.text}>{PARALLEL_SETS_MENU_TEXT.coloringType}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={parallelSetsBundledSettings.coloringType}\n              options={Object.values<ColoringType>(ColoringType)}\n              setSettings={setSettings}\n              settingsKey={coloringTypeKey}\n            />\n            <Typography sx={menuTextStyle.text}>{PARALLEL_SETS_MENU_TEXT.brushing}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={parallelSetsBundledSettings.brushingType}\n              options={Object.values<ParallelSetsBrushingType>(ParallelSetsBrushingType)}\n              setSettings={setSettings}\n              settingsKey={brushingTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_SETS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelSetsBundledSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_MENU_TEXT.tabWidth}\n                  valueKey={tabWidthKey}\n                  value={parallelSetsBundledSettings.tabWidth}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_MENU_TEXT.tabSpacing}\n                  valueKey={tabSpacingKey}\n                  value={parallelSetsBundledSettings.tabSpacing}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_MENU_TEXT.tabGap}\n                  valueKey={tabGapKey}\n                  value={parallelSetsBundledSettings.tabGap}\n                  setSettings={setSettings}\n                />\n                <Divider />\n                <ColorPicker\n                  viewType={viewType}\n                  color={parallelSetsBundledSettings.fontColor}\n                  settingsKey={fontColorKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_SETS_MENU_TEXT.fontColor}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_SETS_MENU_TEXT.opacity}\n                  opacities={parallelSetsBundledSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelSetsBundledSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_SETS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ColoringType } from '../../../constants/data/ColoringType'\nimport { ParallelSetsBrushingType } from '../../../constants/data/ParallelSetsBrushingType'\n\nimport { BaseViewVisualizationSettings } from './VisualizationSettings'\n\nexport const tabWidthKey = `tabWidth`\nexport const tabSpacingKey = `tabSpacing`\nexport const tabGapKey = `tabGap`\nexport const coloringTypeKey = `coloringType`\nexport const brushingTypeKey = `brushingType`\nexport const fontColorKey = `fontColor`\n\n/**\n * Settings for Parallel Sets Bundled view\n */\nexport interface ParallelSetsBundledSettings extends BaseViewVisualizationSettings {\n  /**\n   * Is coloring from left side\n   */\n  [coloringTypeKey]: ColoringType\n\n  /**\n   * Brushing - displayed from top top or overlay\n   */\n  [brushingTypeKey]: ParallelSetsBrushingType\n\n  /**\n   * Width of a tab\n   */\n  [tabWidthKey]: number\n\n  /**\n   * Spacing of tabs\n   */\n  [tabSpacingKey]: number\n\n  /**\n   * Gap between tabs (vertically)\n   */\n  [tabGapKey]: number\n\n  /**\n   * Font color\n   */\n  [fontColorKey]: string\n}\n","export const DATA_DRAWER_TEXT = {\n  description: `This application uses React and D3.js.`,\n  openSource: `Source code is available at`,\n  github: `Github`,\n}\n\nexport const GITHUB_LINK = `https://github.com/stetizu1/table-data-visualization`\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useMemo } from 'react'\nimport { Box, Divider, Drawer, IconButton, Link, Typography } from '@mui/material'\nimport { ChevronRight, GitHub } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewType'\n\nimport { dataDrawerStyle } from '../../../components-style/content/data-drawer/dataDrawerStyle'\n\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot-matrix/ScatterPlotMatrixMenu'\nimport { ScatterPlotGlyphsMenu } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsMenu'\nimport { DataTableMenu } from '../views/data-table/DataTableMenu'\nimport { ParallelSetsBundledMenu } from '../views/parallel-sets-bundeled/ParallelSetsBundledMenu'\nimport { DATA_DRAWER_TEXT, GITHUB_LINK } from '../../../text/dataDrawerText'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: VoidFunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const menus = useMemo(\n    () =>\n      views.map((view, idx) => {\n        switch (view) {\n          case ViewType.Glyphs:\n            return (\n              <GlyphsMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelCoordinates:\n            return (\n              <ParallelCoordinatesMenu\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotMatrix:\n            return (\n              <ScatterPlotMatrixMenu\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotGlyphs:\n            return (\n              <ScatterPlotGlyphsMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.DataTable:\n            return (\n              <DataTableMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelSetsBundled:\n            return (\n              <ParallelSetsBundledMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          default:\n            return null\n        }\n      }),\n    [cleanSelectedIfViewWasBrushing, dataset, setSettings, settings, views],\n  )\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} sx={dataDrawerStyle.drawer}>\n      <Box sx={dataDrawerStyle.header}>\n        <IconButton onClick={close}>\n          <ChevronRight sx={dataDrawerStyle.chevron} />\n        </IconButton>\n      </Box>\n      <Divider />\n      <Box sx={dataDrawerStyle.menu}>{menus.map((menu) => menu)}</Box>\n      <Box sx={dataDrawerStyle.fill} />\n      <Box sx={dataDrawerStyle.footer}>\n        <Typography sx={dataDrawerStyle.text}>{DATA_DRAWER_TEXT.description}</Typography>\n        <Typography sx={dataDrawerStyle.text}>{DATA_DRAWER_TEXT.openSource}</Typography>\n        <Link href={GITHUB_LINK} sx={dataDrawerStyle.text}>\n          <GitHub sx={dataDrawerStyle.githubIcon} />\n          {DATA_DRAWER_TEXT.github}\n        </Link>\n      </Box>\n    </Drawer>\n  )\n}\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Card, CardContent, CardMedia, Dialog, DialogContent, DialogTitle, Divider, Typography } from '@mui/material'\n\nimport { GridLayoutItem } from '../../../../../types/views/Grid'\n\nimport { LAYOUT_IMAGES, LAYOUT_OPTIONS } from '../../../../../constants/views/common'\n\nimport { LAYOUT_DIALOG_TEXT } from '../../../../../text/siteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\nimport { otherCasesToWhitespaces } from '../../../../../helpers/data/formatText'\n\nexport interface LayoutDialogProps {\n  isOpen: boolean\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  onClose: () => void\n  lastLayout: GridLayoutItem[] | null\n}\n\nexport const LayoutDialog: VoidFunctionComponent<LayoutDialogProps> = ({ isOpen, onClose, setLayout, lastLayout }) => {\n  const handleClose = () => {\n    setLayout(lastLayout)\n    onClose()\n  }\n  return (\n    <Dialog onClose={handleClose} open={isOpen}>\n      <DialogTitle>{LAYOUT_DIALOG_TEXT.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        {LAYOUT_OPTIONS.map((layoutItems, idx) => (\n          <Card\n            key={idx}\n            onClick={() => {\n              setLayout(layoutItems)\n              onClose()\n            }}\n            sx={dialogStyle.card}\n          >\n            <CardContent sx={dialogStyle.cardContent}>\n              {layoutItems.map((item) => (\n                <Typography sx={dialogStyle.itemText} key={item.i}>\n                  {otherCasesToWhitespaces(item.i)}\n                </Typography>\n              ))}\n            </CardContent>\n            <CardMedia\n              component=\"img\"\n              sx={dialogStyle.image}\n              image={LAYOUT_IMAGES[idx]}\n              alt={LAYOUT_DIALOG_TEXT.alt + idx}\n            />\n          </Card>\n        ))}\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { HEADER_HEIGHT } from '../../../constants/views/common'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  right: {\n    display: `flex`,\n    flexWrap: `nowrap`,\n    paddingLeft: px(5),\n  },\n  textBox: {\n    padding: px(0, 8),\n    display: `flex`,\n    whiteSpace: `nowrap`,\n    overflow: `hidden`,\n    textOverflow: `ellipsis`,\n  },\n  text: {\n    padding: px(0, 5),\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `center`,\n    fontSize: px(12),\n  },\n  textIcon: {\n    fontSize: px(14),\n    padding: px(4),\n  },\n  header: {\n    height: HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","import { ViewType } from '../views/ViewType'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n  [ViewType.ParallelSetsBundled]: `psbSvgId`,\n}\n\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n  [ViewType.ParallelSetsBundled]: `C_psbSvgId`,\n}\n\nexport const CONTAINER_EMPTY: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_E_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_E_spmSvgId`,\n  [ViewType.Glyphs]: `C_E_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_E_spgSvgId`,\n  [ViewType.DataTable]: `C_E_dataTableId`,\n  [ViewType.ParallelSetsBundled]: `C_E_psbSvgId`,\n}\n","import { ViewType } from '../../constants/views/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, `http://www.w3.org/2000/svg`)\n  const svgData = svgEl.outerHTML\n  const preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\n  const svgBlob = new Blob([preface, svgData], { type: `image/svg+xml;charset=utf-8` })\n  const svgUrl = URL.createObjectURL(svgBlob)\n  const downloadLink = document.createElement(`a`)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\ntype StyleNode = { sheet: CSSStyleSheet }\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    // eslint-disable-next-line no-console\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n  const newStyleNodes = ([...document.querySelectorAll(`[data-emotion]`)] as unknown as Array<StyleNode>)\n    .flatMap(({ sheet }) => [...sheet.cssRules].map((rules) => rules.cssText))\n    .filter((sheet) => sheet.includes(`.${containerClass}`))\n    .map((sheet) => sheet.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n\nexport const getSaveIsDisabled = (viewType: ViewType): boolean =>\n  document.querySelector(`#${CONTAINER_EMPTY[viewType]}`) !== null &&\n  document.querySelector(`#${SAVE_ID[viewType]}`) === null\n","import { SxProps } from '@mui/system'\nimport { BUTTON_COLORS } from '../../../styles/colors'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    margin: 0,\n    padding: 0,\n    minWidth: 0,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n  buttonActive: {\n    color: BUTTON_COLORS.buttonInlinedFontOn,\n    bgcolor: BUTTON_COLORS.buttonInlinedBgOn,\n    borderRadius: px(5),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant=\"contained\" autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant=\"outlined\">\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useCallback, useState, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewType'\n\nimport { getSaveIsDisabled, saveSvg } from '../../../helpers/d3/saveSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\n\nimport { inlineButtonStyles } from '../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from './dialogs/ConfirmationDialog'\n\nexport interface DataSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const DataSaveButton: VoidFunctionComponent<DataSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const openDialog = useCallback(() => setIsDialogOpen(true), [])\n  const closeDialog = useCallback(() => setIsDialogOpen(false), [])\n\n  const onConfirm = useCallback(() => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }, [viewType])\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={TOP_TOOLBAR_TEXT.saveText.header}\n        description={TOP_TOOLBAR_TEXT.saveText.description}\n        onConfirm={onConfirm}\n        onClose={closeDialog}\n        confirmText={TOP_TOOLBAR_TEXT.saveText.confirm}\n        cancelText={TOP_TOOLBAR_TEXT.saveText.cancel}\n      />\n      <Button\n        variant=\"text\"\n        onClick={openDialog}\n        disabled={getSaveIsDisabled(viewType)}\n        sx={inlineButtonStyles.button}\n        aria-label={TOP_TOOLBAR_TEXT.saveText.save}\n      >\n        <Tooltip title={TOP_TOOLBAR_TEXT.saveText.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { Extent } from '../../types/d3-types'\n\nexport const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: Extent, cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\nimport { DataEach } from '../../types/d3-types'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(`1`)\n\nconst TEXT_Y_SHIFTS = { odd: 9, even: 19 }\nexport const TOGGLE_TEXT_Y_SHIFT = Math.max(...Object.values(TEXT_Y_SHIFTS))\n\nexport const getTextTogglingYShift: DataEach<unknown, SVGTextElement, number> = (_, idx) =>\n  idx % 2 === 0 ? -TEXT_Y_SHIFTS.odd : -TEXT_Y_SHIFTS.even // index 0 is first, so odd\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","/**\n * tooltip and it's actions\n */\nimport { select } from 'd3'\n\nimport { MouseEvent } from 'react'\nimport { OnMouseEvent } from '../../types/d3-types'\n\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../constants/views/tooltip'\nimport { SVG } from '../../constants/svg'\nimport { HTML } from '../../constants/html'\n\nimport { getClass, px } from './stringGetters'\n\nexport const onMouseOverTooltip =\n  <T>(stringFunction: (data: T) => string[]): OnMouseEvent<T> =>\n  ({ clientX, clientY }: MouseEvent, data: T): void => {\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n    tooltip\n      .html(stringFunction(data).join(HTML.newLine))\n      .style(SVG.style.left, px(clientX))\n      .style(SVG.style.top, px(clientY))\n  }\n\nexport const onMouseOutTooltip = (): null => {\n  select(getClass(TOOLTIP_CLASS)).transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n  return null\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Extent, DataEachG, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getCategoryColor, getTextTogglingYShift, TOGGLE_TEXT_Y_SHIFT } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  refreshViews,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TOGGLE_TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      if (displayAttributes.every((dimension) => selections[dimension] === null)) {\n        // check selections, if there is none in every line, false\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n        return\n      }\n      dataset.forEach((data) => {\n        data.selected = displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        })\n      })\n      refreshViews()\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, keyof SelectableDataType>> = {\n      [BrushAction.start]: () => setComponentBrushing(ViewType.ParallelCoordinates),\n      [BrushAction.move]: (brushEvent, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      },\n      [BrushAction.end]: (brushEvent, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      },\n    }\n    const brushExtent: Extent = [\n      [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n      [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n    ]\n\n    const brush = brushY<keyof SelectableDataType>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath: DataEachP<SelectableDataType, string | null> = (data) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n      .on(MouseAction.mouseOut, onMouseOutTooltip)\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    const getAxisTransform: DataEachG<keyof SelectableDataType, string> = (attribute) =>\n      getTranslate([xScale(String(attribute))!, 0])\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, getTextTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      Object.keys(selections).forEach((selLKey) => (selections[selLKey] = null))\n    })\n\n    // selected coloring\n    selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ParallelCoordinates]}>\n      {PARALLEL_COORDINATES_TEXT.unavailable}\n    </Box>\n  )\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\nexport const getScatterPlotMatrixStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    fontSize: PLOT_FONT.fontSize,\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { Extent, DataEachC, DataEachG, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\ntype CellBrushing = { cell: MatrixPosition | null }\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  // selected coloring\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, DUPLICATES_CLASS)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachC<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachC<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: CellBrushing = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) => (data.selected = isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, MatrixItem>> = {\n      [BrushAction.start]: (_, { rowIdx, colIdx, rowKey, colKey }) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      },\n      [BrushAction.move]: ({ selection }, matrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }, matrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [0, 0],\n      [rect.width, rect.height],\n    ]\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // selected coloring\n    selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    refreshViews,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return (\n      <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotMatrix]}>\n        {SCATTER_PLOT_MATRIX_TEXT.tooSmall}\n      </Box>\n    )\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotMatrixStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotMatrix]}>\n      {SCATTER_PLOT_MATRIX_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { DataEachP, OnMouseEvent } from '../../../../types/d3-types'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  refreshViews,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform: DataEachP<SelectableDataType, string> = (data) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const onMouseClick: OnMouseEvent<SelectableDataType> = (_, changedData) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.Glyphs)\n      refreshViews()\n    }\n\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n          .on(MouseAction.click, onMouseClick)\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    // selected coloring, needed again\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive, brushColor)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.Glyphs]}>\n      {GLYPHS_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important, px } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotGlyphsAxis`\nexport const AXIS_TEXT_CLASS = `scatterPlotGlyphsAxisText`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\nexport const getScatterPlotGlyphsStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotGlyphsAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n  '& .scatterPlotGlyphsAxisText': {\n    fill: PLOT_COLORS.fontColor,\n    fontSize: px(13),\n    fontWeight: `bold`,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisBottom, axisLeft, brush, lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\n\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  AXIS_TEXT_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { Extent, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\nimport { TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nconst Y_AXIS_TEXT_SHIFT = 30\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  // selected coloring\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, TOOLTIP_CLASS)\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains([...displayAttributes, xAttribute, yAttribute], dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(extentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(extentInDomains[attribute]),\n    )\n\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .append(SVG.elements.g)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n            .on(MouseAction.mouseOut, onMouseOutTooltip)\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data([xAttribute])\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n\n    const axisY = svg\n      .selectAll(AXIS_Y)\n      .data([yAttribute])\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n\n    axisX.call(axisBottom(xScale))\n    axisY.call(axisLeft(yScale))\n\n    // axis X label\n    axisX\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, innerWidth)\n      .attr(SVG.attributes.y, Y_AXIS_TEXT_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXIS_TEXT_CLASS)\n      .attr(SVG.attributes.textAnchor, SVG.values.end)\n    // axis Y label\n    axisY\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.transform, `rotate(-90)`)\n      .attr(SVG.attributes.y, -Y_AXIS_TEXT_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXIS_TEXT_CLASS)\n      .attr(SVG.attributes.textAnchor, SVG.values.end)\n\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) =>\n            (data.selected = isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType>> = {\n      [BrushAction.start]: () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      },\n      [BrushAction.move]: ({ selection }) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [-glyphSize / 2, -glyphSize / 2],\n      [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n    ]\n\n    const makeBrush = brush()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotGlyphs]}>\n      {SCATTER_PLOT_GLYPHS_TEXT.unavailable}\n    </Box>\n  )\n}\n","interface FormType {\n  checkbox: `checkbox`\n  none: `none`\n}\n\nexport const FORM: FormType = {\n  checkbox: `checkbox`,\n  none: `none`,\n}\n","import { SxProps } from '@mui/system'\nimport { calc, important, px } from '../../../../helpers/d3/stringGetters'\nimport { TABLE_COLORS } from '../../../../styles/colors'\n\nexport const getDataTableRowStyle = (\n  rowHeight: number,\n  selected: boolean,\n  selectedBackgroundColor: string,\n  selectedFontColor: string,\n): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? important(selectedBackgroundColor) : ``,\n  '& .MuiTableCell-root': {\n    color: selected ? important(selectedFontColor) : ``,\n  },\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    bgcolor: TABLE_COLORS.headerBackground,\n  },\n  tableHeadRow: {\n    height: 30,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  filterRow: {\n    bgcolor: TABLE_COLORS.filterBackground,\n  },\n  filterCell: {\n    padding: px(5),\n  },\n  filter: {\n    width: `90%`,\n    bgcolor: TABLE_COLORS.rowsBackground,\n    borderRadius: px(5),\n    '&.MuiFormControl-root': {\n      margin: 0,\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n  filterIcon: {\n    paddingLeft: px(12),\n    color: TABLE_COLORS.filterIconFont,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n  checkboxAll: {\n    display: `flex`,\n    height: calc(-10, `100%`),\n    padding: px(5),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Checkbox, TableBody, TableCell, TableRow } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable } from '../../../../helpers/data/formatText'\n\nimport { FORM } from '../../../../constants/form'\n\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableBodyProps {\n  displayAttributes: Array<keyof SelectableDataType>\n  sortedDataset: SelectableDataType[]\n  handleSelectClick: (data: SelectableDataType) => void\n  rowHeight: number\n  selectedBackgroundColor: string\n  selectedFontColor: string\n  redrawTime: number\n}\n\nexport const DataTableBody: VoidFunctionComponent<DataTableBodyProps> = ({\n  displayAttributes,\n  sortedDataset,\n  handleSelectClick,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n}) => (\n  <TableBody sx={dataTableStyle.tableBody}>\n    {sortedDataset.map((data, idx) => (\n      <TableRow\n        hover\n        onClick={() => handleSelectClick(data)}\n        key={idx}\n        sx={getDataTableRowStyle(rowHeight, data.selected, selectedBackgroundColor, selectedFontColor)}\n      >\n        <TableCell padding={FORM.checkbox}>\n          <Checkbox checked={data.selected} />\n        </TableCell>\n        {displayAttributes.map((attribute) => (\n          <TableCell key={`${idx}-${attribute}`}>{dataToReadable(data[attribute])}</TableCell>\n        ))}\n      </TableRow>\n    ))}\n  </TableBody>\n)\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TextField,\n  Tooltip,\n} from '@mui/material'\nimport { FilterListOutlined } from '@mui/icons-material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { SelectableDataType, SelectedKey } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator, SortType } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { FORM } from '../../../../constants/form'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-menus/dataTable'\nimport { dataTableStyle } from '../../../../components-style/content/views/data-table/dataTableStyle'\nimport { DataTableBody } from './DataTableBody'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {\n  showFilter: boolean\n}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  refreshViews,\n  setComponentBrushing,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n  showFilter,\n  redrawTime,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const [doResort, setDoResort] = useState(0)\n  const [filterValues, setFilterValues] = useState<{ [p: keyof SelectableDataType]: string }>(\n    Object.fromEntries(displayAttributes.map((key) => [key, ``])),\n  )\n\n  const filteredDataset = useMemo<SelectableDataType[]>(\n    () =>\n      [...dataset].filter((data) =>\n        displayAttributes.every((attribute) => String(data[attribute]).includes(filterValues[attribute])),\n      ),\n    [dataset, displayAttributes, filterValues],\n  )\n\n  const sortedDataset = useMemo(\n    () => filteredDataset.sort(getComparator(order, orderBy)),\n    // `doResort` is needed for resorting after changing select\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [filteredDataset, order, orderBy, doResort],\n  )\n\n  useEffect(\n    () => () => {\n      if (orderBy === SelectedKey) {\n        setDoResort((prev) => prev + 1) // reorder\n      }\n    },\n    [orderBy, redrawTime],\n  )\n\n  const handleSelectClick = useCallback(\n    (changedData: SelectableDataType) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing],\n  )\n\n  const handleSelectAllClick = useCallback(\n    (checked: boolean) => {\n      sortedDataset.forEach((data) => (data.selected = checked))\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing, sortedDataset],\n  )\n\n  const handleRequestSort = useCallback(\n    (property: keyof SelectableDataType) => {\n      const isAsc = orderBy === property && order === SortType.asc\n      setOrder(isAsc ? SortType.desc : SortType.asc)\n      setOrderBy(property)\n    },\n    [order, orderBy],\n  )\n\n  const handleFilterValueChange = useCallback((newValue: string, key: keyof SelectableDataType) => {\n    setFilterValues((prev) => ({\n      ...prev,\n      [key]: newValue,\n    }))\n  }, [])\n\n  const createSortHandler = useCallback(\n    (property: keyof SelectableDataType) => () => {\n      handleRequestSort(property)\n    },\n    [handleRequestSort],\n  )\n\n  const sortTooltipTitle = useCallback(\n    (headCellId: keyof SelectableDataType) =>\n      orderBy === headCellId\n        ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n        : DATA_TABLE_TEXT[SortType.asc],\n    [order, orderBy],\n  )\n\n  const getTableHead = useCallback(\n    (indeterminate: boolean, allChecked: boolean) => (\n      <TableHead sx={dataTableStyle.tableHead}>\n        <TableRow sx={dataTableStyle.tableHeadRow}>\n          <TableCell padding={FORM.none}>\n            <Box sx={dataTableStyle.checkboxAll}>\n              <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                <Checkbox\n                  sx={dataTableStyle.checkAll}\n                  indeterminate={indeterminate && !allChecked}\n                  checked={allChecked}\n                  onChange={(event) => handleSelectAllClick(event.target.checked)}\n                />\n              </Tooltip>\n              <TableSortLabel\n                active={orderBy === SelectedKey}\n                direction={orderBy === SelectedKey ? order : SortType.asc}\n                onClick={createSortHandler(SelectedKey)}\n              />\n            </Box>\n          </TableCell>\n          {displayAttributes.map((attribute) => {\n            const orderedByActive = orderBy === attribute\n            return (\n              <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                <Tooltip title={sortTooltipTitle(attribute)}>\n                  <TableSortLabel\n                    active={orderedByActive}\n                    direction={orderedByActive ? order : SortType.asc}\n                    onClick={createSortHandler(attribute)}\n                  >\n                    {otherCasesToWhitespaces(attribute)}\n                  </TableSortLabel>\n                </Tooltip>\n              </TableCell>\n            )\n          })}\n        </TableRow>\n        {showFilter && (\n          <TableRow sx={dataTableStyle.filterRow}>\n            <TableCell padding={FORM.none}>\n              <FilterListOutlined sx={dataTableStyle.filterIcon} />\n            </TableCell>\n            {displayAttributes.map((attribute, idx) => (\n              <TableCell sx={dataTableStyle.filterCell} key={`filter-${attribute}`}>\n                <TextField\n                  defaultValue={filterValues[idx]}\n                  sx={dataTableStyle.filter}\n                  onChange={(e) => handleFilterValueChange(e.target.value, attribute)}\n                />\n              </TableCell>\n            ))}\n          </TableRow>\n        )}\n      </TableHead>\n    ),\n    [\n      createSortHandler,\n      displayAttributes,\n      filterValues,\n      handleFilterValueChange,\n      handleSelectAllClick,\n      order,\n      orderBy,\n      showFilter,\n      sortTooltipTitle,\n    ],\n  )\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table sx={dataTableStyle.container}>\n          {getTableHead(\n            sortedDataset.some((data) => data.selected),\n            sortedDataset.every((data) => data.selected),\n          )}\n          <DataTableBody\n            displayAttributes={displayAttributes}\n            sortedDataset={sortedDataset}\n            handleSelectClick={handleSelectClick}\n            rowHeight={rowHeight}\n            selectedBackgroundColor={selectedBackgroundColor}\n            selectedFontColor={selectedFontColor}\n            redrawTime={redrawTime}\n          />\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import {min} from \"d3-array\";\n\nfunction targetDepth(d) {\n  return d.target.depth;\n}\n\nexport function left(node) {\n  return node.depth;\n}\n\nexport function right(node, n) {\n  return n - 1 - node.height;\n}\n\nexport function justify(node, n) {\n  return node.sourceLinks.length ? node.depth : n - 1;\n}\n\nexport function center(node) {\n  return node.targetLinks.length ? node.depth\n      : node.sourceLinks.length ? min(node.sourceLinks, targetDepth) - 1\n      : 0;\n}\n","export default function constant(x) {\n  return function() {\n    return x;\n  };\n}\n","import {max, min, sum} from \"d3-array\";\nimport {justify} from \"./align.js\";\nimport constant from \"./constant.js\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nfunction computeLinkBreadths({nodes}) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport default function Sankey() {\n  let x0 = 0, y0 = 0, x1 = 1, y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8, py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey() {\n    const graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeSort = function(_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function(_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks({nodes, links}) {\n    for (const [i, node] of nodes.entries()) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    }\n    const nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d]));\n    for (const [i, link] of links.entries()) {\n      link.index = i;\n      let {source, target} = link;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    }\n    if (linkSort != null) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({nodes}) {\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined\n          ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.depth = x;\n        for (const {target} of node.sourceLinks) {\n          next.add(target);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeHeights({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.height = x;\n        for (const {source} of node.targetLinks) {\n          next.add(source);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeLayers({nodes}) {\n    const x = max(nodes, d => d.depth) + 1;\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {source, value} of target.targetLinks) {\n          let v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {target, value} of source.sourceLinks) {\n          let v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({sourceLinks, targetLinks}) {\n    if (linkSort === undefined) {\n      for (const {source: {sourceLinks}} of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {target: {targetLinks}} of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  return sankey;\n}\n","import {linkHorizontal} from \"d3-shape\";\n\nfunction horizontalSource(d) {\n  return [d.source.x1, d.y0];\n}\n\nfunction horizontalTarget(d) {\n  return [d.target.x0, d.y1];\n}\n\nexport default function() {\n  return linkHorizontal()\n      .source(horizontalSource)\n      .target(horizontalTarget);\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nexport const SELECTED_CLASS = `parallelSetsBundledSelected`\nexport const TABS_CLASS = `psbTabs`\nexport const LINE_NOT_SELECTED_CLASS = `psbLine`\nexport const CONNECTORS_CLASS = `psbConnector`\nexport const INNER_TEXT_CLASS = `psbInnerText`\nexport const TABS_SELECTED_CLASS = `psbTabsSelected`\n\nexport const getParallelSetsBundledStyle = (\n  opacity: Opacity,\n  isBrushActive: boolean,\n  brushColor: string,\n  fontColorInner: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .psbConnector': {\n    fill: `none`,\n  },\n  '& .psbTabs': {\n    cursor: `pointer`,\n    '&.psbTabsSelected': {\n      fill: important(brushColor),\n    },\n  },\n  '& path': {\n    '&.parallelSetsBundledSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n    '&.psbLine': {\n      opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n      mixBlendMode: `multiply`,\n    },\n  },\n  '& .psbInnerText': {\n    fill: fontColorInner,\n  },\n})\n","import { useCallback, useEffect, useMemo, useRef, useState, VoidFunctionComponent } from 'react'\nimport { scaleOrdinal, select } from 'd3'\nimport { Box } from '@mui/material'\nimport { sankey, sankeyLinkHorizontal } from '../../../../../lib/d3-sankey'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ParallelSetsBundledSettings } from '../../../../types/views/settings/ParallelSetsBundledSettings'\nimport { NominalValueProperties } from '../../../../types/data/data'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataLink, NodeData, NodeDataPoint } from '../../../../types/d3-sankey'\nimport { DataEach, Extent, OnMouseEvent } from '../../../../types/d3-types'\n\nimport { getTextTogglingYShift, TOGGLE_TEXT_Y_SHIFT } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeFormatted,\n  getEverything,\n  getLinkDataPointValuesWithLabel,\n  getNodeDataPointValuesWithLabel,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { getGraph, getNeighborAttributes, getNominalValuesRecord } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelSetsBundled'\nimport { SVG } from '../../../../constants/svg'\nimport { AXES_TEXT_CLASS } from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ColoringType } from '../../../../constants/data/ColoringType'\nimport { ParallelSetsBrushingType } from '../../../../constants/data/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_BUNDLED_TEXT } from '../../../../text/views-and-menus/parallelSetsBundled'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport {\n  CONNECTORS_CLASS,\n  getParallelSetsBundledStyle,\n  INNER_TEXT_CLASS,\n  LINE_NOT_SELECTED_CLASS,\n  SELECTED_CLASS,\n  TABS_CLASS,\n  TABS_SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nexport interface ParallelSetsBundledProps extends VisualizationView, Brushable, ParallelSetsBundledSettings {}\n\nexport const CONNECTORS = `CONNECTORS`\nexport const TEXT = `TEXT`\nexport const AXES_TEXT = `AXES_TEXT`\nexport const TABS = `TABS`\n\nexport const TEXT_SHIFT = 2\n\nexport const ParallelSetsBundled: VoidFunctionComponent<ParallelSetsBundledProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  isBrushingActive,\n  colorCategory,\n  margins,\n  opacity,\n  brushColor,\n  redrawTime,\n  setComponentBrushing,\n  refreshViews,\n  tabWidth,\n  tabSpacing,\n  tabGap,\n  coloringType,\n  brushingType,\n  fontColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const upperPadding = TOGGLE_TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  const [nominalValuesRecord, setNominalValuesRecord] = useState(getNominalValuesRecord(dataset))\n  // redraw time needed because it is changing selected\n  useEffect(() => {\n    setNominalValuesRecord(getNominalValuesRecord(dataset))\n  }, [dataset, redrawTime, displayAttributes])\n\n  const createParallelSetsBundled = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const displayPairs = getNeighborAttributes(displayAttributes)\n    const pairWidth = (innerWidth - (displayAttributes.length - 2) * tabSpacing) / (displayAttributes.length - 1)\n    const valueCounts = displayAttributes.map((att) => nominalValuesRecord[att]).map((arr) => arr.length)\n    const spacesAllMax = Math.max(...valueCounts) - 1\n    const isLeft = (d: NodeData): boolean => Number(d.x0) < pairWidth / 2\n\n    const half = (displayAttributes.length - 1) / 2\n\n    // brushing\n    const onMouseClick: OnMouseEvent<NodeDataPoint> = (_, { attribute, name, count, countSelected }) => {\n      dataset.forEach((data) => {\n        if (String(data[attribute]) === name) {\n          data.selected = count !== countSelected\n        }\n      })\n\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.ParallelSetsBundled)\n      refreshViews()\n    }\n\n    displayPairs.forEach((displayPair, pairIdx) => {\n      const spacesPairMax = Math.max(valueCounts[pairIdx], valueCounts[pairIdx + 1]) - 1\n      const pairExtent: Extent = [\n        [0, 0],\n        [pairWidth, innerHeight - (spacesAllMax - spacesPairMax) * tabGap],\n      ]\n\n      const color = scaleOrdinal(colorCategory)\n      const sankeyLayout = sankey<NominalValueProperties, DataLink>()\n        .nodeWidth(tabWidth)\n        .nodePadding(tabGap)\n        .nodeSort((a, b) => Number(a.name) - Number(b.name))\n        .extent(pairExtent)\n\n      const graph = getGraph(dataset, nominalValuesRecord, displayPair[0], displayPair[1])\n      const { nodes, links } = sankeyLayout(graph)\n\n      const xShift = pairIdx * (pairWidth + tabSpacing)\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TABS)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, (d) =>\n          d.count === d.countSelected ? `${TABS_CLASS} ${TABS_SELECTED_CLASS}` : TABS_CLASS,\n        )\n        .attr(SVG.attributes.x, (d) => Number(d.x0) + xShift)\n        .attr(SVG.attributes.y, (d) => Number(d.y0))\n        .attr(SVG.attributes.height, (d) => Number(d.y1) - Number(d.y0))\n        .attr(SVG.attributes.width, (d) => Number(d.x1) - Number(d.x0))\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getNodeDataPointValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .on(MouseAction.click, onMouseClick)\n\n      // connectors\n      const connectors = svg\n        .append(SVG.elements.g)\n        .attr(SVG.attributes.class, CONNECTORS_CLASS)\n        .attr(SVG.attributes.transform, getTranslate([pairIdx * (pairWidth + tabSpacing), 0]))\n        .selectAll(CONNECTORS)\n        .data(links)\n        .enter()\n\n      // base\n      connectors\n        .append(SVG.elements.path)\n        .attr(SVG.attributes.class, LINE_NOT_SELECTED_CLASS)\n        .attr(SVG.attributes.d, sankeyLinkHorizontal())\n        .attr(SVG.attributes.stroke, (d) => {\n          if (coloringType === ColoringType.no) return color(`1`) // one category (first) for all\n          return color(d.names[coloringType === ColoringType.left ? 0 : 1])\n        })\n        .attr(SVG.attributes.strokeWidth, (d) => {\n          if (!d.value || brushingType === ParallelSetsBrushingType.overlay) {\n            return Number(d.width)\n          }\n          return Number(d.width) * ((d.value - d.selected) / d.value)\n        })\n        .attr(SVG.attributes.transform, (d) => {\n          if (brushingType === ParallelSetsBrushingType.overlay) {\n            return getTranslate([0, 0])\n          }\n          const yShift = d.width ? (Number(d.width) - Number(d.width) * ((d.value - d.selected) / d.value)) / 2 : 0\n          return getTranslate([0, yShift])\n        })\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n\n      //brushing\n      connectors\n        .append(SVG.elements.path)\n        .attr(SVG.attributes.class, SELECTED_CLASS)\n        .attr(SVG.attributes.d, sankeyLinkHorizontal())\n        .attr(SVG.attributes.strokeWidth, (d) => (d.value ? Number(d.width) * (d.selected / d.value) : 0))\n        .attr(SVG.attributes.transform, (d) => {\n          if (brushingType === ParallelSetsBrushingType.overlay) {\n            return getTranslate([0, 0])\n          }\n          const yShift = d.width ? -(Number(d.width) - Number(d.width) * (d.selected / d.value)) / 2 : 0\n          return getTranslate([0, yShift])\n        })\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n\n      const getTextVisible: DataEach<NodeData, SVGTextElement, number> = (d) => {\n        if (pairIdx === Math.floor(half)) return 1\n        if ((isLeft(d) && pairIdx > half) || (!isLeft(d) && pairIdx < half)) return 0\n        return 1\n      }\n\n      // line text\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TEXT)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.text)\n        .attr(SVG.attributes.class, INNER_TEXT_CLASS)\n        .attr(SVG.attributes.x, (d) => (isLeft(d) ? Number(d.x1) + TEXT_SHIFT : Number(d.x0) - TEXT_SHIFT) + xShift)\n        .attr(SVG.attributes.y, (d) => (Number(d.y1) + Number(d.y0)) / 2)\n        .attr(SVG.attributes.textAnchor, (d) => (isLeft(d) ? SVG.values.start : SVG.values.end))\n        .style(SVG.style.opacity, getTextVisible)\n        .text((d) => getAttributeFormatted(d.name))\n    })\n    // axis text\n    svg\n      .append(SVG.elements.g)\n      .selectAll(AXES_TEXT)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.textAnchor, SVG.values.middle)\n      .attr(SVG.attributes.x, (_, idx) => idx * (pairWidth + tabSpacing))\n      .attr(SVG.attributes.y, getTextTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n  }, [\n    displayAttributes,\n    innerWidth,\n    tabWidth,\n    nominalValuesRecord,\n    dataset,\n    setComponentBrushing,\n    refreshViews,\n    innerHeight,\n    tabGap,\n    colorCategory,\n    tabSpacing,\n    coloringType,\n    brushingType,\n  ])\n\n  useEffect(\n    () => createParallelSetsBundled(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      innerWidth,\n      innerHeight,\n      colorCategory,\n      nominalValuesRecord,\n      tabWidth,\n      tabSpacing,\n      tabGap,\n      coloringType,\n      brushingType,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelSetsBundledStyle(opacity, isBrushingActive, brushColor, fontColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelSetsBundled]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelSetsBundled]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ParallelSetsBundled]}>\n      {PARALLEL_SETS_BUNDLED_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { VisualizationView } from '../../types/views/VisualizationView'\nimport { Brushable } from '../../types/brushing/Brushable'\nimport { SettingsType } from '../../types/views/settings/Settings'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { ParallelCoordinates } from '../../components/content/views/parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from '../../components/content/views/scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from '../../components/content/views/glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from '../../components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from '../../components/content/views/data-table/DataTable'\nimport { ParallelSetsBundled } from '../../components/content/views/parallel-sets-bundeled/ParallelSetsBundled'\n\nimport { ViewType } from './ViewType'\n\ntype ViewElementFunction = (\n  props: Brushable & VisualizationView,\n  settings: SettingsType,\n  showFilter?: boolean,\n) => JSX.Element\n\nexport const getViewRecord: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.DataTable]: (p, s, f) => <DataTable {...p} {...(s as DataTableSettings)} showFilter={!!f} />,\n  [ViewType.ParallelSetsBundled]: (p, s) => <ParallelSetsBundled {...p} {...(s as ParallelSetsBundledSettings)} />,\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../constants/views/ViewType'\nimport { VIEW_BORDER_SIZE } from '../../../constants/views/common'\nimport { getViewRecord } from '../../../constants/views/getViewRecord'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  viewType: ViewType\n  settings: Settings\n  brushColor: string\n  showFilter?: boolean\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({\n  width,\n  height,\n  viewType,\n  settings,\n  showFilter,\n  ...dataProps\n}) => {\n  const graph = getViewRecord[viewType]\n  const settingsCurr = settings[viewType]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr, showFilter)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { FilterList } from '@mui/icons-material'\nimport { TOP_TOOLBAR_TEXT } from '../../../../text/siteText'\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\n\nexport interface DataSaveButtonProps {\n  showFilter?: boolean\n  setShowFilter: Dispatch<SetStateAction<boolean | undefined>>\n}\n\nexport const DataFilterButton: VoidFunctionComponent<DataSaveButtonProps> = ({ showFilter, setShowFilter }) => (\n  <>\n    <Button variant=\"text\" onClick={() => setShowFilter(!showFilter)} sx={inlineButtonStyles.button}>\n      <Tooltip title={TOP_TOOLBAR_TEXT.filter}>\n        <FilterList sx={showFilter ? inlineButtonStyles.buttonActive : {}} />\n      </Tooltip>\n    </Button>\n  </>\n)\n","import React, { ComponentProps, useState, VoidFunctionComponent } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, IconButton, Typography } from '@mui/material'\nimport { Close, RotateRight } from '@mui/icons-material'\n\nimport { otherCasesToWhitespaces } from '../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../constants/views/ViewType'\nimport { DRAG_HANDLE, HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/views/common'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { DataSaveButton } from '../common/DataSaveButton'\nimport { View } from './View'\nimport { DataFilterButton } from './data-table/DataFilterButton'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isResizeFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isResizeFinished, viewType, ...rest }) => {\n  const [showFilter, setShowFilter] = useState<boolean | undefined>(undefined)\n  const topButton =\n    viewType !== ViewType.DataTable ? (\n      <DataSaveButton viewType={viewType} />\n    ) : (\n      <DataFilterButton showFilter={showFilter} setShowFilter={setShowFilter} />\n    )\n  const glyphAxesText =\n    (viewType === ViewType.Glyphs || viewType === ViewType.ScatterPlotGlyphs) && rest.settings[viewType] ? (\n      <Typography sx={gridItemStyle.text}>\n        <RotateRight sx={gridItemStyle.textIcon} />\n        {`(`}\n        {rest.settings[viewType]!.displayAttributes.map((attribute) => otherCasesToWhitespaces(attribute)).join(`; `)}\n        {`)`}\n      </Typography>\n    ) : null\n\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Box sx={gridItemStyle.textBox}>\n            <Typography> {title} </Typography>\n            {glyphAxesText}\n          </Box>\n          <Box sx={gridItemStyle.right}>\n            {topButton}\n            <IconButton onClick={onRemove}>\n              <Close />\n            </IconButton>\n          </Box>\n        </Box>\n        {isResizeFinished && (\n          <View width={width} height={height - HEADER_HEIGHT} viewType={viewType} {...rest} showFilter={showFilter} />\n        )}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import React, { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, memo, useEffect } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../helpers/d3/displayDetails'\n\nimport { isViewType, ViewType } from '../../../constants/views/ViewType'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/views/common'\nimport { TOOLTIP_CLASS } from '../../../constants/views/tooltip'\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\nimport { VIEW_NAMES } from '../../../text/views-and-menus/common'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\nimport { LayoutDialog } from '../top-toolbar/items/layout/LayoutDialog'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isLayoutDialogOpen: boolean\n  setIsLayoutDialogOpen: Dispatch<SetStateAction<boolean>>\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  brushColor: string\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nconst BaseViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  isLayoutDialogOpen,\n  setIsLayoutDialogOpen,\n  layout,\n  setLayout,\n  ...viewProps\n}) => {\n  const [viewResizing, setViewResizing] = useState<ViewType | null>(null)\n  const [lastLayout, setLastLayout] = useState(layout)\n\n  useEffect(\n    () => () => {\n      if (layout !== null) setLastLayout(layout)\n    },\n    [layout],\n  )\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout || layout.length === 0) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout, layout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        return layout.filter((item) => item.i !== viewType)\n      })\n    },\n    [setLayout],\n  )\n\n  displayDetails(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <LayoutDialog\n        isOpen={isLayoutDialogOpen}\n        setLayout={setLayout}\n        onClose={() => setIsLayoutDialogOpen(false)}\n        lastLayout={lastLayout}\n      />\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={(_, view) => setViewResizing(view.i as ViewType)}\n        onResizeStop={() => setViewResizing(null)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isResizeFinished={view.i !== viewResizing}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              viewType={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n\n// do not rerender if props not change\nexport const ViewGrid = memo(BaseViewGrid)\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/siteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => <Box sx={emptyDataStyle.site}>{EMPTY_DATA_TEXT.content}</Box>\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const loadingStyle: Record<string, SxProps> = {\n  load: {\n    paddingTop: px(40),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/siteText'\nimport { loadingStyle } from '../../../components-style/content/no-data/loadingStyle'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={loadingStyle.load}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GridLayoutItem } from '../../../types/views/Grid'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\nimport { useDebounce } from '../../../helpers/react/useDebounce'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewType'\nimport {\n  DEFAULT_BRUSH_COLOR,\n  DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n  DEFAULT_GRID_LAYOUT_NOMINAL,\n} from '../../../constants/views/common'\nimport { BRUSH_DEBOUNCE } from '../../../constants/debounce/debounce'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../views/ViewGrid'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\nimport { getCategoryAttributesKeys, getDefaultQuantitativeAttributesKeys } from '../../../helpers/data/data'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [currentRedrawTime, setRedrawTime] = useState(Date.now())\n\n  const redrawTime = useDebounce(currentRedrawTime, BRUSH_DEBOUNCE) // used for less component re-renders\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isLayoutDialogOpen, setIsLayoutDialogOpen] = useState(false)\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[] | null>(null)\n  const [brushColor, setBrushColor] = useState<string>(DEFAULT_BRUSH_COLOR)\n\n  useEffect(() => {\n    if (!dataset || layout !== null) return\n    setLayout(\n      getCategoryAttributesKeys(dataset).length > getDefaultQuantitativeAttributesKeys(dataset).length\n        ? DEFAULT_GRID_LAYOUT_NOMINAL\n        : DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n    )\n  }, [dataset, layout])\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = useCallback((data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }, [])\n\n  const refreshViews = useCallback((): void => {\n    setRedrawTime(Date.now()) // redraw component\n  }, [])\n\n  const cleanAllBrushes = useCallback(\n    (deletePrevSelection = true) => {\n      if (dataset && deletePrevSelection) {\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n      }\n      cleanBrushingRef.current.forEach((f) => f())\n    },\n    [cleanBrushingRef, dataset, refreshViews],\n  )\n\n  const clearBrushesOnButton = useCallback(() => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }, [cleanAllBrushes])\n\n  const setComponentBrushing: SetComponentBrushing = useCallback(\n    (newComponent) => {\n      if (componentBrushingRef.current !== newComponent) {\n        cleanAllBrushes(\n          newComponent !== ViewType.DataTable &&\n            newComponent !== ViewType.Glyphs &&\n            newComponent !== ViewType.ParallelSetsBundled,\n        )\n      }\n      setCurrentComponentBrushing(newComponent)\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const registerCleanBrushing = useCallback((cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }, [])\n\n  const cleanSelectedIfViewWasBrushing = useCallback(\n    (component: ViewType) => {\n      if (componentBrushingRef.current === component) {\n        cleanAllBrushes()\n        setCurrentComponentBrushing(null)\n      }\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = useCallback(\n    (newIsBrushingOnEndOfMove: boolean) => {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n      setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n    },\n    [cleanAllBrushes],\n  )\n\n  const closeDrawer = useCallback(() => setDrawerOpen(false), [])\n  const openDrawer = useCallback(() => setDrawerOpen(true), [])\n\n  const topToolbarComponent = (\n    <TopToolbar\n      openDrawer={openDrawer}\n      isToolsDisabled={dataset === null}\n      isDetailsVisible={isDetailsVisible}\n      setIsDetailsVisible={setIsDetailsVisible}\n      isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n      isBrushingActive={componentBrushingRef.current !== null}\n      clearBrushes={clearBrushesOnButton}\n      setDataset={setDatasetAndRemoveBrushing}\n      setDataLoadState={setDataLoadState}\n      setIsLayoutDialogOpen={setIsLayoutDialogOpen}\n      removeLayout={() => setLayout([])}\n      setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n      brushColor={brushColor}\n      setBrushColor={setBrushColor}\n    />\n  )\n\n  if (dataLoadState === DataLoadState.NoData) {\n    return (\n      <>\n        {topToolbarComponent}\n        <EmptyData />\n      </>\n    )\n  }\n  if (dataLoadState === DataLoadState.Loading || !dataset) {\n    return (\n      <>\n        {topToolbarComponent}\n        <Loading />\n      </>\n    )\n  }\n\n  if (!layout) return null\n\n  return (\n    <>\n      {topToolbarComponent}\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={closeDrawer}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isLayoutDialogOpen={isLayoutDialogOpen}\n        setIsLayoutDialogOpen={setIsLayoutDialogOpen}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        brushColor={brushColor}\n        registerCleanBrushing={registerCleanBrushing}\n        setComponentBrushing={setComponentBrushing}\n        refreshViews={refreshViews}\n        redrawTime={redrawTime}\n        isBrushingActive={componentBrushingRef.current !== null}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      />\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}