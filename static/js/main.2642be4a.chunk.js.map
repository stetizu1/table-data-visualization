{"version":3,"sources":["app/constants/data/data.ts","app/text/headerText.ts","app/types/data/data.ts","app/helpers/data/formatText.ts","app/helpers/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/footerText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/helpers/react/useDebounce.ts","app/constants/data/DataLoadState.ts","app/constants/views-general/ViewType.ts","app/helpers/data/data.ts","app/constants/layout/layout.ts","icons/BrushOffSvg.tsx","icons/TooltipSvg.tsx","app/constants/data/sampleDataset.tsx","app/constants/data/DataLoadError.ts","app/text/siteText.ts","app/constants/sort/SortType.ts","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/constants/mui.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/constants/others.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/components/content/top-toolbar/items/file-reader/NullDialog.tsx","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components-style/content/top-toolbar/items/buttons/colorButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ColorButton.tsx","app/constants/debounce/debounce.ts","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/setDisplay.ts","app/constants/views-general/tooltip.ts","app/text/views-and-settings/common.ts","app/components-style/content/views/viewGridStyle.ts","app/text/settingsDrawerText.ts","app/components-style/content/data-drawer/settingsDrawerStyle.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-settings/parallelCoordinates.ts","app/components-style/content/data-drawer/settingsDrawerItemStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components-style/content/data-drawer/items/settingsTextStyle.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/helpers/basic/getInputPropsPositiveNumber.ts","app/components/content/data-drawer/items/OpacityInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinatesSettingsComponent.tsx","app/types/views/settings/ParallelCoordinatesSettings.ts","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-settings/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixSettingsComponent.tsx","app/types/views/settings/ScatterPlotMatrixSettings.ts","app/constants/views/glyphs.ts","app/constants/brushing-type/ParallelSetsBrushingType.ts","app/text/views-and-settings/glyphs.ts","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsSettingsComponent.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-settings/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsSettingsComponent.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/constants/views-general/defaultSettableColors.ts","app/text/views-and-settings/dataTable.ts","app/components-style/content/data-drawer/items/colorPickerStyle.ts","app/components/content/data-drawer/items/ColorPicker.tsx","app/components/content/views/data-table/DataTableSettingsComponent.tsx","app/types/views/settings/DataTableSettings.ts","app/constants/views/parallelSetsBundled.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseAction.ts","app/text/views-and-settings/parallelSetsBundled.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundledSettingsComponent.tsx","app/types/views/settings/ParallelSetsBundledSettings.ts","app/components/content/data-drawer/SettingsDrawer.tsx","app/constants/public-path.ts","app/components/content/top-toolbar/items/layout/LayoutDialog.tsx","app/components-style/content/views/gridItemStyle.ts","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/views/togglingYShift.ts","app/helpers/d3/categoryColor.ts","app/helpers/d3/tooltip.ts","app/constants/save/save.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/views/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/helpers/data/comparator.ts","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/constants/views-general/glyphs-general.ts","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTableBody.tsx","app/components/content/views/data-table/DataTable.tsx","lib/d3-sankey/src/align.js","lib/d3-sankey/src/constant.js","lib/d3-sankey/src/sankey.js","lib/d3-sankey/src/sankeyLinkHorizontal.js","app/helpers/data/lineShifts.ts","app/components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundled.tsx","app/constants/views-general/view.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/text/gridItemText.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/grid/items/ViewCloseButton.tsx","app/components-style/content/common/helpDialogStyle.ts","app/components/content/grid/items/ViewHelpButton.tsx","app/helpers/d3/saveSvg.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/grid/items/ViewSaveButton.tsx","app/components/content/grid/items/GlyphAxesText.tsx","app/components/content/grid/items/DataFilterButton.tsx","app/components/content/grid/GridItem.tsx","app/components/content/grid/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/loadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["AcceptableFileTypes","DataNullOptionType","HEADER_TEXT","SelectedKey","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","toLowerCase","dataToReadable","data","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getSpaced","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","Object","keys","filter","key","getLinkDataPointValuesWithLabel","filteredData","from","names","to","count","selected","reduce","acc","sel","getNodeDataPointValuesWithLabel","name","countSelected","getLabelledAttribute","label","getDisplayAttributesInParentheses","displayAttributes","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","CARD_COLORS","VIEW_COLORS","SETTINGS_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","SETTINGS_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","DataLoadState","ViewType","DATA_NULL_OPTION_TYPES","getAttributeKeys","dataset","getDatasetSample","getDefaultQuantitativeAttributesKeys","getQuantitativeAttributesKeys","every","isNaN","Number","getCategoryAttributesKeys","Set","size","getDefaultAllAttributesChecked","fromEntries","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","getDefaultNominalAttributesChecked","getNominalValueProperties","nominalValuePropertiesArr","containedIdx","findIndex","prev","newNominalValueProperties","sort","a","b","nvp","idx","order","getNominalValuesRecord","DRAG_HANDLE","VIEW_DEFAULT_SIZE","height","VIEW_LIMITS","ParallelCoordinates","minW","minH","ScatterPlotMatrix","Glyphs","ScatterPlotGlyphs","DataTable","ParallelSetsBundled","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT_QUANTITATIVE","i","x","y","DEFAULT_GRID_LAYOUT_NOMINAL","LAYOUT_OPT_2","LAYOUT_OPT_3","LAYOUT_OPT_4","LAYOUT_OPTIONS","BrushOffSvg","forwardRef","props","ref","style","userSelect","fill","flexShrink","viewBox","d","id","displayName","TooltipSvg","strokeWidth","SampleDataset","DataLoadError","SAMPLE_DATASET_OPTIONS","sampleDatasetIcons","flowers","LocalFlorist","birds","Twitter","cars","DirectionsCar","titanic","DirectionsBoat","parallelCars","AirportShuttle","sampleDatasets","flowerJson","birdJson","carJson","titanicJson","parallelCarsJson","SortType","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","SAVE_TEXT","VIEW_INFO_TEXT","brushing","settings","options","close","FILE_READER_TEXT","button","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFormat","nullDialog","confirm","optionsText","leave","change","optionsDescription","changeTo","LAYOUT_DIALOG_TEXT","topToolbarStyle","toolbar","separator","margin","borderLeft","left","middle","right","COMPONENT_TYPE","BUTTON_VARIANT","DRAWER_VARIANT","ANCHOR","CELL_PADDING","topToolbarButtonStyle","minWidth","ClickableButton","icon","onClick","disabled","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","Array","isArray","length","example","CsvParse","textCsv","parse","output","numValue","HTML","INPUT_TYPE","INPUT_PROPS","positiveNumber","inputMode","min","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","fileReaderStyle","dialogStyle","dialog","alert","innerContent","contentBox","toggleDialogGroup","marginBottom","toggleDialogButton","flexGrow","attHeader","fontWeight","paddingBottom","textInput","alignSelf","card","opacity","image","cardContent","itemText","SelectionDialog","isOpen","onClose","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","NullDialog","nullContainingAttributes","setDataset","att","optionsChosen","setOptionsChosen","replaceValue","setReplaceValue","getFixedDataset","useCallback","newValue","handleNullDialogConfirm","datasetFixed","forEach","handleToggleChange","handleReplaceChange","ToggleButtonGroup","exclusive","onChange","e","optType","ToggleButton","TextField","defaultValue","target","addSelected","FILE_INPUT_ID","FileReader","setDataLoadState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isNullDialogOpen","setIsNullDialogOpen","setNullContainingAttributes","rawDataset","setRawDataset","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionKey","Loaded","closeDialog","getDatasetFromFile","fileType","selectedFile","json","csv","JSON","handleFileChange","files","Loading","type","dataLoadErrorType","NoData","selectableDataset","document","getElementById","AutoGraph","component","Add","hidden","ON_VALUE","ToggleButtonSingle","setValue","handleChange","event","checked","openSettingsButtonStyle","OpenSettingsButton","IconButton","Settings","getColorInputStyle","getColorInputBoxStyle","minHeight","ml","colorInputStyle","inputBox","position","ColorButton","handleSetColor","tooltip","currentColor","setCurrentColor","debouncedColor","disableHoverListener","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","setIsLayoutDialogOpen","removeLayout","brushColor","setBrushColor","AddCircle","Dashboard","SkipNext","Brush","SVG","svg","g","circle","rect","path","div","class","transform","cx","cy","r","stroke","textAnchor","top","none","block","start","end","setDisplay","isVisible","displayClass","selectAll","TOOLTIP_CLASS","TOOLTIP","bottom","lr","SETTINGS_BASE_TEXT","more","empty","SETTINGS_TEXT","attributes","category","MARGIN_SETTINGS_TEXT","OPACITY_SETTINGS_TEXT","PALETTE_PICKER_TEXT","header","categoriesLabel","VIEW_NAMES","INFO_DIALOG_TEXT","descriptionBrushing","descriptionSettings","descriptionSettingsMore","viewGridStyle","pointerEvents","zIndex","SETTINGS_DRAWER_TEXT","settingsDrawerStyle","drawer","chevron","setting","footer","githubIcon","paddingRight","PARALLEL_COORDINATES_DEFAULT","margins","lineWidth","colorCategory","schemeCategory10","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_SETTINGS_TEXT","unavailable","settingsDrawerItemStyle","drawerSettings","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleCheckboxChange","eventChecked","newChecked","prevSettings","newSettings","handleMove","newAttributesKeys","onUpButton","onDownButton","FormControlLabel","ArrowDropUp","ArrowDropDown","Checkbox","CategorySelector","handleSelectCategoryChange","categoryAttribute","undefined","select","MenuItem","numberInputStyles","vertical","horizontal","textField","settingsTextStyle","MarginInput","currentMargins","setCurrentMargins","debouncedMargins","handleMarginChange","newMargin","oldMargins","newMargins","inputProps","getInputPropsPositiveNumber","max","minVal","maxVal","OpacityInput","opacities","currentOpacities","setCurrentOpacities","debouncedOpacities","handleOpacityChange","newOpacity","oldOpacities","newOpacities","NumberInput","valueKey","currentValue","setCurrentValue","handleChangeValue","getPalettePickerColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","currentColors","setCurrentColors","debouncedColors","newColor","oldColors","newColors","getInput","ParallelCoordinatesSettingsComponent","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","categoricalAttributes","getCurrentDisplayAttributes","currChecked","createParallelCoordinatesSettings","newQaKeys","defaultCategoryAttribute","newParallelCoordinates","getNewSettingsForAttributeChecker","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_SETTINGS_TEXT","sizes","ScatterPlotMatrixSettingsComponent","scatterPlotMatrixSettings","createScatterPlotMatrixSettings","newScatterPlotMatrix","ParallelSetsBrushingType","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","GLYPHS_TEXT","GLYPHS_SETTINGS_TEXT","sorting","Selector","settingsKey","handleSelectChange","toggleButtonsStyle","box","group","ToggleButtons","handleToggleButtonChange","newSetting","opt","GlyphsSettingsComponent","glyphsSettings","sortableAttributes","createGlyphsSettings","defaultSortAttribute","newGlyphs","sortAttribute","newSortableAttributes","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_SETTINGS_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsSettingsComponent","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsSettings","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","selectedBackgroundColor","selectedFontColor","DATA_TABLE_SETTINGS_TEXT","DATA_TABLE_TEXT","checkboxTooltip","desc","getColorPickerInputStyle","colorPickerStyle","ColorPicker","handleChangeColor","DataTableSettingsComponent","dataTableSettings","createDataTableSettings","newKeys","newDataTableSettings","BrushAction","MouseAction","PARALLEL_SETS_BUNDLED_DEFAULT","tabWidth","tabSpacing","tabGap","brushingType","fontColor","PARALLEL_SETS_BUNDLED_TEXT","PARALLEL_SETS_SETTINGS_TEXT","ParallelSetsBundledSettingsComponent","parallelSetsBundledSettings","nominalAttributesKeys","setNominalAttributesKeys","createParallelSetsBundledSettings","newCatKeys","newParallelSetsBundled","SettingsDrawer","views","settingsComponents","view","Drawer","anchor","ChevronRight","Link","href","GitHub","PUBLIC_IMAGE_PATH","PUBLIC_PATH","LAYOUT_IMAGES","imgName","BRUSHING_IMAGES","address","LayoutDialog","setLayout","lastLayout","layoutItems","Card","CardContent","CardMedia","alt","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","flexWrap","paddingLeft","textBox","whiteSpace","overflow","textOverflow","textIcon","GRID_HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getExtendedExtentInDomains","percentDown","percentUp","extentSize","p","finalExtent","TEXT_Y_SHIFTS","odd","even","TOGGLE_Y_SHIFT","Math","getTogglingYShift","_","getCategoryColor","onMouseOverTooltip","stringFunction","clientX","clientY","duration","html","onMouseOutTooltip","SAVE_ID","CONTAINER_SAVE_ID","CONTAINER_EMPTY","PARALLEL_COORDINATES_CLASS","SELECTED_CLASS","AXES_TEXT_CLASS","getParallelCoordinatesStyle","isBrushActive","font","getViewsNotDisplayStyle","refreshViews","registerCleanBrushing","setComponentBrushing","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","node","remove","extentInDomains","xScale","scalePoint","domain","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","onBrush","move","brushEvent","axisName","selection","brushExtent","BRUSH_WIDTH","brush","brushY","on","enter","append","attr","line","mouseOver","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","selLKey","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","clearBrush","brushSelection","makeBrush","descCompare","orderBy","getComparator","GLYPHS_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","onMouseClick","changedData","click","SCATTER_PLOT_GLYPHS_CLASS","AXIS_TEXT_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","linearExtentInDomains","radialExtentInDomains","makeGlyphs","rotate","axisX","axisY","getDataTableRowStyle","paddingTop","dataTableStyle","tableHead","tableHeadRow","tableBody","filterRow","filterCell","filterIcon","notDisplayed","checkboxAll","DataTableBody","handleSelectClick","TableBody","TableRow","hover","TableCell","showFilter","redrawTime","setOrder","setOrderBy","doResort","setDoResort","filterValues","setFilterValues","filteredDataset","includes","handleSelectAllClick","handleRequestSort","property","isAsc","handleFilterValueChange","createSortHandler","sortTooltipTitle","headCellId","getTableHead","indeterminate","allChecked","TableHead","checkAll","TableSortLabel","active","direction","orderedByActive","sortDirection","FilterListOutlined","TableContainer","Table","container","justify","n","sourceLinks","depth","constant","ascendingSourceBreadth","ascendingBreadth","source","ascendingTargetBreadth","y0","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","get","computeLinkBreadths","y1","link","targetLinks","Sankey","py","linkSort","x0","x1","dx","dy","align","iterations","sankey","apply","arguments","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeHeights","computeNodeBreadths","entries","Map","push","fixedValue","sum","next","add","columns","kx","layer","computeNodeLayers","c","ky","reorderLinks","initializeNodeBreadths","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","column","v","reorderNodeLinks","resolveCollisions","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","update","nodeId","nodeAlign","nodeSort","nodeWidth","nodePadding","horizontalSource","horizontalTarget","getCurrentWidth","currentCount","all","getStrokeWidth","isBrush","isOverlay","catAttributeValuesCounts","currentWidth","selectedFraction","getSelectionWidth","getYShift","valuesCount","yFormerShift","formerCount","slice","curr","getYFormerShift","yCatShift","getShift","TABS_CLASS","getParallelSetsBundledStyle","fontColorInner","mixBlendMode","nominalValuesRecord","setNominalValuesRecord","createParallelSetsBundled","displayPairs","getNeighborAttributes","pairWidth","valueCounts","arr","spacesAllMax","isLeft","half","displayPair","pairIdx","spacesPairMax","pairExtent","sankeyLayout","record","attFrom","attTo","toIdxStart","catAttributeOptions","flatMap","idxFrom","idxTo","filtered","getGraph","getPath","linkHorizontal","xShift","connectors","colorCategories","overlay","getViewRecord","s","f","View","dataProps","settingsCurr","overflowX","overflowY","GRID_ITEM_TEXT","inlineButton","inlineButtonStyles","buttonClose","buttonActive","ViewCloseButton","onRemove","Close","helpDialogStyle","iconedHeaderBox","brushContainer","ViewHelpButton","isDialogOpen","setIsDialogOpen","openDialog","Help","saveSvg","svgContainer","querySelector","containerClass","classList","cls","newStyleNodes","querySelectorAll","sheet","cssRules","rules","cssText","createElement","innerHTML","insertBefore","firstChild","svgEl","fileName","setAttribute","svgBlob","Blob","outerHTML","svgUrl","URL","createObjectURL","downloadLink","download","body","appendChild","removeChild","saveSvgToFile","console","error","getSaveIsDisabled","ConfirmationDialog","onConfirm","cancelText","ViewSaveButton","Save","GlyphAxesText","RotateRight","DataFilterButton","setShowFilter","FilterList","GridItem","isResizeFinished","rest","contextButton","isGlyphs","useSize","ReactGridLayout","WidthProvider","GridLayout","BaseViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","isLayoutDialogOpen","layout","viewProps","viewResizing","setViewResizing","setLastLayout","updateLayout","newLayout","filteredLayout","addView","posY","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","ViewGrid","memo","emptyDataStyle","site","EmptyData","loadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","currentRedrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setDatasetAndRemoveBrushing","cleanAllBrushes","deletePrevSelection","clearBrushesOnButton","newComponent","setIsBrushingOnEndOfMoveAndRemoveBrushing","newIsBrushingOnEndOfMove","topToolbarComponent","appStyle","app","content","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.2642be4a.chunk.js","sourcesContent":["export const CATEGORY_LIMIT = 10\n\nexport enum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nexport enum DataNullOptionType {\n  leave = `leave`,\n  change = `change`,\n  filter = `filter`,\n}\n\nexport const DATA_NULL_OPTION_TYPES = Object.values(DataNullOptionType)\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface for properties of nominal value of attributes\n */\nexport interface NominalValueProperties {\n  name: string\n  attribute: keyof SelectableDataType\n  count: number\n  order: number\n  countSelected: number\n}\n\n/**\n * Interface for nominal value records\n * -- every attribute has array of possible values with additional info\n */\nexport interface NominalRecord {\n  [key: keyof SelectableDataType]: Array<NominalValueProperties>\n}\n\n/**\n * Interface for properties of pair of data, used for on graph\n * Also can include properties counts for third attribute values\n */\nexport type DataLink = {\n  source: number\n  target: number\n  catAttributeValuesCounts: number[] | undefined\n  selected: number[]\n  names: Array<string>\n  value: number\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\n/**\n * Interface that assigns attributes numerical extent.\n * Used for axes' range.\n */\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim().toLowerCase()\n\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","import { SelectableDataType, SelectedKey } from '../types/data/data'\nimport { MatrixItem } from '../types/data/MatrixData'\nimport { LinkDataPoint, NodeDataPoint } from '../types/d3-sankey'\n\nimport { otherCasesToWhitespaces } from './data/formatText'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getRotate = (rotate: number): string => `rotate(${rotate})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getSpaced = (...values: string[]): string => values.join(` `)\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n\nexport type FilterKeys = Pick<LinkDataPoint, `y0` | `y1` | `width`>\n\nexport const getLinkDataPointValuesWithLabel = (data: LinkDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    from: data.names[0],\n    to: data.names[1],\n    count: String(data.value),\n    selected: String(data.selected.reduce((acc, sel) => acc + sel, 0)),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n\nexport const getNodeDataPointValuesWithLabel = (data: NodeDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    attribute: otherCasesToWhitespaces(data.attribute),\n    name: data.name,\n    count: String(data.count),\n    selected: String(data.countSelected),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n\nexport const getLabelledAttribute = (label: string, attribute: keyof SelectableDataType): string =>\n  getSpaced(label, otherCasesToWhitespaces(attribute))\n\nexport const getDisplayAttributesInParentheses = (displayAttributes: Array<keyof SelectableDataType>): string =>\n  `(` + displayAttributes.map((attribute) => otherCasesToWhitespaces(attribute)).join(`; `) + `)`\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const DIALOG_COLORS = {\n  font: `#212121`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonHoverBackground: `#b3bede`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  buttonInlinedFontOn: `#3965c4`,\n  buttonInlinedBgOn: `#e9eeff`,\n  border: `rgba(0, 0, 0, 0.12)`,\n  colorBorder: `#42495d`,\n  buttonDialogBackground: `#363a46`,\n  buttonDialogHoverBackground: `#1f2528`,\n  buttonDialogFont: `#d6e1ff`,\n}\n\nexport const CARD_COLORS = {\n  background: `#f7f8fd`,\n  backgroundHover: `#dce1ef`,\n  border: `#b3bede`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const SETTINGS_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  filterIconFont: `#656d86`,\n  filterBackground: `#52586c`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { calc } from '../helpers/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const SETTINGS_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/stringGetters'\n\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/headerText'\n\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/stringGetters'\n\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { FOOTER_TEXT } from '../../text/footerText'\n\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n    <Box sx={footerStyle.text}>\n      &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n    </Box>\n  </Box>\n)\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { useEffect, useState } from 'react'\n\nexport const useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n  return debouncedValue\n}\n","export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n","export enum ViewType {\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  Glyphs = `glyphs`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  ParallelSetsBundled = `parallelSetsBundled`,\n  DataTable = `dataTable`,\n}\n\nexport const isViewType = (viewType: string): viewType is ViewType => Object.values<string>(ViewType).includes(viewType)\n","import {\n  CheckedForSelectableDataType,\n  DataLink,\n  ExtentForSelectableDataType,\n  NominalRecord,\n  NominalValueProperties,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\nimport { NodeDataPoint, SankeyGraph } from '../../types/d3-sankey'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultNominalAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => Object.fromEntries(getCategoryAttributesKeys(dataset).map((key) => [key, true]))\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n\nexport const getNominalValueProperties = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  attribute: keyof SelectableDataType,\n): Array<NominalValueProperties> =>\n  dataset\n    .reduce((nominalValuePropertiesArr, data) => {\n      const containedIdx = nominalValuePropertiesArr.findIndex((values) => values.name === String(data[attribute]))\n      if (containedIdx !== -1) {\n        const prev = nominalValuePropertiesArr[containedIdx]\n        nominalValuePropertiesArr[containedIdx] = {\n          ...prev,\n          count: prev.count + 1,\n          countSelected: prev.countSelected + (data.selected ? 1 : 0),\n        }\n        return nominalValuePropertiesArr\n      }\n      const newNominalValueProperties: Omit<NominalValueProperties, `order`> = {\n        name: String(data[attribute]),\n        attribute,\n        count: 1,\n        countSelected: data.selected ? 1 : 0,\n      }\n      nominalValuePropertiesArr = [...nominalValuePropertiesArr, newNominalValueProperties]\n      return nominalValuePropertiesArr\n    }, [] as Array<Omit<NominalValueProperties, `order`>>)\n    .sort((a, b) => (b.name < a.name ? 1 : b.name > a.name ? -1 : 0))\n    .map((nvp, idx) => ({ ...nvp, order: idx }))\n\nexport const getNominalValuesRecord = (dataset: ReadonlyArray<SelectableDataType>): NominalRecord =>\n  Object.fromEntries(\n    getCategoryAttributesKeys(dataset).map((attribute) => [attribute, getNominalValueProperties(dataset, attribute)]),\n  )\n\nexport const getNeighborAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): Array<[keyof SelectableDataType, keyof SelectableDataType]> =>\n  displayAttributes.slice(0, -1).map((att, idx) => [att, displayAttributes[idx + 1]])\n\nexport const getGraph = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  categoryAttribute: keyof SelectableDataType | undefined,\n  record: NominalRecord,\n  attFrom: keyof SelectableDataType,\n  attTo: keyof SelectableDataType,\n): SankeyGraph => {\n  const nodes: Array<NodeDataPoint> = [...record[attFrom], ...record[attTo]]\n  const toIdxStart = record[attFrom].length\n\n  const catAttributeOptions = categoryAttribute ? record[categoryAttribute].map((props) => props.name) : []\n\n  const links: DataLink[] = record[attFrom].flatMap((from, idxFrom) =>\n    record[attTo].map((to, idxTo) => {\n      const filtered = dataset.filter(\n        (data) => String(data[attFrom]) === String(from.name) && String(data[attTo]) === String(to.name),\n      )\n      return {\n        source: idxFrom,\n        target: idxTo + toIdxStart,\n        names: [from.name, to.name],\n        catAttributeValuesCounts: catAttributeOptions.length\n          ? catAttributeOptions.map(\n              (value) => filtered.filter((data) => String(data[categoryAttribute!]) === value).length,\n            )\n          : undefined,\n        selected: catAttributeOptions.length\n          ? catAttributeOptions.map(\n              (value) => filtered.filter((data) => data.selected && String(data[categoryAttribute!]) === value).length,\n            )\n          : [filtered.filter((data) => data.selected).length],\n        value: filtered.length,\n      }\n    }),\n  )\n\n  return { nodes, links }\n}\n","import { Dimensions } from '../../types/basic/dimensions'\nimport { GridLayoutItem } from '../../types/views/Grid'\nimport { ViewType } from '../views-general/ViewType'\n\nexport const GRID_HEADER_HEIGHT = 30\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 0,\n  height: 0,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n  [ViewType.ParallelSetsBundled]: {\n    minW: 4,\n    minH: 8,\n  },\n}\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n  [ViewType.ParallelSetsBundled]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n}\n\nexport const DEFAULT_GRID_LAYOUT_QUANTITATIVE: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n\nexport const DEFAULT_GRID_LAYOUT_NOMINAL: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 25,\n    h: 20,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n\nexport const LAYOUT_OPT_2: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 30,\n    h: 16,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 30,\n    h: 14,\n    x: 17,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n\nexport const LAYOUT_OPT_3: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 16,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 20,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 11,\n    h: 10,\n    x: 14,\n    y: 20,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 14,\n    h: 14,\n    x: 0,\n    y: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\nexport const LAYOUT_OPT_4: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 15,\n    x: 11,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.ScatterPlotGlyphs,\n    w: 14,\n    h: 15,\n    x: 11,\n    y: 15,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n]\n\nexport const LAYOUT_OPTIONS = [\n  DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n  DEFAULT_GRID_LAYOUT_NOMINAL,\n  LAYOUT_OPT_2,\n  LAYOUT_OPT_3,\n  LAYOUT_OPT_4,\n]\n","import { forwardRef } from 'react'\nimport { Box } from '@mui/material'\n\nexport const BrushOffSvg = forwardRef((props, ref) => (\n  <Box ref={ref} style={{ height: 24 }} {...props}>\n    <svg\n      className=\"MuiSvgIcon-root MuiSvgIcon-fontSizeMedium\"\n      style={{\n        userSelect: `none`,\n        width: `1em`,\n        height: `1em`,\n        display: `inline-block`,\n        fill: `currentColor`,\n        flexShrink: 0,\n        fontSize: `1.5rem`,\n      }}\n      aria-hidden=\"true\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path\n        d=\"M7 14c-1.66 0-3 1.34-3 3 0 1.31-1.16 2-2 2 .92 1.22 2.49 2 4 2 2.21 0 4-1.79 4-4 0-1.66-1.34-3-3-3zm13.71-9.37-1.34-1.34a.9959.9959 0 0 0-1.41 0L9 12.25 11.75 15l8.96-8.96c.39-.39.39-1.02 0-1.41z\"\n        id=\"path2\"\n      />\n      <path\n        d=\"M 3.27,3.26 2,4.53 C 19.47,22 2,4.53 19.47,22 l 1.27,-1.27 c -17.47,-17.47 0,0 -17.47,-17.47 z\"\n        id=\"path4\"\n      />\n    </svg>\n  </Box>\n))\n\nBrushOffSvg.displayName = `ButtonOffSvg`\n","import { forwardRef } from 'react'\nimport { Box } from '@mui/material'\n\nexport const TooltipSvg = forwardRef((props, ref) => (\n  <Box ref={ref} style={{ height: 24 }} {...props}>\n    <svg\n      className=\"MuiSvgIcon-root MuiSvgIcon-fontSizeMedium\"\n      style={{\n        userSelect: `none`,\n        width: `1em`,\n        height: `1em`,\n        display: `inline-block`,\n        fill: `currentColor`,\n        flexShrink: 0,\n        fontSize: `1.5rem`,\n      }}\n      aria-hidden=\"true\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path\n        id=\"path2-2\"\n        style={{ strokeWidth: 1 }}\n        d=\"m 2.0292969,2.6826315 0.039063,15.5214845 c 0,1.091591 0.8902343,1.984375 1.9902344,1.984375 H 20.058594 c 1.1,0 2,-0.892784 2,-1.984375 V 6.2959128 c 0,-1.0915916 -0.900007,-1.988315 -2,-1.984375 L 3.7167969,4.3701315 Z M 5.1757812,8.3642721 H 12.84375 V 9.4170065 H 5.1757812 Z m 0,2.4999999 H 18.375 v 1.052734 H 5.1757812 Z m 0.1171876,2.5 h 8.8671872 v 1.052735 H 5.2929688 Z m -0.015625,2.5 H 17.130859 v 1.052735 H 5.2773438 Z\"\n      />\n    </svg>\n  </Box>\n))\n\nTooltipSvg.displayName = `TooltipSvg`\n","import { AirportShuttle, DirectionsBoat, DirectionsCar, LocalFlorist, Twitter } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport titanicJson from '../../../test-data/titanicData.json'\nimport parallelCarsJson from '../../../test-data/parallelCarsData.json'\n\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flowers = `flower`,\n  birds = `bird`,\n  cars = `car`,\n  titanic = `titanic`,\n  parallelCars = `parallelCars`,\n}\n\nexport const SAMPLE_DATASET_OPTIONS = Object.values(SampleDataset)\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flowers]: <LocalFlorist />,\n  [SampleDataset.birds]: <Twitter />,\n  [SampleDataset.cars]: <DirectionsCar />,\n  [SampleDataset.titanic]: <DirectionsBoat />,\n  [SampleDataset.parallelCars]: <AirportShuttle />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flowers]: flowerJson,\n  [SampleDataset.birds]: birdJson,\n  [SampleDataset.cars]: carJson,\n  [SampleDataset.titanic]: titanicJson,\n  [SampleDataset.parallelCars]: parallelCarsJson,\n}\n","export enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFormat = `unsupportedFileFormat`,\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataNullOptionType } from '../constants/data/data'\nimport { DataLoadError } from '../constants/data/DataLoadError'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display tooltips`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Set brushing at the end of the move only`,\n  labelBrushColor: `Brush color`,\n  addViewDialogTitle: `Add a view`,\n  labelDialogTitle: `Set predefined layout`,\n  noOption: `All view options are currently displayed.`,\n  settings: `Settings`,\n  filter: `Filter`,\n}\n\nexport const SAVE_TEXT = {\n  header: `Save to file`,\n  description: `Do you want to save the visualization to an SVG file?`,\n  save: `Save as SVG`,\n  confirm: `Save`,\n  cancel: `Cancel`,\n}\n\nexport const VIEW_INFO_TEXT = {\n  buttonLabel: `Show view information`,\n  dialog: {\n    brushing: `Brushing`,\n    settings: `Settings`,\n    options: `Options`,\n    close: `Close`,\n  },\n}\n\nexport const FILE_READER_TEXT = {\n  button: `Select a file`,\n  sampleDataLabel: `Try it on the sample data`,\n  sampleDataDialogTitle: `Select sample dataset`,\n  sampleDataDialogText: {\n    [SampleDataset.flowers]: `Flower dataset`,\n    [SampleDataset.birds]: `Bird dataset`,\n    [SampleDataset.cars]: `Car dataset`,\n    [SampleDataset.titanic]: `Titanic dataset`,\n    [SampleDataset.parallelCars]: `Car parallel dataset`,\n  },\n  alertDialog: {\n    [DataLoadError.unsupportedFile]: {\n      title: `File type not supported`,\n      description: `This file type is not supported. Use JSON or CSV file.`,\n    },\n    [DataLoadError.unsupportedFormat]: {\n      title: `File format not supported`,\n      description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n    },\n    confirm: `OK`,\n  },\n  nullDialog: {\n    title: `Data with null values occurred!`,\n    description: `This application provides only basic operations for modifying null data values. For better processing, use applications designed for this purpose.`,\n    confirm: `Confirm`,\n    optionsText: {\n      [DataNullOptionType.leave]: `Leave as is`,\n      [DataNullOptionType.filter]: `Filter`,\n      [DataNullOptionType.change]: `Change all`,\n    },\n    optionsDescription: {\n      [DataNullOptionType.leave]: `This option leaves the data as is. On numeric scales, null values will be cast to 0, in the table they will be displayed as null, for categorical data a separate category will be created.`,\n      [DataNullOptionType.filter]: `This option filters out all data with null values. These data will not be considered further in the application.`,\n      [DataNullOptionType.change]: `This option replaces all null values with the value entered below.`,\n    },\n    changeTo: `Change to`,\n    attribute: `Attribute:`,\n  },\n}\n\nexport const LAYOUT_DIALOG_TEXT = {\n  title: `Set a layout`,\n  alt: `Layout `,\n}\n","export enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/stringGetters'\n\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  middle: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n  right: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n}\n","/**\n * mui types\n */\nexport const COMPONENT_TYPE = {\n  image: `img` as `img`,\n  label: `label` as `label`,\n}\n\nexport const BUTTON_VARIANT = {\n  text: `text` as `text`,\n  outlined: `outlined` as `outlined`,\n  contained: `contained` as `contained`,\n}\n\nexport const DRAWER_VARIANT = {\n  permanent: `permanent` as `permanent`,\n  persistent: `persistent` as `persistent`,\n  temporary: `temporary` as `temporary`,\n}\n\nexport const ANCHOR = {\n  left: `left` as `left`,\n  top: `top` as `top`,\n  right: `right` as `right`,\n  bottom: `bottom` as `bottom`,\n}\n\nexport const CELL_PADDING = {\n  checkbox: `checkbox` as `checkbox`,\n  none: `none` as `none`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonHoverBackground,\n      },\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { BUTTON_VARIANT } from '../../../../../constants/mui'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant={BUTTON_VARIANT.contained} onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { InputBaseComponentProps } from '@mui/material/InputBase'\n\nexport const HTML = {\n  newLine: `<br/>`,\n}\n\nexport const INPUT_TYPE = {\n  color: `color`,\n  number: `number`,\n  file: `file`,\n}\n\nexport const INPUT_PROPS: Record<string, InputBaseComponentProps> = {\n  positiveNumber: { inputMode: `numeric`, min: 0 },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS, HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n\n  padding: isHighlighted ? px(8, 2) : 0,\n  borderRadius: px(10),\n})\n\nexport const fileReaderStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 6, 0, 2),\n    bgcolor: BUTTON_COLORS.buttonOnBackground,\n    color: BUTTON_COLORS.fontOn,\n    '&:hover': {\n      bgcolor: BUTTON_COLORS.buttonHoverBackground,\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, important, px } from '../../../helpers/stringGetters'\n\nimport { SITE_COLORS, ERROR_COLORS, BUTTON_COLORS, CARD_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  description: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n  innerContent: {\n    padding: px(0, 40, 10),\n  },\n  contentBox: {\n    height: px(120),\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  text: {\n    color: SITE_COLORS.font,\n  },\n  toggleDialogGroup: {\n    width: `100%`,\n    marginBottom: px(5),\n    display: `flex`,\n  },\n  toggleDialogButton: {\n    flexGrow: 1,\n    padding: px(6),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonDialogBackground,\n      color: BUTTON_COLORS.buttonDialogFont,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonDialogHoverBackground,\n      },\n    },\n  },\n  button: {\n    margin: px(0, 20, 20),\n  },\n  attHeader: {\n    fontSize: px(16),\n    fontWeight: `bold`,\n    paddingBottom: px(4),\n    color: SITE_COLORS.font,\n  },\n  textInput: {\n    minWidth: `95%`,\n    alignSelf: `center`,\n    '&.MuiFormControl-root': {\n      margin: px(20, 6, 6),\n    },\n    '& input': {\n      padding: px(8, 10, 6),\n    },\n  },\n  card: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    minWidth: px(400),\n    border: border(1, CARD_COLORS.border),\n    margin: px(2),\n    bgcolor: CARD_COLORS.background,\n    '&:hover': {\n      bgcolor: important(CARD_COLORS.backgroundHover),\n      '& img': {\n        opacity: 0.6,\n      },\n    },\n  },\n  image: {\n    width: 220,\n    height: 85,\n    borderRadius: px(2),\n  },\n  cardContent: {\n    padding: px(10),\n  },\n  itemText: {\n    fontSize: px(10),\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.description}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  TextField,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material'\n\nimport { SelectableDataType } from '../../../../../types/data/data'\n\nimport { getLabelledAttribute } from '../../../../../helpers/stringGetters'\n\nimport { DATA_NULL_OPTION_TYPES, DataNullOptionType } from '../../../../../constants/data/data'\nimport { BUTTON_VARIANT } from '../../../../../constants/mui'\n\nimport { FILE_READER_TEXT } from '../../../../../text/siteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface NullDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  nullContainingAttributes: Array<keyof SelectableDataType>\n  dataset: Array<SelectableDataType>\n  setDataset: (dataset: Array<SelectableDataType>) => void\n}\n\nexport const NullDialog: VoidFunctionComponent<NullDialogProps> = ({\n  isOpen,\n  onClose,\n  nullContainingAttributes,\n  dataset,\n  setDataset,\n}) => {\n  const [optionsChosen, setOptionsChosen] = useState<Record<keyof SelectableDataType, DataNullOptionType>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, DataNullOptionType.leave])),\n  )\n  const [replaceValue, setReplaceValue] = useState<Record<keyof SelectableDataType, string>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])),\n  )\n\n  useEffect(() => {\n    setOptionsChosen(Object.fromEntries(nullContainingAttributes.map((att) => [att, DataNullOptionType.leave])))\n    setReplaceValue(Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])))\n  }, [nullContainingAttributes])\n\n  const getFixedDataset = useCallback(\n    (dataset: SelectableDataType[], attribute: keyof SelectableDataType) => {\n      switch (optionsChosen[attribute]) {\n        case DataNullOptionType.filter:\n          return dataset.filter((data) => data[attribute] !== null)\n        case DataNullOptionType.change: {\n          const newValue = !isNaN(Number(replaceValue[attribute]))\n            ? Number(replaceValue[attribute])\n            : replaceValue[attribute]\n          return dataset.map((data) => ({\n            ...data,\n            [attribute]: data[attribute] === null ? newValue : data[attribute],\n          }))\n        }\n        case DataNullOptionType.leave:\n        default:\n          return dataset\n      }\n    },\n    [optionsChosen, replaceValue],\n  )\n\n  const handleNullDialogConfirm = useCallback(() => {\n    let datasetFixed: SelectableDataType[] = dataset\n    nullContainingAttributes.forEach((attribute) => {\n      datasetFixed = getFixedDataset(datasetFixed, attribute)\n    })\n    setDataset(datasetFixed)\n  }, [dataset, getFixedDataset, nullContainingAttributes, setDataset])\n\n  const handleToggleChange = useCallback(\n    (value: DataNullOptionType | null, attribute: keyof SelectableDataType) =>\n      setOptionsChosen((prev) => ({\n        ...prev,\n        [attribute]: value ? value : prev[attribute],\n      })),\n    [],\n  )\n  const handleReplaceChange = useCallback(\n    (value: string, attribute: keyof SelectableDataType) =>\n      setReplaceValue((prev) => ({\n        ...prev,\n        [attribute]: value,\n      })),\n    [],\n  )\n\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{FILE_READER_TEXT.nullDialog.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        <DialogContentText sx={dialogStyle.description}>{FILE_READER_TEXT.nullDialog.description}</DialogContentText>\n        {nullContainingAttributes.map((attribute) => {\n          const option = optionsChosen[attribute]\n          return (\n            <Box key={attribute} sx={dialogStyle.innerContent}>\n              <Typography sx={dialogStyle.attHeader}>\n                {getLabelledAttribute(FILE_READER_TEXT.nullDialog.attribute, attribute)}\n              </Typography>\n              <ToggleButtonGroup\n                sx={dialogStyle.toggleDialogGroup}\n                value={option}\n                exclusive\n                onChange={(e, value) => handleToggleChange(value, attribute)}\n              >\n                {DATA_NULL_OPTION_TYPES.map((optType, idx) => (\n                  <ToggleButton sx={dialogStyle.toggleDialogButton} value={optType} key={idx}>\n                    {FILE_READER_TEXT.nullDialog.optionsText[optType]}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n              <Box sx={dialogStyle.contentBox}>\n                <Typography sx={dialogStyle.text}>{FILE_READER_TEXT.nullDialog.optionsDescription[option]}</Typography>\n                {option === DataNullOptionType.change && (\n                  <TextField\n                    label={FILE_READER_TEXT.nullDialog.changeTo}\n                    sx={dialogStyle.textInput}\n                    defaultValue={replaceValue[attribute]}\n                    onChange={(e) => handleReplaceChange(e.target.value, attribute)}\n                  />\n                )}\n              </Box>\n            </Box>\n          )\n        })}\n      </DialogContent>\n      <DialogActions>\n        <Button variant={BUTTON_VARIANT.contained} onClick={handleNullDialogConfirm} sx={dialogStyle.button} autoFocus>\n          {FILE_READER_TEXT.nullDialog.confirm}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, ChangeEvent } from 'react'\nimport { Box, Button } from '@mui/material'\nimport { Add, AutoGraph } from '@mui/icons-material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\nimport { getAttributeKeys } from '../../../../../helpers/data/data'\n\nimport { AcceptableFileTypes } from '../../../../../constants/data/data'\nimport { DataLoadState } from '../../../../../constants/data/DataLoadState'\nimport {\n  SAMPLE_DATASET_OPTIONS,\n  SampleDataset,\n  sampleDatasetIcons,\n  sampleDatasets,\n} from '../../../../../constants/data/sampleDataset'\nimport { BUTTON_VARIANT, COMPONENT_TYPE } from '../../../../../constants/mui'\nimport { INPUT_TYPE } from '../../../../../constants/others'\nimport { DataLoadError } from '../../../../../constants/data/DataLoadError'\n\nimport { FILE_READER_TEXT } from '../../../../../text/siteText'\n\nimport {\n  fileReaderStyle,\n  getFileReaderBoxStyle,\n} from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\n\nimport { ClickableButton } from '../buttons/ClickableButton'\nimport { NullDialog } from './NullDialog'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: Array<DataType>): Array<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nconst FILE_INPUT_ID = `FILE_INPUT`\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isNullDialogOpen, setIsNullDialogOpen] = useState(false)\n  const [nullContainingAttributes, setNullContainingAttributes] = useState<Array<keyof SelectableDataType>>([])\n  const [rawDataset, setRawDataset] = useState<Array<SelectableDataType>>([])\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const handleListItemClick = useCallback(\n    (optionKey: SampleDataset) => {\n      setIsSampleDataDialogOpen(false)\n      const dataset = sampleDatasets[optionKey]\n      setDataset(addSelected(dataset))\n      setDataLoadState(DataLoadState.Loaded)\n    },\n    [setDataLoadState, setDataset],\n  )\n\n  const closeDialog = useCallback(() => {\n    setIsNullDialogOpen(false)\n    setRawDataset([])\n    setNullContainingAttributes([])\n  }, [])\n\n  const getDatasetFromFile = useCallback(\n    async (fileType: AcceptableFileTypes | string, selectedFile: File): Promise<DataType[] | null> => {\n      switch (fileType) {\n        case AcceptableFileTypes.json: {\n          const text = await selectedFile.text()\n          return JSON.parse(text)\n        }\n        case AcceptableFileTypes.csv: {\n          const textCsv = await selectedFile.text()\n          return CsvParse(textCsv)\n        }\n        default: {\n          return null\n        }\n      }\n    },\n    [],\n  )\n\n  const handleFileChange = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files?.length) {\n        setDataLoadState(DataLoadState.Loading)\n        const selectedFile = e.target.files[0]\n        const fileType = selectedFile.type\n        const dataset = await getDatasetFromFile(fileType, selectedFile)\n\n        if (dataset === null || !isArrayOfDataType(dataset)) {\n          const dataLoadErrorType = dataset === null ? DataLoadError.unsupportedFile : DataLoadError.unsupportedFormat\n          setDataLoadState(DataLoadState.NoData)\n          setAlertDialogText(FILE_READER_TEXT.alertDialog[dataLoadErrorType])\n          setIsAlertDialogOpen(true)\n          setDataset(null)\n          return\n        }\n\n        const selectableDataset = addSelected(dataset)\n        const nullContainingAttributes = getAttributeKeys(selectableDataset).filter((att) =>\n          dataset.some((data) => data[att] === null),\n        )\n        if (nullContainingAttributes.length) {\n          setNullContainingAttributes(nullContainingAttributes)\n          setRawDataset(selectableDataset)\n          setIsNullDialogOpen(true)\n          const fileEl = document.getElementById(FILE_INPUT_ID) as unknown as { value: null }\n          fileEl.value = null\n          return\n        }\n        setDataset(selectableDataset)\n        setDataLoadState(DataLoadState.Loaded)\n      }\n    },\n    [getDatasetFromFile, setDataLoadState, setDataset],\n  )\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={FILE_READER_TEXT.sampleDataDialogTitle}\n        options={SAMPLE_DATASET_OPTIONS.map((key) => ({\n          key,\n          label: FILE_READER_TEXT.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={FILE_READER_TEXT.alertDialog.confirm}\n        alert={true}\n      />\n      <NullDialog\n        isOpen={isNullDialogOpen}\n        onClose={() => {\n          setDataLoadState(DataLoadState.NoData)\n          closeDialog()\n        }}\n        nullContainingAttributes={nullContainingAttributes}\n        dataset={rawDataset}\n        setDataset={(dataset) => {\n          setDataset(dataset)\n          setDataLoadState(DataLoadState.Loaded)\n          closeDialog()\n        }}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={FILE_READER_TEXT.sampleDataLabel}\n        />\n        <Button sx={fileReaderStyle.button} variant={BUTTON_VARIANT.contained} component={COMPONENT_TYPE.label}>\n          <Add />\n          {FILE_READER_TEXT.button}\n          <input type={INPUT_TYPE.file} hidden id={FILE_INPUT_ID} onChange={handleFileChange} />\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction, useCallback } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\nconst ON_VALUE = `on`\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = useCallback(\n    (event: MouseEvent<HTMLElement>, checked: string[]) => {\n      if (checked.length && checked[0] === ON_VALUE) {\n        return setValue(true)\n      }\n      return setValue(false)\n    },\n    [setValue],\n  )\n  return (\n    <ToggleButtonGroup value={value ? [ON_VALUE] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={ON_VALUE} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    padding: px(4),\n    color: BUTTON_COLORS.buttonOnBackground,\n    '& svg': {\n      fontSize: px(30),\n    },\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { IconButton, Tooltip } from '@mui/material'\nimport { Settings } from '@mui/icons-material'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../../text/siteText'\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <IconButton disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Tooltip title={TOP_TOOLBAR_TEXT.settings}>\n      <Settings />\n    </Tooltip>\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const getColorInputStyle = (disabled?: boolean): SxProps => ({\n  display: `flex`,\n  '& .MuiSvgIcon-root': {\n    color: disabled ? BUTTON_COLORS.fontDisabled : BUTTON_COLORS.buttonOnBackground,\n  },\n})\n\nexport const getColorInputBoxStyle = (color: string, disabled?: boolean): SxProps => ({\n  bgcolor: disabled ? BUTTON_COLORS.fontDisabled : color,\n  minWidth: px(25),\n  minHeight: px(25),\n  borderRadius: px(5),\n  ml: px(2),\n  border: border(1, disabled ? BUTTON_COLORS.buttonDisableBackground : BUTTON_COLORS.colorBorder),\n})\n\nexport const colorInputStyle: Record<string, SxProps> = {\n  inputBox: {\n    position: `relative`,\n    '& input': {\n      width: `100%`,\n      opacity: 0,\n      position: `absolute`,\n      left: 0,\n    },\n  },\n}\n","import { useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Box, Tooltip } from '@mui/material'\n\nimport { useDebounce } from '../../../../../helpers/react/useDebounce'\n\nimport { COLOR_DEBOUNCE } from '../../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../../constants/others'\n\nimport {\n  colorInputStyle,\n  getColorInputBoxStyle,\n  getColorInputStyle,\n} from '../../../../../components-style/content/top-toolbar/items/buttons/colorButtonStyle'\n\nexport interface ColorButtonProps {\n  color: string\n  handleSetColor: (color: string) => void\n  tooltip: string\n  disabled?: boolean\n  icon: JSX.Element\n}\n\nexport const ColorButton: VoidFunctionComponent<ColorButtonProps> = ({\n  color,\n  handleSetColor,\n  tooltip,\n  disabled,\n  icon,\n}) => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n  useEffect(() => {\n    handleSetColor(debouncedColor)\n  }, [debouncedColor, handleSetColor])\n\n  return (\n    <Tooltip title={tooltip} disableHoverListener={disabled}>\n      <Box sx={colorInputStyle.inputBox}>\n        <input\n          disabled={disabled}\n          type={INPUT_TYPE.color}\n          value={color}\n          onChange={(e) => setCurrentColor(e.target.value)}\n        />\n        <Box sx={getColorInputStyle(disabled)}>\n          {icon}\n          <Box sx={getColorInputBoxStyle(color, disabled)} />\n        </Box>\n      </Box>\n    </Tooltip>\n  )\n}\n","export const TEXT_INPUT_DEBOUNCE = 400\n\nexport const BRUSH_DEBOUNCE = 10\n\nexport const COLOR_DEBOUNCE = 60\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { Box } from '@mui/material'\nimport { AddCircle, Brush, Dashboard, SkipNext } from '@mui/icons-material'\n\nimport { BrushOffSvg } from '../../../../icons/BrushOffSvg'\nimport { TooltipSvg } from '../../../../icons/TooltipSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\nimport { ColorButton } from './items/buttons/ColorButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: () => void\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsLayoutDialogOpen: Dispatch<SetStateAction<boolean>>\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  removeLayout: () => void\n\n  brushColor: string\n  setBrushColor: Dispatch<SetStateAction<string>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n  setIsLayoutDialogOpen,\n  removeLayout,\n  brushColor,\n  setBrushColor,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelAddView}\n      />\n      <ClickableButton\n        onClick={() => {\n          setIsLayoutDialogOpen(true)\n          removeLayout()\n        }}\n        icon={<Dashboard />}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDialogTitle}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ToggleButtonSingle\n        icon={<TooltipSvg />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.middle}>\n      <ColorButton\n        color={brushColor}\n        handleSetColor={(color) => setBrushColor(color)}\n        icon={<Brush />}\n        disabled={isToolsDisabled}\n        tooltip={TOP_TOOLBAR_TEXT.labelBrushColor}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<BrushOffSvg />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Constants to work with svg D3.js.\n */\nexport const SVG = {\n  elements: {\n    svg: `svg` as `svg`,\n    g: `g` as `g`,\n    circle: `circle` as `circle`,\n    rect: `rect` as `rect`,\n    path: `path` as `path`,\n    text: `text` as `text`,\n    div: `div` as `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    stroke: `stroke`,\n    strokeWidth: `stroke-width`,\n    textAnchor: `text-anchor`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n    start: `start`,\n    end: `end`,\n    middle: `middle`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from '../stringGetters'\n\nexport const setDisplay = (isVisible: boolean | undefined, displayClass: string): void => {\n  if (isVisible) {\n    selectAll(getClass(displayClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(displayClass)).style(SVG.style.display, SVG.values.none)\n}\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nexport const SETTINGS_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const SETTINGS_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...SETTINGS_BASE_TEXT,\n}\n\nexport const MARGIN_SETTINGS_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_SETTINGS_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER_TEXT = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.DataTable]: `Data Table`,\n  [ViewType.ParallelSetsBundled]: `Parallel Sets (bundled layout)`,\n}\n\ninterface InfoDialogText {\n  description: string\n  descriptionBrushing: string\n  descriptionSettings: string\n  descriptionSettingsMore: string\n}\n\nexport const INFO_DIALOG_TEXT: Record<ViewType, InfoDialogText> = {\n  [ViewType.ParallelCoordinates]: {\n    description: `Parallel coordinates are used to display the values of quantitative attributes. Each axis corresponds to one attribute and its range is from the minimum to the maximum of its values. The individual items are then displayed as a polyline between these axes. To use this method, the dataset must contain at least two numeric attributes.`,\n    descriptionBrushing: `Parallel coordinates use brushing on their axes. On them, you can drag to select the ranges that determine the selected items. Items that traverse all ranges are selected. Brushing is exclusive for parallel coordinates, so it deletes the previous selection from other views.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed on the axes or change their order. You can also specify the nominal attribute according to which the individual polylines will be colored.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the width of the polyline, the transparency when brushing or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    description: `Scatter plot matrix are used to display the values of quantitative attributes. Attributes are assigned the rows and columns of the matrix so that each has exactly one row and one column of the same index. In the matrix, the value of the attribute is plotted on the y-axis in each row and on the x-axis in each column, so it creates scatter plot in every cell. Items are displayed in each of this scatter plot as data points.  To use this method, the dataset must contain at least two numeric attributes.`,\n    descriptionBrushing: `Scatter plot matrix can use brushing in one of its cells. In the cell, select desired points with rectangle selection, in other scatter plots, selected points will be highlighted. Brushing is exclusive for scatter plot matrix, so it deletes the previous selection from other views.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed in the matrix or change their order.  You can also specify the nominal attribute according to which the individual points will be colored.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the size of the point, horizontal or vertical spacing between cells, the transparency when brushing or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.Glyphs]: {\n    description: `Glyphs are used to display the values of quantitative attributes. An axis is created for each attribute and these axes are arranged in a circle, gradually from the upper axis in a clockwise direction. Values are plotted on these axes so that the minima are close to the center and the maxima far from it. Glyphs are then sorted by one attribute and displayed in lines (as in text). To use this method, the dataset must contain at least three numeric attributes.`,\n    descriptionBrushing: `Glyphs can use brushing by clicking on them. After clicking on an unselected glyph, it is added to the selection, if it is already selected, it is removed. Brushing is not exclusive for glyphs, so the previous selection is used.`,\n    descriptionSettings: `In the settings you can specify which attributes are displayed on radial scales (on glyph), or change their order. You can also specify a nominal attribute to color individual glyphs and choose which attribute to use for sorting and whether to sort ascending or descending.`,\n    descriptionSettingsMore: `In the detailed settings you can also change the margin of the internal svg (e.g. to reveal labels), the size of the glyph, spacing between glyphs, the transparency when brushing or the colors for coloring with the nominal attribute.`,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    description: ``,\n    descriptionBrushing: ``,\n    descriptionSettings: ``,\n    descriptionSettingsMore: ``,\n  },\n  [ViewType.DataTable]: {\n    description: ``,\n    descriptionBrushing: ``,\n    descriptionSettings: ``,\n    descriptionSettingsMore: ``,\n  },\n  [ViewType.ParallelSetsBundled]: {\n    description: ``,\n    descriptionBrushing: ``,\n    descriptionSettings: ``,\n    descriptionSettingsMore: ``,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { TOOLTIP } from '../../../constants/views-general/tooltip'\n\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","export const SETTINGS_DRAWER_TEXT = {\n  description: `This application uses React and D3.js.`,\n  openSource: `Source code is available at`,\n  github: `Github`,\n  hide: `Hide`,\n}\n\nexport const GITHUB_LINK = `https://github.com/stetizu1/table-data-visualization`\n","import { SxProps } from '@mui/system'\n\nimport { border, calc, px } from '../../../helpers/stringGetters'\n\nimport { SETTINGS_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const settingsDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: SETTINGS_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, SETTINGS_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  fill: {\n    flexGrow: 1,\n  },\n  header: {},\n  chevron: {\n    color: SETTINGS_DRAWER_COLORS.icon,\n  },\n  setting: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n  footer: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n  },\n  githubIcon: {\n    paddingRight: px(6),\n    fontSize: px(18),\n  },\n  text: {\n    color: SETTINGS_DRAWER_COLORS.icon,\n    fontSize: px(9),\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `center`,\n  },\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [10, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from settings.`,\n}\n\nexport const PARALLEL_COORDINATES_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...SETTINGS_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/stringGetters'\n\nimport { SETTINGS_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { SETTINGS_DRAWER_FONT } from '../../../styles/font'\n\nexport const settingsDrawerItemStyle: Record<string, SxProps> = {\n  drawerSettings: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: SETTINGS_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, SETTINGS_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, SETTINGS_DRAWER_COLORS.drawerItemBorder),\n      fontSize: SETTINGS_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: SETTINGS_DRAWER_FONT.labelFontSize,\n      color: SETTINGS_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: SETTINGS_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: SETTINGS_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<Opt extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: Opt) => Partial<Opt>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <Opt extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<Opt>): JSX.Element => {\n  const handleCheckboxChange = useCallback(\n    (eventChecked: boolean, key: keyof SelectableDataType) => {\n      const newChecked = { ...checked, [key]: eventChecked }\n      setChecked(newChecked)\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        const newSettings = getNewSettings(newChecked, prevSettings)\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            ...newSettings,\n          },\n        }\n      })\n    },\n    [checked, getNewSettings, handleChangeSettings, setChecked, setSettings, viewType],\n  )\n  const handleMove = useCallback(\n    (newAttributesKeys: Array<keyof SelectableDataType>) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setAttributesKeys(newAttributesKeys)\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n          },\n        }\n      })\n    },\n    [checked, handleChangeSettings, setAttributesKeys, setSettings, viewType],\n  )\n\n  const onUpButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  const onDownButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT } from '../../../../text/views-and-settings/common'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = useCallback(\n    (categoryAttribute: keyof SelectableDataType | -1) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n          },\n        }\n      })\n    },\n    [setSettings, viewType],\n  )\n\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{SETTINGS_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nimport { SETTINGS_DRAWER_FONT } from '../../../../styles/font'\n\nexport const settingsTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(SETTINGS_DRAWER_FONT.fontSize),\n    padding: px(6, 5, 3),\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_PROPS, INPUT_TYPE } from '../../../../constants/others'\n\nimport { MARGIN_SETTINGS_TEXT } from '../../../../text/views-and-settings/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  handleChangeSettings?: () => void\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({\n  margins,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentMargins, setCurrentMargins] = useState<MarginArray>(margins)\n  const debouncedMargins = useDebounce(currentMargins, TEXT_INPUT_DEBOUNCE)\n\n  const handleMarginChange = useCallback((newMargin: number, idx: number) => {\n    setCurrentMargins((oldMargins) => {\n      const newMargins: MarginArray = [...oldMargins]\n      newMargins[idx] = newMargin\n      return newMargins\n    })\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: debouncedMargins,\n        },\n      }\n    })\n  }, [debouncedMargins, handleChangeSettings, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={settingsTextStyle.text}>{MARGIN_SETTINGS_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.top}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.right}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.bottom}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_SETTINGS_TEXT.left}\n          type={INPUT_TYPE.number}\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={INPUT_PROPS.positiveNumber}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { InputBaseComponentProps } from '@mui/material/InputBase'\n\nimport { INPUT_PROPS } from '../../constants/others'\n\nexport const getInputPropsPositiveNumber = ({ min, max }: { min?: number; max?: number }): InputBaseComponentProps => {\n  const minVal = min ? { min } : {}\n  const maxVal = max ? { max } : {}\n  return {\n    ...INPUT_PROPS.positiveNumber,\n    ...minVal,\n    ...maxVal,\n  }\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { getInputPropsPositiveNumber } from '../../../../helpers/basic/getInputPropsPositiveNumber'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { OPACITY_SETTINGS_TEXT } from '../../../../text/views-and-settings/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacities: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({\n  header,\n  opacities,\n  setSettings,\n  viewType,\n}) => {\n  const [currentOpacities, setCurrentOpacities] = useState<Opacity>(opacities)\n  const debouncedOpacities = useDebounce(currentOpacities, TEXT_INPUT_DEBOUNCE)\n\n  const handleOpacityChange = useCallback((newOpacity: number, idx: number) => {\n    setCurrentOpacities((oldOpacities) => {\n      const newOpacities: Opacity = [...oldOpacities]\n      newOpacities[idx] = newOpacity\n      return newOpacities\n    })\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: debouncedOpacities,\n        },\n      }\n    })\n  }, [debouncedOpacities, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={settingsTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_SETTINGS_TEXT.all}\n        type={INPUT_TYPE.number}\n        defaultValue={opacities[0]}\n        sx={numberInputStyles.textField}\n        inputProps={getInputPropsPositiveNumber({ max: 100 })}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_SETTINGS_TEXT.selected}\n          type={INPUT_TYPE.number}\n          defaultValue={opacities[1]}\n          sx={numberInputStyles.textField}\n          inputProps={getInputPropsPositiveNumber({ max: 100 })}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_SETTINGS_TEXT.notSelected}\n          type={INPUT_TYPE.number}\n          defaultValue={opacities[2]}\n          sx={numberInputStyles.textField}\n          inputProps={getInputPropsPositiveNumber({ max: 100 })}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { getInputPropsPositiveNumber } from '../../../../helpers/basic/getInputPropsPositiveNumber'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nexport interface NumberInputProps<Opt> {\n  viewType: ViewType\n  label: string\n  valueKey: keyof Opt\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <Opt,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<Opt>): JSX.Element => {\n  const [currentValue, setCurrentValue] = useState(value)\n  const debouncedValue = useDebounce(currentValue, TEXT_INPUT_DEBOUNCE)\n\n  const handleChangeValue = useCallback((newValue: number) => {\n    setCurrentValue(newValue)\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: debouncedValue,\n        },\n      }\n    })\n  }, [debouncedValue, setSettings, valueKey, viewType, handleChangeValue, handleChangeSettings])\n\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type={INPUT_TYPE.number}\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={getInputPropsPositiveNumber({ min, max })}\n        onChange={(e) => handleChangeValue(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nimport { SETTINGS_DRAWER_FONT } from '../../../../styles/font'\n\nexport const getPalettePickerColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(SETTINGS_DRAWER_FONT.fontSize),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useEffect, useCallback } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport { PALETTE_PICKER_TEXT } from '../../../../text/views-and-settings/common'\n\nimport {\n  getPalettePickerColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({\n  colors,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentColors, setCurrentColors] = useState<ColorArray>(colors)\n  const debouncedColors = useDebounce(currentColors, COLOR_DEBOUNCE)\n\n  const handleSetColor = useCallback((newColor: string, idx: number) => {\n    if (newColor) {\n      setCurrentColors((oldColors) => {\n        const newColors: ColorArray = [...oldColors]\n        newColors[idx] = newColor\n        return newColors\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          colorCategory: debouncedColors,\n        },\n      }\n    })\n  }, [debouncedColors, setSettings, viewType, handleChangeSettings])\n\n  const getInput = useCallback(\n    (idx: number) => (\n      <Box sx={palettePickerStyle.col} key={idx}>\n        <label>{PALETTE_PICKER_TEXT.categoriesLabel[idx]}</label>\n        <Box sx={getPalettePickerColorInputStyle(colors, idx)}>\n          <input type={INPUT_TYPE.color} value={colors[idx]} onChange={(e) => handleSetColor(e.target.value, idx)} />\n        </Box>\n      </Box>\n    ),\n    [colors, handleSetColor],\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER_TEXT.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { PARALLEL_COORDINATES_SETTINGS_TEXT } from '../../../../text/views-and-settings/parallelCoordinates'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelCoordinatesSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesSettings(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ParallelCoordinates),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{PARALLEL_COORDINATES_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_SETTINGS_TEXT.category}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_SETTINGS_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_SETTINGS_TEXT.opacity}\n                  opacities={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>\n            {PARALLEL_COORDINATES_SETTINGS_TEXT.unavailable}\n          </Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `Scatter plot cannot be displayed, window is too small. Change the size, number of attributes displayed or margin to display scatter plot matrix`,\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from settings.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...SETTINGS_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_SETTINGS_TEXT } from '../../../../text/views-and-settings/scatterPlotMatrix'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createScatterPlotMatrixSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixSettings(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotMatrix),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{SCATTER_PLOT_MATRIX_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.category}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <Typography sx={settingsTextStyle.text}>{SCATTER_PLOT_MATRIX_SETTINGS_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_SETTINGS_TEXT.opacity}\n                  opacities={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>\n            {SCATTER_PLOT_MATRIX_SETTINGS_TEXT.unavailable}\n          </Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\n\nimport { SortType } from '../sort/SortType'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","export enum ParallelSetsBrushingType {\n  top = `top`,\n  overlay = `overlay`,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from settings.`,\n}\n\nexport const GLYPHS_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  sort: `Sort...`,\n  ...SETTINGS_TEXT,\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = useCallback(\n    (newValue: keyof SelectableDataType) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [handleChangeSettings, setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { important, px } from '../../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  box: {\n    marginTop: important(0),\n  },\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = useCallback(\n    (newValue: T | null) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        const newSetting = newValue ? { [settingsKey]: newValue } : {}\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            ...newSetting,\n          },\n        }\n      })\n    },\n    [setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <Box sx={toggleButtonsStyle.box}>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SortType } from '../../../../constants/sort/SortType'\n\nimport { GLYPHS_SETTINGS_TEXT } from '../../../../text/views-and-settings/glyphs'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\n\nexport const GlyphsSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n}) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createGlyphsSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsSettings(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType, prevSettings: GlyphsSettings): Partial<GlyphsSettings> => {\n      const displayAttributes = getCurrentDisplayAttributes(newChecked)\n      const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n      const sortAttribute = newChecked[prevSettings.sortAttribute]\n        ? prevSettings.sortAttribute\n        : newSortableAttributes?.[0]\n      return { displayAttributes, sortAttribute }\n    },\n    [getCurrentDisplayAttributes, quantitativeAttributesKeys],\n  )\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{GLYPHS_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_SETTINGS_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_SETTINGS_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <Typography sx={settingsTextStyle.text}>{GLYPHS_SETTINGS_TEXT.sort}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_SETTINGS_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_SETTINGS_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_SETTINGS_TEXT.opacity}\n                  opacities={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>{GLYPHS_SETTINGS_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { SortType } from '../../../constants/sort/SortType'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 20, 30],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\n\nimport { SETTINGS_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from settings.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...SETTINGS_TEXT,\n}\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  glyphSizeKey,\n  ScatterPlotGlyphsSettings,\n  xAttributeKey,\n  yAttributeKey,\n} from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { SCATTER_PLOT_GLYPHS_SETTINGS_TEXT } from '../../../../text/views-and-settings/scatterPlotGlyphs'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createScatterPlotGlyphsSettings = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsSettings(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<ScatterPlotGlyphsSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotGlyphs),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.category}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.opacity}\n                  opacities={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>\n            {SCATTER_PLOT_GLYPHS_SETTINGS_TEXT.unavailable}\n          </Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\n\nimport { DEFAULT_BRUSH_BG_COLOR_TABLE, DEFAULT_BRUSH_FONT_COLOR_TABLE } from '../views-general/defaultSettableColors'\n\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\nexport const DATA_TABLE_DEFAULT: Pick<\n  DataTableSettings,\n  `rowHeight` | `selectedBackgroundColor` | `selectedFontColor`\n> = {\n  rowHeight: 45,\n  selectedBackgroundColor: DEFAULT_BRUSH_BG_COLOR_TABLE,\n  selectedFontColor: DEFAULT_BRUSH_FONT_COLOR_TABLE,\n}\n","export const DEFAULT_BRUSH_COLOR = `#830606`\nexport const DEFAULT_BRUSH_BG_COLOR_TABLE = `#ffcfcf`\nexport const DEFAULT_BRUSH_FONT_COLOR_TABLE = `#111111`\nexport const DEFAULT_FONT_COLOR_PARALLEL_SETS = `#252525`\n","import { ViewType } from '../../constants/views-general/ViewType'\nimport { SortType } from '../../constants/sort/SortType'\n\nimport { SETTINGS_BASE_TEXT, VIEW_NAMES } from './common'\n\nexport const DATA_TABLE_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes him not valid. Please choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  selectedBackgroundColor: `Selected background color`,\n  selectedFontColor: `Selected font color`,\n  ...SETTINGS_BASE_TEXT,\n}\n\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascending`,\n  [SortType.desc]: `Sort descending`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from settings.`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/stringGetters'\n\nexport const getColorPickerInputStyle = (color: string): SxProps => ({\n  bgcolor: color,\n  width: px(25),\n  borderRadius: px(5),\n  '& input': {\n    width: `100%`,\n    height: px(25),\n    opacity: 0,\n  },\n})\n\nexport const colorPickerStyle: Record<string, SxProps> = {\n  picker: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `center`,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\nimport { INPUT_TYPE } from '../../../../constants/others'\n\nimport {\n  colorPickerStyle,\n  getColorPickerInputStyle,\n} from '../../../../components-style/content/data-drawer/items/colorPickerStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nexport interface ColorPickerProps<Opt> {\n  viewType: ViewType\n  color: string\n  settingsKey: keyof Opt\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const ColorPicker = <Opt,>({\n  viewType,\n  color,\n  settingsKey,\n  setSettings,\n  label,\n}: ColorPickerProps<Opt>): JSX.Element => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n\n  const handleChangeColor = useCallback((newColor: string) => {\n    if (newColor) {\n      setCurrentColor(newColor)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: debouncedColor,\n        },\n      }\n    })\n  }, [debouncedColor, setSettings, settingsKey, viewType])\n  return (\n    <Box sx={colorPickerStyle.picker}>\n      <Typography sx={settingsTextStyle.text}>{label}</Typography>\n      <Box sx={getColorPickerInputStyle(color)}>\n        <input type={INPUT_TYPE.color} value={color} onChange={(e) => handleChangeColor(e.target.value)} />\n      </Box>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  DataTableSettings,\n  rowHeightKey,\n  selectedBackgroundColorKey,\n  selectedFontColorKey,\n} from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_SETTINGS_TEXT } from '../../../../text/views-and-settings/dataTable'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const DataTableSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n}) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => attributesKeys.filter((key) => currChecked[key]),\n    [attributesKeys],\n  )\n\n  const createDataTableSettings = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableSettings(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{DATA_TABLE_SETTINGS_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  viewType={viewType}\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_SETTINGS_TEXT.rowHeight}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedBackgroundColor}\n                  settingsKey={selectedBackgroundColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_SETTINGS_TEXT.selectedBackgroundColor}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedFontColor}\n                  settingsKey={selectedFontColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_SETTINGS_TEXT.selectedFontColor}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>{DATA_TABLE_SETTINGS_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { VisualizationSettings } from './VisualizationSettings'\n\nexport const rowHeightKey = `rowHeight`\nexport const selectedBackgroundColorKey = `selectedBackgroundColor`\nexport const selectedFontColorKey = `selectedFontColor`\n\n/**\n * Settings for Data Table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n\n  /**\n   * Selected background color\n   */\n  [selectedBackgroundColorKey]: string\n\n  /**\n   * Selected font color\n   */\n  [selectedFontColorKey]: string\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { ParallelSetsBrushingType } from '../brushing-type/ParallelSetsBrushingType'\nimport { DEFAULT_FONT_COLOR_PARALLEL_SETS } from '../views-general/defaultSettableColors'\n\nexport const MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_SETS_BUNDLED_DEFAULT: Pick<\n  ParallelSetsBundledSettings,\n  `margins` | `opacity` | `colorCategory` | `tabWidth` | `tabSpacing` | `tabGap` | `brushingType` | `fontColor`\n> = {\n  margins: [5, 50, 10, 50],\n  opacity: [60, 70, 25],\n  colorCategory: schemeCategory10 as ColorArray,\n  tabWidth: 8,\n  tabSpacing: 3,\n  tabGap: 10,\n  brushingType: ParallelSetsBrushingType.top,\n  fontColor: DEFAULT_FONT_COLOR_PARALLEL_SETS,\n}\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseAction {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\nimport { SETTINGS_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_SETS_BUNDLED_TEXT = {\n  unavailable: `Parallel sets plot cannot be displayed with a single attribute. To generate a parallel sets plot, select multiple attributes from settings.`,\n}\n\nexport const PARALLEL_SETS_SETTINGS_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelSetsBundled],\n  unavailable: `The parallel sets plot cannot be used while data has less than 2 nominal attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of connectors`,\n  tabWidth: `Width of the tabs`,\n  tabSpacing: `Spacing between tabs`,\n  tabGap: `Gap between tabs`,\n  brushing: `Brushing...`,\n  fontColor: `Inner font color`,\n  ...SETTINGS_TEXT,\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { SettingsComponentProps } from '../../../../types/views/SettingsComponentProps'\nimport {\n  ParallelSetsBundledSettings,\n  brushingTypeKey,\n  fontColorKey,\n  tabGapKey,\n  tabSpacingKey,\n  tabWidthKey,\n} from '../../../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { getCategoryAttributesKeys, getDefaultNominalAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport {\n  MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT,\n  PARALLEL_SETS_BUNDLED_DEFAULT,\n} from '../../../../constants/views/parallelSetsBundled'\nimport { ParallelSetsBrushingType } from '../../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_SETTINGS_TEXT } from '../../../../text/views-and-settings/parallelSetsBundled'\n\nimport { settingsDrawerItemStyle } from '../../../../components-style/content/data-drawer/settingsDrawerItemStyle'\nimport { settingsTextStyle } from '../../../../components-style/content/data-drawer/items/settingsTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const ParallelSetsBundledSettingsComponent: VoidFunctionComponent<SettingsComponentProps> = ({\n  dataset,\n  settings,\n  setSettings,\n}) => {\n  const viewType = ViewType.ParallelSetsBundled\n  const parallelSetsBundledSettings = settings[viewType]\n\n  const [nominalAttributesKeys, setNominalAttributesKeys] = useState(getCategoryAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultNominalAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => nominalAttributesKeys.filter((key) => currChecked[key]),\n    [nominalAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelSetsBundledSettings = useCallback(() => {\n    const newChecked = getDefaultNominalAttributesChecked(dataset)\n    const newCatKeys = getCategoryAttributesKeys(dataset)\n    setChecked(newChecked)\n    setNominalAttributesKeys(newCatKeys)\n    setSettings((prev) => {\n      const newParallelSetsBundled: ParallelSetsBundledSettings = {\n        displayAttributes: newCatKeys.filter((key) => newChecked[key]),\n        categoryAttribute: newCatKeys[0],\n        ...PARALLEL_SETS_BUNDLED_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelSetsBundled]: newParallelSetsBundled }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelSetsBundledSettings(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (parallelSetsBundledSettings) {\n    return (\n      <Box sx={settingsDrawerItemStyle.drawerSettings}>\n        <h1>{PARALLEL_SETS_SETTINGS_TEXT.header}</h1>\n        {nominalAttributesKeys.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={nominalAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_SETS_SETTINGS_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setNominalAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelSetsBundledSettings.categoryAttribute!}\n              attributesKeys={nominalAttributesKeys}\n              setSettings={setSettings}\n              label={PARALLEL_SETS_SETTINGS_TEXT.category}\n            />\n            <Typography sx={settingsTextStyle.text}>{PARALLEL_SETS_SETTINGS_TEXT.brushing}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={parallelSetsBundledSettings.brushingType}\n              options={Object.values<ParallelSetsBrushingType>(ParallelSetsBrushingType)}\n              setSettings={setSettings}\n              settingsKey={brushingTypeKey}\n            />\n            <Accordion sx={settingsDrawerItemStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_SETS_SETTINGS_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelSetsBundledSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.tabWidth}\n                  valueKey={tabWidthKey}\n                  value={parallelSetsBundledSettings.tabWidth}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.tabSpacing}\n                  valueKey={tabSpacingKey}\n                  value={parallelSetsBundledSettings.tabSpacing}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.tabGap}\n                  valueKey={tabGapKey}\n                  value={parallelSetsBundledSettings.tabGap}\n                  setSettings={setSettings}\n                />\n                <Divider />\n                <ColorPicker\n                  viewType={viewType}\n                  color={parallelSetsBundledSettings.fontColor}\n                  settingsKey={fontColorKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_SETS_SETTINGS_TEXT.fontColor}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_SETS_SETTINGS_TEXT.opacity}\n                  opacities={parallelSetsBundledSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelSetsBundledSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={settingsDrawerItemStyle.insufficientAttributeNum}>{PARALLEL_SETS_SETTINGS_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ParallelSetsBrushingType } from '../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const tabWidthKey = `tabWidth`\nexport const tabSpacingKey = `tabSpacing`\nexport const tabGapKey = `tabGap`\nexport const brushingTypeKey = `brushingType`\nexport const fontColorKey = `fontColor`\n\n/**\n * Settings for Parallel Sets Bundled view\n */\nexport interface ParallelSetsBundledSettings extends ViewVisualizationSettings {\n  /**\n   * Brushing - displayed from top top or overlay\n   */\n  [brushingTypeKey]: ParallelSetsBrushingType\n\n  /**\n   * Width of a tab\n   */\n  [tabWidthKey]: number\n\n  /**\n   * Spacing of tabs\n   */\n  [tabSpacingKey]: number\n\n  /**\n   * Gap between tabs (vertically)\n   */\n  [tabGapKey]: number\n\n  /**\n   * Font color\n   */\n  [fontColorKey]: string\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useMemo } from 'react'\nimport { Box, Divider, Drawer, IconButton, Link, Tooltip, Typography } from '@mui/material'\nimport { ChevronRight, GitHub } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { ANCHOR, DRAWER_VARIANT } from '../../../constants/mui'\n\nimport { SETTINGS_DRAWER_TEXT, GITHUB_LINK } from '../../../text/settingsDrawerText'\n\nimport { settingsDrawerStyle } from '../../../components-style/content/data-drawer/settingsDrawerStyle'\n\nimport { ParallelCoordinatesSettingsComponent } from '../views/parallel-coordinates/ParallelCoordinatesSettingsComponent'\nimport { ScatterPlotMatrixSettingsComponent } from '../views/scatter-plot-matrix/ScatterPlotMatrixSettingsComponent'\nimport { GlyphsSettingsComponent } from '../views/glyphs/GlyphsSettingsComponent'\nimport { ScatterPlotGlyphsSettingsComponent } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsSettingsComponent'\nimport { DataTableSettingsComponent } from '../views/data-table/DataTableSettingsComponent'\nimport { ParallelSetsBundledSettingsComponent } from '../views/parallel-sets-bundeled/ParallelSetsBundledSettingsComponent'\n\nexport interface SettingsDrawerProps {\n  isOpen: boolean\n  close: () => void\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const SettingsDrawer: VoidFunctionComponent<SettingsDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const settingsComponents = useMemo(\n    () =>\n      views.map((view, idx) => {\n        switch (view) {\n          case ViewType.Glyphs:\n            return (\n              <GlyphsSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelCoordinates:\n            return (\n              <ParallelCoordinatesSettingsComponent\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotMatrix:\n            return (\n              <ScatterPlotMatrixSettingsComponent\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotGlyphs:\n            return (\n              <ScatterPlotGlyphsSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.DataTable:\n            return (\n              <DataTableSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelSetsBundled:\n            return (\n              <ParallelSetsBundledSettingsComponent\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          default:\n            return null\n        }\n      }),\n    [cleanSelectedIfViewWasBrushing, dataset, setSettings, settings, views],\n  )\n  return (\n    <Drawer variant={DRAWER_VARIANT.persistent} anchor={ANCHOR.right} open={isOpen} sx={settingsDrawerStyle.drawer}>\n      <Box sx={settingsDrawerStyle.header}>\n        <IconButton onClick={close}>\n          <Tooltip title={SETTINGS_DRAWER_TEXT.hide}>\n            <ChevronRight sx={settingsDrawerStyle.chevron} />\n          </Tooltip>\n        </IconButton>\n      </Box>\n      <Divider />\n      <Box sx={settingsDrawerStyle.setting}>{settingsComponents}</Box>\n      <Box sx={settingsDrawerStyle.fill} />\n      <Box sx={settingsDrawerStyle.footer}>\n        <Typography sx={settingsDrawerStyle.text}>{SETTINGS_DRAWER_TEXT.description}</Typography>\n        <Typography sx={settingsDrawerStyle.text}>{SETTINGS_DRAWER_TEXT.openSource}</Typography>\n        <Link href={GITHUB_LINK} sx={settingsDrawerStyle.text}>\n          <GitHub sx={settingsDrawerStyle.githubIcon} />\n          {SETTINGS_DRAWER_TEXT.github}\n        </Link>\n      </Box>\n    </Drawer>\n  )\n}\n","import { ViewType } from './views-general/ViewType'\n\nexport const PUBLIC_PATH = `/table-data-visualization/`\n\nexport const PUBLIC_IMAGE_PATH = PUBLIC_PATH + `images/`\n\nexport const LAYOUT_IMAGES = [`layout_0.png`, `layout_1.png`, `layout_2.png`, `layout_3.png`, `layout_4.png`].map(\n  (imgName) => PUBLIC_IMAGE_PATH + imgName,\n)\n\nexport const BRUSHING_IMAGES = Object.fromEntries(\n  [\n    [ViewType.ParallelCoordinates, `brushing_pc.png`],\n    [ViewType.ScatterPlotMatrix, `brushing_spm.png`],\n    [ViewType.Glyphs, `brushing_g.png`],\n    [ViewType.ScatterPlotGlyphs, `brushing_spg.png`],\n    [ViewType.DataTable, `brushing_dt.png`],\n    [ViewType.ParallelSetsBundled, `brushing_psb.png`],\n  ].map(([view, address]) => [view, PUBLIC_IMAGE_PATH + address]),\n)\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Card, CardContent, CardMedia, Dialog, DialogContent, DialogTitle, Divider, Typography } from '@mui/material'\n\nimport { GridLayoutItem } from '../../../../../types/views/Grid'\n\nimport { otherCasesToWhitespaces } from '../../../../../helpers/data/formatText'\n\nimport { LAYOUT_OPTIONS } from '../../../../../constants/layout/layout'\nimport { LAYOUT_IMAGES } from '../../../../../constants/public-path'\nimport { COMPONENT_TYPE } from '../../../../../constants/mui'\n\nimport { LAYOUT_DIALOG_TEXT } from '../../../../../text/siteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface LayoutDialogProps {\n  isOpen: boolean\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  onClose: () => void\n  lastLayout: GridLayoutItem[] | null\n}\n\nexport const LayoutDialog: VoidFunctionComponent<LayoutDialogProps> = ({ isOpen, onClose, setLayout, lastLayout }) => {\n  const handleClose = () => {\n    setLayout(lastLayout)\n    onClose()\n  }\n  return (\n    <Dialog onClose={handleClose} open={isOpen}>\n      <DialogTitle>{LAYOUT_DIALOG_TEXT.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        {LAYOUT_OPTIONS.map((layoutItems, idx) => (\n          <Card\n            key={idx}\n            onClick={() => {\n              setLayout(layoutItems)\n              onClose()\n            }}\n            sx={dialogStyle.card}\n          >\n            <CardContent sx={dialogStyle.cardContent}>\n              {layoutItems.map((item) => (\n                <Typography sx={dialogStyle.itemText} key={item.i}>\n                  {otherCasesToWhitespaces(item.i)}\n                </Typography>\n              ))}\n            </CardContent>\n            <CardMedia\n              component={COMPONENT_TYPE.image}\n              sx={dialogStyle.image}\n              image={LAYOUT_IMAGES[idx]}\n              alt={LAYOUT_DIALOG_TEXT.alt + idx}\n            />\n          </Card>\n        ))}\n      </DialogContent>\n    </Dialog>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { GRID_HEADER_HEIGHT } from '../../../constants/layout/layout'\n\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  right: {\n    display: `flex`,\n    flexWrap: `nowrap`,\n    paddingLeft: px(5),\n  },\n  textBox: {\n    padding: px(0, 8),\n    display: `flex`,\n    whiteSpace: `nowrap`,\n    overflow: `hidden`,\n    textOverflow: `ellipsis`,\n  },\n  text: {\n    padding: px(0, 5),\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `center`,\n    fontSize: px(12),\n  },\n  textIcon: {\n    fontSize: px(14),\n    padding: px(4),\n  },\n  header: {\n    height: GRID_HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","import { px } from '../../helpers/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { Extent } from '../../types/d3-types'\n\nexport const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: Extent, cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { DataEach } from '../../types/d3-types'\n\n/**\n * y shift for parallel coordinates/sets axes labels\n */\nconst TEXT_Y_SHIFTS = { odd: 9, even: 19 }\n\nexport const TOGGLE_Y_SHIFT = Math.max(...Object.values(TEXT_Y_SHIFTS))\n\nexport const getTogglingYShift: DataEach<unknown, SVGTextElement, number> = (_, idx) =>\n  idx % 2 === 0 ? -TEXT_Y_SHIFTS.odd : -TEXT_Y_SHIFTS.even // index 0 is first, so odd\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nconst SINGLE = `1` // on constant only one (first) color is used\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(SINGLE)\n","/**\n * tooltip and it's actions\n */\nimport { select } from 'd3'\nimport { MouseEvent } from 'react'\nimport { OnMouseEvent } from '../../types/d3-types'\n\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../constants/views-general/tooltip'\nimport { SVG } from '../../constants/svg'\nimport { HTML } from '../../constants/others'\n\nimport { getClass, px } from '../stringGetters'\n\nexport const onMouseOverTooltip =\n  <T>(stringFunction: (data: T) => string[]): OnMouseEvent<T> =>\n  ({ clientX, clientY }: MouseEvent, data: T): void => {\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n    tooltip\n      .html(stringFunction(data).join(HTML.newLine))\n      .style(SVG.style.left, px(clientX))\n      .style(SVG.style.top, px(clientY))\n  }\n\nexport const onMouseOutTooltip = (): null => {\n  select(getClass(TOOLTIP_CLASS)).transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n  return null\n}\n","import { ViewType } from '../views-general/ViewType'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n  [ViewType.ParallelSetsBundled]: `psbSvgId`,\n}\n\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n  [ViewType.ParallelSetsBundled]: `C_psbSvgId`,\n}\n\nexport const CONTAINER_EMPTY: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_E_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_E_spmSvgId`,\n  [ViewType.Glyphs]: `C_E_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_E_spgSvgId`,\n  [ViewType.DataTable]: `C_E_dataTableId`,\n  [ViewType.ParallelSetsBundled]: `C_E_psbSvgId`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Extent, DataEachG, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getTogglingYShift, TOGGLE_Y_SHIFT } from '../../../../helpers/views/togglingYShift'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-settings/parallelCoordinates'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  refreshViews,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TOGGLE_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(displayAttributes.map((attribute) => String(attribute)))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      if (displayAttributes.every((dimension) => selections[dimension] === null)) {\n        // check selections, if there is none in every line, false\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n        return\n      }\n      dataset.forEach((data) => {\n        data.selected = displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        })\n      })\n      refreshViews()\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, keyof SelectableDataType>> = {\n      [BrushAction.start]: () => setComponentBrushing(ViewType.ParallelCoordinates),\n      [BrushAction.move]: (brushEvent, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      },\n      [BrushAction.end]: (brushEvent, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      },\n    }\n    const brushExtent: Extent = [\n      [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n      [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n    ]\n\n    const brush = brushY<keyof SelectableDataType>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath: DataEachP<SelectableDataType, string | null> = (data) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n      .on(MouseAction.mouseOut, onMouseOutTooltip)\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    const getAxisTransform: DataEachG<keyof SelectableDataType, string> = (attribute) =>\n      getTranslate([xScale(String(attribute))!, 0])\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, getTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      Object.keys(selections).forEach((selLKey) => (selections[selLKey] = null))\n    })\n\n    // selected coloring\n    selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ParallelCoordinates]}>\n      {PARALLEL_COORDINATES_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\n\nimport { getTranslate } from '../stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\nexport const getScatterPlotMatrixStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    fontSize: PLOT_FONT.fontSize,\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { Extent, DataEachC, DataEachG, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/views/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { setDisplay } from '../../../../helpers/d3/setDisplay'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-settings/scatterPlotMatrix'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\ntype CellBrushing = { cell: MatrixPosition | null }\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  // selected coloring\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  setDisplay(isDetailsVisible, DUPLICATES_CLASS)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachC<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachC<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: CellBrushing = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) => (data.selected = isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, MatrixItem>> = {\n      [BrushAction.start]: (_, { rowIdx, colIdx, rowKey, colKey }) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      },\n      [BrushAction.move]: ({ selection }, matrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }, matrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [0, 0],\n      [rect.width, rect.height],\n    ]\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // selected coloring\n    selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    refreshViews,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return (\n      <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotMatrix]}>\n        {SCATTER_PLOT_MATRIX_TEXT.tooSmall}\n      </Box>\n    )\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotMatrixStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotMatrix]}>\n      {SCATTER_PLOT_MATRIX_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\n\nimport { SortType } from '../../constants/sort/SortType'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T extends SelectableDataType>(a: T, b: T, orderBy: keyof T) => {\n  if (a[orderBy] === true) return b[orderBy] === true ? 0 : 1\n  if (a[orderBy] === false) return b[orderBy] === false ? 0 : -1\n\n  return b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n}\n\nexport const getComparator = (sort: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sort === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataEachP, OnMouseEvent } from '../../../../types/d3-types'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { getAttributeValuesWithLabel, getClass, getEverything, getTranslate } from '../../../../helpers/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { GLYPHS_MIN_PERCENT_SHIFT } from '../../../../constants/views-general/glyphs-general'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-settings/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  refreshViews,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, GLYPHS_MIN_PERCENT_SHIFT)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform: DataEachP<SelectableDataType, string> = (data) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const onMouseClick: OnMouseEvent<SelectableDataType> = (_, changedData) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.Glyphs)\n      refreshViews()\n    }\n\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n          .on(MouseAction.click, onMouseClick)\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    // selected coloring, needed again\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive, brushColor)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.Glyphs]}>\n      {GLYPHS_TEXT.unavailable}\n    </Box>\n  )\n}\n","export const GLYPHS_MIN_PERCENT_SHIFT = 5\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important, px } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotGlyphsAxis`\nexport const AXIS_TEXT_CLASS = `scatterPlotGlyphsAxisText`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\nexport const getScatterPlotGlyphsStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotGlyphsAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n  '& .scatterPlotGlyphsAxisText': {\n    fill: PLOT_COLORS.fontColor,\n    fontSize: px(13),\n    fontWeight: `bold`,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisBottom, axisLeft, brush, lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { Extent, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getRotate,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { setDisplay } from '../../../../helpers/d3/setDisplay'\nimport { getExtendedExtentInDomains, getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/categoryColor'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { TOOLTIP_CLASS } from '../../../../constants/views-general/tooltip'\nimport { GLYPHS_MIN_PERCENT_SHIFT } from '../../../../constants/views-general/glyphs-general'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-settings/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  AXIS_TEXT_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nconst Y_AXIS_TEXT_SHIFT = 30\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  // selected coloring\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  setDisplay(isDetailsVisible, TOOLTIP_CLASS)\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const linearExtentInDomains = getExtentInDomains([xAttribute, yAttribute], dataset)\n    const radialExtentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, GLYPHS_MIN_PERCENT_SHIFT)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(linearExtentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(linearExtentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(radialExtentInDomains[attribute]),\n    )\n\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .append(SVG.elements.g)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n            .on(MouseAction.mouseOut, onMouseOutTooltip)\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data([xAttribute])\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n\n    const axisY = svg\n      .selectAll(AXIS_Y)\n      .data([yAttribute])\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n\n    axisX.call(axisBottom(xScale))\n    axisY.call(axisLeft(yScale))\n\n    // axis X label\n    axisX\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, innerWidth)\n      .attr(SVG.attributes.y, Y_AXIS_TEXT_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXIS_TEXT_CLASS)\n      .attr(SVG.attributes.textAnchor, SVG.values.end)\n    // axis Y label\n    axisY\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.transform, getRotate(-90))\n      .attr(SVG.attributes.y, -Y_AXIS_TEXT_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXIS_TEXT_CLASS)\n      .attr(SVG.attributes.textAnchor, SVG.values.end)\n\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) =>\n            (data.selected = isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType>> = {\n      [BrushAction.start]: () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      },\n      [BrushAction.move]: ({ selection }) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [-glyphSize / 2, -glyphSize / 2],\n      [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n    ]\n\n    const makeBrush = brush()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ScatterPlotGlyphs]}>\n      {SCATTER_PLOT_GLYPHS_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, important, px } from '../../../../helpers/stringGetters'\n\nimport { TABLE_COLORS } from '../../../../styles/colors'\n\nexport const getDataTableRowStyle = (\n  rowHeight: number,\n  selected: boolean,\n  selectedBackgroundColor: string,\n  selectedFontColor: string,\n): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? important(selectedBackgroundColor) : ``,\n  '& .MuiTableCell-root': {\n    color: selected ? important(selectedFontColor) : ``,\n  },\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    bgcolor: TABLE_COLORS.headerBackground,\n  },\n  tableHeadRow: {\n    height: 30,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  filterRow: {\n    bgcolor: TABLE_COLORS.filterBackground,\n  },\n  filterCell: {\n    padding: px(5),\n  },\n  filter: {\n    width: `90%`,\n    bgcolor: TABLE_COLORS.rowsBackground,\n    borderRadius: px(5),\n    '&.MuiFormControl-root': {\n      margin: 0,\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n  filterIcon: {\n    paddingLeft: px(12),\n    color: TABLE_COLORS.filterIconFont,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n  checkboxAll: {\n    display: `flex`,\n    height: calc(-10, `100%`),\n    padding: px(5),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Checkbox, TableBody, TableCell, TableRow } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable } from '../../../../helpers/data/formatText'\n\nimport { CELL_PADDING } from '../../../../constants/mui'\n\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableBodyProps {\n  displayAttributes: Array<keyof SelectableDataType>\n  sortedDataset: SelectableDataType[]\n  handleSelectClick: (data: SelectableDataType) => void\n  rowHeight: number\n  selectedBackgroundColor: string\n  selectedFontColor: string\n  redrawTime: number\n}\n\nexport const DataTableBody: VoidFunctionComponent<DataTableBodyProps> = ({\n  displayAttributes,\n  sortedDataset,\n  handleSelectClick,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n}) => (\n  <TableBody sx={dataTableStyle.tableBody}>\n    {sortedDataset.map((data, idx) => (\n      <TableRow\n        hover\n        onClick={() => handleSelectClick(data)}\n        key={idx}\n        sx={getDataTableRowStyle(rowHeight, data.selected, selectedBackgroundColor, selectedFontColor)}\n      >\n        <TableCell padding={CELL_PADDING.checkbox}>\n          <Checkbox checked={data.selected} />\n        </TableCell>\n        {displayAttributes.map((attribute) => (\n          <TableCell key={`${idx}-${attribute}`}>{dataToReadable(data[attribute])}</TableCell>\n        ))}\n      </TableRow>\n    ))}\n  </TableBody>\n)\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TextField,\n  Tooltip,\n} from '@mui/material'\nimport { FilterListOutlined } from '@mui/icons-material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { SelectableDataType, SelectedKey } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { SortType } from '../../../../constants/sort/SortType'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { CELL_PADDING } from '../../../../constants/mui'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-settings/dataTable'\n\nimport { dataTableStyle } from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nimport { DataTableBody } from './DataTableBody'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {\n  showFilter: boolean\n}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  refreshViews,\n  setComponentBrushing,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n  showFilter,\n  redrawTime,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const [doResort, setDoResort] = useState(0)\n  const [filterValues, setFilterValues] = useState<{ [p: keyof SelectableDataType]: string }>(\n    Object.fromEntries(displayAttributes.map((key) => [key, ``])),\n  )\n\n  const filteredDataset = useMemo<SelectableDataType[]>(\n    () =>\n      [...dataset].filter((data) =>\n        displayAttributes.every((attribute) => String(data[attribute]).includes(filterValues[attribute])),\n      ),\n    [dataset, displayAttributes, filterValues],\n  )\n\n  const sortedDataset = useMemo(\n    () => filteredDataset.sort(getComparator(order, orderBy)),\n    // `doResort` is needed for resorting after changing select\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [filteredDataset, order, orderBy, doResort],\n  )\n\n  useEffect(\n    () => () => {\n      if (orderBy === SelectedKey) {\n        setDoResort((prev) => prev + 1) // reorder\n      }\n    },\n    [orderBy, redrawTime],\n  )\n\n  const handleSelectClick = useCallback(\n    (changedData: SelectableDataType) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing],\n  )\n\n  const handleSelectAllClick = useCallback(\n    (checked: boolean) => {\n      sortedDataset.forEach((data) => (data.selected = checked))\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing, sortedDataset],\n  )\n\n  const handleRequestSort = useCallback(\n    (property: keyof SelectableDataType) => {\n      const isAsc = orderBy === property && order === SortType.asc\n      setOrder(isAsc ? SortType.desc : SortType.asc)\n      setOrderBy(property)\n    },\n    [order, orderBy],\n  )\n\n  const handleFilterValueChange = useCallback((newValue: string, key: keyof SelectableDataType) => {\n    setFilterValues((prev) => ({\n      ...prev,\n      [key]: newValue,\n    }))\n  }, [])\n\n  const createSortHandler = useCallback(\n    (property: keyof SelectableDataType) => () => {\n      handleRequestSort(property)\n    },\n    [handleRequestSort],\n  )\n\n  const sortTooltipTitle = useCallback(\n    (headCellId: keyof SelectableDataType) =>\n      orderBy === headCellId\n        ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n        : DATA_TABLE_TEXT[SortType.asc],\n    [order, orderBy],\n  )\n\n  const getTableHead = useCallback(\n    (indeterminate: boolean, allChecked: boolean) => (\n      <TableHead sx={dataTableStyle.tableHead}>\n        <TableRow sx={dataTableStyle.tableHeadRow}>\n          <TableCell padding={CELL_PADDING.none}>\n            <Box sx={dataTableStyle.checkboxAll}>\n              <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                <Checkbox\n                  sx={dataTableStyle.checkAll}\n                  indeterminate={indeterminate && !allChecked}\n                  checked={allChecked}\n                  onChange={(event) => handleSelectAllClick(event.target.checked)}\n                />\n              </Tooltip>\n              <TableSortLabel\n                active={orderBy === SelectedKey}\n                direction={orderBy === SelectedKey ? order : SortType.asc}\n                onClick={createSortHandler(SelectedKey)}\n              />\n            </Box>\n          </TableCell>\n          {displayAttributes.map((attribute) => {\n            const orderedByActive = orderBy === attribute\n            return (\n              <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                <Tooltip title={sortTooltipTitle(attribute)}>\n                  <TableSortLabel\n                    active={orderedByActive}\n                    direction={orderedByActive ? order : SortType.asc}\n                    onClick={createSortHandler(attribute)}\n                  >\n                    {otherCasesToWhitespaces(attribute)}\n                  </TableSortLabel>\n                </Tooltip>\n              </TableCell>\n            )\n          })}\n        </TableRow>\n        {showFilter && (\n          <TableRow sx={dataTableStyle.filterRow}>\n            <TableCell padding={CELL_PADDING.none}>\n              <FilterListOutlined sx={dataTableStyle.filterIcon} />\n            </TableCell>\n            {displayAttributes.map((attribute, idx) => (\n              <TableCell sx={dataTableStyle.filterCell} key={`filter-${attribute}`}>\n                <TextField\n                  defaultValue={filterValues[idx]}\n                  sx={dataTableStyle.filter}\n                  onChange={(e) => handleFilterValueChange(e.target.value, attribute)}\n                />\n              </TableCell>\n            ))}\n          </TableRow>\n        )}\n      </TableHead>\n    ),\n    [\n      createSortHandler,\n      displayAttributes,\n      filterValues,\n      handleFilterValueChange,\n      handleSelectAllClick,\n      order,\n      orderBy,\n      showFilter,\n      sortTooltipTitle,\n    ],\n  )\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table sx={dataTableStyle.container}>\n          {getTableHead(\n            sortedDataset.some((data) => data.selected),\n            sortedDataset.every((data) => data.selected),\n          )}\n          <DataTableBody\n            displayAttributes={displayAttributes}\n            sortedDataset={sortedDataset}\n            handleSelectClick={handleSelectClick}\n            rowHeight={rowHeight}\n            selectedBackgroundColor={selectedBackgroundColor}\n            selectedFontColor={selectedFontColor}\n            redrawTime={redrawTime}\n          />\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import {min} from \"d3-array\";\n\nfunction targetDepth(d) {\n  return d.target.depth;\n}\n\nexport function left(node) {\n  return node.depth;\n}\n\nexport function right(node, n) {\n  return n - 1 - node.height;\n}\n\nexport function justify(node, n) {\n  return node.sourceLinks.length ? node.depth : n - 1;\n}\n\nexport function center(node) {\n  return node.targetLinks.length ? node.depth\n      : node.sourceLinks.length ? min(node.sourceLinks, targetDepth) - 1\n      : 0;\n}\n","export default function constant(x) {\n  return function() {\n    return x;\n  };\n}\n","import {max, min, sum} from \"d3-array\";\nimport {justify} from \"./align.js\";\nimport constant from \"./constant.js\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nfunction computeLinkBreadths({nodes}) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport default function Sankey() {\n  let x0 = 0, y0 = 0, x1 = 1, y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8, py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey() {\n    const graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeSort = function(_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function(_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks({nodes, links}) {\n    for (const [i, node] of nodes.entries()) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    }\n    const nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d]));\n    for (const [i, link] of links.entries()) {\n      link.index = i;\n      let {source, target} = link;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    }\n    if (linkSort != null) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({nodes}) {\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined\n          ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.depth = x;\n        for (const {target} of node.sourceLinks) {\n          next.add(target);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeHeights({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.height = x;\n        for (const {source} of node.targetLinks) {\n          next.add(source);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeLayers({nodes}) {\n    const x = max(nodes, d => d.depth) + 1;\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {source, value} of target.targetLinks) {\n          let v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {target, value} of source.sourceLinks) {\n          let v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({sourceLinks, targetLinks}) {\n    if (linkSort === undefined) {\n      for (const {source: {sourceLinks}} of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {target: {targetLinks}} of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  return sankey;\n}\n","import {linkHorizontal} from \"d3-shape\";\n\nfunction horizontalSource(d) {\n  return [d.source.x1, d.y0];\n}\n\nfunction horizontalTarget(d) {\n  return [d.target.x0, d.y1];\n}\n\nexport default function() {\n  return linkHorizontal()\n      .source(horizontalSource)\n      .target(horizontalTarget);\n}\n","import { LinkDataPoint } from '../../types/d3-sankey'\n\nconst getCurrentWidth = (currentCount: number, all: number, width: number | undefined) => {\n  if (!width || !currentCount) return 0\n  const fraction = currentCount / all\n  return width * fraction\n}\n\nconst getSelectionWidth = (all: number, selected: number, width: number, isBrush: boolean) => {\n  if (width === 0) return 0\n  const selectedFraction = selected / all\n  return width * (isBrush ? selectedFraction : 1 - selectedFraction)\n}\n\n/**\n Get a shift of previously processed values\n * @param valuesCount - list of values counts or undefined, if there is no color category selected\n * @param all - count of all values\n * @param width - width of all-values line\n * @param idx - index of current value\n */\nconst getYFormerShift = (valuesCount: number[] | undefined, all: number, width: number, idx: number) => {\n  if (!valuesCount) return 0\n  const formerCount = valuesCount.slice(0, idx).reduce((sum, curr) => sum + curr, 0)\n  const formerFraction = formerCount / all\n  return width * formerFraction\n}\n\nconst getShift = (\n  currentCount: number,\n  selected: number,\n  all: number,\n  width: number,\n  valuesCount: number[] | undefined,\n  idx: number,\n  isBrush: boolean,\n  isOverlay: boolean,\n): number => {\n  if (!currentCount) return 0\n\n  const currentWidth = getCurrentWidth(currentCount, all, width)\n\n  const yFormerShift = getYFormerShift(valuesCount, all, width, idx)\n  const yCatShift = -width / 2 + yFormerShift + currentWidth / 2\n\n  if (isOverlay) {\n    return yCatShift\n  }\n  const selectedFraction = selected / currentCount\n  const yBrushShift = (currentWidth * (isBrush ? -1 * (1 - selectedFraction) : selectedFraction)) / 2\n  return yCatShift + yBrushShift\n}\n\nexport const getStrokeWidth = (d: LinkDataPoint, idx: number, isBrush: boolean, isOverlay?: boolean): number => {\n  const currentCount = d.catAttributeValuesCounts ? d.catAttributeValuesCounts[idx] : d.value\n  const currentWidth = getCurrentWidth(currentCount, d.value, d.width)\n\n  if (!isBrush && isOverlay) return currentWidth\n  return getSelectionWidth(currentCount, d.selected[idx], currentWidth, isBrush)\n}\n\nexport const getYShift = (d: LinkDataPoint, idx: number, isBrush: boolean, isOverlay: boolean): number => {\n  const currentCount = d.catAttributeValuesCounts ? d.catAttributeValuesCounts[idx] : d.value\n  if (!d.width) return 0\n\n  return getShift(currentCount, d.selected[idx], d.value, d.width, d.catAttributeValuesCounts, idx, isBrush, isOverlay)\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SELECTED_CLASS = `parallelSetsBundledSelected`\nexport const TABS_CLASS = `psbTabs`\nexport const LINE_NOT_SELECTED_CLASS = `psbLine`\nexport const CONNECTORS_CLASS = `psbConnector`\nexport const INNER_TEXT_CLASS = `psbInnerText`\nexport const TABS_SELECTED_CLASS = `psbTabsSelected`\n\nexport const getParallelSetsBundledStyle = (\n  opacity: Opacity,\n  isBrushActive: boolean,\n  brushColor: string,\n  fontColorInner: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .psbConnector': {\n    fill: `none`,\n  },\n  '& .psbTabs': {\n    cursor: `pointer`,\n    '&.psbTabsSelected': {\n      fill: important(brushColor),\n    },\n  },\n  '& path': {\n    '&.parallelSetsBundledSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n    '&.psbLine': {\n      opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n      mixBlendMode: `multiply`,\n    },\n  },\n  '& .psbInnerText': {\n    fill: fontColorInner,\n  },\n})\n","import { useCallback, useEffect, useMemo, useRef, useState, VoidFunctionComponent } from 'react'\nimport { scaleOrdinal, select } from 'd3'\nimport { Box } from '@mui/material'\nimport { sankey, sankeyLinkHorizontal } from '../../../../../lib/d3-sankey'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ParallelSetsBundledSettings } from '../../../../types/views/settings/ParallelSetsBundledSettings'\nimport { DataLink, NominalValueProperties } from '../../../../types/data/data'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { NodeData, NodeDataPoint } from '../../../../types/d3-sankey'\nimport { DataEach, Extent, OnMouseEvent } from '../../../../types/d3-types'\n\nimport { getTogglingYShift, TOGGLE_Y_SHIFT } from '../../../../helpers/views/togglingYShift'\nimport {\n  getAttributeFormatted,\n  getEverything,\n  getLinkDataPointValuesWithLabel,\n  getNodeDataPointValuesWithLabel,\n  getSpaced,\n  getTranslate,\n} from '../../../../helpers/stringGetters'\nimport { getGraph, getNeighborAttributes, getNominalValuesRecord } from '../../../../helpers/data/data'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\nimport { getStrokeWidth, getYShift } from '../../../../helpers/data/lineShifts'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelSetsBundled'\nimport { SVG } from '../../../../constants/svg'\nimport { AXES_TEXT_CLASS } from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ParallelSetsBrushingType } from '../../../../constants/brushing-type/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_BUNDLED_TEXT } from '../../../../text/views-and-settings/parallelSetsBundled'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport {\n  CONNECTORS_CLASS,\n  getParallelSetsBundledStyle,\n  INNER_TEXT_CLASS,\n  LINE_NOT_SELECTED_CLASS,\n  SELECTED_CLASS,\n  TABS_CLASS,\n  TABS_SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle'\n\nexport interface ParallelSetsBundledProps extends VisualizationView, Brushable, ParallelSetsBundledSettings {}\n\nexport const CONNECTORS = `CONNECTORS`\nexport const TEXT = `TEXT`\nexport const AXES_TEXT = `AXES_TEXT`\nexport const TABS = `TABS`\n\nexport const TEXT_SHIFT = 2\n\nexport const ParallelSetsBundled: VoidFunctionComponent<ParallelSetsBundledProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  isBrushingActive,\n  colorCategory,\n  margins,\n  opacity,\n  brushColor,\n  redrawTime,\n  setComponentBrushing,\n  refreshViews,\n  tabWidth,\n  tabSpacing,\n  tabGap,\n  brushingType,\n  fontColor,\n  categoryAttribute,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const upperPadding = TOGGLE_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  const [nominalValuesRecord, setNominalValuesRecord] = useState(getNominalValuesRecord(dataset))\n  // redraw time needed because it is changing selected\n  useEffect(() => {\n    setNominalValuesRecord(getNominalValuesRecord(dataset))\n  }, [dataset, redrawTime, displayAttributes])\n\n  const createParallelSetsBundled = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const displayPairs = getNeighborAttributes(displayAttributes)\n    const pairWidth = (innerWidth - (displayAttributes.length - 2) * tabSpacing) / (displayAttributes.length - 1)\n    const valueCounts = displayAttributes.map((att) => nominalValuesRecord[att]).map((arr) => arr.length)\n    const spacesAllMax = Math.max(...valueCounts) - 1\n    const isLeft = (d: NodeData): boolean => Number(d.x0) < pairWidth / 2\n\n    const half = (displayAttributes.length - 1) / 2\n\n    // brushing\n    const onMouseClick: OnMouseEvent<NodeDataPoint> = (_, { attribute, name, count, countSelected }) => {\n      dataset.forEach((data) => {\n        if (String(data[attribute]) === name) {\n          data.selected = count !== countSelected\n        }\n      })\n\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.ParallelSetsBundled)\n      refreshViews()\n    }\n\n    displayPairs.forEach((displayPair, pairIdx) => {\n      const spacesPairMax = Math.max(valueCounts[pairIdx], valueCounts[pairIdx + 1]) - 1\n      const pairExtent: Extent = [\n        [0, 0],\n        [pairWidth, innerHeight - (spacesAllMax - spacesPairMax) * tabGap],\n      ]\n\n      const color = scaleOrdinal(colorCategory)\n      const sankeyLayout = sankey<NominalValueProperties, DataLink>()\n        .nodeWidth(tabWidth)\n        .nodePadding(tabGap)\n        .nodeSort((a, b) => a.order - b.order)\n        .extent(pairExtent)\n\n      const graph = getGraph(dataset, categoryAttribute, nominalValuesRecord, displayPair[0], displayPair[1])\n      const { nodes, links } = sankeyLayout(graph)\n      const getPath = sankeyLinkHorizontal()\n\n      const xShift = pairIdx * (pairWidth + tabSpacing)\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TABS)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, (node) =>\n          node.count === node.countSelected ? getSpaced(TABS_CLASS, TABS_SELECTED_CLASS) : TABS_CLASS,\n        )\n        .attr(SVG.attributes.x, (node) => Number(node.x0) + xShift)\n        .attr(SVG.attributes.y, (node) => Number(node.y0))\n        .attr(SVG.attributes.height, (node) => Number(node.y1) - Number(node.y0))\n        .attr(SVG.attributes.width, (node) => Number(node.x1) - Number(node.x0))\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getNodeDataPointValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .on(MouseAction.click, onMouseClick)\n\n      // connectors\n      const connectors = svg\n        .append(SVG.elements.g)\n        .attr(SVG.attributes.class, CONNECTORS_CLASS)\n        .attr(SVG.attributes.transform, getTranslate([pairIdx * (pairWidth + tabSpacing), 0]))\n        .selectAll(CONNECTORS)\n        .data(links)\n        .enter()\n\n      const colorCategories = categoryAttribute ? nominalValuesRecord[categoryAttribute].map((att) => att.name) : [`1`] // one category\n      const isOverlay = brushingType === ParallelSetsBrushingType.overlay\n      // for each value runs once\n      colorCategories.forEach((category, idx) => {\n        // base\n        connectors\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, LINE_NOT_SELECTED_CLASS)\n          .attr(SVG.attributes.d, getPath)\n          .attr(SVG.attributes.stroke, color(category))\n          .attr(SVG.attributes.strokeWidth, (link) => getStrokeWidth(link, idx, false, isOverlay))\n          .attr(SVG.attributes.transform, (link) => getTranslate([0, getYShift(link, idx, false, isOverlay)]))\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n\n        // brushing\n        connectors\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, SELECTED_CLASS)\n          .attr(SVG.attributes.d, getPath)\n          .attr(SVG.attributes.strokeWidth, (link) => getStrokeWidth(link, idx, true))\n          .attr(SVG.attributes.transform, (link) => getTranslate([0, getYShift(link, idx, true, isOverlay)]))\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n      })\n\n      const getTextVisible: DataEach<NodeData, SVGTextElement, number> = (node) => {\n        if (pairIdx === Math.floor(half)) return 1\n        if ((isLeft(node) && pairIdx > half) || (!isLeft(node) && pairIdx < half)) return 0\n        return 1\n      }\n\n      // line text\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TEXT)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.text)\n        .attr(SVG.attributes.class, INNER_TEXT_CLASS)\n        .attr(\n          SVG.attributes.x,\n          (node) => (isLeft(node) ? Number(node.x1) + TEXT_SHIFT : Number(node.x0) - TEXT_SHIFT) + xShift,\n        )\n        .attr(SVG.attributes.y, (node) => (Number(node.y1) + Number(node.y0)) / 2)\n        .attr(SVG.attributes.textAnchor, (node) => (isLeft(node) ? SVG.values.start : SVG.values.end))\n        .style(SVG.style.opacity, getTextVisible)\n        .text((node) => getAttributeFormatted(node.name))\n    })\n    // axis text\n    svg\n      .append(SVG.elements.g)\n      .selectAll(AXES_TEXT)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.textAnchor, SVG.values.middle)\n      .attr(SVG.attributes.x, (_, idx) => idx * (pairWidth + tabSpacing))\n      .attr(SVG.attributes.y, getTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n  }, [\n    displayAttributes,\n    innerWidth,\n    tabWidth,\n    nominalValuesRecord,\n    dataset,\n    setComponentBrushing,\n    refreshViews,\n    innerHeight,\n    tabGap,\n    colorCategory,\n    tabSpacing,\n    categoryAttribute,\n    brushingType,\n  ])\n\n  useEffect(\n    () => createParallelSetsBundled(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      innerWidth,\n      innerHeight,\n      colorCategory,\n      nominalValuesRecord,\n      tabWidth,\n      tabSpacing,\n      tabGap,\n      categoryAttribute,\n      brushingType,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelSetsBundledStyle(opacity, isBrushingActive, brushColor, fontColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelSetsBundled]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelSetsBundled]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return (\n    <Box sx={getViewsNotDisplayStyle(width, height, margin)} id={CONTAINER_EMPTY[ViewType.ParallelSetsBundled]}>\n      {PARALLEL_SETS_BUNDLED_TEXT.unavailable}\n    </Box>\n  )\n}\n","import { VisualizationView } from '../../types/views/VisualizationView'\nimport { Brushable } from '../../types/brushing/Brushable'\nimport { SettingsType } from '../../types/views/settings/Settings'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { ParallelCoordinates } from '../../components/content/views/parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from '../../components/content/views/scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from '../../components/content/views/glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from '../../components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from '../../components/content/views/data-table/DataTable'\nimport { ParallelSetsBundled } from '../../components/content/views/parallel-sets-bundeled/ParallelSetsBundled'\n\nimport { ViewType } from './ViewType'\n\nexport const VIEW_BORDER_SIZE = 5\n\ntype ViewElementFunction = (\n  props: Brushable & VisualizationView,\n  settings: SettingsType,\n  showFilter?: boolean,\n) => JSX.Element\n\nexport const getViewRecord: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.DataTable]: (p, s, f) => <DataTable {...p} {...(s as DataTableSettings)} showFilter={!!f} />,\n  [ViewType.ParallelSetsBundled]: (p, s) => <ParallelSetsBundled {...p} {...(s as ParallelSetsBundledSettings)} />,\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { VIEW_BORDER_SIZE, getViewRecord } from '../../../constants/views-general/view'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  viewType: ViewType\n  settings: Settings\n  brushColor: string\n  showFilter?: boolean\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({\n  width,\n  height,\n  viewType,\n  settings,\n  showFilter,\n  ...dataProps\n}) => {\n  const graph = getViewRecord[viewType]\n  const settingsCurr = settings[viewType]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr, showFilter)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","export const GRID_ITEM_TEXT = {\n  tooltipClose: `Close`,\n  glyphAxes: `Glyph axes from top, clockwise`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { BUTTON_COLORS } from '../../../styles/colors'\n\nconst inlineButton = {\n  margin: 0,\n  padding: px(0, 4),\n  minWidth: 0,\n}\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    ...inlineButton,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n  buttonClose: {\n    ...inlineButton,\n  },\n  buttonActive: {\n    color: BUTTON_COLORS.buttonInlinedFontOn,\n    bgcolor: BUTTON_COLORS.buttonInlinedBgOn,\n    borderRadius: px(5),\n  },\n}\n","import React, { VoidFunctionComponent } from 'react'\nimport { IconButton, Tooltip } from '@mui/material'\nimport { Close } from '@mui/icons-material'\n\nimport { GRID_ITEM_TEXT } from '../../../../text/gridItemText'\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\n\ninterface ViewCloseButtonProps {\n  onRemove: () => void\n}\n\nexport const ViewCloseButton: VoidFunctionComponent<ViewCloseButtonProps> = ({ onRemove }) => (\n  <IconButton onClick={onRemove} sx={inlineButtonStyles.buttonClose}>\n    <Tooltip title={GRID_ITEM_TEXT.tooltipClose}>\n      <Close />\n    </Tooltip>\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { DIALOG_COLORS } from '../../../styles/colors'\n\nexport const helpDialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(800),\n      width: px(800),\n    },\n  },\n  iconedHeaderBox: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `flex-end`,\n    '& svg': {\n      fontSize: px(20),\n      opacity: 0.5,\n      paddingBottom: px(2),\n    },\n  },\n  header: {\n    fontWeight: `bold`,\n    fontSize: px(16),\n    paddingTop: px(10),\n  },\n  brushContainer: {\n    minWidth: px(0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    margin: px(2),\n  },\n  text: {\n    padding: px(10),\n    color: DIALOG_COLORS.font,\n  },\n  image: {\n    height: px(130),\n    width: px(238),\n  },\n}\n","import { useCallback, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  CardMedia,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport { Brush, Help, Settings } from '@mui/icons-material'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\nimport { BUTTON_VARIANT, COMPONENT_TYPE } from '../../../../constants/mui'\nimport { BRUSHING_IMAGES } from '../../../../constants/public-path'\n\nimport { VIEW_INFO_TEXT } from '../../../../text/siteText'\nimport { INFO_DIALOG_TEXT, VIEW_NAMES } from '../../../../text/views-and-settings/common'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\nimport { helpDialogStyle } from '../../../../components-style/content/common/helpDialogStyle'\n\nexport interface ViewHelpButtonProps {\n  viewType: ViewType\n}\n\nexport const ViewHelpButton: VoidFunctionComponent<ViewHelpButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const openDialog = useCallback(() => setIsDialogOpen(true), [])\n  const closeDialog = useCallback(() => setIsDialogOpen(false), [])\n\n  return (\n    <>\n      <Dialog onClose={closeDialog} open={isDialogOpen} sx={helpDialogStyle.dialog}>\n        <DialogTitle>{VIEW_NAMES[viewType]}</DialogTitle>\n        <Divider />\n        <DialogContent>\n          <DialogContentText sx={helpDialogStyle.text}>{INFO_DIALOG_TEXT[viewType].description}</DialogContentText>\n          <Box sx={helpDialogStyle.iconedHeaderBox}>\n            <Typography sx={helpDialogStyle.header}>{VIEW_INFO_TEXT.dialog.brushing}</Typography>\n            <Brush />\n          </Box>\n          <Divider />\n          <Box sx={helpDialogStyle.brushContainer}>\n            <CardMedia\n              component={COMPONENT_TYPE.image}\n              sx={helpDialogStyle.image}\n              image={BRUSHING_IMAGES[viewType]}\n              alt={viewType}\n            />\n            <DialogContentText sx={helpDialogStyle.text}>\n              {INFO_DIALOG_TEXT[viewType].descriptionBrushing}\n            </DialogContentText>\n          </Box>\n          <Box sx={helpDialogStyle.iconedHeaderBox}>\n            <Typography sx={helpDialogStyle.header}>{VIEW_INFO_TEXT.dialog.settings}</Typography>\n            <Settings />\n          </Box>\n          <Divider />\n          <DialogContentText sx={helpDialogStyle.text}>\n            {INFO_DIALOG_TEXT[viewType].descriptionSettings}\n          </DialogContentText>\n          <DialogContentText sx={helpDialogStyle.text}>\n            {INFO_DIALOG_TEXT[viewType].descriptionSettingsMore}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={closeDialog} variant={BUTTON_VARIANT.contained} autoFocus>\n            {VIEW_INFO_TEXT.dialog.close}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <IconButton onClick={openDialog} sx={inlineButtonStyles.button}>\n        <Tooltip title={VIEW_INFO_TEXT.buttonLabel}>\n          <Help />\n        </Tooltip>\n      </IconButton>\n    </>\n  )\n}\n","import { ViewType } from '../../constants/views-general/ViewType'\nimport { CONTAINER_EMPTY, CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\nconst xmlnsSvg = `http://www.w3.org/2000/svg`\nconst preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\nconst options = { type: `image/svg+xml;charset=utf-8` }\nconst linkElement = `a`\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, xmlnsSvg)\n\n  const svgBlob = new Blob([preface, svgEl.outerHTML], options)\n  const svgUrl = URL.createObjectURL(svgBlob)\n\n  // create download link element, append, click and remove\n  const downloadLink = document.createElement(linkElement)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\ntype StyleNode = { sheet: CSSStyleSheet }\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n  const newStyleNodes = ([...document.querySelectorAll(`[data-emotion]`)] as unknown as Array<StyleNode>)\n    .flatMap(({ sheet }) => [...sheet.cssRules].map((rules) => rules.cssText))\n    .filter((sheet) => sheet.includes(`.${containerClass}`))\n    .map((sheet) => sheet.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n\nexport const getSaveIsDisabled = (viewType: ViewType): boolean =>\n  document.querySelector(`#${CONTAINER_EMPTY[viewType]}`) !== null &&\n  document.querySelector(`#${SAVE_ID[viewType]}`) === null\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { BUTTON_VARIANT } from '../../../../constants/mui'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant={BUTTON_VARIANT.contained} autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant={BUTTON_VARIANT.outlined}>\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useCallback, useState, VoidFunctionComponent } from 'react'\nimport { IconButton, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { getSaveIsDisabled, saveSvg } from '../../../../helpers/d3/saveSvg'\n\nimport { ViewType } from '../../../../constants/views-general/ViewType'\n\nimport { SAVE_TEXT } from '../../../../text/siteText'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from '../../common/dialogs/ConfirmationDialog'\n\nexport interface ViewSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const ViewSaveButton: VoidFunctionComponent<ViewSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const openDialog = useCallback(() => setIsDialogOpen(true), [])\n  const closeDialog = useCallback(() => setIsDialogOpen(false), [])\n\n  const onConfirm = useCallback(() => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }, [viewType])\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={SAVE_TEXT.header}\n        description={SAVE_TEXT.description}\n        onConfirm={onConfirm}\n        onClose={closeDialog}\n        confirmText={SAVE_TEXT.confirm}\n        cancelText={SAVE_TEXT.cancel}\n      />\n      <IconButton onClick={openDialog} disabled={getSaveIsDisabled(viewType)} sx={inlineButtonStyles.button}>\n        <Tooltip title={SAVE_TEXT.save}>\n          <Save />\n        </Tooltip>\n      </IconButton>\n    </>\n  )\n}\n","import React, { VoidFunctionComponent } from 'react'\nimport { Tooltip, Typography } from '@mui/material'\nimport { RotateRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { getDisplayAttributesInParentheses } from '../../../../helpers/stringGetters'\n\nimport { GRID_ITEM_TEXT } from '../../../../text/gridItemText'\n\nimport { gridItemStyle } from '../../../../components-style/content/views/gridItemStyle'\n\nexport interface GlyphAxesTextProps {\n  displayAttributes: Array<keyof SelectableDataType>\n}\n\nexport const GlyphAxesText: VoidFunctionComponent<GlyphAxesTextProps> = ({ displayAttributes }) => (\n  <Typography sx={gridItemStyle.text}>\n    <Tooltip title={GRID_ITEM_TEXT.glyphAxes}>\n      <RotateRight sx={gridItemStyle.textIcon} />\n    </Tooltip>\n    {getDisplayAttributesInParentheses(displayAttributes)}\n  </Typography>\n)\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { FilterList } from '@mui/icons-material'\n\nimport { BUTTON_VARIANT } from '../../../../constants/mui'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../text/siteText'\n\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\n\nexport interface DataFilterButtonProps {\n  showFilter?: boolean\n  setShowFilter: Dispatch<SetStateAction<boolean | undefined>>\n}\n\nexport const DataFilterButton: VoidFunctionComponent<DataFilterButtonProps> = ({ showFilter, setShowFilter }) => (\n  <Button variant={BUTTON_VARIANT.text} onClick={() => setShowFilter(!showFilter)} sx={inlineButtonStyles.button}>\n    <Tooltip title={TOP_TOOLBAR_TEXT.filter}>\n      <FilterList sx={showFilter ? inlineButtonStyles.buttonActive : {}} />\n    </Tooltip>\n  </Button>\n)\n","import React, { ComponentProps, useState, VoidFunctionComponent } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, Typography } from '@mui/material'\n\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { DRAG_HANDLE, GRID_HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/layout/layout'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { View } from '../views/View'\nimport { ViewCloseButton } from './items/ViewCloseButton'\nimport { ViewHelpButton } from './items/ViewHelpButton'\nimport { ViewSaveButton } from './items/ViewSaveButton'\nimport { GlyphAxesText } from './items/GlyphAxesText'\nimport { DataFilterButton } from './items/DataFilterButton'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isResizeFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isResizeFinished, viewType, ...rest }) => {\n  const [showFilter, setShowFilter] = useState<boolean | undefined>(undefined)\n  const contextButton =\n    viewType !== ViewType.DataTable ? (\n      <ViewSaveButton viewType={viewType} />\n    ) : (\n      <DataFilterButton showFilter={showFilter} setShowFilter={setShowFilter} />\n    )\n\n  const isGlyphs = (viewType === ViewType.Glyphs || viewType === ViewType.ScatterPlotGlyphs) && rest.settings[viewType]\n\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Box sx={gridItemStyle.textBox}>\n            <Typography>{title}</Typography>\n            {isGlyphs && <GlyphAxesText displayAttributes={rest.settings[viewType]!.displayAttributes} />}\n          </Box>\n          <Box sx={gridItemStyle.right}>\n            <ViewHelpButton viewType={viewType} />\n            {contextButton}\n            <ViewCloseButton onRemove={onRemove} />\n          </Box>\n        </Box>\n        {isResizeFinished && (\n          <View\n            width={width}\n            height={height - GRID_HEADER_HEIGHT}\n            viewType={viewType}\n            {...rest}\n            showFilter={showFilter}\n          />\n        )}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import React, { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, memo, useEffect } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/stringGetters'\nimport { setDisplay } from '../../../helpers/d3/setDisplay'\n\nimport { isViewType, ViewType } from '../../../constants/views-general/ViewType'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/layout/layout'\nimport { TOOLTIP_CLASS } from '../../../constants/views-general/tooltip'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/siteText'\nimport { VIEW_NAMES } from '../../../text/views-and-settings/common'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { SettingsDrawer } from '../data-drawer/SettingsDrawer'\nimport { LayoutDialog } from '../top-toolbar/items/layout/LayoutDialog'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: () => void\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isLayoutDialogOpen: boolean\n  setIsLayoutDialogOpen: Dispatch<SetStateAction<boolean>>\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  brushColor: string\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nconst BaseViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  isLayoutDialogOpen,\n  setIsLayoutDialogOpen,\n  layout,\n  setLayout,\n  ...viewProps\n}) => {\n  const [viewResizing, setViewResizing] = useState<ViewType | null>(null)\n  const [lastLayout, setLastLayout] = useState(layout)\n\n  useEffect(\n    () => () => {\n      if (layout !== null) setLastLayout(layout)\n    },\n    [layout],\n  )\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout || layout.length === 0) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout, layout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        return layout.filter((item) => item.i !== viewType)\n      })\n    },\n    [setLayout],\n  )\n\n  setDisplay(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <LayoutDialog\n        isOpen={isLayoutDialogOpen}\n        setLayout={setLayout}\n        onClose={() => setIsLayoutDialogOpen(false)}\n        lastLayout={lastLayout}\n      />\n      <SettingsDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={(_, view) => setViewResizing(view.i as ViewType)}\n        onResizeStop={() => setViewResizing(null)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isResizeFinished={view.i !== viewResizing}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              viewType={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n\n// do not rerender if props not change\nexport const ViewGrid = memo(BaseViewGrid)\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/siteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => <Box sx={emptyDataStyle.site}>{EMPTY_DATA_TEXT.content}</Box>\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../helpers/stringGetters'\n\nexport const loadingStyle: Record<string, SxProps> = {\n  load: {\n    paddingTop: px(40),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/siteText'\n\nimport { loadingStyle } from '../../../components-style/content/no-data/loadingStyle'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={loadingStyle.load}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GridLayoutItem } from '../../../types/views/Grid'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\nimport { useDebounce } from '../../../helpers/react/useDebounce'\nimport { getCategoryAttributesKeys, getDefaultQuantitativeAttributesKeys } from '../../../helpers/data/data'\n\nimport { DataLoadState } from '../../../constants/data/DataLoadState'\nimport { ViewType } from '../../../constants/views-general/ViewType'\nimport { DEFAULT_GRID_LAYOUT_QUANTITATIVE, DEFAULT_GRID_LAYOUT_NOMINAL } from '../../../constants/layout/layout'\nimport { DEFAULT_BRUSH_COLOR } from '../../../constants/views-general/defaultSettableColors'\nimport { BRUSH_DEBOUNCE } from '../../../constants/debounce/debounce'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../grid/ViewGrid'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<(() => void)[]>([])\n  const [currentRedrawTime, setRedrawTime] = useState(Date.now())\n\n  const redrawTime = useDebounce(currentRedrawTime, BRUSH_DEBOUNCE) // used for less component re-renders\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isLayoutDialogOpen, setIsLayoutDialogOpen] = useState(false)\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[] | null>(null)\n  const [brushColor, setBrushColor] = useState<string>(DEFAULT_BRUSH_COLOR)\n\n  useEffect(() => {\n    if (!dataset || layout !== null) return\n    setLayout(\n      getCategoryAttributesKeys(dataset).length > getDefaultQuantitativeAttributesKeys(dataset).length\n        ? DEFAULT_GRID_LAYOUT_NOMINAL\n        : DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n    )\n  }, [dataset, layout])\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = useCallback((data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }, [])\n\n  const refreshViews = useCallback((): void => {\n    setRedrawTime(Date.now()) // redraw component\n  }, [])\n\n  const cleanAllBrushes = useCallback(\n    (deletePrevSelection = true) => {\n      if (dataset && deletePrevSelection) {\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n      }\n      cleanBrushingRef.current.forEach((f) => f())\n    },\n    [cleanBrushingRef, dataset, refreshViews],\n  )\n\n  const clearBrushesOnButton = useCallback(() => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }, [cleanAllBrushes])\n\n  const setComponentBrushing: SetComponentBrushing = useCallback(\n    (newComponent) => {\n      if (componentBrushingRef.current !== newComponent) {\n        cleanAllBrushes(\n          newComponent !== ViewType.DataTable &&\n            newComponent !== ViewType.Glyphs &&\n            newComponent !== ViewType.ParallelSetsBundled,\n        )\n      }\n      setCurrentComponentBrushing(newComponent)\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const registerCleanBrushing = useCallback((cleanBrushing: () => void) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }, [])\n\n  const cleanSelectedIfViewWasBrushing = useCallback(\n    (component: ViewType) => {\n      if (componentBrushingRef.current === component) {\n        cleanAllBrushes()\n        setCurrentComponentBrushing(null)\n      }\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = useCallback(\n    (newIsBrushingOnEndOfMove: boolean) => {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n      setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n    },\n    [cleanAllBrushes],\n  )\n\n  const closeDrawer = useCallback(() => setDrawerOpen(false), [])\n  const openDrawer = useCallback(() => setDrawerOpen(true), [])\n\n  const topToolbarComponent = (\n    <TopToolbar\n      openDrawer={openDrawer}\n      isToolsDisabled={dataset === null}\n      isDetailsVisible={isDetailsVisible}\n      setIsDetailsVisible={setIsDetailsVisible}\n      isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n      isBrushingActive={componentBrushingRef.current !== null}\n      clearBrushes={clearBrushesOnButton}\n      setDataset={setDatasetAndRemoveBrushing}\n      setDataLoadState={setDataLoadState}\n      setIsLayoutDialogOpen={setIsLayoutDialogOpen}\n      removeLayout={() => setLayout([])}\n      setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n      brushColor={brushColor}\n      setBrushColor={setBrushColor}\n    />\n  )\n\n  if (dataLoadState === DataLoadState.NoData) {\n    return (\n      <>\n        {topToolbarComponent}\n        <EmptyData />\n      </>\n    )\n  }\n  if (dataLoadState === DataLoadState.Loading || !dataset) {\n    return (\n      <>\n        {topToolbarComponent}\n        <Loading />\n      </>\n    )\n  }\n\n  if (!layout) return null\n\n  return (\n    <>\n      {topToolbarComponent}\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={closeDrawer}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isLayoutDialogOpen={isLayoutDialogOpen}\n        setIsLayoutDialogOpen={setIsLayoutDialogOpen}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        brushColor={brushColor}\n        registerCleanBrushing={registerCleanBrushing}\n        setComponentBrushing={setComponentBrushing}\n        refreshViews={refreshViews}\n        redrawTime={redrawTime}\n        isBrushingActive={componentBrushingRef.current !== null}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      />\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}