{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/constants/views/ViewTypes.ts","app/text/HeaderText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/FooterText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/helpers/react/useDebounce.ts","app/constants/data/sampleDataset.tsx","app/constants/views/common.ts","app/constants/data/data.ts","app/text/SiteText.ts","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/helpers/data/data.ts","app/components/content/top-toolbar/items/file-reader/NullDialog.tsx","app/helpers/data/comparator.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components-style/content/top-toolbar/items/buttons/colorButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ColorButton.tsx","app/constants/debounce/debounce.ts","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/constants/views/tooltip.ts","app/text/views-and-menus/common.ts","app/components-style/content/views/viewGridStyle.ts","app/components-style/content/data-drawer/dataDrawerStyle.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseAction.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/glyphs.ts","app/components-style/content/data-drawer/dataDrawerMenuStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components-style/content/data-drawer/items/menuTextStyle.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components/content/data-drawer/items/OpacityInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/settings/ParallelCoordinatesSettings.tsx","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixMenu.tsx","app/types/views/settings/ScatterPlotMatrixSettings.tsx","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-menus/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsMenu.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/text/views-and-menus/dataTable.ts","app/components-style/content/data-drawer/items/colorPickerStyle.ts","app/components/content/data-drawer/items/ColorPicker.tsx","app/components/content/views/data-table/DataTableMenu.tsx","app/types/views/settings/DataTableSettings.ts","app/components/content/data-drawer/DataDrawer.tsx","app/components-style/content/views/gridItemStyle.ts","app/constants/save/save.ts","app/helpers/d3/saveSvg.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/common/DataSaveButton.tsx","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/d3/attributeGetters.ts","app/constants/html.ts","app/helpers/d3/tooltip.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/constants/form.ts","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTable.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/components/content/views/data-table/DataFilterButton.tsx","app/components/content/views/GridItem.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/loadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","DataLoadError","ViewType","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","dataToReadable","data","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","VIEW_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","SampleDataset","DRAG_HANDLE","VIEW_DEFAULT_SIZE","height","VIEW_LIMITS","ParallelCoordinates","minW","minH","ScatterPlotMatrix","Glyphs","ScatterPlotGlyphs","DataTable","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT","i","x","y","OptionType","SAMPLE_DATASET_OPTIONS","Object","sampleDatasetIcons","flower","bird","car","LocalFlorist","Air","DirectionsCar","sampleDatasets","flowerJson","birdJson","carJson","AcceptableFileTypes","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","header","save","confirm","cancel","FILE_READER_TEXT","button","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFileFormat","nullDialog","optionsText","leave","filter","change","optionsDescription","changeTo","topToolbarStyle","toolbar","separator","margin","borderLeft","left","middle","right","topToolbarButtonStyle","minWidth","ClickableButton","icon","onClick","disabled","label","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","keys","every","key","idx","CsvParse","textCsv","parse","output","fromEntries","toLowerCase","numValue","Number","isNaN","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","fileReaderStyle","dialogStyle","dialog","alert","innerContent","contentBox","toggleDialogGroup","marginBottom","toggleDialogButton","flexGrow","attHeader","fontWeight","paddingBottom","numInput","alignSelf","SelectionDialog","isOpen","onClose","options","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","getAttributeKeys","getDatasetSample","getQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","size","getDefaultAllAttributesChecked","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","getDefaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","NullDialog","nullContainingAttributes","setDataset","optionsChosen","setOptionsChosen","replaceValue","setReplaceValue","fill","handleNullDialogConfirm","useCallback","datasetFixed","forEach","att","handleNumberChange","prev","newVals","ToggleButtonGroup","exclusive","onChange","e","newOpts","handleToggleChange","opt","ToggleButton","TextField","type","defaultValue","target","addSelected","d","selected","SortType","FILE_INPUT_ID","FileReader","setDataLoadState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isNullDialogOpen","setIsNullDialogOpen","setNullContainingAttributes","rawDataset","setRawDataset","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionKey","Loaded","closeDialog","handleFileChange","a","files","Loading","selectedFile","fileType","json","csv","JSON","NoData","selectableDataset","document","getElementById","AutoGraph","component","Add","hidden","id","ON_VALUE","ToggleButtonSingle","setValue","handleChange","event","checked","openSettingsButtonStyle","settings","OpenSettingsButton","IconButton","Settings","getColorInputStyle","getColorInputBoxStyle","minHeight","ml","colorInputStyle","inputBox","position","opacity","ColorButton","handleSetColor","tooltip","currentColor","setCurrentColor","debouncedColor","disableHoverListener","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","brushColor","setBrushColor","Info","SkipNext","AutoFixOff","AddCircle","Brush","SVG","svg","g","circle","rect","path","div","class","transform","cx","cy","r","strokeWidth","stroke","top","none","block","displayDetails","tooltipClass","selectAll","style","TOOLTIP_CLASS","TOOLTIP","bottom","lr","MENU_BASE_TEXT","more","empty","MENU_TEXT","attributes","category","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","PALETTE_PICKER_TEXT","categoriesLabel","VIEW_NAMES","viewGridStyle","pointerEvents","zIndex","dataDrawerStyle","drawer","flexShrink","chevron","menu","descCompare","b","orderBy","BrushAction","MouseAction","getComparator","sort","desc","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","margins","colorCategory","schemeCategory10","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","dataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleCheckboxChange","eventChecked","newChecked","prevSettings","newSettings","handleMove","newAttributesKeys","displayAttributes","onUpButton","onDownButton","FormControlLabel","ArrowDropUp","ArrowDropDown","Checkbox","CategorySelector","handleSelectCategoryChange","categoryAttribute","undefined","select","MenuItem","Selector","settingsKey","handleSelectChange","newValue","numberInputStyles","vertical","horizontal","textField","menuTextStyle","MarginInput","currentMargins","setCurrentMargins","debouncedMargins","handleMarginChange","newMargin","oldMargins","newMargins","inputProps","inputMode","min","NumberInput","valueKey","max","currentValue","setCurrentValue","handleChangeValue","minVal","maxVal","OpacityInput","opacities","currentOpacities","setCurrentOpacities","debouncedOpacities","handleOpacityChange","newOpacity","oldOpacities","newOpacities","getPalettePickerColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","currentColors","setCurrentColors","debouncedColors","newColor","oldColors","newColors","getInput","toggleButtonsStyle","group","ToggleButtons","handleToggleButtonChange","GlyphsMenu","glyphsSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","sortableAttributes","categoricalAttributes","getCurrentDisplayAttributes","currChecked","createGlyphsMenu","newQaKeys","defaultSortAttribute","defaultCategoryAttribute","newGlyphs","sortAttribute","getNewSettingsForAttributeChecker","newSortableAttributes","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","PARALLEL_COORDINATES_DEFAULT","lineWidth","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","sizes","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","createScatterPlotMatrixMenu","newScatterPlotMatrix","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_MENU_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsMenu","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsMenu","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","selectedBackgroundColor","selectedFontColor","DATA_TABLE_MENU_TEXT","DATA_TABLE_TEXT","checkboxTooltip","getColorPickerInputStyle","colorPickerStyle","ColorPicker","handleChangeColor","DataTableMenu","dataTableSettings","createDataTableMenu","newKeys","newDataTableSettings","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","SAVE_ID","CONTAINER_SAVE_ID","saveSvg","svgContainer","querySelector","containerClass","from","classList","cls","includes","newStyleNodes","querySelectorAll","flatMap","sheet","cssRules","rules","cssText","node","createElement","innerHTML","insertBefore","firstChild","svgEl","fileName","setAttribute","svgData","outerHTML","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","removeChild","saveSvgToFile","remove","console","error","inlineButtonStyles","buttonActive","ConfirmationDialog","onConfirm","cancelText","DataSaveButton","isDialogOpen","setIsDialogOpen","openDialog","Save","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getCategoryColor","TEXT_Y_SHIFTS","odd","even","TOGGLE_TEXT_Y_SHIFT","Math","getTextTogglingYShift","_","HTML","onMouseOverTooltip","clientX","clientY","duration","html","getAttributeValuesWithLabel","onMouseOutTooltip","PARALLEL_COORDINATES_CLASS","getParallelCoordinatesStyle","isBrushActive","font","textAnchor","getViewsNotDisplayStyle","refreshViews","registerCleanBrushing","setComponentBrushing","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","nullsCount","dimension","selectedRange","number","range","valueOnAxis","onBrush","start","move","brushEvent","axisName","selection","end","brushExtent","BRUSH_WIDTH","brush","brushY","on","enter","append","attr","line","mouseOver","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","selLKey","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","brushing","clearBrush","brushSelection","makeBrush","GLYPHS_CLASS","SELECTED_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","onMouseClick","changedData","SCATTER_PLOT_GLYPHS_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","makeGlyphs","FORM","getDataTableRowStyle","paddingTop","dataTableStyle","tableHead","tableHeadRow","tableBody","filterRow","filterCell","filterIcon","paddingLeft","notDisplayed","showFilter","order","setOrder","setOrderBy","filterValues","setFilterValues","filteredDataset","handleSelectClick","handleSelectAllClick","handleRequestSort","property","isAsc","handleFilterValueChange","createSortHandler","sortTooltipTitle","headCellId","TableContainer","Table","TableHead","TableRow","TableCell","checkAll","indeterminate","orderedByActive","sortDirection","TableSortLabel","active","direction","FilterListOutlined","TableBody","hover","s","f","View","dataProps","graph","settingsCurr","overflowX","overflowY","DataFilterButton","setShowFilter","FilterList","GridItem","onRemove","isResizeFinished","rest","useSize","Close","ReactGridLayout","WidthProvider","GridLayout","BaseViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","layout","setLayout","viewProps","viewResizing","setViewResizing","updateLayout","newLayout","filteredLayout","addView","find","posY","reduce","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","ViewGrid","memo","emptyDataStyle","site","EmptyData","loadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","currentRedrawTime","setRedrawTime","redrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setDatasetAndRemoveBrushing","cleanAllBrushes","deletePrevSelection","clearBrushesOnButton","newComponent","setIsBrushingOnEndOfMoveAndRemoveBrushing","newIsBrushingOnEndOfMove","topToolbarComponent","appStyle","app","content","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.d08fe6f3.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFileFormat = `unsupportedFileFormat`,\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  DataTable = `DataTable`,\n}\n\nexport const isViewType = (viewType: string): viewType is ViewType =>\n  (Object.values(ViewType) as string[]).includes(viewType)\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim()\n\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface for Selectable data type with index (for sorting etc.)\n */\nexport interface IndexedSelectableDataType extends SelectableDataType {\n  index: number\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonHoverBackground: `#b3bede`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  buttonInlinedFontOn: `#3965c4`,\n  buttonInlinedBgOn: `#e9eeff`,\n  border: `rgba(0, 0, 0, 0.12)`,\n  colorBorder: `#42495d`,\n  buttonDialogBackground: `#363a46`,\n  buttonDialogHoverBackground: `#1f2528`,\n  buttonDialogFont: `#d6e1ff`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  filterIconFont: `#656d86`,\n  filterBackground: `#52586c`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { calc } from '../helpers/d3/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/HeaderText'\n\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { FOOTER_TEXT } from '../../text/FooterText'\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n    <Box sx={footerStyle.text}>\n      &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n    </Box>\n  </Box>\n)\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { useEffect, useState } from 'react'\n\nexport const useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n  return debouncedValue\n}\n","import { Air, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flower = `flower`,\n  bird = `bird`,\n  car = `car`,\n}\n\nexport const SAMPLE_DATASET_OPTIONS = Object.values(SampleDataset)\n\nexport const sampleDatasetFiles: Record<SampleDataset, string> = {\n  [SampleDataset.flower]: `flowerData.json`,\n  [SampleDataset.bird]: `birdData.json`,\n  [SampleDataset.car]: `carData.json`,\n}\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flower]: <LocalFlorist />,\n  [SampleDataset.bird]: <Air />,\n  [SampleDataset.car]: <DirectionsCar />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flower]: flowerJson,\n  [SampleDataset.bird]: birdJson,\n  [SampleDataset.car]: carJson,\n}\n","import { GridLayoutItem } from '../../types/views/Grid'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { ViewType } from './ViewTypes'\n\nexport const DEFAULT_BRUSH_COLOR = `#830606`\nexport const DEFAULT_BRUSH_BG_COLOR_TABLE = `#ffcfcf`\nexport const DEFAULT_BRUSH_FONT_COLOR_TABLE = `#111111`\n\nexport const VIEW_BORDER_SIZE = 5\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const HEADER_HEIGHT = 30\n\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 0,\n  height: 0,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n}\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n}\n\nexport const DEFAULT_GRID_LAYOUT: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n","export const CATEGORY_LIMIT = 10\n\nexport enum OptionType {\n  leave = `leave`,\n  change = `change`,\n  filter = `filter`,\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataLoadError } from '../constants/data/dataLoadState'\nimport { OptionType } from '../constants/data/data'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  labelBrushColor: `Brush color`,\n  addViewDialogTitle: `Add a view`,\n  noOption: `All view options are currently displayed.`,\n  saveText: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    save: `Save`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n  filter: `Filter`,\n}\n\nexport const FILE_READER_TEXT = {\n  button: `Select a file`,\n  sampleDataLabel: `Try it on the sample data`,\n  sampleDataDialogTitle: `Select sample dataset`,\n  sampleDataDialogText: {\n    [SampleDataset.flower]: `Flower dataset`,\n    [SampleDataset.bird]: `Bird dataset`,\n    [SampleDataset.car]: `Car dataset`,\n  },\n  alertDialog: {\n    [DataLoadError.unsupportedFile]: {\n      title: `File type not supported`,\n      description: `This file type is not supported. Use JSON or CSV file.`,\n    },\n    [DataLoadError.unsupportedFileFormat]: {\n      title: `File format not supported`,\n      description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n    },\n    confirm: `OK`,\n  },\n  nullDialog: {\n    title: `Data with null values occurred!`,\n    description: `This application provides only basic operations for modifying null data values. For better processing, use applications designed for this purpose.`,\n    confirm: `Confirm`,\n    optionsText: {\n      [OptionType.leave]: `Leave as is`,\n      [OptionType.filter]: `Filter`,\n      [OptionType.change]: `Change all`,\n    },\n    optionsDescription: {\n      [OptionType.leave]: `This option leaves the data as is. On numeric scales, null values will be cast to 0, in the table they will be displayed as null, for categorical data a separate category will be created.`,\n      [OptionType.filter]: `This option filters out all data with null values. These data will not be considered further in the application.`,\n      [OptionType.change]: `This option replaces all null values with the value entered below.`,\n    },\n    changeTo: `Change to`,\n    attribute: `Attribute:`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, ChangeEvent } from 'react'\nimport { Add, AutoGraph } from '@mui/icons-material'\nimport { Box, Button } from '@mui/material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadError, DataLoadState } from '../../../../../constants/data/dataLoadState'\nimport {\n  SAMPLE_DATASET_OPTIONS,\n  SampleDataset,\n  sampleDatasetIcons,\n  sampleDatasets,\n} from '../../../../../constants/data/sampleDataset'\n\nimport { FILE_READER_TEXT } from '../../../../../text/SiteText'\n\nimport {\n  fileReaderStyle,\n  getFileReaderBoxStyle,\n} from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\nimport { ClickableButton } from '../buttons/ClickableButton'\nimport { getAttributeKeys } from '../../../../../helpers/data/data'\nimport { NullDialog } from './NullDialog'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: Array<DataType>): Array<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nconst FILE_INPUT_ID = `FILE_INPUT`\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isNullDialogOpen, setIsNullDialogOpen] = useState(false)\n  const [nullContainingAttributes, setNullContainingAttributes] = useState<Array<keyof SelectableDataType>>([])\n  const [rawDataset, setRawDataset] = useState<Array<SelectableDataType>>([])\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const handleListItemClick = useCallback(\n    (optionKey: SampleDataset) => {\n      setIsSampleDataDialogOpen(false)\n      const dataset = sampleDatasets[optionKey]\n      setDataset(addSelected(dataset))\n      setDataLoadState(DataLoadState.Loaded)\n    },\n    [setDataLoadState, setDataset],\n  )\n\n  const closeDialog = useCallback(() => {\n    setIsNullDialogOpen(false)\n    setRawDataset([])\n    setNullContainingAttributes([])\n  }, [])\n\n  const handleFileChange = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files?.length) {\n        setDataLoadState(DataLoadState.Loading)\n        const selectedFile = e.target.files[0]\n        const fileType = selectedFile.type\n        let dataset: DataType[] = []\n\n        switch (fileType) {\n          case AcceptableFileTypes.json: {\n            const text = await selectedFile.text()\n            dataset = JSON.parse(text)\n            break\n          }\n          case AcceptableFileTypes.csv: {\n            const textCsv = await selectedFile.text()\n            dataset = CsvParse(textCsv)\n            break\n          }\n          default: {\n            setDataLoadState(DataLoadState.NoData)\n            setAlertDialogText(FILE_READER_TEXT.alertDialog[DataLoadError.unsupportedFile])\n            setDataset(null)\n            setIsAlertDialogOpen(true)\n            return\n          }\n        }\n        if (!isArrayOfDataType(dataset)) {\n          setDataLoadState(DataLoadState.NoData)\n          setAlertDialogText(FILE_READER_TEXT.alertDialog[DataLoadError.unsupportedFileFormat])\n          setDataset(null)\n          setIsAlertDialogOpen(true)\n          return\n        }\n        const selectableDataset = addSelected(dataset)\n        const nullContainingAttributes = getAttributeKeys(selectableDataset).filter((att) =>\n          dataset.some((data) => data[att] === null),\n        )\n        if (nullContainingAttributes.length) {\n          setNullContainingAttributes(nullContainingAttributes)\n          setRawDataset(selectableDataset)\n          setIsNullDialogOpen(true)\n          const fileEl = document.getElementById(FILE_INPUT_ID) as unknown as { value: null }\n          fileEl.value = null\n          return\n        }\n        setDataset(selectableDataset)\n        setDataLoadState(DataLoadState.Loaded)\n      }\n    },\n    [setDataLoadState, setDataset],\n  )\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={FILE_READER_TEXT.sampleDataDialogTitle}\n        options={SAMPLE_DATASET_OPTIONS.map((key) => ({\n          key,\n          label: FILE_READER_TEXT.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={FILE_READER_TEXT.alertDialog.confirm}\n        alert={true}\n      />\n      <NullDialog\n        isOpen={isNullDialogOpen}\n        onClose={() => {\n          setDataLoadState(DataLoadState.NoData)\n          closeDialog()\n        }}\n        nullContainingAttributes={nullContainingAttributes}\n        dataset={rawDataset}\n        setDataset={(dataset) => {\n          setDataset(dataset)\n          setDataLoadState(DataLoadState.Loaded)\n          closeDialog()\n        }}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={FILE_READER_TEXT.sampleDataLabel}\n        />\n        <Button sx={fileReaderStyle.button} variant=\"contained\" component=\"label\">\n          <Add />\n          {FILE_READER_TEXT.button}\n          <input type=\"file\" hidden id={FILE_INPUT_ID} onChange={handleFileChange} />\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  middle: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n  right: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonHoverBackground,\n      },\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant=\"contained\" onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS, HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n\n  padding: isHighlighted ? px(8, 2) : 0,\n  borderRadius: px(10),\n})\n\nexport const fileReaderStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 6, 0, 2),\n    bgcolor: BUTTON_COLORS.buttonOnBackground,\n    color: BUTTON_COLORS.fontOn,\n    '&:hover': {\n      bgcolor: BUTTON_COLORS.buttonHoverBackground,\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS, ERROR_COLORS, BUTTON_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  description: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n  innerContent: {\n    padding: px(0, 40, 10),\n  },\n  contentBox: {\n    height: px(120),\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  text: {\n    color: SITE_COLORS.font,\n  },\n  toggleDialogGroup: {\n    width: `100%`,\n    marginBottom: px(5),\n    display: `flex`,\n  },\n  toggleDialogButton: {\n    flexGrow: 1,\n    padding: px(6),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonDialogBackground,\n      color: BUTTON_COLORS.buttonDialogFont,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonDialogHoverBackground,\n      },\n    },\n  },\n  button: {\n    margin: px(0, 20, 20),\n  },\n  attHeader: {\n    fontSize: px(16),\n    fontWeight: `bold`,\n    paddingBottom: px(4),\n    color: SITE_COLORS.font,\n  },\n  numInput: {\n    minWidth: `95%`,\n    alignSelf: `center`,\n    '&.MuiFormControl-root': {\n      margin: px(20, 6, 6),\n    },\n    '& input': {\n      padding: px(8, 10, 6),\n    },\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.description}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  TextField,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material'\n\nimport { SelectableDataType } from '../../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../../helpers/data/formatText'\n\nimport { OptionType } from '../../../../../constants/data/data'\n\nimport { FILE_READER_TEXT } from '../../../../../text/SiteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface NullDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  nullContainingAttributes: Array<keyof SelectableDataType>\n  dataset: Array<SelectableDataType>\n  setDataset: (dataset: Array<SelectableDataType>) => void\n}\n\nexport const NullDialog: VoidFunctionComponent<NullDialogProps> = ({\n  isOpen,\n  onClose,\n  nullContainingAttributes,\n  dataset,\n  setDataset,\n}) => {\n  const [optionsChosen, setOptionsChosen] = useState<Array<OptionType>>([])\n  const [replaceValue, setReplaceValue] = useState<Array<number>>([])\n\n  useEffect(() => {\n    setOptionsChosen(Array(nullContainingAttributes.length).fill(OptionType.leave))\n    setReplaceValue(Array(nullContainingAttributes.length).fill(0))\n  }, [nullContainingAttributes])\n\n  const handleNullDialogConfirm = useCallback(() => {\n    let datasetFixed: SelectableDataType[] = []\n    optionsChosen.forEach((option, idx) => {\n      switch (option) {\n        case OptionType.filter:\n          datasetFixed = dataset.filter((data) => data[nullContainingAttributes[idx]] !== null)\n          break\n        case OptionType.change:\n          datasetFixed = dataset.map((data) => {\n            const att = nullContainingAttributes[idx]\n            return {\n              ...data,\n              [att]: data[att] === null ? Number(replaceValue[idx]) : data[att],\n            }\n          })\n          break\n        case OptionType.leave:\n          datasetFixed = dataset\n          break\n      }\n    })\n    setDataset(datasetFixed)\n  }, [dataset, nullContainingAttributes, optionsChosen, replaceValue, setDataset])\n\n  const handleToggleChange = (val: OptionType, idx: number) => {\n    setOptionsChosen((prev) => {\n      const newOpts = [...prev]\n      newOpts[idx] = val\n      return newOpts\n    })\n  }\n  const handleNumberChange = useCallback((val: number, idx: number) => {\n    setReplaceValue((prev) => {\n      const newVals = [...prev]\n      newVals[idx] = val\n      return newVals\n    })\n  }, [])\n\n  const options = Object.values(OptionType)\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{FILE_READER_TEXT.nullDialog.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        <DialogContentText sx={dialogStyle.description}>{FILE_READER_TEXT.nullDialog.description}</DialogContentText>\n        {nullContainingAttributes.map((attribute, idx) => {\n          const option = optionsChosen[idx]\n          return (\n            <Box key={attribute} sx={dialogStyle.innerContent}>\n              <Typography sx={dialogStyle.attHeader}>{`${\n                FILE_READER_TEXT.nullDialog.attribute\n              } ${otherCasesToWhitespaces(attribute)}`}</Typography>\n              <ToggleButtonGroup\n                sx={dialogStyle.toggleDialogGroup}\n                value={option}\n                exclusive\n                onChange={(e, value) => handleToggleChange(value, idx)}\n              >\n                {options.map((opt, idx) => (\n                  <ToggleButton sx={dialogStyle.toggleDialogButton} value={opt} key={idx}>\n                    {FILE_READER_TEXT.nullDialog.optionsText[opt]}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n              <Box sx={dialogStyle.contentBox}>\n                <Typography sx={dialogStyle.text}>{FILE_READER_TEXT.nullDialog.optionsDescription[option]}</Typography>\n                {option === OptionType.change && (\n                  <TextField\n                    label={FILE_READER_TEXT.nullDialog.changeTo}\n                    type=\"number\"\n                    sx={dialogStyle.numInput}\n                    defaultValue={replaceValue[idx]}\n                    onChange={(e) => handleNumberChange(Number(e.target.value), idx)}\n                  />\n                )}\n              </Box>\n            </Box>\n          )\n        })}\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"contained\" onClick={handleNullDialogConfirm} sx={dialogStyle.button} autoFocus>\n          {FILE_READER_TEXT.nullDialog.confirm}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T>(a: T, b: T, orderBy: keyof T) =>\n  b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n\nexport enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n\nexport const getComparator = (sort: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sort === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction, useCallback } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\nconst ON_VALUE = `on`\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = useCallback(\n    (event: MouseEvent<HTMLElement>, checked: string[]) => {\n      if (checked.length && checked[0] === ON_VALUE) {\n        return setValue(true)\n      }\n      return setValue(false)\n    },\n    [setValue],\n  )\n  return (\n    <ToggleButtonGroup value={value ? [ON_VALUE] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={ON_VALUE} aria-label={label} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    color: BUTTON_COLORS.buttonOnBackground,\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Settings } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\n\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <IconButton size=\"small\" disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Settings />\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const getColorInputStyle = (disabled?: boolean): SxProps => ({\n  display: `flex`,\n  '& .MuiSvgIcon-root': {\n    color: disabled ? BUTTON_COLORS.fontDisabled : BUTTON_COLORS.buttonOnBackground,\n  },\n})\n\nexport const getColorInputBoxStyle = (color: string, disabled?: boolean): SxProps => ({\n  bgcolor: disabled ? BUTTON_COLORS.fontDisabled : color,\n  minWidth: px(25),\n  minHeight: px(25),\n  borderRadius: px(5),\n  ml: px(2),\n  border: border(1, disabled ? BUTTON_COLORS.buttonDisableBackground : BUTTON_COLORS.colorBorder),\n})\n\nexport const colorInputStyle: Record<string, SxProps> = {\n  inputBox: {\n    position: `relative`,\n    '& input': {\n      width: `100%`,\n      opacity: 0,\n      position: `absolute`,\n      left: 0,\n    },\n  },\n}\n","import { useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Box, Tooltip } from '@mui/material'\n\nimport { useDebounce } from '../../../../../helpers/react/useDebounce'\n\nimport { COLOR_DEBOUNCE } from '../../../../../constants/debounce/debounce'\n\nimport {\n  colorInputStyle,\n  getColorInputBoxStyle,\n  getColorInputStyle,\n} from '../../../../../components-style/content/top-toolbar/items/buttons/colorButtonStyle'\n\nexport interface ColorButtonProps {\n  color: string\n  handleSetColor: (color: string) => void\n  tooltip: string\n  disabled?: boolean\n  icon: JSX.Element\n}\n\nexport const ColorButton: VoidFunctionComponent<ColorButtonProps> = ({\n  color,\n  handleSetColor,\n  tooltip,\n  disabled,\n  icon,\n}) => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n  useEffect(() => {\n    handleSetColor(debouncedColor)\n  }, [debouncedColor, handleSetColor])\n\n  return (\n    <Tooltip title={tooltip} disableHoverListener={disabled}>\n      <Box sx={colorInputStyle.inputBox}>\n        <input disabled={disabled} type=\"color\" value={color} onChange={(e) => setCurrentColor(e.target.value)} />\n        <Box sx={getColorInputStyle(disabled)}>\n          {icon}\n          <Box sx={getColorInputBoxStyle(color, disabled)} />\n        </Box>\n      </Box>\n    </Tooltip>\n  )\n}\n","export const TEXT_INPUT_DEBOUNCE = 400\n\nexport const BRUSH_DEBOUNCE = 10\n\nexport const COLOR_DEBOUNCE = 60\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { AddCircle, AutoFixOff, Brush, SkipNext } from '@mui/icons-material'\nimport { Info } from '@mui/icons-material'\n\nimport { Box } from '@mui/material'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\nimport { ColorButton } from './items/buttons/ColorButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n\n  brushColor: string\n  setBrushColor: Dispatch<SetStateAction<string>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n  brushColor,\n  setBrushColor,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ToggleButtonSingle\n        icon={<Info />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<AutoFixOff />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n      />\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelAddView}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.middle}>\n      <ColorButton\n        color={brushColor}\n        handleSetColor={(color) => setBrushColor(color)}\n        icon={<Brush />}\n        disabled={isToolsDisabled}\n        tooltip={TOP_TOOLBAR_TEXT.labelBrushColor}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n    strokeWidth: `stroke-width`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    strokeWidth: `stroke-width`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\n\nexport const MENU_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER_TEXT = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.DataTable]: `Data Table`,\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { TOOLTIP } from '../../../constants/views/tooltip'\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const dataDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n}\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseAction {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { schemeCategory10 } from 'd3'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { SortType } from '../../helpers/data/comparator'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const dataDrawerMenuStyle: Record<string, SxProps> = {\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<Opt extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: Opt) => Partial<Opt>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <Opt extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<Opt>): JSX.Element => {\n  const handleCheckboxChange = useCallback(\n    (eventChecked: boolean, key: keyof SelectableDataType) => {\n      const newChecked = { ...checked, [key]: eventChecked }\n      setChecked(newChecked)\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        const newSettings = getNewSettings(newChecked, prevSettings)\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            ...newSettings,\n          },\n        }\n      })\n    },\n    [checked, getNewSettings, handleChangeSettings, setChecked, setSettings, viewType],\n  )\n  const handleMove = useCallback(\n    (newAttributesKeys: Array<keyof SelectableDataType>) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setAttributesKeys(newAttributesKeys)\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n          },\n        }\n      })\n    },\n    [checked, handleChangeSettings, setAttributesKeys, setSettings, viewType],\n  )\n\n  const onUpButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  const onDownButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = useCallback(\n    (categoryAttribute: keyof SelectableDataType | -1) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n          },\n        }\n      })\n    },\n    [setSettings, viewType],\n  )\n\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = useCallback(\n    (newValue: keyof SelectableDataType) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [handleChangeSettings, setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const menuTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n    padding: px(6, 5, 3),\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  handleChangeSettings?: () => void\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({\n  margins,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentMargins, setCurrentMargins] = useState<MarginArray>(margins)\n  const debouncedMargins = useDebounce(currentMargins, TEXT_INPUT_DEBOUNCE)\n\n  const handleMarginChange = useCallback((newMargin: number, idx: number) => {\n    setCurrentMargins((oldMargins) => {\n      const newMargins: MarginArray = [...oldMargins]\n      newMargins[idx] = newMargin\n      return newMargins\n    })\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: debouncedMargins,\n        },\n      }\n    })\n  }, [debouncedMargins, handleChangeSettings, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type=\"number\"\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type=\"number\"\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type=\"number\"\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type=\"number\"\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nexport interface NumberInputProps<Opt> {\n  viewType: ViewType\n  label: string\n  valueKey: keyof Opt\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <Opt,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<Opt>): JSX.Element => {\n  const [currentValue, setCurrentValue] = useState(value)\n  const debouncedValue = useDebounce(currentValue, COLOR_DEBOUNCE)\n\n  const handleChangeValue = useCallback((newValue: number) => {\n    setCurrentValue(newValue)\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: debouncedValue,\n        },\n      }\n    })\n  }, [debouncedValue, setSettings, valueKey, viewType, handleChangeValue, handleChangeSettings])\n\n  const minVal = min ? { min } : { min: 0 }\n  const maxVal = max ? { max } : {}\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type=\"number\"\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={{ inputMode: `numeric`, ...minVal, ...maxVal }}\n        onChange={(e) => handleChangeValue(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacities: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({\n  header,\n  opacities,\n  setSettings,\n  viewType,\n}) => {\n  const [currentOpacities, setCurrentOpacities] = useState<Opacity>(opacities)\n  const debouncedOpacities = useDebounce(currentOpacities, TEXT_INPUT_DEBOUNCE)\n\n  const handleOpacityChange = useCallback((newOpacity: number, idx: number) => {\n    setCurrentOpacities((oldOpacities) => {\n      const newOpacities: Opacity = [...oldOpacities]\n      newOpacities[idx] = newOpacity\n      return newOpacities\n    })\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: debouncedOpacities,\n        },\n      }\n    })\n  }, [debouncedOpacities, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type=\"number\"\n        defaultValue={opacities[0]}\n        sx={numberInputStyles.textField}\n        inputProps={{ min: 0, max: 100 }}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type=\"number\"\n          defaultValue={opacities[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type=\"number\"\n          defaultValue={opacities[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const getPalettePickerColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useEffect, useCallback } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport { PALETTE_PICKER_TEXT } from '../../../../text/views-and-menus/common'\n\nimport {\n  getPalettePickerColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({\n  colors,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentColors, setCurrentColors] = useState<ColorArray>(colors)\n  const debouncedColors = useDebounce(currentColors, COLOR_DEBOUNCE)\n\n  const handleSetColor = useCallback((newColor: string, idx: number) => {\n    if (newColor) {\n      setCurrentColors((oldColors) => {\n        const newColors: ColorArray = [...oldColors]\n        newColors[idx] = newColor\n        return newColors\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          colorCategory: debouncedColors,\n        },\n      }\n    })\n  }, [debouncedColors, setSettings, viewType, handleChangeSettings])\n\n  const getInput = useCallback(\n    (idx: number) => (\n      <Box sx={palettePickerStyle.col} key={idx}>\n        <label>{PALETTE_PICKER_TEXT.categoriesLabel[idx]}</label>\n        <Box sx={getPalettePickerColorInputStyle(colors, idx)}>\n          <input type=\"color\" value={colors[idx]} onChange={(e) => handleSetColor(e.target.value, idx)} />\n        </Box>\n      </Box>\n    ),\n    [colors, handleSetColor],\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER_TEXT.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = useCallback(\n    (newValue: T) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <Box>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { SortType } from '../../../../helpers/data/comparator'\n\nexport const GlyphsMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType, prevSettings: GlyphsSettings): Partial<GlyphsSettings> => {\n      const displayAttributes = getCurrentDisplayAttributes(newChecked)\n      const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n      const sortAttribute = newChecked[prevSettings.sortAttribute]\n        ? prevSettings.sortAttribute\n        : newSortableAttributes?.[0]\n      return { displayAttributes, sortAttribute }\n    },\n    [getCurrentDisplayAttributes, quantitativeAttributesKeys],\n  )\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacities={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SortType } from '../../../helpers/data/comparator'\n\nimport { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [10, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ParallelCoordinates),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacities={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `Scatter plot cannot be displayed, window is too small. Change the size, number of attributes displayed or margin to display scatter plot matrix`,\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotMatrix),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <Typography sx={menuTextStyle.text}>{SCATTER_PLOT_MATRIX_MENU_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacities={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 10, 20],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  glyphSizeKey,\n  ScatterPlotGlyphsSettings,\n  xAttributeKey,\n  yAttributeKey,\n} from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { SCATTER_PLOT_GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createScatterPlotGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<ScatterPlotGlyphsSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotGlyphs),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_MENU_TEXT.opacity}\n                  opacities={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { DEFAULT_BRUSH_BG_COLOR_TABLE, DEFAULT_BRUSH_FONT_COLOR_TABLE } from './common'\n\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\nexport const DATA_TABLE_DEFAULT: Pick<\n  DataTableSettings,\n  `rowHeight` | `selectedBackgroundColor` | `selectedFontColor`\n> = {\n  rowHeight: 45,\n  selectedBackgroundColor: DEFAULT_BRUSH_BG_COLOR_TABLE,\n  selectedFontColor: DEFAULT_BRUSH_FONT_COLOR_TABLE,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { SortType } from '../../helpers/data/comparator'\nimport { MENU_BASE_TEXT, VIEW_NAMES } from './common'\n\nexport const DATA_TABLE_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes him not valid. Please choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  selectedBackgroundColor: `Selected background color`,\n  selectedFontColor: `Selected font color`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascendant`,\n  [SortType.desc]: `Sort descendant`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from the menu.`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const getColorPickerInputStyle = (color: string): SxProps => ({\n  bgcolor: color,\n  width: px(25),\n  borderRadius: px(5),\n  '& input': {\n    width: `100%`,\n    height: px(25),\n    opacity: 0,\n  },\n})\n\nexport const colorPickerStyle: Record<string, SxProps> = {\n  picker: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `center`,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport {\n  colorPickerStyle,\n  getColorPickerInputStyle,\n} from '../../../../components-style/content/data-drawer/items/colorPickerStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface ColorPickerProps<Opt> {\n  viewType: ViewType\n  color: string\n  settingsKey: keyof Opt\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const ColorPicker = <Opt,>({\n  viewType,\n  color,\n  settingsKey,\n  setSettings,\n  label,\n}: ColorPickerProps<Opt>): JSX.Element => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n\n  const handleChangeColor = useCallback((newColor: string) => {\n    if (newColor) {\n      setCurrentColor(newColor)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: debouncedColor,\n        },\n      }\n    })\n  }, [debouncedColor, setSettings, settingsKey, viewType])\n  return (\n    <Box sx={colorPickerStyle.picker}>\n      <Typography sx={menuTextStyle.text}>{label}</Typography>\n      <Box sx={getColorPickerInputStyle(color)}>\n        <input type=\"color\" value={color} onChange={(e) => handleChangeColor(e.target.value)} />\n      </Box>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  DataTableSettings,\n  rowHeightKey,\n  selectedBackgroundColorKey,\n  selectedFontColorKey,\n} from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_MENU_TEXT } from '../../../../text/views-and-menus/dataTable'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const DataTableMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => attributesKeys.filter((key) => currChecked[key]),\n    [attributesKeys],\n  )\n\n  const createDataTableMenu = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{DATA_TABLE_MENU_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  viewType={viewType}\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.rowHeight}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedBackgroundColor}\n                  settingsKey={selectedBackgroundColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedBackgroundColor}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedFontColor}\n                  settingsKey={selectedFontColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedFontColor}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{DATA_TABLE_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { VisualizationSettings } from './VisualizationSettings'\n\nexport const rowHeightKey = `rowHeight`\nexport const selectedBackgroundColorKey = `selectedBackgroundColor`\nexport const selectedFontColorKey = `selectedFontColor`\n\n/**\n * Settings for Data Table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n\n  /**\n   * Selected background color\n   */\n  [selectedBackgroundColorKey]: string\n  /**\n   * Selected font color\n   */\n  [selectedFontColorKey]: string\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useMemo } from 'react'\nimport { Box, Divider, Drawer, IconButton } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { dataDrawerStyle } from '../../../components-style/content/data-drawer/dataDrawerStyle'\n\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot-matrix/ScatterPlotMatrixMenu'\nimport { ScatterPlotGlyphsMenu } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsMenu'\nimport { DataTableMenu } from '../views/data-table/DataTableMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: VoidFunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const menus = useMemo(\n    () =>\n      views.map((view, idx) => {\n        switch (view) {\n          case ViewType.Glyphs:\n            return (\n              <GlyphsMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelCoordinates:\n            return (\n              <ParallelCoordinatesMenu\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotMatrix:\n            return (\n              <ScatterPlotMatrixMenu\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotGlyphs:\n            return (\n              <ScatterPlotGlyphsMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.DataTable:\n            return (\n              <DataTableMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          default:\n            return null\n        }\n      }),\n    [cleanSelectedIfViewWasBrushing, dataset, setSettings, settings, views],\n  )\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} sx={dataDrawerStyle.drawer}>\n      <Box sx={dataDrawerStyle.header}>\n        <IconButton onClick={close}>\n          <ChevronRight sx={dataDrawerStyle.chevron} />\n        </IconButton>\n      </Box>\n      <Divider />\n      <Box sx={dataDrawerStyle.menu}>{menus.map((menu) => menu)}</Box>\n    </Drawer>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { HEADER_HEIGHT } from '../../../constants/views/common'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  text: {\n    padding: px(0, 8),\n  },\n  header: {\n    height: HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","import { ViewType } from '../views/ViewTypes'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n}\n\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, `http://www.w3.org/2000/svg`)\n  const svgData = svgEl.outerHTML\n  const preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\n  const svgBlob = new Blob([preface, svgData], { type: `image/svg+xml;charset=utf-8` })\n  const svgUrl = URL.createObjectURL(svgBlob)\n  const downloadLink = document.createElement(`a`)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\ntype StyleNode = { sheet: CSSStyleSheet }\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    // eslint-disable-next-line no-console\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n  const newStyleNodes = ([...document.querySelectorAll(`[data-emotion]`)] as unknown as Array<StyleNode>)\n    .flatMap(({ sheet }) => [...sheet.cssRules].map((rules) => rules.cssText))\n    .filter((sheet) => sheet.includes(`.${containerClass}`))\n    .map((sheet) => sheet.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n","import { SxProps } from '@mui/system'\nimport { BUTTON_COLORS } from '../../../styles/colors'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    margin: 0,\n    padding: 0,\n    minWidth: 0,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n  buttonActive: {\n    color: BUTTON_COLORS.buttonInlinedFontOn,\n    bgcolor: BUTTON_COLORS.buttonInlinedBgOn,\n    borderRadius: px(5),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant=\"contained\" autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant=\"outlined\">\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useCallback, useState, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { saveSvg } from '../../../helpers/d3/saveSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { inlineButtonStyles } from '../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from './dialogs/ConfirmationDialog'\n\nexport interface DataSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const DataSaveButton: VoidFunctionComponent<DataSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const openDialog = useCallback(() => setIsDialogOpen(true), [])\n  const closeDialog = useCallback(() => setIsDialogOpen(false), [])\n\n  const onConfirm = useCallback(() => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }, [viewType])\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={TOP_TOOLBAR_TEXT.saveText.header}\n        description={TOP_TOOLBAR_TEXT.saveText.description}\n        onConfirm={onConfirm}\n        onClose={closeDialog}\n        confirmText={TOP_TOOLBAR_TEXT.saveText.confirm}\n        cancelText={TOP_TOOLBAR_TEXT.saveText.cancel}\n      />\n      <Button\n        variant=\"text\"\n        onClick={openDialog}\n        sx={inlineButtonStyles.button}\n        aria-label={TOP_TOOLBAR_TEXT.saveText.save}\n      >\n        <Tooltip title={TOP_TOOLBAR_TEXT.saveText.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { BrushExtent } from '../../types/d3-types'\n\nexport const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: BrushExtent, cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\nimport { DataEach } from '../../types/d3-types'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(`1`)\n\nconst TEXT_Y_SHIFTS = { odd: 9, even: 19 }\nexport const TOGGLE_TEXT_Y_SHIFT = Math.max(...Object.values(TEXT_Y_SHIFTS))\n\nexport const getTextTogglingYShift: DataEach<keyof SelectableDataType, SVGTextElement, number> = (_, idx) =>\n  idx % 2 === 0 ? -TEXT_Y_SHIFTS.odd : -TEXT_Y_SHIFTS.even // index 0 is first, so odd\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","/**\n * tooltip and it's actions\n */\nimport { select } from 'd3'\n\nimport { OnMouseEvent } from '../../types/d3-types'\nimport { SelectableDataType } from '../../types/data/data'\n\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../constants/views/tooltip'\nimport { SVG } from '../../constants/svg'\nimport { HTML } from '../../constants/html'\n\nimport { getAttributeValuesWithLabel, getClass, px } from './stringGetters'\n\nexport const onMouseOverTooltip: OnMouseEvent<SelectableDataType> = ({ clientX, clientY }, data) => {\n  const tooltip = select(getClass(TOOLTIP_CLASS))\n  tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n  tooltip\n    .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n    .style(SVG.style.left, px(clientX))\n    .style(SVG.style.top, px(clientY))\n}\n\nexport const onMouseOutTooltip: OnMouseEvent<SelectableDataType> = () => {\n  select(getClass(TOOLTIP_CLASS)).transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushExtent, DataEachG, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getCategoryColor, getTextTogglingYShift, TOGGLE_TEXT_Y_SHIFT } from '../../../../helpers/d3/attributeGetters'\nimport { getAttributeFormatted, getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  refreshViews,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TOGGLE_TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      dataset.forEach((data) => {\n        let nullsCount = 0 // count selections, if there is none in every line, false\n        data.selected =\n          displayAttributes.every((dimension, idx) => {\n            const selectedRange = selections[dimension]\n            if (selectedRange === null) {\n              nullsCount++\n              return true // nothing in dimension selected, do not block\n            }\n            const valueOnAxis = yScales[idx](Number(data[dimension]))\n            return isInRange(valueOnAxis, selectedRange)\n          }) && nullsCount !== displayAttributes.length\n      })\n      refreshViews()\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, keyof SelectableDataType>> = {\n      [BrushAction.start]: () => setComponentBrushing(ViewType.ParallelCoordinates),\n      [BrushAction.move]: (brushEvent, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      },\n      [BrushAction.end]: (brushEvent, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n      [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n    ]\n\n    const brush = brushY<keyof SelectableDataType>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath: DataEachP<SelectableDataType, string | null> = (data) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseAction.mouseOver, onMouseOverTooltip)\n      .on(MouseAction.mouseOut, onMouseOutTooltip)\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    const getAxisTransform: DataEachG<keyof SelectableDataType, string> = (attribute) =>\n      getTranslate([xScale(String(attribute))!, 0])\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, getTextTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      Object.keys(selections).forEach((selLKey) => (selections[selLKey] = null))\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{PARALLEL_COORDINATES_TEXT.unavailable}</Box>\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\nexport const getScatterPlotMatrixStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    fontSize: PLOT_FONT.fontSize,\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { BrushExtent, DataEachC, DataEachG, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\ntype CellBrushing = { cell: MatrixPosition | null }\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  // selected coloring\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, DUPLICATES_CLASS)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachC<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachC<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseAction.mouseOver, onMouseOverTooltip)\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: CellBrushing = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) => (data.selected = isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, MatrixItem>> = {\n      [BrushAction.start]: (_, { rowIdx, colIdx, rowKey, colKey }) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      },\n      [BrushAction.move]: ({ selection }, matrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }, matrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [0, 0],\n      [rect.width, rect.height],\n    ]\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    refreshViews,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.tooSmall}</Box> // rect not big enough\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotMatrixStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { DataEachP, OnMouseEvent } from '../../../../types/d3-types'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  refreshViews,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform: DataEachP<SelectableDataType, string> = (data) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const onMouseClick: OnMouseEvent<SelectableDataType> = (_, changedData) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.Glyphs)\n      refreshViews()\n    }\n\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseAction.mouseOver, onMouseOverTooltip)\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n          .on(MouseAction.click, onMouseClick)\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    // selected coloring, needed again\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive, brushColor)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{GLYPHS_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotAxis`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\nexport const getScatterPlotGlyphsStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisBottom, axisLeft, brush, lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\n\nimport { getClass, getEverything, getTranslate } from '../../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { BrushExtent, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\nimport { TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  // selected coloring\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, TOOLTIP_CLASS)\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains([...displayAttributes, xAttribute, yAttribute], dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(extentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(extentInDomains[attribute]),\n    )\n\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseAction.mouseOver, onMouseOverTooltip)\n            .on(MouseAction.mouseOut, onMouseOutTooltip)\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n    axisX.call(axisBottom(xScale))\n    svg\n      .selectAll(AXIS_Y)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .call(axisLeft(yScale))\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) =>\n            (data.selected = isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType>> = {\n      [BrushAction.start]: () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      },\n      [BrushAction.move]: ({ selection }) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: BrushExtent = [\n      [-glyphSize / 2, -glyphSize / 2],\n      [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n    ]\n\n    const makeBrush = brush()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_GLYPHS_TEXT.unavailable}</Box>\n}\n","interface FormType {\n  checkbox: `checkbox`\n}\n\nexport const FORM: FormType = {\n  checkbox: `checkbox`,\n}\n","import { SxProps } from '@mui/system'\nimport { TABLE_COLORS } from '../../../../styles/colors'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\n\nexport const getDataTableRowStyle = (\n  rowHeight: number,\n  selected: boolean,\n  selectedBackgroundColor: string,\n  selectedFontColor: string,\n): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? important(selectedBackgroundColor) : ``,\n  '& .MuiTableCell-root': {\n    color: selected ? important(selectedFontColor) : ``,\n  },\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    bgcolor: TABLE_COLORS.headerBackground,\n  },\n  tableHeadRow: {\n    height: 30,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  filterRow: {\n    bgcolor: TABLE_COLORS.filterBackground,\n  },\n  filterCell: {\n    padding: px(5),\n  },\n  filter: {\n    width: `90%`,\n    bgcolor: TABLE_COLORS.rowsBackground,\n    borderRadius: px(5),\n    '&.MuiFormControl-root': {\n      margin: 0,\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n  filterIcon: {\n    paddingLeft: px(12),\n    color: TABLE_COLORS.filterIconFont,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n}\n","import { useCallback, useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TextField,\n  Tooltip,\n} from '@mui/material'\nimport { FilterListOutlined } from '@mui/icons-material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable, otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator, SortType } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { FORM } from '../../../../constants/form'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-menus/dataTable'\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {\n  showFilter: boolean\n}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  refreshViews,\n  setComponentBrushing,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n  showFilter,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const [filterValues, setFilterValues] = useState<{ [p: keyof SelectableDataType]: string }>(\n    Object.fromEntries(displayAttributes.map((key) => [key, ``])),\n  )\n\n  const filteredDataset = useMemo<SelectableDataType[]>(\n    () =>\n      [...dataset].filter((data) =>\n        displayAttributes.every((attribute) => String(data[attribute]).includes(filterValues[attribute])),\n      ),\n    [dataset, displayAttributes, filterValues],\n  )\n\n  const sortedDataset = useMemo(\n    () => filteredDataset.sort(getComparator(order, orderBy)),\n    [filteredDataset, order, orderBy],\n  )\n\n  const handleSelectClick = useCallback(\n    (changedData: SelectableDataType) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing],\n  )\n\n  const handleSelectAllClick = useCallback(\n    (checked: boolean) => {\n      sortedDataset.forEach((data) => (data.selected = checked))\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing, sortedDataset],\n  )\n\n  const handleRequestSort = useCallback(\n    (property: keyof SelectableDataType) => {\n      const isAsc = orderBy === property && order === SortType.asc\n      setOrder(isAsc ? SortType.desc : SortType.asc)\n      setOrderBy(property)\n    },\n    [order, orderBy],\n  )\n\n  const handleFilterValueChange = useCallback((newValue: string, key: keyof SelectableDataType) => {\n    setFilterValues((prev) => ({\n      ...prev,\n      [key]: newValue,\n    }))\n  }, [])\n\n  const createSortHandler = useCallback(\n    (property: keyof SelectableDataType) => () => {\n      handleRequestSort(property)\n    },\n    [handleRequestSort],\n  )\n\n  const sortTooltipTitle = useCallback(\n    (headCellId: keyof SelectableDataType) =>\n      orderBy === headCellId\n        ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n        : DATA_TABLE_TEXT[SortType.asc],\n    [order, orderBy],\n  )\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHead sx={dataTableStyle.tableHead}>\n            <TableRow sx={dataTableStyle.tableHeadRow}>\n              <TableCell padding={FORM.checkbox}>\n                <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                  <Checkbox\n                    sx={dataTableStyle.checkAll}\n                    indeterminate={sortedDataset.some((data) => data.selected)}\n                    checked={sortedDataset.every((data) => data.selected)}\n                    onChange={(event) => handleSelectAllClick(event.target.checked)}\n                  />\n                </Tooltip>\n              </TableCell>\n              {displayAttributes.map((attribute) => {\n                const orderedByActive = orderBy === attribute\n                return (\n                  <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                    <Tooltip title={sortTooltipTitle(attribute)}>\n                      <TableSortLabel\n                        active={orderedByActive}\n                        direction={orderedByActive ? order : SortType.asc}\n                        onClick={createSortHandler(attribute)}\n                      >\n                        {otherCasesToWhitespaces(attribute)}\n                      </TableSortLabel>\n                    </Tooltip>\n                  </TableCell>\n                )\n              })}\n            </TableRow>\n            {showFilter && (\n              <TableRow sx={dataTableStyle.filterRow}>\n                <TableCell sx={dataTableStyle.filterIcon} padding={FORM.checkbox}>\n                  <FilterListOutlined />\n                </TableCell>\n                {displayAttributes.map((attribute, idx) => (\n                  <TableCell sx={dataTableStyle.filterCell} key={`filter-${attribute}`}>\n                    <TextField\n                      defaultValue={filterValues[idx]}\n                      sx={dataTableStyle.filter}\n                      onChange={(e) => handleFilterValueChange(e.target.value, attribute)}\n                    />\n                  </TableCell>\n                ))}\n              </TableRow>\n            )}\n          </TableHead>\n          <TableBody sx={dataTableStyle.tableBody}>\n            {sortedDataset.map((data, idx) => {\n              const selected = data.selected\n              return (\n                <TableRow\n                  hover\n                  onClick={() => handleSelectClick(data)}\n                  key={idx}\n                  sx={getDataTableRowStyle(rowHeight, selected, selectedBackgroundColor, selectedFontColor)}\n                >\n                  <TableCell padding={FORM.checkbox}>\n                    <Checkbox checked={selected} />\n                  </TableCell>\n                  {displayAttributes.map((attribute) => (\n                    <TableCell key={`${idx}-${attribute}`}>{dataToReadable(data[attribute])}</TableCell>\n                  ))}\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { ParallelCoordinatesSettings } from '../../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../../types/views/settings/DataTableSettings'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { VIEW_BORDER_SIZE } from '../../../constants/views/common'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nimport { Settings, SettingsType } from '../../../types/views/settings/Settings'\nimport { ParallelCoordinates } from './parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from './scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from './glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from './scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from './data-table/DataTable'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  component: ViewType\n  settings: Settings\n  brushColor: string\n  showFilter?: boolean\n}\n\ntype ViewElementFunction = (\n  props: Brushable & VisualizationView,\n  settings: SettingsType,\n  showFilter?: boolean,\n) => JSX.Element\n\nconst options: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.DataTable]: (p, s, f) => <DataTable {...p} {...(s as DataTableSettings)} showFilter={!!f} />,\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({\n  width,\n  height,\n  component,\n  settings,\n  showFilter,\n  ...dataProps\n}) => {\n  const graph = options[component]\n  const settingsCurr = settings[component]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr, showFilter)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { FilterList } from '@mui/icons-material'\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\nimport { TOP_TOOLBAR_TEXT } from '../../../../text/SiteText'\n\nexport interface DataSaveButtonProps {\n  showFilter?: boolean\n  setShowFilter: Dispatch<SetStateAction<boolean | undefined>>\n}\n\nexport const DataFilterButton: VoidFunctionComponent<DataSaveButtonProps> = ({ showFilter, setShowFilter }) => (\n  <>\n    <Button variant=\"text\" onClick={() => setShowFilter(!showFilter)} sx={inlineButtonStyles.button}>\n      <Tooltip title={TOP_TOOLBAR_TEXT.filter}>\n        <FilterList sx={showFilter ? inlineButtonStyles.buttonActive : {}} />\n      </Tooltip>\n    </Button>\n  </>\n)\n","import React, { VoidFunctionComponent, ComponentProps, useState } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, IconButton, Typography } from '@mui/material'\nimport { Close } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { DRAG_HANDLE, HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/views/common'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { DataSaveButton } from '../common/DataSaveButton'\nimport { View } from './View'\nimport { DataFilterButton } from './data-table/DataFilterButton'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isResizeFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isResizeFinished, ...rest }) => {\n  const [showFilter, setShowFilter] = useState<boolean | undefined>(undefined)\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Typography sx={gridItemStyle.text}>{title}</Typography>\n          <Box>\n            {rest.component !== ViewType.DataTable ? (\n              <DataSaveButton viewType={rest.component} />\n            ) : (\n              <DataFilterButton showFilter={showFilter} setShowFilter={setShowFilter} />\n            )}\n            <IconButton onClick={onRemove}>\n              <Close />\n            </IconButton>\n          </Box>\n        </Box>\n        {isResizeFinished && <View width={width} height={height - HEADER_HEIGHT} {...rest} showFilter={showFilter} />}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import React, { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, memo } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../helpers/d3/displayDetails'\n\nimport { isViewType, ViewType } from '../../../constants/views/ViewTypes'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/views/common'\nimport { TOOLTIP_CLASS } from '../../../constants/views/tooltip'\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\nimport { VIEW_NAMES } from '../../../text/views-and-menus/common'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[]>>\n  brushColor: string\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nconst BaseViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  layout,\n  setLayout,\n  ...viewProps\n}) => {\n  const [viewResizing, setViewResizing] = useState<ViewType | null>(null)\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => layout.filter((item) => item.i !== viewType))\n    },\n    [setLayout],\n  )\n\n  displayDetails(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={(_, view) => setViewResizing(view.i as ViewType)}\n        onResizeStop={() => setViewResizing(null)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isResizeFinished={view.i !== viewResizing}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              component={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n\n// do not rerender if props not change\nexport const ViewGrid = memo(BaseViewGrid)\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => <Box sx={emptyDataStyle.site}>{EMPTY_DATA_TEXT.content}</Box>\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const loadingStyle: Record<string, SxProps> = {\n  load: {\n    paddingTop: px(40),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { loadingStyle } from '../../../components-style/content/no-data/loadingStyle'\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={loadingStyle.load}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useCallback, useMemo, useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GridLayoutItem } from '../../../types/views/Grid'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\nimport { useDebounce } from '../../../helpers/react/useDebounce'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { DEFAULT_BRUSH_COLOR, DEFAULT_GRID_LAYOUT } from '../../../constants/views/common'\nimport { BRUSH_DEBOUNCE } from '../../../constants/debounce/debounce'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../views/ViewGrid'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [currentRedrawTime, setRedrawTime] = useState(Date.now())\n\n  const redrawTime = useDebounce(currentRedrawTime, BRUSH_DEBOUNCE) // used for less component re-renders\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[]>(DEFAULT_GRID_LAYOUT)\n  const [brushColor, setBrushColor] = useState<string>(DEFAULT_BRUSH_COLOR)\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = useCallback((data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }, [])\n\n  const refreshViews = useCallback((): void => {\n    setRedrawTime(Date.now()) // redraw component\n  }, [])\n\n  const cleanAllBrushes = useCallback(\n    (deletePrevSelection = true) => {\n      if (dataset && deletePrevSelection) {\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n      }\n      cleanBrushingRef.current.forEach((f) => f())\n    },\n    [cleanBrushingRef, dataset, refreshViews],\n  )\n\n  const clearBrushesOnButton = useCallback(() => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }, [cleanAllBrushes])\n\n  const setComponentBrushing: SetComponentBrushing = useCallback(\n    (newComponent) => {\n      if (componentBrushingRef.current !== newComponent) {\n        cleanAllBrushes(newComponent !== ViewType.DataTable && newComponent !== ViewType.Glyphs)\n      }\n      setCurrentComponentBrushing(newComponent)\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const registerCleanBrushing = useCallback((cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }, [])\n\n  const cleanSelectedIfViewWasBrushing = useCallback(\n    (component: ViewType) => {\n      if (componentBrushingRef.current === component) {\n        cleanAllBrushes()\n        setCurrentComponentBrushing(null)\n      }\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = useCallback(\n    (newIsBrushingOnEndOfMove: boolean) => {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n      setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n    },\n    [cleanAllBrushes],\n  )\n\n  const closeDrawer = useCallback(() => setDrawerOpen(false), [])\n  const openDrawer = useCallback(() => setDrawerOpen(true), [])\n\n  const topToolbarComponent = useMemo(\n    () => (\n      <TopToolbar\n        openDrawer={openDrawer}\n        isToolsDisabled={dataset === null}\n        isDetailsVisible={isDetailsVisible}\n        setIsDetailsVisible={setIsDetailsVisible}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n        setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n        isBrushingActive={componentBrushingRef.current !== null}\n        clearBrushes={clearBrushesOnButton}\n        setDataset={setDatasetAndRemoveBrushing}\n        setDataLoadState={setDataLoadState}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        brushColor={brushColor}\n        setBrushColor={setBrushColor}\n      />\n    ),\n    [\n      brushColor,\n      clearBrushesOnButton,\n      componentBrushingRef,\n      dataset,\n      isBrushingOnEndOfMove,\n      isDetailsVisible,\n      setDatasetAndRemoveBrushing,\n      setIsBrushingOnEndOfMoveAndRemoveBrushing,\n      openDrawer,\n    ],\n  )\n\n  if (dataLoadState === DataLoadState.NoData) {\n    return (\n      <>\n        {topToolbarComponent}\n        <EmptyData />\n      </>\n    )\n  }\n  if (dataLoadState === DataLoadState.Loading || !dataset) {\n    return (\n      <>\n        {topToolbarComponent}\n        <Loading />\n      </>\n    )\n  }\n\n  return (\n    <>\n      {topToolbarComponent}\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={closeDrawer}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        brushColor={brushColor}\n        registerCleanBrushing={registerCleanBrushing}\n        setComponentBrushing={setComponentBrushing}\n        refreshViews={refreshViews}\n        redrawTime={redrawTime}\n        isBrushingActive={componentBrushingRef.current !== null}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      />\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}