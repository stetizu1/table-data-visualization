{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/text/HeaderText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/useHeaderStyle.ts","app/components/header/Header.tsx","app/text/FooterText.ts","app/components-style/footer/useFooterStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/constants/data/sampleDataset.tsx","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/text/SiteText.ts","app/components-style/content/top-toolbar/useTopToolbar.ts","app/components-style/content/top-toolbar/items/buttons/useTopToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/components-style/content/top-toolbar/items/file-reader/useFileReaderStyle.ts","app/components-style/content/top-toolbar/items/dialogs/useDialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/constants/views/ViewTypes.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/useOpenSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components/content/top-toolbar/TopToolbar.tsx","app/components-style/content/views/useViewGridStyle.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseActions.ts","app/components-style/content/data-drawer/useDataDrawerStyle.ts","app/helpers/data/data.ts","app/constants/data/data.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/common.ts","app/text/views-and-menus/glyphs.ts","app/components-style/content/data-drawer/useDataDrawerMenuStyle.ts","app/components-style/content/data-drawer/items/useAttributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/useNumberInputStyles.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components/content/data-drawer/items/OpacityInput.tsx","app/constants/save/save.ts","app/helpers/d3/saveSvg.ts","app/components-style/content/data-drawer/items/useDrawerButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/data-drawer/items/DataSaveButton.tsx","app/components-style/content/data-drawer/items/usePalettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/glyphs/GlyphsSettings.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/parallel-coordinates/ParallelCoordinatesSettings.tsx","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixMenu.tsx","app/types/views/scatter-plot-matrix/ScatterPlotMatrixSettings.tsx","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-menus/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsMenu.tsx","app/types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings.ts","app/components/content/data-drawer/DataDrawer.tsx","app/components-style/content/views/useViewStyle.ts","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/helpers/d3/attributeGetters.ts","app/constants/views/tooltip.ts","app/constants/html.ts","app/components-style/content/views/parallel-coordinates/useParallelCoordinatesStyle.ts","app/components-style/content/views/useTooltipStyle.ts","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot-matrix/useScatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/useGlyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components-style/content/views/scatter-plot-glyphs/useScatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/components/content/views/View.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/useEmptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/useLoadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/useAppStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","DataLoadError","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","data","Object","keys","filter","key","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","useHeaderStyle","makeStyles","headerContainer","background","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","style","FOOTER_TEXT","useFooterStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","SampleDataset","flower","bird","car","AcceptableFileTypes","sampleDatasetIcons","LocalFlorist","Air","DirectionsCar","sampleDatasets","flowerJson","birdJson","carJson","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","labelDetailsVisible","labelClearBrushes","labelBrushingOnEOM","fileReader","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFileFormat","saveText","header","save","confirm","cancel","useTopToolbar","toolbar","left","margin","separator","height","borderLeft","right","useTopToolbarButtonStyle","button","minWidth","ClickableButton","icon","onClick","disabled","label","classes","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","every","idx","CsvParse","textCsv","parse","output","fromEntries","toLowerCase","numValue","Number","isNaN","useFileReaderStyle","input","box","transition","highlight","borderRadius","useDialogStyle","list","pt","alert","SelectionDialog","isOpen","onClose","options","handleListItemClick","Dialog","open","DialogTitle","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","InformationDialog","confirmText","DialogContent","DialogContentText","clsx","DialogActions","autoFocus","addSelected","d","selected","ViewType","FileReader","setDataset","setDataLoadState","isHighlighted","useState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionsKeys","optionKey","Loaded","AutoGraph","type","onChange","e","a","target","files","Loading","selectedFile","fileType","json","csv","JSON","NoData","ToggleButtonSingle","setValue","onValue","ToggleButtonGroup","event","checked","ToggleButton","useOpenSettingsButtonStyle","settingsActive","settings","OpenSettingsButton","IconButton","size","Settings","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","Info","SkipNext","AutoFixOff","BrushAction","MouseActions","useViewGridStyle","column","row","useDataDrawerStyle","drawer","flexShrink","chevron","menu","flexGrow","getAttributeKeys","getDatasetSample","getQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","getDefaultAttributesChecked","defaultQuantitativeAttributesKeys","getDefaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","GLYPHS_DEFAULT","glyphSize","glyphSpacing","margins","opacity","MENU_TEXT","attributes","category","more","empty","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","PALETTE_PICKER","categoriesLabel","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","useDataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","minHeight","useAttributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleMove","newAttributesKeys","prev","prevSettings","displayAttributes","FormControlLabel","onUpButton","ArrowDropUp","onDownButton","ArrowDropDown","Checkbox","eventChecked","newChecked","newSettings","handleCheckboxChange","CategorySelector","TextField","categoryAttribute","undefined","select","MenuItem","Selector","settingsKey","newValue","useNumberInputStyles","vertical","horizontal","textField","MarginInput","handleMarginChange","newMargin","newMargins","Typography","defaultValue","inputProps","inputMode","min","NumberInput","valueKey","max","maxVal","OpacityInput","handleOpacityChange","newOpacity","newOpacities","SAVE_ID","ParallelCoordinates","ScatterPlotMatrix","Glyphs","ScatterPlotGlyphs","saveSvg","svg","document","querySelector","newStyleNodes","from","querySelectorAll","innerHTML","includes","node","createElement","insertBefore","firstChild","svgEl","fileName","setAttribute","svgData","outerHTML","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","removeChild","saveSvgToFile","forEach","remove","useDrawerButtonStyles","alignSelf","ConfirmationDialog","onConfirm","cancelText","DataSaveButton","isDialogOpen","setIsDialogOpen","Save","usePalettePickerStyle","picker","col","c","c0","backgroundColor","colors","c1","c2","c3","c4","c5","c6","c7","c8","c9","PalettePicker","getInput","newColor","newColors","colorCategory","handleSetColor","GlyphsMenu","glyphsSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","useEffect","sortableAttributes","defaultSortAttribute","categoricalAttributes","defaultCategoryAttribute","createGlyphsMenu","useCallback","newGlyphs","sortAttribute","schemeCategory10","currChecked","newSortableAttributes","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","Divider","PARALLEL_COORDINATES_DEFAULT","lineWidth","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","createScatterPlotMatrixMenu","newScatterPlotMatrix","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_MENU_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsMenu","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsMenu","newScatterPlotGlyphsSettings","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","useViewStyle","overflowX","overflowY","Margin","top","bottom","toString","this","isInRanges","ranges","cx","cy","getExtentInDomains","domains","calculatedExtent","extent","Error","SVG","g","circle","rect","path","div","class","transform","x","y","r","strokeWidth","fill","stroke","none","block","displayDetails","tooltipClass","selectAll","getCategoryColor","TOOLTIP","TOP","BOTTOM","LR","HTML","useParallelCoordinatesStyle","font","strokeOpacity","textAnchor","fontWeight","useTooltipStyle","tooltip","position","pointerEvents","PARALLEL_COORDINATES","setDataSelected","registerCleanBrushing","setComponentBrushing","component","scaleOrdinal","upperPadding","innerWidth","innerHeight","createParallelCoordinates","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","brush","brushY","BRUSH_WIDTH","on","start","move","brushEvent","axisName","selection","end","enter","append","attr","line","mouseOver","clientX","clientY","duration","html","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","classed","hidden","id","ref","notDisplayed","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","useScatterPlotMatrixStyle","shapeRendering","fillOpacity","DATA_POINT","SPACING","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","index","plotMatrixItem","matrixItem","cell","dataPoint","brushing","clearBrush","makeBrush","_","brushSelection","duplicates","useGlyphsStyle","cursor","GLYPHS","glyphSizeWithSpacing","glyphsCountPerLine","Math","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","sortedDataset","sort","b","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","glyph","changedData","useScatterPlotGlyphsStyle","SCATTER_PLOT_GLYPHS","createScatterPlotGlyphs","s","View","dataProps","graph","settingsCurr","ViewGrid","isDrawerOpen","closeDrawer","viewProps","dimensions","useEmptyDataStyle","site","paddingTop","EmptyData","useLoadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","redrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setFunction","cleanAllBrushes","f","newComponent","newIsBrushingOnEndOfMove","useAppStyle","app","content","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1f5931ee.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFileFormat = `unsupportedFileFormat`,\n}\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","const withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim()\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonOffBackground: `#363b46`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.9)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n  brushColor: `#830606`,\n}\n\nexport const EMPTY_SITE_COLORS = {\n  font: `#198286`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n","import { calc } from '../helpers/d3/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const useHeaderStyle = makeStyles({\n  headerContainer: {\n    background: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { HEADER_TEXT } from '../../text/HeaderText'\n\nimport { useHeaderStyle } from '../../components-style/header/useHeaderStyle'\n\nexport const Header: FunctionComponent = () => {\n  const style = useHeaderStyle()\n  return (\n    <header className={style.headerContainer}>\n      <div className={style.title}>{HEADER_TEXT.title}</div>\n      <div className={style.description}>{HEADER_TEXT.description}</div>\n    </header>\n  )\n}\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const useFooterStyle = makeStyles({\n  footerContainer: {\n    background: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { FOOTER_TEXT } from '../../text/FooterText'\n\nimport { useFooterStyle } from '../../components-style/footer/useFooterStyle'\n\nexport const Footer: FunctionComponent = () => {\n  const style = useFooterStyle()\n  return (\n    <header className={style.footerContainer}>\n      <div className={style.text}>{FOOTER_TEXT.author},</div>\n      <div className={style.text}>\n        &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n      </div>\n    </header>\n  )\n}\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { Air, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flower = `flower`,\n  bird = `bird`,\n  car = `car`,\n}\n\nexport const sampleDatasetFiles: Record<SampleDataset, string> = {\n  [SampleDataset.flower]: `flowerData.json`,\n  [SampleDataset.bird]: `birdData.json`,\n  [SampleDataset.car]: `carData.json`,\n}\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flower]: <LocalFlorist />,\n  [SampleDataset.bird]: <Air />,\n  [SampleDataset.car]: <DirectionsCar />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flower]: flowerJson,\n  [SampleDataset.bird]: birdJson,\n  [SampleDataset.car]: carJson,\n}\n","import { Dispatch, FunctionComponent, SetStateAction, useState } from 'react'\nimport { AutoGraph } from '@mui/icons-material'\nimport clsx from 'clsx'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadError, DataLoadState } from '../../../../../constants/data/dataLoadState'\nimport { SampleDataset, sampleDatasetIcons, sampleDatasets } from '../../../../../constants/data/sampleDataset'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../../text/SiteText'\n\nimport { useFileReaderStyle } from '../../../../../components-style/content/top-toolbar/items/file-reader/useFileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\nimport { ClickableButton } from '../buttons/ClickableButton'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: ReadonlyArray<DataType>): ReadonlyArray<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nexport const FileReader: FunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const classes = useFileReaderStyle()\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const text = TOP_TOOLBAR_TEXT.fileReader\n  const optionsKeys = Object.values(SampleDataset)\n  const handleListItemClick = (optionKey: SampleDataset) => {\n    setIsSampleDataDialogOpen(false)\n    const dataset = sampleDatasets[optionKey]\n    setDataset(addSelected(dataset))\n    setDataLoadState(DataLoadState.Loaded)\n  }\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={text.sampleDataDialogTitle}\n        options={optionsKeys.map((key) => ({\n          key,\n          label: text.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={text.alertDialog.confirm}\n        alert={true}\n      />\n      <div className={clsx(isHighlighted && classes.highlight, classes.box)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={text.sampleDataLabel}\n        />\n        <input\n          className={classes.input}\n          type=\"file\"\n          onChange={async (e) => {\n            if (e.target.files?.length) {\n              setDataLoadState(DataLoadState.Loading)\n              const selectedFile = e.target.files[0]\n              const fileType = selectedFile.type\n              let dataset: DataType[] = []\n\n              switch (fileType) {\n                case AcceptableFileTypes.json: {\n                  const text = await selectedFile.text()\n                  dataset = JSON.parse(text)\n                  break\n                }\n                case AcceptableFileTypes.csv: {\n                  const textCsv = await selectedFile.text()\n                  dataset = CsvParse(textCsv)\n                  break\n                }\n                default: {\n                  setDataLoadState(DataLoadState.NoData)\n                  setAlertDialogText(text.alertDialog[DataLoadError.unsupportedFile])\n                  setIsAlertDialogOpen(true)\n                  return\n                }\n              }\n              if (!isArrayOfDataType(dataset)) {\n                setDataLoadState(DataLoadState.NoData)\n                setAlertDialogText(text.alertDialog[DataLoadError.unsupportedFileFormat])\n                setIsAlertDialogOpen(true)\n                return\n              }\n              setDataset(addSelected(dataset))\n              setDataLoadState(DataLoadState.Loaded)\n            }\n          }}\n        />\n      </div>\n    </>\n  )\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataLoadError } from '../constants/data/dataLoadState'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  fileReader: {\n    sampleDataLabel: `Try it on the sample data`,\n    sampleDataDialogTitle: `Select sample dataset`,\n    sampleDataDialogText: {\n      [SampleDataset.flower]: `Flower dataset`,\n      [SampleDataset.bird]: `Bird dataset`,\n      [SampleDataset.car]: `Car dataset`,\n    },\n    alertDialog: {\n      [DataLoadError.unsupportedFile]: {\n        title: `File type not supported`,\n        description: `This file type is not supported. Use JSON or CSV file.`,\n      },\n      [DataLoadError.unsupportedFileFormat]: {\n        title: `File format not supported`,\n        description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n      },\n      confirm: `OK`,\n    },\n  },\n  saveText: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    save: `Save`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\nimport { border, px } from '../../../helpers/d3/stringGetters'\n\nexport const useTopToolbar = makeStyles({\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    background: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  right: {\n    display: `flex`,\n  },\n})\n","import { makeStyles } from '@mui/styles'\n\nimport { important, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const useTopToolbarButtonStyle = makeStyles({\n  button: {\n    margin: important(px(0, 5)),\n    padding: important(px(4)),\n    minWidth: important(0),\n    '&.MuiButtonBase-root': {\n      background: important(BUTTON_COLORS.buttonOffBackground),\n    },\n    '&.Mui-selected:not(.Mui-disabled)': {\n      background: important(BUTTON_COLORS.buttonOnBackground),\n    },\n    '&.MuiButton-contained:not(.Mui-disabled)': {\n      background: important(BUTTON_COLORS.buttonOnBackground),\n      color: BUTTON_COLORS.fontOn,\n    },\n  },\n})\n","import { FunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { useTopToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/useTopToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: FunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => {\n  const classes = useTopToolbarButtonStyle()\n  return (\n    <Button variant=\"contained\" onClick={onClick} className={classes.button} disabled={disabled} aria-label={label}>\n      <Tooltip title={label}>{icon}</Tooltip>\n    </Button>\n  )\n}\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { makeStyles } from '@mui/styles'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const useFileReaderStyle = makeStyles({\n  input: {\n    width: px(220),\n  },\n  box: {\n    transition: `0.3s all ease`,\n    border: border(0, HIGHLIGHT_COLOR.border),\n    background: HIGHLIGHT_COLOR.backgroundGone,\n  },\n  highlight: {\n    border: border(2, HIGHLIGHT_COLOR.border),\n    background: HIGHLIGHT_COLOR.background,\n    padding: px(10, 0),\n    borderRadius: 10,\n  },\n})\n","import { makeStyles } from '@mui/styles'\nimport { ERROR_COLORS } from '../../../../../styles/colors'\nimport { important } from '../../../../../helpers/d3/stringGetters'\n\nexport const useDialogStyle = makeStyles({\n  list: {\n    pt: 0,\n  },\n  alert: {\n    color: important(ERROR_COLORS.font),\n  },\n})\n","import { Avatar, Dialog, DialogTitle, List, ListItem, ListItemAvatar, ListItemText } from '@mui/material'\n\nimport { useDialogStyle } from '../../../../components-style/content/top-toolbar/items/dialogs/useDialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n}: SelectionDialogProps<T>): JSX.Element => {\n  const classes = useDialogStyle()\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{title}</DialogTitle>\n      <List className={classes.list}>\n        {options.map((option) => (\n          <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n            <ListItemAvatar>\n              <Avatar>{option.icon}</Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={option.label} />\n          </ListItem>\n        ))}\n      </List>\n    </Dialog>\n  )\n}\n","import { FunctionComponent } from 'react'\nimport clsx from 'clsx'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material'\n\nimport { useDialogStyle } from '../../../../components-style/content/top-toolbar/items/dialogs/useDialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: FunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => {\n  const classes = useDialogStyle()\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText className={clsx(alert && classes.alert)}>{description}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} autoFocus>\n          {confirmText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n}\n","import { Dispatch, FunctionComponent, MouseEvent, SetStateAction } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { useTopToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/useTopToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\n\nexport const ToggleButtonSingle: FunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const classes = useTopToolbarButtonStyle()\n  const handleChange = (event: MouseEvent<HTMLElement>, checked: string[]) => {\n    if (checked.length && checked[0] === onValue) {\n      return setValue(true)\n    }\n    return setValue(false)\n  }\n  const onValue = `on`\n  return (\n    <ToggleButtonGroup value={value ? [onValue] : []} onChange={handleChange}>\n      <ToggleButton className={classes.button} value={onValue} aria-label={label} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { makeStyles } from '@mui/styles'\nimport { important, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const useOpenSettingsButtonStyle = makeStyles({\n  settingsActive: {\n    color: important(BUTTON_COLORS.buttonOnBackground),\n  },\n  settings: {\n    margin: important(px(0, 7, 0, 5)),\n  },\n})\n","import { FunctionComponent } from 'react'\nimport { Settings } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\nimport clsx from 'clsx'\n\nimport { useOpenSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/useOpenSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: FunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => {\n  const classes = useOpenSettingsButtonStyle()\n  return (\n    <IconButton\n      size=\"small\"\n      disabled={disabled}\n      onClick={open}\n      className={clsx(classes.settings, !disabled && classes.settingsActive)}\n    >\n      <Settings />\n    </IconButton>\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { AutoFixOff, SkipNext } from '@mui/icons-material'\nimport { Info } from '@mui/icons-material'\n\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { useTopToolbar } from '../../../components-style/content/top-toolbar/useTopToolbar'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n}\n\nexport const TopToolbar: FunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n}) => {\n  const classes = useTopToolbar()\n  return (\n    <div className={classes.toolbar}>\n      <div className={classes.left}>\n        <ToggleButtonSingle\n          icon={<Info />}\n          value={isDetailsVisible}\n          setValue={setIsDetailsVisible}\n          disabled={isToolsDisabled}\n          label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n        />\n        <ToggleButtonSingle\n          icon={<SkipNext />}\n          value={isBrushingOnEndOfMove}\n          setValue={setIsBrushingOnEndOfMove}\n          disabled={isToolsDisabled}\n          label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n        />\n        <div className={classes.separator} />\n        <ClickableButton\n          icon={<AutoFixOff />}\n          onClick={clearBrushes}\n          disabled={!isBrushingActive}\n          label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n        />\n      </div>\n      <div className={classes.right}>\n        <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n        <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n      </div>\n    </div>\n  )\n}\n","import { makeStyles } from '@mui/styles'\n\nexport const useViewGridStyle = makeStyles({\n  column: {\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n    justifyContent: `center`,\n  },\n  row: {\n    display: `flex`,\n  },\n})\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseActions {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const useDataDrawerStyle = makeStyles({\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      background: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n})\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n","export const CATEGORY_LIMIT = 10\n","import { GlyphsSettings } from '../../types/views/glyphs/GlyphsSettings'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<GlyphsSettings, `glyphSize` | `glyphSpacing` | `margins` | `opacity`> = {\n  glyphSize: 40,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n}\n","export const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n","import { MENU_TEXT } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: `Glyphs`,\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { calc, border, px, important } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const useDataDrawerMenuStyle = makeStyles({\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    background: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: 10,\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: important(0),\n      background: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: important(px(2, 0, 5)),\n    },\n  },\n})\n","import { makeStyles } from '@mui/styles'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\n\nexport const useAttributeCheckerStyle = makeStyles({\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: important(px(0, 5)),\n    padding: important(0),\n    minWidth: important(0),\n    height: important(px(15)),\n  },\n})\n","import { Dispatch, SetStateAction } from 'react'\nimport { Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings, SettingsType } from '../../views/Settings'\nimport { useAttributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/useAttributeCheckerStyle'\n\nexport interface AttributeCheckerProps<T extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: T) => Partial<T>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <T extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<T>): JSX.Element => {\n  const classes = useAttributeCheckerStyle()\n  const handleCheckboxChange = (eventChecked: boolean, key: keyof SelectableDataType) => {\n    const newChecked = { ...checked, [key]: eventChecked }\n    setChecked(newChecked)\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as T\n      const newSettings = getNewSettings(newChecked, prevSettings)\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          ...newSettings,\n        },\n      }\n    })\n  }\n  const handleMove = (newAttributesKeys: Array<keyof SelectableDataType>) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setAttributesKeys(newAttributesKeys)\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as T\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n        },\n      }\n    })\n  }\n  const onUpButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  const onDownButton = (idx: number) => {\n    const newAttributesKeys = [...attributesKeys]\n    ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n    handleMove(newAttributesKeys)\n  }\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <div className={classes.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} className={classes.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  className={classes.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </div>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: FunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = (categoryAttribute: keyof SelectableDataType | -1) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n        },\n      }\n    })\n  }\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface SelectorProps<T> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof T\n}\n\nexport const Selector = <T,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<T>): JSX.Element => {\n  const handleSelectChange = (newValue: keyof SelectableDataType) => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: newValue,\n        },\n      }\n    })\n  }\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { makeStyles } from '@mui/styles'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const useNumberInputStyles = makeStyles({\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  text: {\n    fontSize: important(px(DATA_DRAWER_FONT.fontSize)),\n    padding: px(6, 5, 3),\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n})\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { useNumberInputStyles } from '../../../../components-style/content/data-drawer/items/useNumberInputStyles'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const MarginInput: FunctionComponent<MarginInputProps> = ({ margins, setSettings, viewType }) => {\n  const classes = useNumberInputStyles()\n  const handleMarginChange = (newMargin: number, idx: number) => {\n    const newMargins = [...margins]\n    newMargins[idx] = newMargin\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: newMargins,\n        },\n      }\n    })\n  }\n  return (\n    <div className={classes.vertical}>\n      <Typography className={classes.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <div className={classes.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type=\"number\"\n          defaultValue={margins[0]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type=\"number\"\n          defaultValue={margins[1]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </div>\n      <div className={classes.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type=\"number\"\n          defaultValue={margins[2]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type=\"number\"\n          defaultValue={margins[3]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </div>\n    </div>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { TextField } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { useNumberInputStyles } from '../../../../components-style/content/data-drawer/items/useNumberInputStyles'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface NumberInputProps<T> {\n  label: string\n  valueKey: keyof T\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  max?: number\n}\n\nexport const NumberInput = <T,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  max,\n}: NumberInputProps<T>): JSX.Element => {\n  const classes = useNumberInputStyles()\n  const handleValueChange = (newValue: number) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: newValue,\n        },\n      }\n    })\n  }\n  const maxVal = max ? { max } : {}\n  return (\n    <TextField\n      label={label}\n      type=\"number\"\n      defaultValue={value}\n      className={classes.textField}\n      inputProps={{ inputMode: `numeric`, min: 0, ...maxVal }}\n      onChange={(e) => handleValueChange(Number(e.target.value))}\n    />\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { useNumberInputStyles } from '../../../../components-style/content/data-drawer/items/useNumberInputStyles'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface OpacityInputProps {\n  header: string\n  opacity: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: FunctionComponent<OpacityInputProps> = ({ header, opacity, setSettings, viewType }) => {\n  const classes = useNumberInputStyles()\n  const handleOpacityChange = (newOpacity: number, idx: number) => {\n    const newOpacities = [...opacity]\n    newOpacities[idx] = newOpacity\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: newOpacities,\n        },\n      }\n    })\n  }\n  return (\n    <div className={classes.vertical}>\n      <Typography className={classes.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type=\"number\"\n        defaultValue={opacity[0]}\n        className={classes.textField}\n        inputProps={{ min: 0, max: 100 }}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <div className={classes.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type=\"number\"\n          defaultValue={opacity[1]}\n          className={classes.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type=\"number\"\n          defaultValue={opacity[2]}\n          className={classes.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </div>\n    </div>\n  )\n}\n","import { ViewType } from '../views/ViewTypes'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { SAVE_ID } from '../../constants/save/save'\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, `http://www.w3.org/2000/svg`)\n  const svgData = svgEl.outerHTML\n  const preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\n  const svgBlob = new Blob([preface, svgData], { type: `image/svg+xml;charset=utf-8` })\n  const svgUrl = URL.createObjectURL(svgBlob)\n  const downloadLink = document.createElement(`a`)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)!\n  const newStyleNodes = Array.from(document.querySelectorAll(`style`))\n    .map((style) => style.innerHTML)\n    .filter((style) => style.includes(viewType))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n","import { makeStyles } from '@mui/styles'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\n\nexport const useDrawerButtonStyles = makeStyles({\n  button: {\n    margin: important(px(15, 0, 0)),\n    padding: important(px(5, 7)),\n    minWidth: important(0),\n    alignSelf: `flex-end`,\n  },\n})\n","import { FunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: FunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant=\"contained\" autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant=\"outlined\">\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { FunctionComponent, useState } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { saveSvg } from '../../../../helpers/d3/saveSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../text/SiteText'\n\nimport { useDrawerButtonStyles } from '../../../../components-style/content/data-drawer/items/useDrawerButtonStyles'\n\nimport { ConfirmationDialog } from '../../common/dialogs/ConfirmationDialog'\n\nexport interface DataSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const DataSaveButton: FunctionComponent<DataSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const classes = useDrawerButtonStyles()\n  const onConfirm = () => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={TOP_TOOLBAR_TEXT.saveText.header}\n        description={TOP_TOOLBAR_TEXT.saveText.description}\n        onConfirm={onConfirm}\n        onClose={() => setIsDialogOpen(false)}\n        confirmText={TOP_TOOLBAR_TEXT.saveText.confirm}\n        cancelText={TOP_TOOLBAR_TEXT.saveText.cancel}\n      />\n      <Button\n        variant=\"contained\"\n        onClick={() => setIsDialogOpen(true)}\n        className={classes.button}\n        aria-label={TOP_TOOLBAR_TEXT.saveText.save}\n      >\n        <Tooltip title={TOP_TOOLBAR_TEXT.saveText.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { makeStyles } from '@mui/styles'\nimport { Theme } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\ninterface StyleProps {\n  colors: ColorArray\n}\nexport const usePalettePickerStyle = makeStyles<Theme, StyleProps>(() => ({\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: important(px(DATA_DRAWER_FONT.fontSize)),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n  c: {\n    '& input': {\n      width: `100%`,\n      height: px(20),\n      opacity: 0,\n    },\n  },\n  c0: {\n    backgroundColor: ({ colors }) => colors[0],\n  },\n  c1: {\n    backgroundColor: ({ colors }) => colors[1],\n  },\n  c2: {\n    backgroundColor: ({ colors }) => colors[2],\n  },\n  c3: {\n    backgroundColor: ({ colors }) => colors[3],\n  },\n  c4: {\n    backgroundColor: ({ colors }) => colors[4],\n  },\n  c5: {\n    backgroundColor: ({ colors }) => colors[5],\n  },\n  c6: {\n    backgroundColor: ({ colors }) => colors[6],\n  },\n  c7: {\n    backgroundColor: ({ colors }) => colors[7],\n  },\n  c8: {\n    backgroundColor: ({ colors }) => colors[8],\n  },\n  c9: {\n    backgroundColor: ({ colors }) => colors[9],\n  },\n}))\n","import { ChangeEvent, Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { Typography } from '@mui/material'\nimport clsx from 'clsx'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PALETTE_PICKER } from '../../../../text/views-and-menus/common'\n\nimport { usePalettePickerStyle } from '../../../../components-style/content/data-drawer/items/usePalettePickerStyle'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n}\n\nexport const PalettePicker: FunctionComponent<PalettePickerProps> = ({ colors, setSettings, viewType }) => {\n  const classes = usePalettePickerStyle({ colors })\n  const handleSetColor = (event: ChangeEvent<HTMLInputElement>, idx: number) => {\n    const newColor = event.target.value\n    if (newColor) {\n      const newColors = [...colors]\n      newColors[idx] = newColor\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            colorCategory: newColors,\n          },\n        }\n      })\n    }\n  }\n  const getInput = (idx: number, className: string) => (\n    <div className={classes.col}>\n      <label>{PALETTE_PICKER.categoriesLabel[idx]}</label>\n      <div className={clsx(classes.c, className)}>\n        <input type=\"color\" value={colors[idx]} onChange={(e) => handleSetColor(e, idx)} />\n      </div>\n    </div>\n  )\n  return (\n    <div className={classes.picker}>\n      <Typography className={classes.text}>{PALETTE_PICKER.header}</Typography>\n      <div className={classes.row}>\n        {getInput(0, classes.c0)}\n        {getInput(1, classes.c1)}\n        {getInput(2, classes.c2)}\n        {getInput(3, classes.c3)}\n        {getInput(4, classes.c4)}\n      </div>\n      <div className={classes.row}>\n        {getInput(5, classes.c5)}\n        {getInput(6, classes.c6)}\n        {getInput(7, classes.c7)}\n        {getInput(8, classes.c8)}\n        {getInput(9, classes.c9)}\n      </div>\n    </div>\n  )\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\nimport { Accordion, AccordionDetails, AccordionSummary, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  sortAttributeKey,\n  GlyphsSettings,\n} from '../../../../types/views/glyphs/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { DataSaveButton } from '../../data-drawer/items/DataSaveButton'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const GlyphsMenu: FunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const classes = useDataDrawerMenuStyle()\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  useEffect(() => {\n    setChecked(getDefaultAttributesChecked(dataset))\n    setQuantitativeAttributesKeys(getQuantitativeAttributesKeys(dataset))\n  }, [dataset])\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const defaultSortAttribute = sortableAttributes?.[0]\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n  const defaultCategoryAttribute = categoricalAttributes?.[0]\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createGlyphsMenu = useCallback(() => {\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: quantitativeAttributesKeys.filter((key) => checked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        colorCategory: schemeCategory10 as ColorArray,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [checked, quantitativeAttributesKeys, defaultSortAttribute, defaultCategoryAttribute, setSettings])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n    prevSettings: GlyphsSettings,\n  ): Partial<GlyphsSettings> => {\n    const displayAttributes = getCurrentDisplayAttributes(newChecked)\n    const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n    const sortAttribute = newChecked[prevSettings.sortAttribute]\n      ? prevSettings.sortAttribute\n      : newSortableAttributes?.[0]\n    return { displayAttributes, sortAttribute }\n  }\n\n  if (glyphsSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacity={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n            <DataSaveButton viewType={viewType} />\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { ParallelCoordinatesSettings } from '../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<ParallelCoordinatesSettings, `margins` | `lineWidth` | `opacity`> = {\n  margins: [20, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n}\n","import { MENU_TEXT } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: `Parallel Coordinates`,\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\nimport { Accordion, AccordionDetails, AccordionSummary, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  lineWidthKey,\n  ParallelCoordinatesSettings,\n} from '../../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { DataSaveButton } from '../../data-drawer/items/DataSaveButton'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesMenu: FunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerMenuStyle()\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  useEffect(() => {\n    setChecked(getDefaultAttributesChecked(dataset))\n    setQuantitativeAttributesKeys(getQuantitativeAttributesKeys(dataset))\n  }, [dataset])\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n  const defaultCategoryAttribute = categoricalAttributes?.[0]\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: quantitativeAttributesKeys.filter((key) => checked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        colorCategory: schemeCategory10 as ColorArray,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [checked, quantitativeAttributesKeys, defaultCategoryAttribute, setSettings])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacity={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n            <DataSaveButton viewType={viewType} />\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { ScatterPlotMatrixSettings } from '../../types/views/scatter-plot-matrix/ScatterPlotMatrixSettings'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<ScatterPlotMatrixSettings, `margins` | `pointSize` | `opacity`> = {\n  margins: [25, 20, 25, 45],\n  pointSize: 4,\n  opacity: [70, 80, 15],\n}\n","import { MENU_TEXT } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: `Scatter Plot Matrix`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  ...MENU_TEXT,\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\nimport { Accordion, AccordionDetails, AccordionSummary, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n} from '../../../../types/views/scatter-plot-matrix/ScatterPlotMatrixSettings'\nimport { ColorArray } from '../../../../types/styling/ColorArray'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { DataSaveButton } from '../../data-drawer/items/DataSaveButton'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixMenu: FunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerMenuStyle()\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  useEffect(() => {\n    setChecked(getDefaultAttributesChecked(dataset))\n    setQuantitativeAttributesKeys(getQuantitativeAttributesKeys(dataset))\n  }, [dataset])\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n  const defaultCategoryAttribute = categoricalAttributes?.[0]\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: quantitativeAttributesKeys.filter((key) => checked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        colorCategory: schemeCategory10 as ColorArray,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [checked, quantitativeAttributesKeys, defaultCategoryAttribute, setSettings])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(viewType)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacity={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n            <DataSaveButton viewType={viewType} />\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n}\n","import { ScatterPlotGlyphsSettings } from '../../types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<ScatterPlotGlyphsSettings, `glyphSize` | `margins` | `opacity`> = {\n  glyphSize: 40,\n  margins: [30, 30, 30, 30],\n  opacity: [60, 90, 30],\n}\n","import { MENU_TEXT } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_MENU_TEXT = {\n  header: `Scatter plot glyphs`,\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  sorting: `Sorted by`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\nimport { Accordion, AccordionDetails, AccordionSummary, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport {\n  glyphSizeKey,\n  xAttributeKey,\n  yAttributeKey,\n} from '../../../../types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { SCATTER_PLOT_GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { SCATTER_PLOT_GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { DataSaveButton } from '../../data-drawer/items/DataSaveButton'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsMenu: FunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerMenuStyle()\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  useEffect(() => {\n    setChecked(getDefaultAttributesChecked(dataset))\n    setQuantitativeAttributesKeys(getQuantitativeAttributesKeys(dataset))\n  }, [dataset])\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n  const defaultCategoryAttribute = categoricalAttributes?.[0]\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    quantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createScatterPlotGlyphsMenu = useCallback(() => {\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: quantitativeAttributesKeys.filter((key) => checked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        colorCategory: schemeCategory10 as ColorArray,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [checked, quantitativeAttributesKeys, defaultCategoryAttribute, setSettings, defaultX, defaultY])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n  ): Partial<ScatterPlotGlyphsSettings> => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n  const handleChangeSettings = () => cleanSelectedIfViewWasBrushing(viewType)\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{SCATTER_PLOT_GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.category}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_MENU_TEXT.opacity}\n                  opacity={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n            <DataSaveButton viewType={viewType} />\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{SCATTER_PLOT_GLYPHS_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { Divider, Drawer, IconButton } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { useDataDrawerStyle } from '../../../components-style/content/data-drawer/useDataDrawerStyle'\n\nimport { Settings } from '../views/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot-matrix/ScatterPlotMatrixMenu'\nimport { ScatterPlotGlyphsMenu } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: FunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerStyle()\n  const menus = views.map((view, idx) => {\n    switch (view) {\n      case ViewType.Glyphs:\n        return (\n          <GlyphsMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ParallelCoordinates:\n        return (\n          <ParallelCoordinatesMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotMatrix:\n        return (\n          <ScatterPlotMatrixMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotGlyphs:\n        return (\n          <ScatterPlotGlyphsMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      default:\n        return null\n    }\n  })\n  if (settings === null) {\n    setSettings({})\n    return null\n  }\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} className={classes.drawer}>\n      <div className={classes.header}>\n        <IconButton onClick={close}>\n          <ChevronRight className={classes.chevron} />\n        </IconButton>\n      </div>\n      <Divider />\n      <div className={classes.menu}>{menus.map((menu) => menu)}</div>\n    </Drawer>\n  )\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Dimensions } from '../../../types/basic/dimensions'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nconst BORDER_SIZE = 5\n\nexport const useViewStyle = makeStyles<Theme, Dimensions>(() => ({\n  box: {\n    width: ({ width }) => width,\n    height: ({ height }) => height + BORDER_SIZE,\n    overflowX: `hidden`,\n    overflowY: `auto`,\n    margin: px(5, 0),\n  },\n}))\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","export const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: [[number, number], [number, number]], cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n    strokeWidth: `stroke-width`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    strokeWidth: `stroke-width`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(`1`)\n","export const TOOLTIP = {\n  VISIBLE: 1,\n  INVISIBLE: 0,\n  EASE_IN: 200,\n  EASE_OUT: 500,\n  PADDING: {\n    TOP: 5,\n    BOTTOM: 10,\n    LR: 5,\n  },\n}\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport interface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useParallelCoordinatesStyle = makeStyles<Theme, StyleProps>(() => ({\n  // needed for identification while saving\n  [ViewType.ParallelCoordinates]: {\n    background: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  line: {\n    fill: `none`,\n    opacity: ({ opacity }) => opacity[0] / 100,\n  },\n  selected: {\n    stroke: important(PLOT_COLORS.brushColor),\n    opacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    strokeOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n  text: {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n}))\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\n\nimport { TOOLTIP } from '../../../constants/views/tooltip'\n\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const useTooltipStyle = makeStyles({\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.PADDING.TOP, TOOLTIP.PADDING.LR, TOOLTIP.PADDING.BOTTOM),\n    background: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n  },\n})\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisLeft, brushY, D3BrushEvent, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataEachG } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { useParallelCoordinatesStyle } from '../../../../components-style/content/views/parallel-coordinates/useParallelCoordinatesStyle'\nimport { useTooltipStyle } from '../../../../components-style/content/views/useTooltipStyle'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\nimport { SAVE_ID } from '../../../../constants/save/save'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\nconst TEXT_Y_SHIFT = 10\n\nconst PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\nconst AXES = `AXES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: FunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  setDataSelected,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useParallelCoordinatesStyle({ width, height, margin, opacity })\n  const { tooltip: tooltipClass } = useTooltipStyle()\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      setDataSelected((data) =>\n        displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        }),\n      )\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const brush = brushY<keyof SelectableDataType>()\n      .extent([\n        [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n        [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n      ])\n      .on(BrushAction.start, () => {\n        setComponentBrushing(ViewType.ParallelCoordinates)\n      })\n      .on(BrushAction.move, (brushEvent: D3BrushEvent<SelectableDataType>, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      })\n      .on(BrushAction.end, (brushEvent: D3BrushEvent<SelectableDataType>, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      })\n\n    const getAxisTransform = (attribute: keyof SelectableDataType) => getTranslate([xScale(String(attribute))!, 0])\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath = (data: SelectableDataType) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    const tooltip = select(getClass(tooltipClass))\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, clsx(classes.line, PARALLEL_COORDINATES))\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n        tooltip.transition().duration(TOOLTIP.EASE_IN).style(SVG.style.opacity, TOOLTIP.VISIBLE)\n        tooltip\n          .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n          .style(SVG.style.left, px(clientX))\n          .style(SVG.style.top, px(clientY))\n      })\n      .on(MouseActions.mouseOut, () => {\n        tooltip.transition().duration(TOOLTIP.EASE_OUT).style(SVG.style.opacity, TOOLTIP.INVISIBLE)\n      })\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, -TEXT_Y_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, classes.text)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n    classes,\n    tooltipClass,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, tooltipClass)\n\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg\n          width={width}\n          height={height}\n          className={classes[ViewType.ParallelCoordinates]}\n          id={SAVE_ID[ViewType.ParallelCoordinates]}\n        >\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n        <div className={tooltipClass} />\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{PARALLEL_COORDINATES_TEXT.unavailable}</div>\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport interface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useScatterPlotMatrixStyle = makeStyles<Theme, StyleProps>(() => ({\n  // needed for identification while saving\n  [ViewType.ScatterPlotMatrix]: {\n    fontSize: PLOT_FONT.fontSize,\n    background: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  x: {},\n  y: {},\n  axis: {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  rect: {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  axisLine: {\n    stroke: PLOT_COLORS.axisLines,\n  },\n  axisPath: {\n    display: `none`,\n  },\n  cell: {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  dataPoint: {\n    fillOpacity: ({ opacity }) => opacity[0] / 100,\n  },\n  selected: {\n    fill: important(PLOT_COLORS.brushColor),\n    fillOpacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    fillOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n  duplicates: {},\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  D3BrushEvent,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/scatter-plot-matrix/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { DataEachCircle, DataEachG } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { useScatterPlotMatrixStyle } from '../../../../components-style/content/views/scatter-plot-matrix/useScatterPlotMatrixStyle'\nimport { useTooltipStyle } from '../../../../components-style/content/views/useTooltipStyle'\nimport { SAVE_ID } from '../../../../constants/save/save'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\nexport const DATA_POINT = `dataPoint`\nexport const AXIS_X = `axisX`\nexport const AXIS_Y = `axisY`\nexport const CELL = `cell`\nexport const CELL_DUPLICATES = `cell-dup`\nexport const SPACING = {\n  HORIZONTAL: 12,\n  VERTICAL: 12,\n}\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: FunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  setDataSelected,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useScatterPlotMatrixStyle({ width, height, margin, opacity })\n  const { tooltip: tooltipClass } = useTooltipStyle()\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([SPACING.HORIZONTAL, rect.width - SPACING.HORIZONTAL]),\n      scaleLinear([rect.height - SPACING.HORIZONTAL, SPACING.HORIZONTAL]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.x, classes.axis))\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.y, classes.axis))\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const tooltip = select(getClass(tooltipClass))\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachCircle<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachCircle<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, classes.rect)\n        .attr(SVG.attributes.x, SPACING.HORIZONTAL)\n        .attr(SVG.attributes.y, SPACING.VERTICAL)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, SPACING.HORIZONTAL))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, SPACING.VERTICAL))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, clsx(classes.dataPoint, DATA_POINT))\n        .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n          tooltip.transition().duration(TOOLTIP.EASE_IN).style(SVG.style.opacity, TOOLTIP.VISIBLE)\n          tooltip\n            .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n            .style(SVG.style.left, px(clientX))\n            .style(SVG.style.top, px(clientY))\n        })\n        .on(MouseActions.mouseOut, () => {\n          tooltip.transition().duration(TOOLTIP.EASE_OUT).style(SVG.style.opacity, TOOLTIP.INVISIBLE)\n        })\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, classes.cell)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 3 * SPACING.HORIZONTAL)\n      .attr(SVG.attributes.y, 2.5 * SPACING.VERTICAL)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: { cell: MatrixPosition | null } = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        setDataSelected((data) => isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey]))))\n      }\n    }\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, (_: D3BrushEvent<SelectableDataType>, { rowIdx, colIdx, rowKey, colKey }: MatrixItem) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      })\n      .on(BrushAction.move, ({ selection }: D3BrushEvent<SelectableDataType>, matrixItem: MatrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      })\n      .on(BrushAction.end, ({ selection }: D3BrushEvent<SelectableDataType>, matrixItem: MatrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      })\n      .extent([\n        [0, 0],\n        [rect.width, rect.height],\n      ])\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.cell, classes.duplicates))\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n    classes,\n    tooltipClass,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, pointSize, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  selectAll(getClass(DATA_POINT))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, tooltipClass)\n  displayDetails(isDetailsVisible, classes.duplicates)\n\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg\n          width={width}\n          height={height}\n          className={classes[ViewType.ScatterPlotMatrix]}\n          id={SAVE_ID[ViewType.ScatterPlotMatrix]}\n        >\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n        <div className={tooltipClass} />\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{SCATTER_PLOT_MATRIX_TEXT.unavailable}</div>\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\ninterface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useGlyphsStyle = makeStyles<Theme, StyleProps>(() => ({\n  // needed for identification while saving\n  [ViewType.Glyphs]: {\n    background: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  glyph: {\n    opacity: ({ opacity }) => opacity[0] / 100,\n    cursor: `crosshair`,\n  },\n  selected: {\n    fill: important(PLOT_COLORS.brushColor),\n    opacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    fillOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/glyphs/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { TOOLTIP } from '../../../../constants/views/tooltip'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { HTML } from '../../../../constants/html'\nimport { SAVE_ID } from '../../../../constants/save/save'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { useGlyphsStyle } from '../../../../components-style/content/views/glyphs/useGlyphsStyle'\nimport { useTooltipStyle } from '../../../../components-style/content/views/useTooltipStyle'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `glyphsItems`\n\nexport const Glyphs: FunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  setDataSelected,\n  sortAttribute,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  isDetailsVisible,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useGlyphsStyle({ width, height, margin, opacity })\n  const { tooltip: tooltipClass } = useTooltipStyle()\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const sortedDataset = sortAttribute\n      ? [...dataset].sort((a, b) => Number(a[sortAttribute]) - Number(b[sortAttribute]))\n      : [...dataset]\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform = (data: SelectableDataType) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath = (data: SelectableDataType) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const tooltip = select(getClass(tooltipClass))\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, clsx(classes.glyph, GLYPHS))\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n            tooltip.transition().duration(TOOLTIP.EASE_IN).style(SVG.style.opacity, TOOLTIP.VISIBLE)\n            tooltip\n              .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n              .style(SVG.style.left, px(clientX))\n              .style(SVG.style.top, px(clientY))\n          })\n          .on(MouseActions.mouseOut, () => {\n            tooltip.transition().duration(TOOLTIP.EASE_OUT).style(SVG.style.opacity, TOOLTIP.INVISIBLE)\n          })\n          .on(MouseActions.click, (_: MouseEvent, changedData: SelectableDataType) => {\n            setComponentBrushing(ViewType.Glyphs)\n            const selected = dataset.map((data) => (data === changedData ? !data.selected : data.selected))\n            setDataSelected((data, idx) => selected[idx])\n            if (selected.every((value) => !value)) {\n              setComponentBrushing(null)\n            }\n          })\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    selectAll(getClass(GLYPHS))\n      .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n      .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n  }, [\n    dataset,\n    classes,\n    tooltipClass,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    sortAttribute,\n    color,\n    isBrushingActive,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, innerWidth, innerHeight, colorCategory],\n  )\n  // selected coloring\n  selectAll(getClass(GLYPHS))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, tooltipClass)\n\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={innerHeight + margin.height} className={classes.svg} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n        <div className={tooltipClass} />\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{GLYPHS_TEXT.unavailable}</div>\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\ninterface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useScatterPlotGlyphsStyle = makeStyles<Theme, StyleProps>(() => ({\n  // needed for identification while saving\n  [ViewType.ScatterPlotGlyphs]: {\n    background: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  glyph: {\n    opacity: ({ opacity }) => opacity[0] / 100,\n  },\n  axis: {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: important(PLOT_COLORS.axisLinesDark),\n    },\n  },\n  selected: {\n    fill: important(PLOT_COLORS.brushColor),\n    opacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    fillOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n  duplicates: {},\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  axisBottom,\n  axisLeft,\n  brush,\n  D3BrushEvent,\n  lineRadial,\n  scaleLinear,\n  scaleOrdinal,\n  scaleRadial,\n  select,\n  selectAll,\n} from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\n\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { isInRanges } from '../../../../helpers/basic/range'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SAVE_ID } from '../../../../constants/save/save'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\n\nimport { useScatterPlotGlyphsStyle } from '../../../../components-style/content/views/scatter-plot-glyphs/useScatterPlotGlyphsStyle'\nimport { useTooltipStyle } from '../../../../components-style/content/views/useTooltipStyle'\n\nconst SCATTER_PLOT_GLYPHS = `scatterPlotGlyphs`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: FunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  setDataSelected,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useScatterPlotGlyphsStyle({ width, height, margin, opacity })\n  const { tooltip: tooltipClass } = useTooltipStyle()\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains([...displayAttributes, xAttribute, yAttribute], dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(extentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(extentInDomains[attribute]),\n    )\n\n    const getGlyphPath = (data: SelectableDataType) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const tooltip = select(getClass(tooltipClass))\n    svg\n      .selectAll(SCATTER_PLOT_GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, clsx(classes.glyph, SCATTER_PLOT_GLYPHS))\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(\n            SVG.attributes.transform,\n            getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n          )\n          .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n            tooltip.transition().duration(TOOLTIP.EASE_IN).style(SVG.style.opacity, TOOLTIP.VISIBLE)\n            tooltip\n              .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n              .style(SVG.style.left, px(clientX))\n              .style(SVG.style.top, px(clientY))\n          })\n          .on(MouseActions.mouseOut, () => {\n            tooltip.transition().duration(TOOLTIP.EASE_OUT).style(SVG.style.opacity, TOOLTIP.INVISIBLE)\n          })\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, classes.axis)\n    axisX.call(axisBottom(xScale))\n    svg\n      .selectAll(AXIS_Y)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, classes.axis)\n      .call(axisLeft(yScale))\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        setDataSelected((data) =>\n          isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))),\n        )\n      }\n    }\n\n    const makeBrush = brush()\n      .on(BrushAction.start, () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      })\n      .on(BrushAction.move, ({ selection }: D3BrushEvent<SelectableDataType>) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      })\n      .on(BrushAction.end, ({ selection }: D3BrushEvent<SelectableDataType>) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      })\n      .extent([\n        [-glyphSize / 2, -glyphSize / 2],\n        [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n      ])\n    svg.call(makeBrush)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    classes,\n    tooltipClass,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  selectAll(getClass(SCATTER_PLOT_GLYPHS))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, tooltipClass)\n  displayDetails(isDetailsVisible, classes.duplicates)\n\n  return (\n    <>\n      <svg\n        width={width}\n        height={height}\n        className={classes[ViewType.ScatterPlotGlyphs]}\n        id={SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n      </svg>\n      <div className={tooltipClass} />\n    </>\n  )\n}\n","import { FunctionComponent } from 'react'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { ParallelCoordinatesSettings } from '../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../../types/views/scatter-plot-matrix/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../../types/views/glyphs/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../../types/views/scatter-plot-glyphs/ScatterPlotGlyphsSettings'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { useViewStyle } from '../../../components-style/content/views/useViewStyle'\n\nimport { Settings, SettingsType } from './Settings'\nimport { ParallelCoordinates } from './parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from './scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from './glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from './scatter-plot-glyphs/ScatterPlotGlyphs'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  component: ViewType\n  settings: Settings\n}\n\ntype ViewElementFunction = (props: Brushable & VisualizationView, settings: SettingsType) => JSX.Element\n\nconst options: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n}\n\nexport const View: FunctionComponent<ViewProps> = ({ width, height, component, settings, ...dataProps }) => {\n  const graph = options[component]\n  const classes = useViewStyle({ width, height })\n  const settingsCurr = settings[component]\n  if (!settingsCurr) return null\n  return <div className={classes.box}>{graph({ width, height, ...dataProps }, settingsCurr)}</div>\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { Dimensions } from '../../../types/basic/dimensions'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { useViewGridStyle } from '../../../components-style/content/views/useViewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\n\nimport { View } from './View'\nimport { Settings } from './Settings'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n}\n\nexport const ViewGrid: FunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  ...viewProps\n}) => {\n  const classes = useViewGridStyle()\n  const views = [ViewType.ParallelCoordinates, ViewType.ScatterPlotMatrix, ViewType.ScatterPlotGlyphs, ViewType.Glyphs]\n  const dimensions: Dimensions[] = [\n    { width: 960, height: 400 },\n    { width: 960, height: 960 },\n    { width: 960, height: 700 },\n    { width: 960, height: 620 },\n  ]\n  return (\n    <>\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      {settings !== null && (\n        <div className={classes.column}>\n          {views.map((view, idx) => (\n            <View\n              width={dimensions[idx].width}\n              height={dimensions[idx].height}\n              component={view}\n              settings={settings}\n              key={idx}\n              {...viewProps}\n            />\n          ))}\n        </div>\n      )}\n    </>\n  )\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { EMPTY_SITE_COLORS } from '../../../styles/colors'\n\nexport const useEmptyDataStyle = makeStyles({\n  site: {\n    paddingTop: px(20),\n    color: EMPTY_SITE_COLORS.font,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nimport { useEmptyDataStyle } from '../../../components-style/content/no-data/useEmptyDataStyle'\n\nexport const EmptyData: FunctionComponent = () => {\n  const classes = useEmptyDataStyle()\n  return <div className={classes.site}>{EMPTY_DATA_TEXT.content}</div>\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const useLoadingStyle = makeStyles({\n  load: {\n    paddingTop: px(40),\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { useLoadingStyle } from '../../../components-style/content/no-data/useLoadingStyle'\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nexport const Loading: FunctionComponent = () => {\n  const classes = useLoadingStyle()\n  return <div className={classes.load}>{EMPTY_DATA_TEXT.loading}</div>\n}\n","import { FunctionComponent, useState } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../views/ViewGrid'\nimport { Settings } from '../views/Settings'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\n\nexport const DataContext: FunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [redrawTime, setRedrawTime] = useState(Date.now())\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = (data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }\n\n  const setDataSelected = (setFunction: (data: SelectableDataType, idx: number) => boolean): void => {\n    if (dataset) {\n      dataset.forEach((data, idx) => {\n        data.selected = setFunction(data, idx)\n      })\n      setRedrawTime(Date.now()) // redraw component\n    }\n  }\n\n  const cleanAllBrushes = () => {\n    setDataSelected((data) => (data.selected = false))\n    cleanBrushingRef.current.forEach((f) => f())\n  }\n\n  const clearBrushesOnButton = () => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }\n\n  const setComponentBrushing: SetComponentBrushing = (newComponent) => {\n    if (componentBrushingRef.current !== newComponent) cleanAllBrushes()\n    setCurrentComponentBrushing(newComponent)\n  }\n\n  const registerCleanBrushing = (cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }\n\n  const cleanSelectedIfViewWasBrushing = (component: ViewType) => {\n    if (componentBrushingRef.current === component) {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n    }\n  }\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = (newIsBrushingOnEndOfMove: boolean) => {\n    cleanAllBrushes()\n    setCurrentComponentBrushing(null)\n    setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n  }\n\n  const isBrushingActive = componentBrushingRef.current !== null\n\n  const viewProps = {\n    registerCleanBrushing,\n    setComponentBrushing,\n    setDataSelected,\n    redrawTime,\n    isBrushingActive,\n    isBrushingOnEndOfMove,\n  }\n\n  const getViewGrid = () => {\n    if (dataLoadState === DataLoadState.NoData) {\n      return <EmptyData />\n    }\n    if (dataLoadState === DataLoadState.Loading || !dataset) {\n      return <Loading />\n    }\n    return (\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={() => setDrawerOpen(false)}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        {...viewProps}\n      />\n    )\n  }\n\n  return (\n    <>\n      <TopToolbar\n        openDrawer={() => setDrawerOpen(true)}\n        isToolsDisabled={dataset === null}\n        isDetailsVisible={isDetailsVisible}\n        setIsDetailsVisible={setIsDetailsVisible}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n        setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n        isBrushingActive={isBrushingActive}\n        clearBrushes={clearBrushesOnButton}\n        setDataset={setDatasetAndRemoveBrushing}\n        setDataLoadState={setDataLoadState}\n      />\n      {getViewGrid()}\n    </>\n  )\n}\n","import { makeStyles } from '@mui/styles'\n\nexport const useAppStyle = makeStyles({\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { useAppStyle } from './useAppStyle'\n\nexport const App: FunctionComponent = () => {\n  const style = useAppStyle()\n  return (\n    <div className={style.app}>\n      <Header />\n      <div className={style.content}>\n        <DataContext />\n      </div>\n      <Footer />\n    </div>\n  )\n}\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}