{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/text/HeaderText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/components-style/header/useHeaderStyle.ts","app/components/header/Header.tsx","app/text/FooterText.ts","app/components-style/footer/useFooterStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/text/SiteText.ts","app/components-style/content/top-toolbar/useTopToolbar.ts","app/components-style/content/top-toolbar/items/buttons/useButton.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/text/errorText.ts","app/components-style/content/top-toolbar/items/file-reader/useFileReaderStyle.ts","app/constants/views/ViewTypes.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components/content/top-toolbar/TopToolbar.tsx","app/helpers/data/data.ts","app/constants/data/data.ts","app/components-style/content/views/useViewGridStyle.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseActions.ts","app/components-style/content/data-drawer/useDataDrawerStyle.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/common.ts","app/text/views-and-menus/glyphs.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/SortSelector.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/text/views-and-menus/scatterPlotMatrix.ts","app/constants/views/scatterPlotMatrix.ts","app/components/content/views/scatter-plot/ScatterPlotMatrixMenu.tsx","app/components/content/data-drawer/DataDrawer.tsx","app/components-style/content/no-data/useEmptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/useLoadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components-style/content/views/useViewStyle.ts","app/types/styling/Margin.ts","app/helpers/d3/extent.ts","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/helpers/d3/attributeGetters.ts","app/constants/views/tooltip.ts","app/constants/html.ts","app/styles/font.ts","app/components-style/content/views/parallel-coordinates/useParallelCoordinatesStyle.ts","app/components-style/content/views/useTooltipStyle.ts","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/basic/range.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot/useScatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/useGlyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components/content/views/View.tsx","app/components/content/views/ViewGrid.tsx","app/components/content/context/DataContext.tsx","app/useAppStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","data","Object","keys","filter","key","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","PLOT_COLORS","useHeaderStyle","makeStyles","headerContainer","backgroundColor","padding","width","display","flexDirection","alignItems","justifyContent","title","fontSize","description","Header","style","FOOTER_TEXT","useFooterStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","AcceptableFileTypes","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","useTopToolbar","toolbar","left","separator","flexGrow","borderLeft","useButton","button","margin","minWidth","background","ClickableButton","icon","onClick","disabled","label","classes","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","every","idx","CsvParse","textCsv","parse","output","fromEntries","toLowerCase","numValue","Number","isNaN","FILE_READER_ERROR_TEXT","useFileReaderStyle","input","addSelected","d","selected","ViewType","FileReader","setDataset","setDataLoadState","type","onChange","e","a","target","files","Loading","selectedFile","fileType","json","csv","JSON","NoData","alert","Loaded","ToggleButtonSingle","setValue","onValue","ToggleButtonGroup","event","checked","ToggleButton","TopToolbar","openDrawer","openDrawerDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingActive","clearBrushes","Info","FormatColorReset","IconButton","size","Menu","getAttributeKeys","getDatasetSample","getDefaultQuantitativeAttributesKeys","getPossibleQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","getDefaultAttributesChecked","defaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","BrushAction","MouseActions","useViewGridStyle","column","row","useDataDrawerStyle","drawer","flexShrink","header","chevron","menu","drawerItem","textAlign","borderBottom","marginTop","insufficientAttributeNum","GLYPHS_DEFAULT_MARGIN","MENU_TEXT","attributes","category","empty","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","FormControlLabel","control","Checkbox","eventChecked","newChecked","prev","prevSettings","newSettings","handleCheckboxChange","CategorySelector","TextField","categoryAttribute","undefined","select","MenuItem","SortSelector","sortAttribute","GlyphsMenu","settings","glyphSettings","Glyphs","useState","sortableAttributes","defaultSortAttribute","categoricalAttributes","defaultCategoryAttribute","createGlyphsMenu","useCallback","newGlyphs","displayAttributes","colorCategory","schemeCategory10","useEffect","currChecked","newSortableAttributes","PARALLEL_COORDINATES_DEFAULT_MARGIN","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","ParallelCoordinates","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","SCATTER_PLOT_DEFAULT_MARGIN","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","ScatterPlotMatrix","createScatterPlotMatrixMenu","newScatterPlotMatrix","DataDrawer","isOpen","close","views","menus","view","Drawer","anchor","open","ChevronRight","Divider","useEmptyDataStyle","site","paddingTop","EmptyData","useLoadingStyle","load","CircularProgress","useViewStyle","box","height","overflowX","overflowY","Margin","top","right","bottom","toString","this","getExtentInDomains","domains","calculatedExtent","extent","Error","SVG","svg","g","circle","rect","path","div","class","transform","opacity","x","y","cx","cy","r","fill","stroke","none","block","displayDetails","tooltipClass","selectAll","getCategoryColor","TOOLTIP","TOP","BOTTOM","LR","HTML","PLOT_FONT","PLOT_FONT_BOX_SIZE","useParallelCoordinatesStyle","line","hidden","strokeOpacity","notDisplayed","textAnchor","useTooltipStyle","tooltip","position","borderRadius","pointerEvents","TEXT_SPACING","setDataSelected","registerCleanBrushing","setComponentBrushing","margins","useMemo","component","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","node","remove","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","brush","brushY","BRUSH_WIDTH","on","start","move","brushEvent","axisName","selection","end","forEach","enter","append","attr","mouseOver","clientX","clientY","transition","duration","html","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerExtent","spacing","getCellInnerSize","getCellTranslateInMatrix","maxIdx","useScatterPlotMatrixStyle","shapeRendering","axisLine","axisPath","cell","fontWeight","textTransform","dataPoint","fillOpacity","duplicates","SPACING","TICKS","dataPointSize","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","index","clsx","plotMatrixItem","matrixItem","brushing","clearBrush","ranges","isInRanges","makeBrush","_","brushSelection","useGlyphsStyle","glyph","glyphSize","glyphSizeWithSpacing","glyphsCountPerLine","Math","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","sortedDataset","sort","b","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","options","s","View","defaultDisplayAttributes","defaultColors","dataProps","graph","settingsCurr","ViewGrid","dataLoadState","isDrawerOpen","closeDrawer","viewProps","setDefaultDisplayAttributes","allViewProps","getContent","DataContext","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","setDrawerOpen","Date","now","redrawTime","setRedrawTime","cleanBrushingRef","componentBrushingRef","setFunction","cleanAllBrushes","f","newComponent","useAppStyle","app","minHeight","content","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71da0e58.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","const withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim()\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n","export const HEADER_COLORS = {\n  backgroundColor: `#282c34`,\n  fontColor: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  backgroundColor: `#1f2528`,\n  fontColor: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  backgroundColor: `#363a46`,\n  fontColor: `#bcc7e7`,\n}\n\nexport const PLOT_COLORS = {\n  noCategoryColor: `#1db0b0`,\n  backgroundColor: `rgba(250, 250, 250, 0.9)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { calc, px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\n\nexport const useHeaderStyle = makeStyles({\n  headerContainer: {\n    backgroundColor: HEADER_COLORS.backgroundColor,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.fontColor,\n  },\n  title: {\n    fontSize: calc(5, `2vmin`),\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: calc(2, `1vmin`),\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { HEADER_TEXT } from '../../text/HeaderText'\n\nimport { useHeaderStyle } from '../../components-style/header/useHeaderStyle'\n\nexport const Header: FunctionComponent = () => {\n  const style = useHeaderStyle()\n  return (\n    <header className={style.headerContainer}>\n      <div className={style.title}>{HEADER_TEXT.title}</div>\n      <div className={style.description}>{HEADER_TEXT.description}</div>\n    </header>\n  )\n}\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { calc, px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\n\nexport const useFooterStyle = makeStyles({\n  footerContainer: {\n    backgroundColor: FOOTER_COLORS.backgroundColor,\n    color: FOOTER_COLORS.fontColor,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: calc(2, `1vmin`),\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { FOOTER_TEXT } from '../../text/FooterText'\n\nimport { useFooterStyle } from '../../components-style/footer/useFooterStyle'\n\nexport const Footer: FunctionComponent = () => {\n  const style = useFooterStyle()\n  return (\n    <header className={style.footerContainer}>\n      <div className={style.text}>{FOOTER_TEXT.author},</div>\n      <div className={style.text}>\n        &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n      </div>\n    </header>\n  )\n}\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadState } from '../../../../../constants/data/dataLoadState'\n\nimport { FILE_READER_ERROR_TEXT } from '../../../../../text/errorText'\n\nimport { useFileReaderStyle } from '../../../../../components-style/content/top-toolbar/items/file-reader/useFileReaderStyle'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport type FileReaderProps = FileReaderDataProps\n\nexport const addSelected = (data: ReadonlyArray<DataType>): ReadonlyArray<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nexport const FileReader: FunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState }) => (\n  <input\n    className={useFileReaderStyle().input}\n    type=\"file\"\n    onChange={async (e) => {\n      if (e.target.files?.length) {\n        setDataLoadState(DataLoadState.Loading)\n        setDataset(null)\n\n        const selectedFile = e.target.files[0]\n        const fileType = selectedFile.type\n        let data: DataType[] = []\n\n        switch (fileType) {\n          case AcceptableFileTypes.json: {\n            const text = await selectedFile.text()\n            data = JSON.parse(text)\n            break\n          }\n          case AcceptableFileTypes.csv: {\n            const textCsv = await selectedFile.text()\n            data = CsvParse(textCsv)\n            break\n          }\n          default: {\n            setDataLoadState(DataLoadState.NoData)\n            alert(FILE_READER_ERROR_TEXT.unsupportedFile)\n            return\n          }\n        }\n        if (!isArrayOfDataType(data)) {\n          setDataLoadState(DataLoadState.NoData)\n          alert(FILE_READER_ERROR_TEXT.unsupportedFileFormat)\n          return\n        }\n        setDataset(addSelected(data))\n        setDataLoadState(DataLoadState.Loaded)\n      }\n    }}\n  />\n)\n","export const EMPTY_DATA_TEXT = {\n  content: `To allow visualization, first load a dataset from a JSON or CSV file...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\nimport { border, px } from '../../../helpers/d3/stringGetters'\n\nexport const useTopToolbar = makeStyles({\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `flex-end`,\n    backgroundColor: TOP_TOOLBAR_COLORS.backgroundColor,\n    color: TOP_TOOLBAR_COLORS.fontColor,\n  },\n  left: {\n    display: `flex`,\n  },\n  separator: {\n    flexGrow: 1,\n    borderLeft: border(2, `#57607a`),\n  },\n})\n","import { makeStyles } from '@mui/styles'\n\nimport { important, px } from '../../../../../helpers/d3/stringGetters'\n\nexport const useButton = makeStyles({\n  button: {\n    margin: important(px(0, 7)),\n    padding: important(px(4)),\n    minWidth: important(`0`),\n    '&.MuiButtonBase-root': {\n      background: important(`#363b46`),\n    },\n    '&.Mui-selected': {\n      background: important(`#d6e1ff`),\n    },\n    '&.MuiButton-contained:not(.Mui-disabled)': {\n      background: important(`#d6e1ff`),\n      color: `rgba(0, 0, 0, 0.87)`,\n    },\n  },\n})\n","import { FunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { useButton } from '../../../../../components-style/content/top-toolbar/items/buttons/useButton'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: FunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => {\n  const classes = useButton()\n  return (\n    <Button variant=\"contained\" onClick={onClick} className={classes.button} disabled={disabled} aria-label={label}>\n      <Tooltip title={label}>{icon}</Tooltip>\n    </Button>\n  )\n}\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","export const FILE_READER_ERROR_TEXT = {\n  unsupportedFile: `This file type is not supported. Use JSON or CSV file.`,\n  unsupportedFileFormat: `The file format is invalid.\nThe valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../../../helpers/d3/stringGetters'\n\nexport const useFileReaderStyle = makeStyles({\n  input: {\n    width: px(220),\n  },\n})\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n}\n","import { Dispatch, FunctionComponent, MouseEvent, SetStateAction } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { useButton } from '../../../../../components-style/content/top-toolbar/items/buttons/useButton'\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: Dispatch<SetStateAction<boolean>>\n  icon: JSX.Element\n  label: string\n}\n\nexport const ToggleButtonSingle: FunctionComponent<ToggleButtonProps> = ({ icon, value, setValue, label }) => {\n  const classes = useButton()\n  const handleChange = (event: MouseEvent<HTMLElement>, checked: string[]) => {\n    if (checked.length && checked[0] === onValue) {\n      return setValue(true)\n    }\n    return setValue(false)\n  }\n  const onValue = `on`\n  return (\n    <ToggleButtonGroup value={value ? [onValue] : []} onChange={handleChange}>\n      <ToggleButton className={classes.button} value={onValue} aria-label={label}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { FormatColorReset, Menu } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\nimport { Info } from '@mui/icons-material'\n\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { useTopToolbar } from '../../../components-style/content/top-toolbar/useTopToolbar'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  openDrawerDisabled: boolean\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingActive: boolean\n  clearBrushes: () => void\n}\n\nexport const TopToolbar: FunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  openDrawerDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n}) => {\n  const classes = useTopToolbar()\n  return (\n    <div className={classes.toolbar}>\n      <div className={classes.left}>\n        <ToggleButtonSingle\n          icon={<Info />}\n          value={isDetailsVisible}\n          setValue={setIsDetailsVisible}\n          label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n        />\n        <div className={classes.separator} />\n        <ClickableButton\n          icon={<FormatColorReset />}\n          onClick={clearBrushes}\n          disabled={!isBrushingActive}\n          label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n        />\n      </div>\n      <div>\n        <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} />\n        <IconButton size=\"small\" disabled={openDrawerDisabled} onClick={openDrawer}>\n          <Menu />\n        </IconButton>\n      </div>\n    </div>\n  )\n}\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getPossibleQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getPossibleQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n","export const CATEGORY_LIMIT = 10\n","import { makeStyles } from '@mui/styles'\n\nexport const useViewGridStyle = makeStyles({\n  column: {\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n    justifyContent: `center`,\n  },\n  row: {\n    display: `flex`,\n  },\n})\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseActions {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { calc, border, px } from '../../../helpers/d3/stringGetters'\n\nexport const useDataDrawerStyle = makeStyles({\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      backgroundColor: `#23262d`,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, `#363a46`),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n  },\n  header: {},\n  chevron: {\n    color: `#c4cbdc`,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n  drawerItem: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    backgroundColor: `#edf1fd`,\n    borderBottom: border(1, `#8e94a2`),\n    '& h1': {\n      borderBottom: border(1, `#8e94a2`),\n      fontSize: px(14),\n      width: `100%`,\n    },\n    '& label': {\n      fontSize: `0.8em`,\n      color: `#404242`,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: 10,\n    fontSize: 12,\n    color: `#700000`,\n  },\n})\n","import { MarginArray } from '../../types/styling/Margin'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT_MARGIN: MarginArray = [15, 10, 20, 10]\n","export const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  empty: `-----`,\n}\n","import { MENU_TEXT } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable2: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select multiple attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: `Glyphs`,\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  ...MENU_TEXT,\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { Checkbox, FormControlLabel } from '@mui/material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings, SettingsType } from '../../views/Settings'\n\nexport interface AttributeCheckerProps<T extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: T) => Partial<T>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n}\n\nexport const AttributeChecker = <T extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n}: AttributeCheckerProps<T>): JSX.Element => {\n  const handleCheckboxChange = (eventChecked: boolean, key: keyof SelectableDataType) => {\n    const newChecked = { ...checked, [key]: eventChecked }\n    setChecked(newChecked)\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as T\n      const newSettings = getNewSettings(newChecked, prevSettings)\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          ...newSettings,\n        },\n      }\n    })\n  }\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={<Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />}\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: FunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = (categoryAttribute: keyof SelectableDataType | -1) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n        },\n      }\n    })\n  }\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface SortSelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const SortSelector: FunctionComponent<SortSelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectSortChange = (sortAttribute: keyof SelectableDataType) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          sortAttribute,\n        },\n      }\n    })\n  }\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectSortChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`sort-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { GlyphsSettings } from '../../../../types/views/glyphs/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getPossibleQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { useDataDrawerStyle } from '../../../../components-style/content/data-drawer/useDataDrawerStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { SortSelector } from '../../data-drawer/items/SortSelector'\n\nexport const GlyphsMenu: FunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const { drawerItem, insufficientAttributeNum } = useDataDrawerStyle()\n  const glyphSettings = settings[ViewType.Glyphs]\n  const possibleQuantitativeAttributesKeys = getPossibleQuantitativeAttributesKeys(dataset)\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  const sortableAttributes = possibleQuantitativeAttributesKeys.filter((key) => checked[key])\n  const defaultSortAttribute = sortableAttributes?.[0]\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n  const defaultCategoryAttribute = categoricalAttributes?.[0]\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    possibleQuantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createGlyphsMenu = useCallback(() => {\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: possibleQuantitativeAttributesKeys.filter((key) => checked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        colorCategory: schemeCategory10,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [checked, possibleQuantitativeAttributesKeys, defaultSortAttribute, defaultCategoryAttribute, setSettings])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), []) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n    prevSettings: GlyphsSettings,\n  ): Partial<GlyphsSettings> => {\n    const displayAttributes = getCurrentDisplayAttributes(newChecked)\n    const newSortableAttributes = possibleQuantitativeAttributesKeys.filter((key) => newChecked[key])\n    const sortAttribute = newChecked[prevSettings.sortAttribute]\n      ? prevSettings.sortAttribute\n      : newSortableAttributes?.[0]\n    return { displayAttributes, sortAttribute }\n  }\n\n  if (glyphSettings) {\n    return (\n      <div className={drawerItem}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {possibleQuantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={ViewType.Glyphs}\n              attributesKeys={possibleQuantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n            />\n            <CategorySelector\n              viewType={ViewType.Glyphs}\n              value={glyphSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <SortSelector\n              viewType={ViewType.Glyphs}\n              value={glyphSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n            />\n          </>\n        ) : (\n          <div className={insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { MarginArray } from '../../types/styling/Margin'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT_MARGIN: MarginArray = [20, 30, 25, 30]\n","import { MENU_TEXT } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: `Parallel Coordinates`,\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  ...MENU_TEXT,\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { BrushableMenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getPossibleQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { useDataDrawerStyle } from '../../../../components-style/content/data-drawer/useDataDrawerStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\n\nexport const ParallelCoordinatesMenu: FunctionComponent<BrushableMenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const { drawerItem, insufficientAttributeNum } = useDataDrawerStyle()\n  const parallelCoordinatesSettings = settings[ViewType.ParallelCoordinates]\n\n  const possibleQuantitativeAttributesKeys = getPossibleQuantitativeAttributesKeys(dataset)\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n  const defaultCategoryAttribute = categoricalAttributes?.[0]\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    possibleQuantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: possibleQuantitativeAttributesKeys.filter((key) => checked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        colorCategory: schemeCategory10,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [checked, possibleQuantitativeAttributesKeys, defaultCategoryAttribute, setSettings])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <div className={drawerItem}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {possibleQuantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={ViewType.ParallelCoordinates}\n              attributesKeys={possibleQuantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(ViewType.ParallelCoordinates)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n            />\n            <CategorySelector\n              viewType={ViewType.ParallelCoordinates}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n          </>\n        ) : (\n          <div className={insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { MENU_TEXT } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: `Scatter Plot Matrix`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  ...MENU_TEXT,\n}\n","import { MarginArray } from '../../types/styling/Margin'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_DEFAULT_MARGIN: MarginArray = [25, 20, 25, 45]\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { BrushableMenuProps } from '../../../../types/views/MenuProps'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/scatter-plot/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getPossibleQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { useDataDrawerStyle } from '../../../../components-style/content/data-drawer/useDataDrawerStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\n\nexport const ScatterPlotMatrixMenu: FunctionComponent<BrushableMenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const { drawerItem, insufficientAttributeNum } = useDataDrawerStyle()\n  const scatterPlotMatrixSettings = settings[ViewType.ScatterPlotMatrix]\n\n  const possibleQuantitativeAttributesKeys = getPossibleQuantitativeAttributesKeys(dataset)\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n  const defaultCategoryAttribute = categoricalAttributes?.[0]\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    possibleQuantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: possibleQuantitativeAttributesKeys.filter((key) => checked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        colorCategory: schemeCategory10,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [checked, possibleQuantitativeAttributesKeys, defaultCategoryAttribute, setSettings])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <div className={drawerItem}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {possibleQuantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={ViewType.ScatterPlotMatrix}\n              attributesKeys={possibleQuantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotMatrix)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n            />\n            <CategorySelector\n              viewType={ViewType.ScatterPlotMatrix}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n          </>\n        ) : (\n          <div className={insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { Divider, Drawer, IconButton } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { useDataDrawerStyle } from '../../../components-style/content/data-drawer/useDataDrawerStyle'\n\nimport { Settings } from '../views/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot/ScatterPlotMatrixMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: FunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerStyle()\n  const menus = views.map((view, idx) => {\n    switch (view) {\n      case ViewType.Glyphs:\n        return <GlyphsMenu dataset={dataset} settings={settings} setSettings={setSettings} key={idx} />\n      case ViewType.ParallelCoordinates:\n        return (\n          <ParallelCoordinatesMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotMatrix:\n        return (\n          <ScatterPlotMatrixMenu\n            dataset={dataset}\n            settings={settings}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      default:\n        return null\n    }\n  })\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} className={classes.drawer}>\n      <div className={classes.header}>\n        <IconButton onClick={close}>\n          <ChevronRight className={classes.chevron} />\n        </IconButton>\n      </div>\n      <Divider />\n      <div className={classes.menu}>{menus.map((menu) => menu)}</div>\n    </Drawer>\n  )\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const useEmptyDataStyle = makeStyles({\n  site: {\n    paddingTop: px(20),\n    color: `#198286`,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nimport { useEmptyDataStyle } from '../../../components-style/content/no-data/useEmptyDataStyle'\n\nexport const EmptyData: FunctionComponent = () => {\n  const classes = useEmptyDataStyle()\n  return <div className={classes.site}>{EMPTY_DATA_TEXT.content}</div>\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const useLoadingStyle = makeStyles({\n  load: {\n    paddingTop: px(40),\n  },\n})\n","import { FunctionComponent } from 'react'\nimport { CircularProgress } from '@mui/material'\n\nimport { useLoadingStyle } from '../../../components-style/content/no-data/useLoadingStyle'\n\nexport const Loading: FunctionComponent = () => {\n  const classes = useLoadingStyle()\n  return (\n    <div className={classes.load}>\n      <CircularProgress />\n    </div>\n  )\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Dimensions } from '../../../types/basic/dimensions'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nconst BORDER_SIZE = 5\n\nexport const useViewStyle = makeStyles<Theme, Dimensions>(() => ({\n  box: {\n    width: ({ width }) => width,\n    height: ({ height }) => height + BORDER_SIZE,\n    overflowX: `hidden`,\n    overflowY: `auto`,\n    margin: px(5, 0),\n  },\n}))\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    opacity: `opacity`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    opacity: `opacity`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","import { ScaleOrdinal } from 'd3'\n\nimport { PLOT_COLORS } from '../../styles/colors'\nimport { SelectableDataType } from '../../types/data/data'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : PLOT_COLORS.noCategoryColor\n","export const TOOLTIP = {\n  VISIBLE: 1,\n  INVISIBLE: 0,\n  EASE_IN: 200,\n  EASE_OUT: 500,\n  PADDING: {\n    TOP: 5,\n    BOTTOM: 10,\n    LR: 5,\n  },\n}\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","export const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport interface StyleProps extends Dimensions {\n  margin: Margin\n}\n\nexport const useParallelCoordinatesStyle = makeStyles<Theme, StyleProps>(() => ({\n  svg: {\n    backgroundColor: PLOT_COLORS.backgroundColor,\n  },\n  line: {\n    fill: `none`,\n    opacity: 0.5,\n  },\n  selected: {\n    stroke: important(`#830606`),\n  },\n  hidden: {\n    strokeOpacity: 0.2,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n  text: {\n    textAnchor: `middle`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n}))\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\n\nimport { TOOLTIP } from '../../../constants/views/tooltip'\n\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const useTooltipStyle = makeStyles({\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.PADDING.TOP, TOOLTIP.PADDING.LR, TOOLTIP.PADDING.BOTTOM),\n    background: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n  },\n})\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisLeft, brushY, D3BrushEvent, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataEachG } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT_MARGIN,\n} from '../../../../constants/views/parallelCoordinates'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { useParallelCoordinatesStyle } from '../../../../components-style/content/views/parallel-coordinates/useParallelCoordinatesStyle'\nimport { useTooltipStyle } from '../../../../components-style/content/views/useTooltipStyle'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\nconst TEXT_SPACING = {\n  LEFT: 22,\n  RIGHT: 5,\n}\nconst TEXT_Y_SHIFT = 10\n\nconst PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\nconst AXES = `AXES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: FunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  setDataSelected,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  colorCategory,\n  margins = PARALLEL_COORDINATES_DEFAULT_MARGIN,\n  isDetailsVisible,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useParallelCoordinatesStyle({ width, height, margin })\n  const { tooltip: tooltipClass } = useTooltipStyle()\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [\n    width - margin.width - (TEXT_SPACING.LEFT + TEXT_SPACING.RIGHT),\n    height - margin.height - upperPadding,\n  ]\n\n  // selected coloring\n  selectAll(getClass(classes.line))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      setDataSelected((data) =>\n        displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        }),\n      )\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setDataSelected(() => false)\n      setComponentBrushing(null)\n    }\n\n    const brush = brushY<keyof SelectableDataType>()\n      .extent([\n        [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n        [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n      ])\n      .on(BrushAction.start, () => {\n        setComponentBrushing(ViewType.ParallelCoordinates)\n      })\n      .on(BrushAction.move, (brushEvent: D3BrushEvent<SelectableDataType>, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        setBrushingSelection()\n      })\n      .on(BrushAction.end, (brushEvent: D3BrushEvent<SelectableDataType>, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      })\n\n    const getAxisTransform = (attribute: keyof SelectableDataType) => getTranslate([xScale(String(attribute))!, 0])\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath = (data: SelectableDataType) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    const tooltip = select(getClass(tooltipClass))\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, classes.line)\n      .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n        tooltip.transition().duration(TOOLTIP.EASE_IN).style(SVG.style.opacity, TOOLTIP.VISIBLE)\n        tooltip\n          .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n          .style(SVG.style.left, px(clientX))\n          .style(SVG.style.top, px(clientY))\n      })\n      .on(MouseActions.mouseOut, () => {\n        tooltip.transition().duration(TOOLTIP.EASE_OUT).style(SVG.style.opacity, TOOLTIP.INVISIBLE)\n      })\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, -TEXT_Y_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, classes.text)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      displayAttributes.forEach((key) => (selections[key] = null))\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    classes,\n    tooltipClass,\n    categoryAttribute,\n    displayAttributes,\n    setDataSelected,\n    setComponentBrushing,\n    registerCleanBrushing,\n    color,\n  ])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinates(), [displayAttributes, categoryAttribute])\n  displayDetails(isDetailsVisible, tooltipClass)\n\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={height} className={classes.svg}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left + TEXT_SPACING.LEFT, margin.top + upperPadding])}\n          />\n        </svg>\n        <div className={tooltipClass} />\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{PARALLEL_COORDINATES_TEXT.unavailable}</div>\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","export const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: [[number, number], [number, number]], cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerExtent = (length: number, spacing: number): [number, number] => [spacing, length - spacing]\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important, px } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport interface StyleProps extends Dimensions {\n  margin: Margin\n}\n\nexport const useScatterPlotMatrixStyle = makeStyles<Theme, StyleProps>(() => ({\n  x: {},\n  y: {},\n  svg: {\n    fontSize: px(12),\n    backgroundColor: PLOT_COLORS.backgroundColor,\n  },\n  axis: {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: `#ddd`,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  rect: {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: `#aaa`,\n  },\n  axisLine: {\n    stroke: `#ddd`,\n  },\n  axisPath: {\n    display: `none`,\n  },\n  cell: {\n    '& text': {\n      fontWeight: `bold`,\n      textTransform: `capitalize`,\n      fill: `black`,\n    },\n  },\n  dataPoint: {\n    fillOpacity: 0.7,\n    '&.hidden': {\n      fill: `#ccc`,\n    },\n  },\n  selected: {\n    fill: important(`#830606`),\n  },\n  hidden: {\n    fillOpacity: 0.15,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n  duplicates: {},\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  D3BrushEvent,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/scatter-plot/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { DataEachCircle, DataEachG } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport {\n  getMatrix,\n  getCellInnerExtent,\n  getCellInnerSize,\n  getCellTranslateInMatrix,\n} from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_DEFAULT_MARGIN,\n} from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { useScatterPlotMatrixStyle } from '../../../../components-style/content/views/scatter-plot/useScatterPlotMatrixStyle'\nimport { useTooltipStyle } from '../../../../components-style/content/views/useTooltipStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {\n  dataPointSize?: number\n}\n\nexport const DATA_POINT = `dataPoint`\nexport const AXIS_X = `axisX`\nexport const AXIS_Y = `axisY`\nexport const CELL = `cell`\nexport const CELL_DUPLICATES = `cell-dup`\nexport const SPACING = {\n  HORIZONTAL: 12,\n  VERTICAL: 12,\n}\nexport const DEFAULT_DATA_POINT_SIZE = 4\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: FunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  setDataSelected,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  colorCategory,\n  dataPointSize = DEFAULT_DATA_POINT_SIZE,\n  margins = SCATTER_PLOT_DEFAULT_MARGIN,\n  isDetailsVisible,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useScatterPlotMatrixStyle({ width, height, margin })\n  const { tooltip: tooltipClass } = useTooltipStyle()\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  selectAll(getClass(classes.dataPoint))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear(getCellInnerExtent(rect.width, SPACING.HORIZONTAL)),\n      scaleLinear(getCellInnerExtent(rect.height, SPACING.VERTICAL)),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (vertical)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.x, classes.axis))\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (horizontal)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.y, classes.axis))\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const tooltip = select(getClass(tooltipClass))\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachCircle<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachCircle<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, classes.rect)\n        .attr(SVG.attributes.x, SPACING.HORIZONTAL)\n        .attr(SVG.attributes.y, SPACING.VERTICAL)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, SPACING.HORIZONTAL))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, SPACING.VERTICAL))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, dataPointSize)\n        .attr(SVG.attributes.class, classes.dataPoint)\n        .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n          tooltip.transition().duration(TOOLTIP.EASE_IN).style(SVG.style.opacity, TOOLTIP.VISIBLE)\n          tooltip\n            .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n            .style(SVG.style.left, px(clientX))\n            .style(SVG.style.top, px(clientY))\n        })\n        .on(MouseActions.mouseOut, () => {\n          tooltip.transition().duration(TOOLTIP.EASE_OUT).style(SVG.style.opacity, TOOLTIP.INVISIBLE)\n        })\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, classes.cell)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 3 * SPACING.HORIZONTAL)\n      .attr(SVG.attributes.y, 3 * SPACING.VERTICAL)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: { cell: MatrixPosition | null } = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        setDataSelected((data) => isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey]))))\n      }\n    }\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, (_: D3BrushEvent<SelectableDataType>, { rowIdx, colIdx, rowKey, colKey }: MatrixItem) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      })\n      .on(BrushAction.move, ({ selection }: D3BrushEvent<SelectableDataType>, matrixItem: MatrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n      })\n      .on(BrushAction.end, ({ selection }: D3BrushEvent<SelectableDataType>, matrixItem: MatrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n          setDataSelected((data) => (data.selected = false))\n        }\n      })\n      .extent([\n        [0, 0],\n        [rect.width, rect.height],\n      ])\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, [classes.cell, classes.duplicates].join(` `))\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    classes,\n    tooltipClass,\n    setDataSelected,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    dataPointSize,\n    color,\n  ])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrix(), [displayAttributes, categoryAttribute])\n  displayDetails(isDetailsVisible, tooltipClass)\n  displayDetails(isDetailsVisible, classes.duplicates)\n\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={height} className={classes.svg}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n        <div className={tooltipClass} />\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{SCATTER_PLOT_MATRIX_TEXT.unavailable}</div>\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important, px } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\ninterface StyleProps extends Dimensions {\n  margin: Margin\n}\n\nexport const useGlyphsStyle = makeStyles<Theme, StyleProps>(() => ({\n  svg: {\n    fontSize: px(12),\n    backgroundColor: PLOT_COLORS.backgroundColor,\n  },\n  glyph: {\n    opacity: 0.6,\n  },\n  selected: {\n    fill: important(`#830606`),\n    opacity: 0.9,\n  },\n  hidden: {\n    fillOpacity: 0.3,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Highlightable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/glyphs/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  px,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\n\nimport { SVG } from '../../../../constants/svg'\nimport { GLYPHS_DEFAULT_MARGIN, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { TOOLTIP } from '../../../../constants/views/tooltip'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { HTML } from '../../../../constants/html'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { useGlyphsStyle } from '../../../../components-style/content/views/glyphs/useGlyphsStyle'\nimport { useTooltipStyle } from '../../../../components-style/content/views/useTooltipStyle'\n\nconst GLYPH_SPACING = 3\n\nexport interface GlyphsProps extends VisualizationView, Highlightable, GlyphsSettings {\n  glyphSize?: number\n}\n\nconst GLYPHS = `glyphs`\n\nexport const Glyphs: FunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  sortAttribute,\n  colorCategory,\n  glyphSize = 40,\n  margins = GLYPHS_DEFAULT_MARGIN,\n  isDetailsVisible,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useGlyphsStyle({ width, height, margin })\n  const { tooltip: tooltipClass } = useTooltipStyle()\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + GLYPH_SPACING\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(classes.glyph))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const sortedDataset = sortAttribute\n      ? [...dataset].sort((a, b) => Number(a[sortAttribute]) - Number(b[sortAttribute]))\n      : [...dataset]\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform = (data: SelectableDataType) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath = (data: SelectableDataType) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const tooltip = select(getClass(tooltipClass))\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, classes.glyph)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n            tooltip.transition().duration(TOOLTIP.EASE_IN).style(SVG.style.opacity, TOOLTIP.VISIBLE)\n            tooltip\n              .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n              .style(SVG.style.left, px(clientX))\n              .style(SVG.style.top, px(clientY))\n          })\n          .on(MouseActions.mouseOut, () => {\n            tooltip.transition().duration(TOOLTIP.EASE_OUT).style(SVG.style.opacity, TOOLTIP.INVISIBLE)\n          })\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n  }, [\n    dataset,\n    classes,\n    tooltipClass,\n    innerWidth,\n    innerHeight,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    sortAttribute,\n    color,\n  ])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphs(), [displayAttributes, categoryAttribute, sortAttribute])\n  displayDetails(isDetailsVisible, tooltipClass)\n\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={innerHeight + margin.height} className={classes.svg}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n        <div className={tooltipClass} />\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{GLYPHS_TEXT.unavailable2}</div>\n}\n","import { FunctionComponent } from 'react'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { ParallelCoordinatesSettings } from '../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../../types/views/scatter-plot/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../../types/views/glyphs/GlyphsSettings'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { useViewStyle } from '../../../components-style/content/views/useViewStyle'\n\nimport { Settings, SettingsType } from './Settings'\nimport { ParallelCoordinates } from './parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from './scatter-plot/ScatterPlotMatrix'\nimport { Glyphs } from './glyphs/Glyphs'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  component: ViewType\n  settings: Settings\n  defaultColors: ReadonlyArray<string>\n  defaultDisplayAttributes: Array<keyof SelectableDataType>\n}\n\ntype ViewElementFunction = (props: Brushable & VisualizationView, settings: SettingsType) => JSX.Element\n\nconst options: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n}\n\nexport const View: FunctionComponent<ViewProps> = ({\n  width,\n  height,\n  component,\n  settings,\n  defaultDisplayAttributes,\n  defaultColors,\n  ...dataProps\n}) => {\n  const graph = options[component]\n  const classes = useViewStyle({ width, height })\n  const settingsCurr = settings[component] || {\n    displayAttributes: defaultDisplayAttributes,\n    colorCategory: defaultColors,\n    categoryAttribute: undefined,\n  }\n  return <div className={classes.box}>{graph({ width, height, ...dataProps }, settingsCurr)}</div>\n}\n","import { FunctionComponent, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\n\nimport { getDefaultQuantitativeAttributesKeys } from '../../../helpers/data/data'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { useViewGridStyle } from '../../../components-style/content/views/useViewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\n\nimport { View } from './View'\nimport { Settings } from './Settings'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType> | null\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  dataLoadState: DataLoadState\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const ViewGrid: FunctionComponent<ViewGridProps> = ({\n  dataset,\n  dataLoadState,\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  ...viewProps\n}) => {\n  const classes = useViewGridStyle()\n  const [settings, setSettings] = useState<Settings>({})\n  const [defaultDisplayAttributes, setDefaultDisplayAttributes] = useState<Array<keyof SelectableDataType> | null>(null)\n\n  // reset if dataset is removed\n  if (!dataset && defaultDisplayAttributes) {\n    setSettings({})\n    setDefaultDisplayAttributes(null)\n  }\n  if (dataset && !defaultDisplayAttributes) {\n    setDefaultDisplayAttributes(getDefaultQuantitativeAttributesKeys(dataset))\n  }\n\n  const getContent = (\n    dataset: ReadonlyArray<SelectableDataType>,\n    defaultDisplayAttributes: Array<keyof SelectableDataType>,\n  ) => {\n    const defaultColors = schemeCategory10\n    const allViewProps = {\n      ...viewProps,\n      settings,\n      dataset,\n      defaultDisplayAttributes,\n      defaultColors,\n    }\n    const views = [ViewType.ParallelCoordinates, ViewType.ScatterPlotMatrix, ViewType.Glyphs]\n    return (\n      <>\n        <DataDrawer\n          isOpen={isDrawerOpen}\n          close={closeDrawer}\n          dataset={dataset}\n          views={views}\n          settings={settings}\n          setSettings={setSettings}\n          cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        />\n        <div className={classes.column}>\n          <View width={960} height={400} component={ViewType.ParallelCoordinates} {...allViewProps} />\n          <View width={960} height={960} component={ViewType.ScatterPlotMatrix} {...allViewProps} />\n          <View width={960} height={620} component={ViewType.Glyphs} {...allViewProps} />\n        </div>\n      </>\n    )\n  }\n  if (dataLoadState === DataLoadState.NoData) {\n    return <EmptyData />\n  }\n  if (dataLoadState === DataLoadState.Loading || (dataset && !defaultDisplayAttributes)) {\n    return <Loading />\n  }\n  return getContent(dataset!, defaultDisplayAttributes!)\n}\n","import { FunctionComponent, useState } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../views/ViewGrid'\n\nexport const DataContext: FunctionComponent = () => {\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [redrawTime, setRedrawTime] = useState(Date.now())\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = (data: ReadonlyArray<SelectableDataType> | null) => {\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }\n\n  const setDataSelected = (setFunction: (data: SelectableDataType) => boolean): void => {\n    if (dataset) {\n      dataset.forEach((data) => {\n        data.selected = setFunction(data)\n      })\n      setRedrawTime(Date.now()) // redraw component\n    }\n  }\n\n  const cleanAllBrushes = () => {\n    setDataSelected((data) => (data.selected = false))\n    cleanBrushingRef.current.forEach((f) => f())\n  }\n\n  const clearBrushesOnButton = () => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }\n\n  const setComponentBrushing: SetComponentBrushing = (newComponent) => {\n    if (componentBrushingRef.current !== newComponent) cleanAllBrushes()\n    setCurrentComponentBrushing(newComponent)\n  }\n\n  const registerCleanBrushing = (cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }\n\n  const cleanSelectedIfViewWasBrushing = (component: ViewType) => {\n    if (componentBrushingRef.current === component) cleanAllBrushes()\n    setCurrentComponentBrushing(null)\n  }\n\n  const isBrushingActive = componentBrushingRef.current !== null\n\n  const viewProps = {\n    dataset,\n    registerCleanBrushing,\n    setComponentBrushing,\n    setDataSelected,\n    redrawTime,\n    isBrushingActive,\n  }\n\n  return (\n    <>\n      <TopToolbar\n        setDataset={setDatasetAndRemoveBrushing}\n        openDrawerDisabled={dataset === null}\n        openDrawer={() => setDrawerOpen(true)}\n        setDataLoadState={setDataLoadState}\n        isDetailsVisible={isDetailsVisible}\n        setIsDetailsVisible={setIsDetailsVisible}\n        isBrushingActive={isBrushingActive}\n        clearBrushes={clearBrushesOnButton}\n      />\n      <ViewGrid\n        dataLoadState={dataLoadState}\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={() => setDrawerOpen(false)}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        {...viewProps}\n      />\n    </>\n  )\n}\n","import { makeStyles } from '@mui/styles'\n\nexport const useAppStyle = makeStyles({\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { useAppStyle } from './useAppStyle'\n\nexport const App: FunctionComponent = () => {\n  const style = useAppStyle()\n  return (\n    <div className={style.app}>\n      <Header />\n      <div className={style.content}>\n        <DataContext />\n      </div>\n      <Footer />\n    </div>\n  )\n}\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}