{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/text/HeaderText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/useHeaderStyle.ts","app/components/header/Header.tsx","app/text/FooterText.ts","app/components-style/footer/useFooterStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/constants/data/sampleDataset.tsx","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/text/SiteText.ts","app/components-style/content/top-toolbar/useTopToolbar.ts","app/components-style/content/top-toolbar/items/buttons/useButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/components-style/content/top-toolbar/items/file-reader/useFileReaderStyle.ts","app/components-style/content/top-toolbar/items/dialogs/useDialogStyle.ts","app/components/content/top-toolbar/items/dialogs/SelectionDialog.tsx","app/components/content/top-toolbar/items/dialogs/InformationDialog.tsx","app/constants/views/ViewTypes.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/useOpenSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components/content/top-toolbar/TopToolbar.tsx","app/components-style/content/views/useViewGridStyle.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseActions.ts","app/components-style/content/data-drawer/useDataDrawerStyle.ts","app/helpers/data/data.ts","app/constants/data/data.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/common.ts","app/text/views-and-menus/glyphs.ts","app/components-style/content/data-drawer/useDataDrawerMenuStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/SortSelector.tsx","app/components-style/content/data-drawer/items/useNumberInputStyles.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components/content/data-drawer/items/OpacityInput.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/glyphs/GlyphsSettings.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/parallel-coordinates/ParallelCoordinatesSettings.tsx","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot/ScatterPlotMatrixMenu.tsx","app/types/views/scatter-plot/ScatterPlotMatrixSettings.tsx","app/components/content/data-drawer/DataDrawer.tsx","app/components-style/content/views/useViewStyle.ts","app/types/styling/Margin.ts","app/helpers/d3/extent.ts","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/helpers/d3/attributeGetters.ts","app/constants/views/tooltip.ts","app/constants/html.ts","app/components-style/content/views/parallel-coordinates/useParallelCoordinatesStyle.ts","app/components-style/content/views/useTooltipStyle.ts","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/basic/range.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot/useScatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/useGlyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components/content/views/View.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/useEmptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/useLoadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/useAppStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","DataLoadError","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","data","Object","keys","filter","key","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","useHeaderStyle","makeStyles","headerContainer","background","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","style","FOOTER_TEXT","useFooterStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","SampleDataset","flower","bird","car","AcceptableFileTypes","sampleDatasetIcons","LocalFlorist","Air","DirectionsCar","sampleDatasets","flowerJson","birdJson","carJson","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","labelDetailsVisible","labelClearBrushes","labelBrushingOnEOM","fileReader","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFileFormat","useTopToolbar","toolbar","left","margin","separator","height","borderLeft","right","useButtonStyle","button","minWidth","ClickableButton","icon","onClick","disabled","label","classes","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","every","idx","CsvParse","textCsv","parse","output","fromEntries","toLowerCase","numValue","Number","isNaN","useFileReaderStyle","input","box","transition","highlight","borderRadius","useDialogStyle","list","pt","alert","SelectionDialog","isOpen","onClose","options","handleListItemClick","Dialog","open","DialogTitle","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","addSelected","d","selected","ViewType","FileReader","setDataset","setDataLoadState","isHighlighted","useState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionsKeys","optionKey","Loaded","confirm","clsx","AutoGraph","type","onChange","e","a","target","files","Loading","selectedFile","fileType","json","csv","JSON","NoData","ToggleButtonSingle","setValue","onValue","ToggleButtonGroup","event","checked","ToggleButton","useOpenSettingsButtonStyle","settings","OpenSettingsButton","IconButton","size","Settings","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","Info","SkipNext","AutoFixOff","BrushAction","MouseActions","useViewGridStyle","column","row","useDataDrawerStyle","drawer","flexShrink","header","chevron","menu","flexGrow","getAttributeKeys","getDatasetSample","getPossibleQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","getDefaultAttributesChecked","defaultQuantitativeAttributesKeys","getDefaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","GLYPHS_DEFAULT","glyphSize","glyphSpacing","margins","opacity","MENU_TEXT","attributes","category","more","empty","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","useDataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","minHeight","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","FormControlLabel","control","Checkbox","eventChecked","newChecked","prev","prevSettings","newSettings","handleCheckboxChange","CategorySelector","TextField","categoryAttribute","undefined","select","MenuItem","SortSelector","sortAttribute","useNumberInputStyles","vertical","horizontal","textField","MarginInput","handleMarginChange","newMargin","newMargins","Typography","defaultValue","inputProps","inputMode","min","NumberInput","valueKey","max","maxVal","newValue","OpacityInput","handleOpacityChange","newOpacity","newOpacities","GlyphsMenu","glyphSettings","Glyphs","useEffect","sortableAttributes","defaultSortAttribute","categoricalAttributes","defaultCategoryAttribute","createGlyphsMenu","useCallback","newGlyphs","displayAttributes","colorCategory","schemeCategory10","currChecked","newSortableAttributes","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","PARALLEL_COORDINATES_DEFAULT","lineWidth","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","ParallelCoordinates","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","ScatterPlotMatrix","createScatterPlotMatrixMenu","newScatterPlotMatrix","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","Divider","useViewStyle","overflowX","overflowY","Margin","top","bottom","toString","this","getExtentInDomains","domains","calculatedExtent","extent","Error","SVG","svg","g","circle","rect","path","div","class","transform","x","y","cx","cy","r","strokeWidth","fill","stroke","none","block","displayDetails","tooltipClass","selectAll","getCategoryColor","TOOLTIP","TOP","BOTTOM","LR","HTML","useParallelCoordinatesStyle","line","hidden","strokeOpacity","notDisplayed","textAnchor","fontWeight","useTooltipStyle","tooltip","position","pointerEvents","PARALLEL_COORDINATES","setDataSelected","registerCleanBrushing","setComponentBrushing","useMemo","component","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","node","remove","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","brush","brushY","BRUSH_WIDTH","on","start","move","brushEvent","axisName","selection","end","forEach","enter","append","attr","mouseOver","clientX","clientY","duration","html","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerExtent","spacing","getCellInnerSize","getCellTranslateInMatrix","maxIdx","useScatterPlotMatrixStyle","shapeRendering","axisLine","axisPath","cell","dataPoint","fillOpacity","duplicates","DATA_POINT","SPACING","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","index","plotMatrixItem","matrixItem","brushing","clearBrush","ranges","isInRanges","makeBrush","_","brushSelection","useGlyphsStyle","glyph","GLYPHS","glyphSizeWithSpacing","glyphsCountPerLine","Math","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","sortedDataset","sort","b","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","s","View","dataProps","graph","settingsCurr","ViewGrid","isDrawerOpen","closeDrawer","viewProps","dimensions","useEmptyDataStyle","site","paddingTop","EmptyData","useLoadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","redrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setFunction","cleanAllBrushes","f","newComponent","newIsBrushingOnEndOfMove","useAppStyle","app","content","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ad8610d.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFileFormat = `unsupportedFileFormat`,\n}\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","const withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim()\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute))\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonOffBackground: `#363b46`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  noCategoryColor: `#1db0b0`,\n  backgroundColor: `rgba(250, 250, 250, 0.9)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  dataBox: `#aaaaaa`,\n  brushColor: `#830606`,\n}\n\nexport const EMPTY_SITE_COLORS = {\n  font: `#198286`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n","import { calc } from '../helpers/d3/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const useHeaderStyle = makeStyles({\n  headerContainer: {\n    background: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { HEADER_TEXT } from '../../text/HeaderText'\n\nimport { useHeaderStyle } from '../../components-style/header/useHeaderStyle'\n\nexport const Header: FunctionComponent = () => {\n  const style = useHeaderStyle()\n  return (\n    <header className={style.headerContainer}>\n      <div className={style.title}>{HEADER_TEXT.title}</div>\n      <div className={style.description}>{HEADER_TEXT.description}</div>\n    </header>\n  )\n}\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const useFooterStyle = makeStyles({\n  footerContainer: {\n    background: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { FOOTER_TEXT } from '../../text/FooterText'\n\nimport { useFooterStyle } from '../../components-style/footer/useFooterStyle'\n\nexport const Footer: FunctionComponent = () => {\n  const style = useFooterStyle()\n  return (\n    <header className={style.footerContainer}>\n      <div className={style.text}>{FOOTER_TEXT.author},</div>\n      <div className={style.text}>\n        &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n      </div>\n    </header>\n  )\n}\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { Air, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flower = `flower`,\n  bird = `bird`,\n  car = `car`,\n}\n\nexport const sampleDatasetFiles: Record<SampleDataset, string> = {\n  [SampleDataset.flower]: `flowerData.json`,\n  [SampleDataset.bird]: `birdData.json`,\n  [SampleDataset.car]: `carData.json`,\n}\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flower]: <LocalFlorist />,\n  [SampleDataset.bird]: <Air />,\n  [SampleDataset.car]: <DirectionsCar />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flower]: flowerJson,\n  [SampleDataset.bird]: birdJson,\n  [SampleDataset.car]: carJson,\n}\n","import { Dispatch, FunctionComponent, SetStateAction, useState } from 'react'\nimport { AutoGraph } from '@mui/icons-material'\nimport clsx from 'clsx'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadError, DataLoadState } from '../../../../../constants/data/dataLoadState'\nimport { SampleDataset, sampleDatasetIcons, sampleDatasets } from '../../../../../constants/data/sampleDataset'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../../../text/SiteText'\n\nimport { useFileReaderStyle } from '../../../../../components-style/content/top-toolbar/items/file-reader/useFileReaderStyle'\n\nimport { ClickableButton } from '../buttons/ClickableButton'\nimport { SelectionDialog } from '../dialogs/SelectionDialog'\nimport { InformationDialog } from '../dialogs/InformationDialog'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: ReadonlyArray<DataType>): ReadonlyArray<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nexport const FileReader: FunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const classes = useFileReaderStyle()\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const text = TOP_TOOLBAR_TEXT.fileReader\n  const optionsKeys = Object.values(SampleDataset)\n  const handleListItemClick = (optionKey: SampleDataset) => {\n    setIsSampleDataDialogOpen(false)\n    const dataset = sampleDatasets[optionKey]\n    setDataset(addSelected(dataset))\n    setDataLoadState(DataLoadState.Loaded)\n  }\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={text.sampleDataDialogTitle}\n        options={optionsKeys.map((key) => ({\n          key,\n          label: text.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={text.alertDialog.confirm}\n        alert={true}\n      />\n      <div className={clsx(isHighlighted && classes.highlight, classes.box)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={text.sampleDataLabel}\n        />\n        <input\n          className={classes.input}\n          type=\"file\"\n          onChange={async (e) => {\n            if (e.target.files?.length) {\n              setDataLoadState(DataLoadState.Loading)\n              const selectedFile = e.target.files[0]\n              const fileType = selectedFile.type\n              let dataset: DataType[] = []\n\n              switch (fileType) {\n                case AcceptableFileTypes.json: {\n                  const text = await selectedFile.text()\n                  dataset = JSON.parse(text)\n                  break\n                }\n                case AcceptableFileTypes.csv: {\n                  const textCsv = await selectedFile.text()\n                  dataset = CsvParse(textCsv)\n                  break\n                }\n                default: {\n                  setDataLoadState(DataLoadState.NoData)\n                  setAlertDialogText(text.alertDialog[DataLoadError.unsupportedFile])\n                  setIsAlertDialogOpen(true)\n                  return\n                }\n              }\n              if (!isArrayOfDataType(dataset)) {\n                setDataLoadState(DataLoadState.NoData)\n                setAlertDialogText(text.alertDialog[DataLoadError.unsupportedFileFormat])\n                setIsAlertDialogOpen(true)\n                return\n              }\n              setDataset(addSelected(dataset))\n              setDataLoadState(DataLoadState.Loaded)\n            }\n          }}\n        />\n      </div>\n    </>\n  )\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataLoadError } from '../constants/data/dataLoadState'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  fileReader: {\n    sampleDataLabel: `Try it on the sample data`,\n    sampleDataDialogTitle: `Select sample dataset`,\n    sampleDataDialogText: {\n      [SampleDataset.flower]: `Flower dataset`,\n      [SampleDataset.bird]: `Bird dataset`,\n      [SampleDataset.car]: `Car dataset`,\n    },\n    alertDialog: {\n      [DataLoadError.unsupportedFile]: {\n        title: `File type not supported`,\n        description: `This file type is not supported. Use JSON or CSV file.`,\n      },\n      [DataLoadError.unsupportedFileFormat]: {\n        title: `File format not supported`,\n        description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n      },\n      confirm: `OK`,\n    },\n  },\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\nimport { border, px } from '../../../helpers/d3/stringGetters'\n\nexport const useTopToolbar = makeStyles({\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    background: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  right: {\n    display: `flex`,\n  },\n})\n","import { makeStyles } from '@mui/styles'\n\nimport { important, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const useButtonStyle = makeStyles({\n  button: {\n    margin: important(px(0, 5)),\n    padding: important(px(4)),\n    minWidth: important(0),\n    '&.MuiButtonBase-root': {\n      background: important(BUTTON_COLORS.buttonOffBackground),\n    },\n    '&.Mui-selected:not(.Mui-disabled)': {\n      background: important(BUTTON_COLORS.buttonOnBackground),\n    },\n    '&.MuiButton-contained:not(.Mui-disabled)': {\n      background: important(BUTTON_COLORS.buttonOnBackground),\n      color: BUTTON_COLORS.fontOn,\n    },\n  },\n})\n","import { FunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { useButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/useButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: FunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => {\n  const classes = useButtonStyle()\n  return (\n    <Button variant=\"contained\" onClick={onClick} className={classes.button} disabled={disabled} aria-label={label}>\n      <Tooltip title={label}>{icon}</Tooltip>\n    </Button>\n  )\n}\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { makeStyles } from '@mui/styles'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const useFileReaderStyle = makeStyles({\n  input: {\n    width: px(220),\n  },\n  box: {\n    transition: `0.15s all ease`,\n    background: HIGHLIGHT_COLOR.backgroundGone,\n  },\n  highlight: {\n    border: border(2, HIGHLIGHT_COLOR.border),\n    background: HIGHLIGHT_COLOR.background,\n    padding: px(10, 0),\n    borderRadius: 10,\n  },\n})\n","import { makeStyles } from '@mui/styles'\nimport { ERROR_COLORS } from '../../../../../styles/colors'\nimport { important } from '../../../../../helpers/d3/stringGetters'\n\nexport const useDialogStyle = makeStyles({\n  list: {\n    pt: 0,\n  },\n  alert: {\n    color: important(ERROR_COLORS.font),\n  },\n})\n","import { Avatar, Dialog, DialogTitle, List, ListItem, ListItemAvatar, ListItemText } from '@mui/material'\n\nimport { useDialogStyle } from '../../../../../components-style/content/top-toolbar/items/dialogs/useDialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n}: SelectionDialogProps<T>): JSX.Element => {\n  const classes = useDialogStyle()\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{title}</DialogTitle>\n      <List className={classes.list}>\n        {options.map((option) => (\n          <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n            <ListItemAvatar>\n              <Avatar>{option.icon}</Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={option.label} />\n          </ListItem>\n        ))}\n      </List>\n    </Dialog>\n  )\n}\n","import { FunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material'\nimport { useDialogStyle } from '../../../../../components-style/content/top-toolbar/items/dialogs/useDialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: FunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => {\n  const classes = useDialogStyle()\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText className={alert ? classes.alert : ``}>{description}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} autoFocus>\n          {confirmText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n}\n","import { Dispatch, FunctionComponent, MouseEvent, SetStateAction } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { useButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/useButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\n\nexport const ToggleButtonSingle: FunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const classes = useButtonStyle()\n  const handleChange = (event: MouseEvent<HTMLElement>, checked: string[]) => {\n    if (checked.length && checked[0] === onValue) {\n      return setValue(true)\n    }\n    return setValue(false)\n  }\n  const onValue = `on`\n  return (\n    <ToggleButtonGroup value={value ? [onValue] : []} onChange={handleChange}>\n      <ToggleButton className={classes.button} value={onValue} aria-label={label} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { makeStyles } from '@mui/styles'\nimport { important } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const useOpenSettingsButtonStyle = makeStyles({\n  settings: {\n    color: important(BUTTON_COLORS.buttonOnBackground),\n  },\n})\n","import { FunctionComponent } from 'react'\nimport { Settings } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\nimport clsx from 'clsx'\n\nimport { useOpenSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/useOpenSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: FunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => {\n  const classes = useOpenSettingsButtonStyle()\n  return (\n    <IconButton size=\"small\" disabled={disabled} onClick={open} className={clsx(!disabled && classes.settings)}>\n      <Settings />\n    </IconButton>\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { AutoFixOff, SkipNext } from '@mui/icons-material'\nimport { Info } from '@mui/icons-material'\n\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { useTopToolbar } from '../../../components-style/content/top-toolbar/useTopToolbar'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n}\n\nexport const TopToolbar: FunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n}) => {\n  const classes = useTopToolbar()\n  return (\n    <div className={classes.toolbar}>\n      <div className={classes.left}>\n        <ToggleButtonSingle\n          icon={<Info />}\n          value={isDetailsVisible}\n          setValue={setIsDetailsVisible}\n          disabled={isToolsDisabled}\n          label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n        />\n        <ToggleButtonSingle\n          icon={<SkipNext />}\n          value={isBrushingOnEndOfMove}\n          setValue={setIsBrushingOnEndOfMove}\n          disabled={isToolsDisabled}\n          label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n        />\n        <div className={classes.separator} />\n        <ClickableButton\n          icon={<AutoFixOff />}\n          onClick={clearBrushes}\n          disabled={!isBrushingActive}\n          label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n        />\n      </div>\n      <div className={classes.right}>\n        <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n        <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n      </div>\n    </div>\n  )\n}\n","import { makeStyles } from '@mui/styles'\n\nexport const useViewGridStyle = makeStyles({\n  column: {\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n    justifyContent: `center`,\n  },\n  row: {\n    display: `flex`,\n  },\n})\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseActions {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const useDataDrawerStyle = makeStyles({\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      background: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n})\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getPossibleQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getPossibleQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n","export const CATEGORY_LIMIT = 10\n","import { GlyphsSettings } from '../../types/views/glyphs/GlyphsSettings'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<GlyphsSettings, `glyphSize` | `glyphSpacing` | `margins` | `opacity`> = {\n  glyphSize: 40,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n}\n","export const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n","import { MENU_TEXT } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable2: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select multiple attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: `Glyphs`,\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { calc, border, px, important } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const useDataDrawerMenuStyle = makeStyles({\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    background: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: 10,\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: important(0),\n      background: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: important(px(2, 0, 5)),\n    },\n  },\n})\n","import { Dispatch, SetStateAction } from 'react'\nimport { Checkbox, FormControlLabel } from '@mui/material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings, SettingsType } from '../../views/Settings'\n\nexport interface AttributeCheckerProps<T extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: T) => Partial<T>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n}\n\nexport const AttributeChecker = <T extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n}: AttributeCheckerProps<T>): JSX.Element => {\n  const handleCheckboxChange = (eventChecked: boolean, key: keyof SelectableDataType) => {\n    const newChecked = { ...checked, [key]: eventChecked }\n    setChecked(newChecked)\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]! as T\n      const newSettings = getNewSettings(newChecked, prevSettings)\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          ...newSettings,\n        },\n      }\n    })\n  }\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={<Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />}\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: FunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = (categoryAttribute: keyof SelectableDataType | -1) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n        },\n      }\n    })\n  }\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface SortSelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const SortSelector: FunctionComponent<SortSelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectSortChange = (sortAttribute: keyof SelectableDataType) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          sortAttribute,\n        },\n      }\n    })\n  }\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectSortChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`sort-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { makeStyles } from '@mui/styles'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const useNumberInputStyles = makeStyles({\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  text: {\n    fontSize: important(px(DATA_DRAWER_FONT.fontSize)),\n    padding: px(6, 5, 3),\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n})\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { useNumberInputStyles } from '../../../../components-style/content/data-drawer/items/useNumberInputStyles'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const MarginInput: FunctionComponent<MarginInputProps> = ({ margins, setSettings, viewType }) => {\n  const classes = useNumberInputStyles()\n  const handleMarginChange = (newMargin: number, idx: number) => {\n    const newMargins = [...margins]\n    newMargins[idx] = newMargin\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: newMargins,\n        },\n      }\n    })\n  }\n  return (\n    <div className={classes.vertical}>\n      <Typography className={classes.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <div className={classes.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type=\"number\"\n          defaultValue={margins[0]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type=\"number\"\n          defaultValue={margins[1]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </div>\n      <div className={classes.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type=\"number\"\n          defaultValue={margins[2]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type=\"number\"\n          defaultValue={margins[3]}\n          className={classes.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </div>\n    </div>\n  )\n}\n","import { Dispatch, SetStateAction } from 'react'\nimport { TextField } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { useNumberInputStyles } from '../../../../components-style/content/data-drawer/items/useNumberInputStyles'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface NumberInputProps<T> {\n  label: string\n  valueKey: keyof T\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  max?: number\n}\n\nexport const NumberInput = <T,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  max,\n}: NumberInputProps<T>): JSX.Element => {\n  const classes = useNumberInputStyles()\n  const handleValueChange = (newValue: number) => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: newValue,\n        },\n      }\n    })\n  }\n  const maxVal = max ? { max } : {}\n  return (\n    <TextField\n      label={label}\n      type=\"number\"\n      defaultValue={value}\n      className={classes.textField}\n      inputProps={{ inputMode: `numeric`, min: 0, ...maxVal }}\n      onChange={(e) => handleValueChange(Number(e.target.value))}\n    />\n  )\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { useNumberInputStyles } from '../../../../components-style/content/data-drawer/items/useNumberInputStyles'\n\nimport { Settings } from '../../views/Settings'\n\nexport interface OpacityInputProps {\n  header: string\n  opacity: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: FunctionComponent<OpacityInputProps> = ({ header, opacity, setSettings, viewType }) => {\n  const classes = useNumberInputStyles()\n  const handleOpacityChange = (newOpacity: number, idx: number) => {\n    const newOpacities = [...opacity]\n    newOpacities[idx] = newOpacity\n\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: newOpacities,\n        },\n      }\n    })\n  }\n  return (\n    <div className={classes.vertical}>\n      <Typography className={classes.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type=\"number\"\n        defaultValue={opacity[0]}\n        className={classes.textField}\n        inputProps={{ min: 0, max: 100 }}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <div className={classes.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type=\"number\"\n          defaultValue={opacity[1]}\n          className={classes.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type=\"number\"\n          defaultValue={opacity[2]}\n          className={classes.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </div>\n    </div>\n  )\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\nimport { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { glyphSizeKey, glyphSpacingKey, GlyphsSettings } from '../../../../types/views/glyphs/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getPossibleQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { SortSelector } from '../../data-drawer/items/SortSelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\n\nexport const GlyphsMenu: FunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const classes = useDataDrawerMenuStyle()\n  const glyphSettings = settings[ViewType.Glyphs]\n  const possibleQuantitativeAttributesKeys = getPossibleQuantitativeAttributesKeys(dataset)\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  useEffect(() => {\n    setChecked(getDefaultAttributesChecked(dataset))\n  }, [dataset])\n\n  const sortableAttributes = possibleQuantitativeAttributesKeys.filter((key) => checked[key])\n  const defaultSortAttribute = sortableAttributes?.[0]\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n  const defaultCategoryAttribute = categoricalAttributes?.[0]\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    possibleQuantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  const createGlyphsMenu = useCallback(() => {\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: possibleQuantitativeAttributesKeys.filter((key) => checked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        colorCategory: schemeCategory10,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [checked, possibleQuantitativeAttributesKeys, defaultSortAttribute, defaultCategoryAttribute, setSettings])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [checked]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = (\n    newChecked: CheckedForSelectableDataType,\n    prevSettings: GlyphsSettings,\n  ): Partial<GlyphsSettings> => {\n    const displayAttributes = getCurrentDisplayAttributes(newChecked)\n    const newSortableAttributes = possibleQuantitativeAttributesKeys.filter((key) => newChecked[key])\n    const sortAttribute = newChecked[prevSettings.sortAttribute]\n      ? prevSettings.sortAttribute\n      : newSortableAttributes?.[0]\n    return { displayAttributes, sortAttribute }\n  }\n\n  if (glyphSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {possibleQuantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={ViewType.Glyphs}\n              attributesKeys={possibleQuantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n            />\n            <CategorySelector\n              viewType={ViewType.Glyphs}\n              value={glyphSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <SortSelector\n              viewType={ViewType.Glyphs}\n              value={glyphSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphSettings.margins} setSettings={setSettings} viewType={ViewType.Glyphs} />\n                <hr />\n                <NumberInput\n                  value={glyphSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={ViewType.Glyphs}\n                />\n                <NumberInput\n                  value={glyphSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={ViewType.Glyphs}\n                />\n                <hr />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacity={glyphSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={ViewType.Glyphs}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  sortAttribute: keyof SelectableDataType\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { ParallelCoordinatesSettings } from '../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<ParallelCoordinatesSettings, `margins` | `lineWidth` | `opacity`> = {\n  margins: [20, 40, 25, 56],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n}\n","import { MENU_TEXT } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: `Parallel Coordinates`,\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\nimport { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  lineWidthKey,\n  ParallelCoordinatesSettings,\n} from '../../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { BrushableMenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getPossibleQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\n\nexport const ParallelCoordinatesMenu: FunctionComponent<BrushableMenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerMenuStyle()\n  const parallelCoordinatesSettings = settings[ViewType.ParallelCoordinates]\n\n  const possibleQuantitativeAttributesKeys = getPossibleQuantitativeAttributesKeys(dataset)\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  useEffect(() => {\n    setChecked(getDefaultAttributesChecked(dataset))\n  }, [dataset])\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n  const defaultCategoryAttribute = categoricalAttributes?.[0]\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    possibleQuantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: possibleQuantitativeAttributesKeys.filter((key) => checked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        colorCategory: schemeCategory10,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [checked, possibleQuantitativeAttributesKeys, defaultCategoryAttribute, setSettings])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [checked])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {possibleQuantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={ViewType.ParallelCoordinates}\n              attributesKeys={possibleQuantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(ViewType.ParallelCoordinates)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n            />\n            <CategorySelector\n              viewType={ViewType.ParallelCoordinates}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={ViewType.ParallelCoordinates}\n                />\n                <hr />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={ViewType.ParallelCoordinates}\n                />\n                <hr />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacity={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={ViewType.ParallelCoordinates}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { ScatterPlotMatrixSettings } from '../../types/views/scatter-plot/ScatterPlotMatrixSettings'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<ScatterPlotMatrixSettings, `margins` | `pointSize` | `opacity`> = {\n  margins: [25, 20, 25, 45],\n  pointSize: 4,\n  opacity: [70, 80, 15],\n}\n","import { MENU_TEXT } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: `Scatter Plot Matrix`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  ...MENU_TEXT,\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { schemeCategory10 } from 'd3'\nimport { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { BrushableMenuProps } from '../../../../types/views/MenuProps'\nimport { pointSizeKey, ScatterPlotMatrixSettings } from '../../../../types/views/scatter-plot/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultAttributesChecked,\n  getPossibleQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { useDataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/useDataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\n\nexport const ScatterPlotMatrixMenu: FunctionComponent<BrushableMenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerMenuStyle()\n  const scatterPlotMatrixSettings = settings[ViewType.ScatterPlotMatrix]\n\n  const possibleQuantitativeAttributesKeys = getPossibleQuantitativeAttributesKeys(dataset)\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAttributesChecked(dataset))\n\n  useEffect(() => {\n    setChecked(getDefaultAttributesChecked(dataset))\n  }, [dataset])\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n  const defaultCategoryAttribute = categoricalAttributes?.[0]\n\n  const getCurrentDisplayAttributes = (currChecked: CheckedForSelectableDataType) =>\n    possibleQuantitativeAttributesKeys.filter((key) => currChecked[key])\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: possibleQuantitativeAttributesKeys.filter((key) => checked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        colorCategory: schemeCategory10,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [checked, possibleQuantitativeAttributesKeys, defaultCategoryAttribute, setSettings])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [checked])\n\n  const getNewSettingsForAttributeChecker = (newChecked: CheckedForSelectableDataType) => ({\n    displayAttributes: getCurrentDisplayAttributes(newChecked),\n  })\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <div className={classes.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {possibleQuantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={ViewType.ScatterPlotMatrix}\n              attributesKeys={possibleQuantitativeAttributesKeys}\n              handleChangeSettings={() => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotMatrix)}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n            />\n            <CategorySelector\n              viewType={ViewType.ScatterPlotMatrix}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion className={classes.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={ViewType.ScatterPlotMatrix}\n                />\n                <hr />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={ViewType.ScatterPlotMatrix}\n                />\n                <hr />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacity={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={ViewType.ScatterPlotMatrix}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <div className={classes.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</div>\n        )}\n      </div>\n    )\n  }\n  return null\n}\n","import { QuantitativeVisualizationSettings } from '../QuantitativeVisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends QuantitativeVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\nimport { Divider, Drawer, IconButton } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { useDataDrawerStyle } from '../../../components-style/content/data-drawer/useDataDrawerStyle'\n\nimport { Settings } from '../views/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot/ScatterPlotMatrixMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: FunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const classes = useDataDrawerStyle()\n  const menus = views.map((view, idx) => {\n    switch (view) {\n      case ViewType.Glyphs:\n        return <GlyphsMenu dataset={dataset} settings={settings!} setSettings={setSettings} key={idx} />\n      case ViewType.ParallelCoordinates:\n        return (\n          <ParallelCoordinatesMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      case ViewType.ScatterPlotMatrix:\n        return (\n          <ScatterPlotMatrixMenu\n            dataset={dataset}\n            settings={settings!}\n            setSettings={setSettings}\n            cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n            key={idx}\n          />\n        )\n      default:\n        return null\n    }\n  })\n  if (settings === null) {\n    setSettings({})\n    return null\n  }\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} className={classes.drawer}>\n      <div className={classes.header}>\n        <IconButton onClick={close}>\n          <ChevronRight className={classes.chevron} />\n        </IconButton>\n      </div>\n      <Divider />\n      <div className={classes.menu}>{menus.map((menu) => menu)}</div>\n    </Drawer>\n  )\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Dimensions } from '../../../types/basic/dimensions'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nconst BORDER_SIZE = 5\n\nexport const useViewStyle = makeStyles<Theme, Dimensions>(() => ({\n  box: {\n    width: ({ width }) => width,\n    height: ({ height }) => height + BORDER_SIZE,\n    overflowX: `hidden`,\n    overflowY: `auto`,\n    margin: px(5, 0),\n  },\n}))\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    opacity: `opacity`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n    strokeWidth: `stroke-width`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    opacity: `opacity`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    strokeWidth: `stroke-width`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","import { ScaleOrdinal } from 'd3'\n\nimport { PLOT_COLORS } from '../../styles/colors'\nimport { SelectableDataType } from '../../types/data/data'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : PLOT_COLORS.noCategoryColor\n","export const TOOLTIP = {\n  VISIBLE: 1,\n  INVISIBLE: 0,\n  EASE_IN: 200,\n  EASE_OUT: 500,\n  PADDING: {\n    TOP: 5,\n    BOTTOM: 10,\n    LR: 5,\n  },\n}\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport interface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useParallelCoordinatesStyle = makeStyles<Theme, StyleProps>(() => ({\n  svg: {\n    background: PLOT_COLORS.backgroundColor,\n  },\n  line: {\n    fill: `none`,\n    opacity: ({ opacity }) => opacity[0] / 100,\n  },\n  selected: {\n    stroke: important(PLOT_COLORS.brushColor),\n    opacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    strokeOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n  text: {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n}))\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\n\nimport { TOOLTIP } from '../../../constants/views/tooltip'\n\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const useTooltipStyle = makeStyles({\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.PADDING.TOP, TOOLTIP.PADDING.LR, TOOLTIP.PADDING.BOTTOM),\n    background: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n  },\n})\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisLeft, brushY, D3BrushEvent, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataEachG } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { useParallelCoordinatesStyle } from '../../../../components-style/content/views/parallel-coordinates/useParallelCoordinatesStyle'\nimport { useTooltipStyle } from '../../../../components-style/content/views/useTooltipStyle'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\nconst TEXT_Y_SHIFT = 10\n\nconst PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\nconst AXES = `AXES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: FunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  setDataSelected,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useParallelCoordinatesStyle({ width, height, margin, opacity })\n  const { tooltip: tooltipClass } = useTooltipStyle()\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      setDataSelected((data) =>\n        displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        }),\n      )\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setDataSelected(() => false)\n      setComponentBrushing(null)\n    }\n\n    const brush = brushY<keyof SelectableDataType>()\n      .extent([\n        [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n        [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n      ])\n      .on(BrushAction.start, () => {\n        setComponentBrushing(ViewType.ParallelCoordinates)\n      })\n      .on(BrushAction.move, (brushEvent: D3BrushEvent<SelectableDataType>, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      })\n      .on(BrushAction.end, (brushEvent: D3BrushEvent<SelectableDataType>, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      })\n\n    const getAxisTransform = (attribute: keyof SelectableDataType) => getTranslate([xScale(String(attribute))!, 0])\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath = (data: SelectableDataType) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    const tooltip = select(getClass(tooltipClass))\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, clsx(classes.line, PARALLEL_COORDINATES))\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n        tooltip.transition().duration(TOOLTIP.EASE_IN).style(SVG.style.opacity, TOOLTIP.VISIBLE)\n        tooltip\n          .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n          .style(SVG.style.left, px(clientX))\n          .style(SVG.style.top, px(clientY))\n      })\n      .on(MouseActions.mouseOut, () => {\n        tooltip.transition().duration(TOOLTIP.EASE_OUT).style(SVG.style.opacity, TOOLTIP.INVISIBLE)\n      })\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, -TEXT_Y_SHIFT)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, classes.text)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      displayAttributes.forEach((key) => (selections[key] = null))\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n    classes,\n    tooltipClass,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove],\n  )\n  displayDetails(isDetailsVisible, tooltipClass)\n\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={height} className={classes.svg}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n        <div className={tooltipClass} />\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{PARALLEL_COORDINATES_TEXT.unavailable}</div>\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","export const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: [[number, number], [number, number]], cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerExtent = (length: number, spacing: number): [number, number] => [spacing, length - spacing]\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport interface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useScatterPlotMatrixStyle = makeStyles<Theme, StyleProps>(() => ({\n  x: {},\n  y: {},\n  svg: {\n    fontSize: PLOT_FONT.fontSize,\n    background: PLOT_COLORS.backgroundColor,\n  },\n  axis: {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  rect: {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  axisLine: {\n    stroke: PLOT_COLORS.axisLines,\n  },\n  axisPath: {\n    display: `none`,\n  },\n  cell: {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  dataPoint: {\n    fillOpacity: ({ opacity }) => opacity[0] / 100,\n  },\n  selected: {\n    fill: important(PLOT_COLORS.brushColor),\n    fillOpacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    fillOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n  duplicates: {},\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  D3BrushEvent,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/scatter-plot/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { DataEachCircle, DataEachG } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n  px,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport {\n  getMatrix,\n  getCellInnerExtent,\n  getCellInnerSize,\n  getCellTranslateInMatrix,\n} from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { TOOLTIP } from '../../../../constants/views/tooltip'\nimport { HTML } from '../../../../constants/html'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { useScatterPlotMatrixStyle } from '../../../../components-style/content/views/scatter-plot/useScatterPlotMatrixStyle'\nimport { useTooltipStyle } from '../../../../components-style/content/views/useTooltipStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\nexport const DATA_POINT = `dataPoint`\nexport const AXIS_X = `axisX`\nexport const AXIS_Y = `axisY`\nexport const CELL = `cell`\nexport const CELL_DUPLICATES = `cell-dup`\nexport const SPACING = {\n  HORIZONTAL: 12,\n  VERTICAL: 12,\n}\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: FunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  setDataSelected,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  margins,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useScatterPlotMatrixStyle({ width, height, margin, opacity })\n  const { tooltip: tooltipClass } = useTooltipStyle()\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  selectAll(getClass(DATA_POINT))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear(getCellInnerExtent(rect.width, SPACING.HORIZONTAL)),\n      scaleLinear(getCellInnerExtent(rect.height, SPACING.VERTICAL)),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (vertical)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.x, classes.axis))\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (horizontal)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.y, classes.axis))\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const tooltip = select(getClass(tooltipClass))\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachCircle<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachCircle<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, classes.rect)\n        .attr(SVG.attributes.x, SPACING.HORIZONTAL)\n        .attr(SVG.attributes.y, SPACING.VERTICAL)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, SPACING.HORIZONTAL))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, SPACING.VERTICAL))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, clsx(classes.dataPoint, DATA_POINT))\n        .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n          tooltip.transition().duration(TOOLTIP.EASE_IN).style(SVG.style.opacity, TOOLTIP.VISIBLE)\n          tooltip\n            .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n            .style(SVG.style.left, px(clientX))\n            .style(SVG.style.top, px(clientY))\n        })\n        .on(MouseActions.mouseOut, () => {\n          tooltip.transition().duration(TOOLTIP.EASE_OUT).style(SVG.style.opacity, TOOLTIP.INVISIBLE)\n        })\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, classes.cell)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 3 * SPACING.HORIZONTAL)\n      .attr(SVG.attributes.y, 2.5 * SPACING.VERTICAL)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: { cell: MatrixPosition | null } = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        setDataSelected((data) => isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey]))))\n      }\n    }\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, (_: D3BrushEvent<SelectableDataType>, { rowIdx, colIdx, rowKey, colKey }: MatrixItem) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      })\n      .on(BrushAction.move, ({ selection }: D3BrushEvent<SelectableDataType>, matrixItem: MatrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      })\n      .on(BrushAction.end, ({ selection }: D3BrushEvent<SelectableDataType>, matrixItem: MatrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n          setDataSelected((data) => (data.selected = false))\n        }\n      })\n      .extent([\n        [0, 0],\n        [rect.width, rect.height],\n      ])\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, clsx(classes.cell, classes.duplicates))\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    setDataSelected,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n    classes,\n    tooltipClass,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, pointSize, isBrushingOnEndOfMove],\n  )\n  displayDetails(isDetailsVisible, tooltipClass)\n  displayDetails(isDetailsVisible, classes.duplicates)\n\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={height} className={classes.svg}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n        <div className={tooltipClass} />\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{SCATTER_PLOT_MATRIX_TEXT.unavailable}</div>\n}\n","import { Theme } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\n\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { Dimensions } from '../../../../types/basic/dimensions'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\ninterface StyleProps extends Dimensions {\n  margin: Margin\n  opacity: Opacity\n}\n\nexport const useGlyphsStyle = makeStyles<Theme, StyleProps>(() => ({\n  svg: {\n    fontSize: PLOT_FONT.fontSize,\n    background: PLOT_COLORS.backgroundColor,\n  },\n  glyph: {\n    opacity: ({ opacity }) => opacity[0] / 100,\n  },\n  selected: {\n    fill: important(PLOT_COLORS.brushColor),\n    opacity: ({ opacity }) => opacity[1] / 100,\n  },\n  hidden: {\n    fillOpacity: ({ opacity }) => opacity[2] / 100,\n  },\n  notDisplayed: {\n    width: ({ width, margin }) => width - margin.width,\n    height: ({ height, margin }) => height - margin.height,\n    padding: ({ margin }) => margin.toString,\n  },\n}))\n","import { FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport clsx from 'clsx'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Highlightable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/glyphs/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  px,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { TOOLTIP } from '../../../../constants/views/tooltip'\nimport { MouseActions } from '../../../../constants/actions/MouseActions'\nimport { HTML } from '../../../../constants/html'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { useGlyphsStyle } from '../../../../components-style/content/views/glyphs/useGlyphsStyle'\nimport { useTooltipStyle } from '../../../../components-style/content/views/useTooltipStyle'\n\nexport interface GlyphsProps extends VisualizationView, Highlightable, GlyphsSettings {}\n\nconst GLYPHS = `glyphs`\n\nexport const Glyphs: FunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  sortAttribute,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  isDetailsVisible,\n  opacity,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const classes = useGlyphsStyle({ width, height, margin, opacity })\n  const { tooltip: tooltipClass } = useTooltipStyle()\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS))\n    .classed(classes.selected, (d) => (d as SelectableDataType).selected)\n    .classed(classes.hidden, (d) => isBrushingActive && !(d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current!\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const sortedDataset = sortAttribute\n      ? [...dataset].sort((a, b) => Number(a[sortAttribute]) - Number(b[sortAttribute]))\n      : [...dataset]\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform = (data: SelectableDataType) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath = (data: SelectableDataType) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const tooltip = select(getClass(tooltipClass))\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, clsx(classes.glyph, GLYPHS))\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseActions.mouseOver, ({ clientX, clientY }: MouseEvent, data: SelectableDataType) => {\n            tooltip.transition().duration(TOOLTIP.EASE_IN).style(SVG.style.opacity, TOOLTIP.VISIBLE)\n            tooltip\n              .html(getAttributeValuesWithLabel(data).join(HTML.newLine))\n              .style(SVG.style.left, px(clientX))\n              .style(SVG.style.top, px(clientY))\n          })\n          .on(MouseActions.mouseOut, () => {\n            tooltip.transition().duration(TOOLTIP.EASE_OUT).style(SVG.style.opacity, TOOLTIP.INVISIBLE)\n          })\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n  }, [\n    dataset,\n    classes,\n    tooltipClass,\n    innerWidth,\n    innerHeight,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    sortAttribute,\n    color,\n  ])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphs(), [displayAttributes, categoryAttribute, sortAttribute, innerWidth, innerHeight])\n  displayDetails(isDetailsVisible, tooltipClass)\n\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <>\n        <svg width={width} height={innerHeight + margin.height} className={classes.svg}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n        <div className={tooltipClass} />\n      </>\n    )\n  }\n  return <div className={classes.notDisplayed}>{GLYPHS_TEXT.unavailable2}</div>\n}\n","import { FunctionComponent } from 'react'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { ParallelCoordinatesSettings } from '../../../types/views/parallel-coordinates/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../../types/views/scatter-plot/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../../types/views/glyphs/GlyphsSettings'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { useViewStyle } from '../../../components-style/content/views/useViewStyle'\n\nimport { Settings, SettingsType } from './Settings'\nimport { ParallelCoordinates } from './parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from './scatter-plot/ScatterPlotMatrix'\nimport { Glyphs } from './glyphs/Glyphs'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  component: ViewType\n  settings: Settings\n}\n\ntype ViewElementFunction = (props: Brushable & VisualizationView, settings: SettingsType) => JSX.Element\n\nconst options: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n}\n\nexport const View: FunctionComponent<ViewProps> = ({ width, height, component, settings, ...dataProps }) => {\n  const graph = options[component]\n  const classes = useViewStyle({ width, height })\n  const settingsCurr = settings[component]\n  if (!settingsCurr) return null\n  return <div className={classes.box}>{graph({ width, height, ...dataProps }, settingsCurr)}</div>\n}\n","import { Dispatch, FunctionComponent, SetStateAction } from 'react'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { Dimensions } from '../../../types/basic/dimensions'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { useViewGridStyle } from '../../../components-style/content/views/useViewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\n\nimport { View } from './View'\nimport { Settings } from './Settings'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n}\n\nexport const ViewGrid: FunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  ...viewProps\n}) => {\n  const classes = useViewGridStyle()\n  const views = [ViewType.ParallelCoordinates, ViewType.ScatterPlotMatrix, ViewType.Glyphs]\n  const dimensions: Dimensions[] = [\n    { width: 960, height: 400 },\n    { width: 960, height: 960 },\n    { width: 960, height: 620 },\n  ]\n  return (\n    <>\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      {settings !== null && (\n        <div className={classes.column}>\n          {views.map((view, idx) => (\n            <View\n              width={dimensions[idx].width}\n              height={dimensions[idx].height}\n              component={view}\n              settings={settings}\n              key={idx}\n              {...viewProps}\n            />\n          ))}\n        </div>\n      )}\n    </>\n  )\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { EMPTY_SITE_COLORS } from '../../../styles/colors'\n\nexport const useEmptyDataStyle = makeStyles({\n  site: {\n    paddingTop: px(20),\n    color: EMPTY_SITE_COLORS.font,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nimport { useEmptyDataStyle } from '../../../components-style/content/no-data/useEmptyDataStyle'\n\nexport const EmptyData: FunctionComponent = () => {\n  const classes = useEmptyDataStyle()\n  return <div className={classes.site}>{EMPTY_DATA_TEXT.content}</div>\n}\n","import { makeStyles } from '@mui/styles'\n\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const useLoadingStyle = makeStyles({\n  load: {\n    paddingTop: px(40),\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { useLoadingStyle } from '../../../components-style/content/no-data/useLoadingStyle'\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nexport const Loading: FunctionComponent = () => {\n  const classes = useLoadingStyle()\n  return <div className={classes.load}>{EMPTY_DATA_TEXT.loading}</div>\n}\n","import { FunctionComponent, useState } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../views/ViewGrid'\nimport { Settings } from '../views/Settings'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\n\nexport const DataContext: FunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [redrawTime, setRedrawTime] = useState(Date.now())\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = (data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }\n\n  const setDataSelected = (setFunction: (data: SelectableDataType) => boolean): void => {\n    if (dataset) {\n      dataset.forEach((data) => {\n        data.selected = setFunction(data)\n      })\n      setRedrawTime(Date.now()) // redraw component\n    }\n  }\n\n  const cleanAllBrushes = () => {\n    setDataSelected((data) => (data.selected = false))\n    cleanBrushingRef.current.forEach((f) => f())\n  }\n\n  const clearBrushesOnButton = () => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }\n\n  const setComponentBrushing: SetComponentBrushing = (newComponent) => {\n    if (componentBrushingRef.current !== newComponent) cleanAllBrushes()\n    setCurrentComponentBrushing(newComponent)\n  }\n\n  const registerCleanBrushing = (cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }\n\n  const cleanSelectedIfViewWasBrushing = (component: ViewType) => {\n    if (componentBrushingRef.current === component) cleanAllBrushes()\n    setCurrentComponentBrushing(null)\n  }\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = (newIsBrushingOnEndOfMove: boolean) => {\n    cleanAllBrushes()\n    setCurrentComponentBrushing(null)\n    setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n  }\n\n  const isBrushingActive = componentBrushingRef.current !== null\n\n  const viewProps = {\n    registerCleanBrushing,\n    setComponentBrushing,\n    setDataSelected,\n    redrawTime,\n    isBrushingActive,\n    isBrushingOnEndOfMove,\n  }\n\n  const getViewGrid = () => {\n    if (dataLoadState === DataLoadState.NoData) {\n      return <EmptyData />\n    }\n    if (dataLoadState === DataLoadState.Loading || !dataset) {\n      return <Loading />\n    }\n    return (\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={() => setDrawerOpen(false)}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        {...viewProps}\n      />\n    )\n  }\n\n  return (\n    <>\n      <TopToolbar\n        openDrawer={() => setDrawerOpen(true)}\n        isToolsDisabled={dataset === null}\n        isDetailsVisible={isDetailsVisible}\n        setIsDetailsVisible={setIsDetailsVisible}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n        setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n        isBrushingActive={isBrushingActive}\n        clearBrushes={clearBrushesOnButton}\n        setDataset={setDatasetAndRemoveBrushing}\n        setDataLoadState={setDataLoadState}\n      />\n      {getViewGrid()}\n    </>\n  )\n}\n","import { makeStyles } from '@mui/styles'\n\nexport const useAppStyle = makeStyles({\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n})\n","import { FunctionComponent } from 'react'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { useAppStyle } from './useAppStyle'\n\nexport const App: FunctionComponent = () => {\n  const style = useAppStyle()\n  return (\n    <div className={style.app}>\n      <Header />\n      <div className={style.content}>\n        <DataContext />\n      </div>\n      <Footer />\n    </div>\n  )\n}\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}