{"version":3,"sources":["app/constants/data/dataLoadState.ts","app/constants/views/ViewTypes.ts","app/text/HeaderText.ts","app/helpers/data/formatText.ts","app/types/data/data.ts","app/helpers/d3/stringGetters.ts","app/styles/colors.ts","app/styles/font.ts","app/components-style/header/headerStyle.ts","app/components/header/Header.tsx","app/text/FooterText.ts","app/components-style/footer/footerStyle.ts","app/components/footer/Footer.tsx","app/helpers/react/useUpdatedRef.ts","app/helpers/react/useDebounce.ts","app/constants/data/sampleDataset.tsx","app/constants/views/common.ts","app/constants/data/data.ts","app/components/content/top-toolbar/items/file-reader/FileReader.tsx","app/text/SiteText.ts","app/components-style/content/top-toolbar/topToolbarStyle.ts","app/components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ClickableButton.tsx","app/helpers/data/dataConvertors.ts","app/components-style/content/top-toolbar/items/file-reader/fileReaderStyle.ts","app/components-style/content/common/dialogStyle.ts","app/components/content/common/dialogs/SelectionDialog.tsx","app/components/content/common/dialogs/InformationDialog.tsx","app/helpers/data/data.ts","app/components/content/top-toolbar/items/file-reader/NullDialog.tsx","app/helpers/data/comparator.ts","app/components/content/top-toolbar/items/buttons/ToggleButtonSingle.tsx","app/components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle.ts","app/components/content/top-toolbar/items/buttons/OpenSettingsButton.tsx","app/components-style/content/top-toolbar/items/buttons/colorButtonStyle.ts","app/components/content/top-toolbar/items/buttons/ColorButton.tsx","app/constants/debounce/debounce.ts","app/components/content/top-toolbar/TopToolbar.tsx","app/constants/svg.ts","app/helpers/d3/displayDetails.ts","app/constants/views/tooltip.ts","app/text/views-and-menus/common.ts","app/components-style/content/views/viewGridStyle.ts","app/components-style/content/data-drawer/dataDrawerStyle.ts","app/constants/data/ColoringType.ts","app/constants/data/ParallelSetsBrushingType.ts","app/constants/views/glyphs.ts","app/text/views-and-menus/glyphs.ts","app/components-style/content/data-drawer/dataDrawerMenuStyle.ts","app/components-style/content/data-drawer/items/menuTextStyle.ts","app/components-style/content/data-drawer/items/attributeCheckerStyle.ts","app/components/content/data-drawer/items/AttributeChecker.tsx","app/components/content/data-drawer/items/CategorySelector.tsx","app/components/content/data-drawer/items/Selector.tsx","app/components-style/content/data-drawer/items/numberInputStyles.ts","app/components/content/data-drawer/items/MarginInput.tsx","app/components/content/data-drawer/items/NumberInput.tsx","app/components/content/data-drawer/items/OpacityInput.tsx","app/components-style/content/data-drawer/items/palettePickerStyle.ts","app/components/content/data-drawer/items/PalettePicker.tsx","app/components-style/content/data-drawer/items/toggleButtonsStyle.ts","app/components/content/data-drawer/items/ToggleButtons.tsx","app/components/content/views/glyphs/GlyphsMenu.tsx","app/types/views/settings/GlyphsSettings.ts","app/constants/views/parallelCoordinates.ts","app/text/views-and-menus/parallelCoordinates.ts","app/components/content/views/parallel-coordinates/ParallelCoordinatesMenu.tsx","app/types/views/settings/ParallelCoordinatesSettings.ts","app/constants/views/scatterPlotMatrix.ts","app/text/views-and-menus/scatterPlotMatrix.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrixMenu.tsx","app/types/views/settings/ScatterPlotMatrixSettings.ts","app/constants/views/scatterPlotGlyphs.ts","app/text/views-and-menus/scatterPlotGlyphs.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphsMenu.tsx","app/types/views/settings/ScatterPlotGlyphsSettings.ts","app/constants/views/dataTable.ts","app/text/views-and-menus/dataTable.ts","app/components-style/content/data-drawer/items/colorPickerStyle.ts","app/components/content/data-drawer/items/ColorPicker.tsx","app/components/content/views/data-table/DataTableMenu.tsx","app/types/views/settings/DataTableSettings.ts","app/constants/views/parallelSetsBundled.ts","app/constants/actions/BrushAction.ts","app/constants/actions/MouseAction.ts","app/text/views-and-menus/parallelSetsBundled.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundledMenu.tsx","app/types/views/settings/ParallelSetsBundledSettings.ts","app/components/content/data-drawer/DataDrawer.tsx","app/components-style/content/views/gridItemStyle.ts","app/constants/save/save.ts","app/helpers/d3/saveSvg.ts","app/components-style/content/common/inlineButtonStyles.ts","app/components/content/common/dialogs/ConfirmationDialog.tsx","app/components/content/common/DataSaveButton.tsx","app/types/styling/Margin.ts","app/helpers/basic/range.ts","app/helpers/d3/extent.ts","app/helpers/d3/attributeGetters.ts","app/constants/html.ts","app/helpers/d3/tooltip.ts","app/components-style/content/views/parallel-coordinates/parallelCoordinatesStyle.ts","app/components-style/content/views/getViewsNotDisplayStyle.tsx","app/components/content/views/parallel-coordinates/ParallelCoordinates.tsx","app/helpers/basic/retype.ts","app/helpers/d3/matrix.ts","app/components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle.ts","app/components/content/views/scatter-plot-matrix/ScatterPlotMatrix.tsx","app/components-style/content/views/glyphs/glyphsStyle.ts","app/components/content/views/glyphs/Glyphs.tsx","app/components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle.ts","app/components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs.tsx","app/constants/form.ts","app/components-style/content/views/data-table/dataTableStyle.ts","app/components/content/views/data-table/DataTable.tsx","lib/d3-sankey/src/align.js","lib/d3-sankey/src/constant.js","lib/d3-sankey/src/sankey.js","lib/d3-sankey/src/sankeyLinkHorizontal.js","app/components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle.ts","app/components/content/views/parallel-sets-bundeled/ParallelSetsBundled.tsx","app/constants/views/getViewRecord.tsx","app/components/content/views/View.tsx","app/components-style/content/views/viewStyle.ts","app/components/content/views/data-table/DataFilterButton.tsx","app/components/content/views/GridItem.tsx","app/components/content/views/ViewGrid.tsx","app/components-style/content/no-data/emptyDataStyle.ts","app/components/content/no-data/EmptyData.tsx","app/components-style/content/no-data/loadingStyle.ts","app/components/content/no-data/Loading.tsx","app/components/content/context/DataContext.tsx","app/appStyle.ts","app/App.tsx","index.tsx"],"names":["DataLoadState","DataLoadError","ViewType","HEADER_TEXT","withoutSpaces","otherCasesToWhitespaces","text","String","replace","replaceAll","trim","dataToReadable","data","SelectedKey","px","values","map","val","join","calc","plus","important","border","value","color","getTranslate","translate","getClass","className","getAttributeFormatted","attribute","toLowerCase","getAttributeFromMatrixFormatted","item","rowKey","getAttributeValuesWithLabel","Object","keys","filter","key","getLinkDataPointValuesWithLabel","filteredData","from","names","to","count","selected","getNodeDataPointValuesWithLabel","name","countSelected","HEADER_COLORS","FOOTER_COLORS","TOP_TOOLBAR_COLORS","BUTTON_COLORS","VIEW_COLORS","DATA_DRAWER_COLORS","PLOT_COLORS","SITE_COLORS","ERROR_COLORS","HIGHLIGHT_COLOR","TABLE_COLORS","HEADER_FONT","titleFontSize","descriptionFontSize","FOOTER_FONT","fontSize","DATA_DRAWER_FONT","PLOT_FONT","PLOT_FONT_BOX_SIZE","headerStyle","headerContainer","bgcolor","padding","width","display","flexDirection","alignItems","justifyContent","title","description","Header","Box","sx","FOOTER_TEXT","footerStyle","footerContainer","Footer","useUpdatedRef","valueRef","useRef","current","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","SampleDataset","DRAG_HANDLE","VIEW_DEFAULT_SIZE","height","VIEW_LIMITS","ParallelCoordinates","minW","minH","ScatterPlotMatrix","Glyphs","ScatterPlotGlyphs","DataTable","ParallelSetsBundled","DEFAULT_VIEW_DIMENSIONS","w","h","DEFAULT_GRID_LAYOUT_QUANTITATIVE","i","x","y","DEFAULT_GRID_LAYOUT_NOMINAL","OptionType","SAMPLE_DATASET_OPTIONS","sampleDatasetIcons","flowers","LocalFlorist","birds","Air","cars","DirectionsCar","titanic","DirectionsBoat","parallelCars","AirportShuttle","sampleDatasets","flowerJson","birdJson","carJson","titanicJson","parallelCarsJson","AcceptableFileTypes","OPTION_TYPES","EMPTY_DATA_TEXT","TOP_TOOLBAR_TEXT","header","save","confirm","cancel","FILE_READER_TEXT","button","sampleDataLabel","sampleDataDialogTitle","sampleDataDialogText","alertDialog","unsupportedFile","unsupportedFormat","nullDialog","optionsText","leave","change","optionsDescription","changeTo","topToolbarStyle","toolbar","separator","margin","borderLeft","left","middle","right","topToolbarButtonStyle","minWidth","ClickableButton","icon","onClick","disabled","label","Button","variant","Tooltip","isJsonValue","isArrayOfDataType","dataset","Array","isArray","length","example","every","idx","CsvParse","textCsv","parse","output","fromEntries","numValue","Number","isNaN","getFileReaderBoxStyle","isHighlighted","transition","borderRadius","fileReaderStyle","dialogStyle","dialog","alert","innerContent","contentBox","toggleDialogGroup","marginBottom","toggleDialogButton","flexGrow","attHeader","fontWeight","paddingBottom","textInput","alignSelf","SelectionDialog","isOpen","onClose","options","handleListItemClick","noOptionText","Dialog","open","DialogTitle","Divider","List","option","ListItem","ListItemAvatar","Avatar","ListItemText","primary","Typography","InformationDialog","confirmText","DialogContent","DialogContentText","DialogActions","autoFocus","getAttributeKeys","getDatasetSample","getDefaultQuantitativeAttributesKeys","getQuantitativeAttributesKeys","getCategoryAttributesKeys","Set","size","getDefaultAllAttributesChecked","getDefaultQuantitativeAttributesChecked","defaultQuantitativeAttributesKeys","possibleQuantitativeAttributesKeys","some","kk","getDefaultNominalAttributesChecked","getNominalValueProperties","reduce","nominalValuePropertiesArr","containedIdx","findIndex","prev","newNominalValueProperties","getNominalValuesRecord","NullDialog","nullContainingAttributes","setDataset","att","optionsChosen","setOptionsChosen","replaceValue","setReplaceValue","getFixedDataset","useCallback","newValue","handleNullDialogConfirm","datasetFixed","forEach","handleToggleChange","handleReplaceChange","ToggleButtonGroup","exclusive","onChange","e","optType","ToggleButton","TextField","defaultValue","target","addSelected","d","SortType","FILE_INPUT_ID","FileReader","setDataLoadState","isSampleDataDialogOpen","setIsSampleDataDialogOpen","isNullDialogOpen","setIsNullDialogOpen","setNullContainingAttributes","rawDataset","setRawDataset","isAlertDialogOpen","setIsAlertDialogOpen","alertDialogText","setAlertDialogText","optionKey","Loaded","closeDialog","getDatasetFromFile","fileType","selectedFile","a","json","csv","JSON","handleFileChange","files","Loading","type","dataLoadErrorType","NoData","selectableDataset","document","getElementById","AutoGraph","component","Add","hidden","id","ON_VALUE","ToggleButtonSingle","setValue","handleChange","event","checked","openSettingsButtonStyle","settings","OpenSettingsButton","IconButton","Settings","getColorInputStyle","getColorInputBoxStyle","minHeight","ml","colorInputStyle","inputBox","position","opacity","ColorButton","handleSetColor","tooltip","currentColor","setCurrentColor","debouncedColor","disableHoverListener","TopToolbar","openDrawer","isToolsDisabled","isDetailsVisible","setIsDetailsVisible","isBrushingOnEndOfMove","setIsBrushingOnEndOfMove","isBrushingActive","clearBrushes","setIsAddViewDialogOpen","brushColor","setBrushColor","AddCircle","Info","SkipNext","Brush","AutoFixOff","SVG","svg","g","circle","rect","path","div","class","transform","cx","cy","r","stroke","strokeWidth","textAnchor","fill","top","none","block","start","end","displayDetails","tooltipClass","selectAll","style","TOOLTIP_CLASS","TOOLTIP","bottom","lr","MENU_BASE_TEXT","more","empty","MENU_TEXT","attributes","category","MARGIN_MENU_TEXT","OPACITY_MENU_TEXT","PALETTE_PICKER_TEXT","categoriesLabel","VIEW_NAMES","viewGridStyle","pointerEvents","zIndex","dataDrawerStyle","drawer","flexShrink","chevron","menu","descCompare","b","orderBy","ColoringType","ParallelSetsBrushingType","getComparator","sort","desc","GLYPHS_DEFAULT","sortType","asc","glyphSize","glyphSpacing","margins","colorCategory","schemeCategory10","GLYPHS_TEXT","GLYPHS_MENU_TEXT","sorting","unavailable","dataDrawerMenuStyle","drawerMenu","textAlign","borderBottom","marginTop","insufficientAttributeNum","accordion","menuTextStyle","attributeCheckerStyle","buttons","control","AttributeChecker","viewType","attributesKeys","handleChangeSettings","getNewSettings","setSettings","setChecked","setAttributesKeys","handleCheckboxChange","eventChecked","newChecked","prevSettings","newSettings","handleMove","newAttributesKeys","displayAttributes","onUpButton","onDownButton","FormControlLabel","ArrowDropUp","ArrowDropDown","Checkbox","CategorySelector","handleSelectCategoryChange","categoryAttribute","undefined","select","MenuItem","Selector","settingsKey","handleSelectChange","numberInputStyles","vertical","horizontal","textField","MarginInput","currentMargins","setCurrentMargins","debouncedMargins","handleMarginChange","newMargin","oldMargins","newMargins","inputProps","inputMode","min","NumberInput","valueKey","max","currentValue","setCurrentValue","handleChangeValue","minVal","maxVal","OpacityInput","opacities","currentOpacities","setCurrentOpacities","debouncedOpacities","handleOpacityChange","newOpacity","oldOpacities","newOpacities","getPalettePickerColorInputStyle","colors","index","palettePickerStyle","picker","row","col","PalettePicker","currentColors","setCurrentColors","debouncedColors","newColor","oldColors","newColors","getInput","toggleButtonsStyle","box","group","ToggleButtons","handleToggleButtonChange","opt","GlyphsMenu","glyphsSettings","quantitativeAttributesKeys","setQuantitativeAttributesKeys","sortableAttributes","categoricalAttributes","getCurrentDisplayAttributes","currChecked","createGlyphsMenu","newQaKeys","defaultSortAttribute","defaultCategoryAttribute","newGlyphs","sortAttribute","getNewSettingsForAttributeChecker","newSortableAttributes","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","PARALLEL_COORDINATES_DEFAULT","lineWidth","PARALLEL_COORDINATES_TEXT","PARALLEL_COORDINATES_MENU_TEXT","ParallelCoordinatesMenu","cleanSelectedIfViewWasBrushing","parallelCoordinatesSettings","createParallelCoordinatesMenu","newParallelCoordinates","SCATTER_PLOT_MATRIX_DEFAULT","pointSize","horizontalSpacing","verticalSpacing","SCATTER_PLOT_MATRIX_TEXT","SCATTER_PLOT_MATRIX_MENU_TEXT","sizes","ScatterPlotMatrixMenu","scatterPlotMatrixSettings","createScatterPlotMatrixMenu","newScatterPlotMatrix","SCATTER_PLOT_GLYPHS_DEFAULT","SCATTER_PLOT_GLYPHS_TEXT","SCATTER_PLOT_GLYPHS_MENU_TEXT","xAttribute","yAttribute","ScatterPlotGlyphsMenu","scatterPlotGlyphsSettings","defaultX","useMemo","defaultY","createScatterPlotGlyphsMenu","newScatterPlotGlyphsSettings","DATA_TABLE_DEFAULT","rowHeight","selectedBackgroundColor","selectedFontColor","DATA_TABLE_MENU_TEXT","DATA_TABLE_TEXT","checkboxTooltip","getColorPickerInputStyle","colorPickerStyle","ColorPicker","handleChangeColor","DataTableMenu","dataTableSettings","createDataTableMenu","newKeys","newDataTableSettings","BrushAction","MouseAction","PARALLEL_SETS_BUNDLED_DEFAULT","tabWidth","tabSpacing","tabGap","coloringType","brushingType","fontColor","PARALLEL_SETS_BUNDLED_TEXT","PARALLEL_SETS_MENU_TEXT","brushing","ParallelSetsBundledMenu","parallelSetsBundledSettings","nominalAttributesKeys","setNominalAttributesKeys","createParallelSetsBundledMenu","newCatKeys","newParallelSetsBundled","DataDrawer","close","views","menus","view","Drawer","anchor","ChevronRight","gridItemStyle","gridItem","borderColor","borderWidth","borderStyle","HEADER_HEIGHT","cursor","borderBottomWidth","borderBottomStyle","SAVE_ID","CONTAINER_SAVE_ID","saveSvg","svgContainer","querySelector","containerClass","classList","cls","includes","newStyleNodes","querySelectorAll","flatMap","sheet","cssRules","rules","cssText","node","createElement","innerHTML","insertBefore","firstChild","svgEl","fileName","setAttribute","svgData","outerHTML","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","appendChild","click","removeChild","saveSvgToFile","remove","console","error","inlineButtonStyles","buttonActive","ConfirmationDialog","onConfirm","cancelText","DataSaveButton","isDialogOpen","setIsDialogOpen","openDialog","Save","Margin","toString","this","isInRanges","ranges","getExtentInDomains","domains","calculatedExtent","extent","Error","getCategoryColor","TEXT_Y_SHIFTS","odd","even","TOGGLE_TEXT_Y_SHIFT","Math","getTextTogglingYShift","_","HTML","onMouseOverTooltip","stringFunction","clientX","clientY","duration","html","onMouseOutTooltip","PARALLEL_COORDINATES_CLASS","SELECTED_CLASS","AXES_TEXT_CLASS","getParallelCoordinatesStyle","isBrushActive","font","getViewsNotDisplayStyle","refreshViews","registerCleanBrushing","setComponentBrushing","scaleOrdinal","upperPadding","innerWidth","innerHeight","classed","createParallelCoordinates","extentInDomains","xScale","scalePoint","domain","v","yScales","scaleLinear","selections","getDefaultSelectionForAttributes","setBrushingSelection","dimension","selectedRange","number","range","valueOnAxis","onBrush","move","brushEvent","axisName","selection","brushExtent","BRUSH_WIDTH","brush","brushY","on","enter","append","attr","line","mouseOver","mouseOut","brushableAxes","each","elements","call","axisLeft","axis","clear","selLKey","ref","getMatrix","rowIdx","colKey","colIdx","flat","getCellInnerSize","spacing","getCellTranslateInMatrix","maxIdx","DATA_POINT_CLASS","DUPLICATES_CLASS","AXIS_CLASS","getScatterPlotMatrixStyle","shapeRendering","fillOpacity","TICKS","createScatterPlotMatrix","attributesCount","yScale","axisBottom","xAxis","yAxis","ticks","tickSize","setAxis","plotMatrixItem","matrixItem","cell","clearBrush","brushSelection","makeBrush","GLYPHS_CLASS","getGlyphsStyle","sortableDataset","sortedDataset","glyphSizeWithSpacing","glyphsCountPerLine","floor","glyphsCountPerHeight","ceil","glyphRadius","createGlyphs","percentDown","percentUp","extentSize","p","finalExtent","getExtendedExtentInDomains","lineRadialGenerator","lineRadial","radialScales","scaleRadial","getTransform","indexOf","getGlyphPath","PI","onMouseClick","changedData","SCATTER_PLOT_GLYPHS_CLASS","getScatterPlotGlyphsStyle","createScatterPlotGlyphs","makeGlyphs","FORM","getDataTableRowStyle","paddingTop","dataTableStyle","tableHead","tableHeadRow","tableBody","filterRow","filterCell","filterIcon","paddingLeft","notDisplayed","showFilter","order","setOrder","setOrderBy","filterValues","setFilterValues","filteredDataset","handleSelectClick","handleSelectAllClick","handleRequestSort","property","isAsc","handleFilterValueChange","createSortHandler","sortTooltipTitle","headCellId","TableContainer","Table","TableHead","TableRow","TableCell","checkAll","indeterminate","orderedByActive","sortDirection","TableSortLabel","active","direction","FilterListOutlined","TableBody","hover","justify","n","sourceLinks","depth","constant","ascendingSourceBreadth","ascendingBreadth","source","ascendingTargetBreadth","y0","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","get","computeLinkBreadths","y1","link","targetLinks","Sankey","py","linkSort","x0","x1","dx","dy","align","iterations","sankey","apply","arguments","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeHeights","computeNodeBreadths","entries","Map","push","fixedValue","sum","next","add","columns","kx","layer","computeNodeLayers","c","ky","reorderLinks","initializeNodeBreadths","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","column","reorderNodeLinks","resolveCollisions","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom","update","nodeId","nodeAlign","nodeSort","nodeWidth","nodePadding","horizontalSource","horizontalTarget","linkHorizontal","TABS_CLASS","getParallelSetsBundledStyle","fontColorInner","mixBlendMode","redrawTime","nominalValuesRecord","setNominalValuesRecord","createParallelSetsBundled","displayPairs","slice","getNeighborAttributes","pairWidth","valueCounts","arr","spacesAllMax","isLeft","half","displayPair","pairIdx","spacesPairMax","pairExtent","sankeyLayout","record","attFrom","attTo","toIdxStart","idxFrom","idxTo","filtered","getGraph","xShift","connectors","sankeyLinkHorizontal","no","overlay","yShift","getViewRecord","s","f","View","dataProps","settingsCurr","overflowX","overflowY","DataFilterButton","setShowFilter","FilterList","GridItem","onRemove","isResizeFinished","rest","useSize","Close","ReactGridLayout","WidthProvider","GridLayout","BaseViewGrid","isDrawerOpen","closeDrawer","isAddViewDialogOpen","layout","setLayout","viewProps","viewResizing","setViewResizing","updateLayout","newLayout","filteredLayout","addView","posY","removeView","dialogOptions","onLayoutChange","draggableHandle","onResizeStart","onResizeStop","cols","isResizable","ViewGrid","memo","emptyDataStyle","site","EmptyData","loadingStyle","load","DataContext","dataLoadState","componentBrushing","setCurrentComponentBrushing","cleanBrushing","setCleanBrushing","Date","now","currentRedrawTime","setRedrawTime","setDrawerOpen","cleanBrushingRef","componentBrushingRef","setDatasetAndRemoveBrushing","cleanAllBrushes","deletePrevSelection","clearBrushesOnButton","newComponent","setIsBrushingOnEndOfMoveAndRemoveBrushing","newIsBrushingOnEndOfMove","topToolbarComponent","appStyle","app","content","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.004d7d7f.chunk.js","sourcesContent":["export enum DataLoadState {\n  NoData = `no-data`,\n  Loading = `loading`,\n  Loaded = `loaded`,\n}\n\nexport enum DataLoadError {\n  unsupportedFile = `unsupportedFile`,\n  unsupportedFormat = `unsupportedFileFormat`,\n}\n","export enum ViewType {\n  Glyphs = `glyphs`,\n  ParallelCoordinates = `parallelCoordinates`,\n  ScatterPlotMatrix = `scatterPlotMatrix`,\n  ScatterPlotGlyphs = `ScatterPlotGlyphs`,\n  DataTable = `dataTable`,\n  ParallelSetsBundled = `parallelSetsBundled`,\n}\n\nexport const isViewType = (viewType: string): viewType is ViewType =>\n  (Object.values(ViewType) as string[]).includes(viewType)\n","export const HEADER_TEXT = {\n  title: `Tabular Data Visualizer`,\n  description: `Web Application for Tabular Data Visualization`,\n}\n","import { JsonValue } from '../../types/data/data'\n\nconst withoutSpaces = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g\n\nexport const otherCasesToWhitespaces = (text: string | number): string =>\n  String(text).replace(withoutSpaces, `$1$4 $2$3$5`).replaceAll(`_`, ` `).trim()\n\nexport const dataToReadable = (data: JsonValue): string => (data === null ? `null` : String(data))\n","/**\n * Key to indicate whether the attribute is selected\n */\nexport const SelectedKey = `selected`\n\n/**\n * Acceptable simple JSON values for our data\n */\nexport type JsonValue = string | number | boolean | null\n\n/**\n * Interface for loaded JSON data\n */\nexport interface DataType {\n  readonly [key: string]: JsonValue\n}\n\n/**\n * Interface for loaded JSON data with selected flag\n */\nexport interface SelectableDataType extends DataType {\n  [SelectedKey]: boolean\n}\n\n/**\n * Interface that assigns attributes boolean value.\n * Used for selecting what axes to display.\n */\nexport interface CheckedForSelectableDataType {\n  [key: keyof SelectableDataType]: boolean\n}\n\n/**\n * Interface for nominal value properties\n */\nexport interface NominalValueProperties {\n  name: string\n  attribute: keyof SelectableDataType\n  count: number\n  countSelected: number\n}\n\nexport interface NominalRecord {\n  [key: keyof SelectableDataType]: Array<NominalValueProperties>\n}\n\n/**\n * Interface that assigns attributes numerical extent or null.\n * Used for axes' range.\n */\nexport interface ExtentForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number] | null\n}\n\n/**\n * Interface that assigns attributes numerical extent.\n * Used for axes' range.\n */\nexport interface ExtentReqForSelectableDataType {\n  [key: keyof SelectableDataType]: [number, number]\n}\n","import { otherCasesToWhitespaces } from '../data/formatText'\nimport { SelectableDataType, SelectedKey } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { LinkDataPoint, NodeDataPoint } from '../../types/d3-sankey'\n\nexport const px = (...values: number[]): string => values.map((val) => `${val}px`).join(` `)\n\nexport const calc = (px: number, plus: string): string => `calc(${px}px + ${plus})`\n\nexport const important = (val: string | number): string => `${val} !important`\n\nexport const border = (value: number, color: string): string => `${value}px solid ${color}`\n\nexport const getEverything = (): `*` => `*`\n\nexport const getTranslate = (translate: [number, number]): string => `translate(${translate[0]}, ${translate[1]})`\n\nexport const getClass = (className: string): string => `.${className}`\n\nexport const getAttributeFormatted = (attribute: keyof SelectableDataType): string =>\n  otherCasesToWhitespaces(String(attribute)).toLowerCase()\n\nexport const getAttributeFromMatrixFormatted = (item: MatrixItem): string => getAttributeFormatted(item.rowKey)\n\nexport const getAttributeValuesWithLabel = (data: SelectableDataType): string[] =>\n  Object.keys(data)\n    .filter((key) => key !== SelectedKey)\n    .map((attribute) => [getAttributeFormatted(attribute), data[attribute] ?? `null`].join(`: `))\n\nexport type FilterKeys = Pick<LinkDataPoint, `y0` | `y1` | `width`>\n\nexport const getLinkDataPointValuesWithLabel = (data: LinkDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    from: data.names[0],\n    to: data.names[0],\n    count: String(data.value),\n    selected: String(data.selected),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n\nexport const getNodeDataPointValuesWithLabel = (data: NodeDataPoint): string[] => {\n  const filteredData: Record<string, string> = {\n    attribute: otherCasesToWhitespaces(data.attribute),\n    name: data.name,\n    count: String(data.count),\n    selected: String(data.countSelected),\n  }\n  return Object.keys(filteredData).map((key) => `${getAttributeFormatted(key)}: ${filteredData[key]}`)\n}\n","export const HEADER_COLORS = {\n  background: `#282c34`,\n  font: `#d6e1ff`,\n}\n\nexport const FOOTER_COLORS = {\n  background: `#1f2528`,\n  font: `#a3abc0`,\n}\n\nexport const TOP_TOOLBAR_COLORS = {\n  background: `#363a46`,\n  font: `#bcc7e7`,\n  border: `rgba(72, 80, 100, 0.8)`,\n}\n\nexport const BUTTON_COLORS = {\n  buttonDisableBackground: `#363b46`,\n  buttonOffBackground: `#2d3548`,\n  buttonHoverBackground: `#b3bede`,\n  buttonOnBackground: `#d6e1ff`,\n  fontOn: `rgba(0, 0, 0, 0.87)`,\n  fontOff: `rgba(214, 225, 255, 0.6)`,\n  fontDisabled: `rgba(0, 0, 0, 0.26)`,\n  buttonInlined: `#576e9f`,\n  buttonInlinedFontOn: `#3965c4`,\n  buttonInlinedBgOn: `#e9eeff`,\n  border: `rgba(0, 0, 0, 0.12)`,\n  colorBorder: `#42495d`,\n  buttonDialogBackground: `#363a46`,\n  buttonDialogHoverBackground: `#1f2528`,\n  buttonDialogFont: `#d6e1ff`,\n}\n\nexport const VIEW_COLORS = {\n  itemBackground: `#f2f3fa`,\n  border: `#9ea8be`,\n}\n\nexport const DATA_DRAWER_COLORS = {\n  background: `#23262d`,\n  border: `#363a46`,\n  icon: `#c4cbdc`,\n  drawerItemBackground: `#edf1fd`,\n  drawerItemBackgroundDimmed: `#e4eafd`,\n  drawerItemBorder: `#8e94a2`,\n  label: `#404242`,\n}\n\nexport const PLOT_COLORS = {\n  backgroundColor: `rgba(250, 250, 250, 0.7)`,\n  fontColor: `#1f1f1f`,\n  tooltipBackground: `rgb(0, 66, 70)`,\n  tooltipFont: `#ccffff`,\n  axisLines: `#dddddd`,\n  axisLinesDark: `#999999`,\n  dataBox: `#aaaaaa`,\n}\n\nexport const SITE_COLORS = {\n  font: `#0d4b4d`,\n}\n\nexport const ERROR_COLORS = {\n  font: `#700000`,\n}\n\nexport const HIGHLIGHT_COLOR = {\n  border: `#da3512`,\n  background: `rgba(201, 30, 0, 0.5)`,\n  backgroundGone: `rgba(201, 30, 0, 0)`,\n}\n\nexport const TABLE_COLORS = {\n  headerFont: `#bcc7e7`,\n  headerFontActive: `#e1e7fc`,\n  headerBackground: `#363a46`,\n  filterIconFont: `#656d86`,\n  filterBackground: `#52586c`,\n  rowsBackground: `rgb(250, 250, 254)`,\n}\n","import { calc } from '../helpers/d3/stringGetters'\n\nexport const HEADER_FONT = {\n  titleFontSize: calc(5, `2vmin`),\n  descriptionFontSize: calc(2, `1vmin`),\n}\n\nexport const FOOTER_FONT = {\n  fontSize: calc(2, `1vmin`),\n}\n\nexport const DATA_DRAWER_FONT = {\n  headerFontSize: 14,\n  labelFontSize: `0.8em`,\n  fontSize: 12,\n}\n\nexport const PLOT_FONT = {\n  fontSize: 12,\n}\n\nexport const PLOT_FONT_BOX_SIZE = PLOT_FONT.fontSize + 2 // font box, 2px bigger than the fontSize\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { HEADER_COLORS } from '../../styles/colors'\nimport { HEADER_FONT } from '../../styles/font'\n\nexport const headerStyle: Record<string, SxProps> = {\n  headerContainer: {\n    bgcolor: HEADER_COLORS.background,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `row`,\n    alignItems: `flex-end`,\n    justifyContent: `space-between`,\n    color: HEADER_COLORS.font,\n  },\n  title: {\n    fontSize: HEADER_FONT.titleFontSize,\n    padding: px(0, 20),\n  },\n  description: {\n    padding: px(0, 15),\n    fontSize: HEADER_FONT.descriptionFontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { HEADER_TEXT } from '../../text/HeaderText'\n\nimport { headerStyle } from '../../components-style/header/headerStyle'\n\nexport const Header: VoidFunctionComponent = () => (\n  <Box sx={headerStyle.headerContainer}>\n    <Box sx={headerStyle.title}>{HEADER_TEXT.title}</Box>\n    <Box sx={headerStyle.description}>{HEADER_TEXT.description}</Box>\n  </Box>\n)\n","export const FOOTER_TEXT = {\n  author: `Zuzana Štětinová`,\n  school: `CTU FEE`,\n  year: `2021-2022`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../helpers/d3/stringGetters'\nimport { FOOTER_COLORS } from '../../styles/colors'\nimport { FOOTER_FONT } from '../../styles/font'\n\nexport const footerStyle: Record<string, SxProps> = {\n  footerContainer: {\n    bgcolor: FOOTER_COLORS.background,\n    color: FOOTER_COLORS.font,\n    padding: px(10, 0),\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `flex-end`,\n    justifyContent: `flex-end`,\n  },\n  text: {\n    padding: px(0, 15),\n    fontSize: FOOTER_FONT.fontSize,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { FOOTER_TEXT } from '../../text/FooterText'\nimport { footerStyle } from '../../components-style/footer/footerStyle'\n\nexport const Footer: VoidFunctionComponent = () => (\n  <Box sx={footerStyle.footerContainer}>\n    <Box sx={footerStyle.text}>{FOOTER_TEXT.author},</Box>\n    <Box sx={footerStyle.text}>\n      &copy; {FOOTER_TEXT.school}, {FOOTER_TEXT.year}\n    </Box>\n  </Box>\n)\n","import { MutableRefObject, useRef } from 'react'\n\nexport const useUpdatedRef = <T>(value: T): MutableRefObject<T> => {\n  const valueRef = useRef<T>(value)\n  valueRef.current = value\n  return valueRef\n}\n","import { useEffect, useState } from 'react'\n\nexport const useDebounce = <T>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n  return debouncedValue\n}\n","import { Air, AirportShuttle, DirectionsBoat, DirectionsCar, LocalFlorist } from '@mui/icons-material'\n\nimport flowerJson from '../../../test-data/flowerData.json'\nimport birdJson from '../../../test-data/birdData.json'\nimport carJson from '../../../test-data/carData.json'\nimport titanicJson from '../../../test-data/titanicData.json'\nimport parallelCarsJson from '../../../test-data/parallelCarsData.json'\n\nimport { DataType } from '../../types/data/data'\n\nexport enum SampleDataset {\n  flowers = `flower`,\n  birds = `bird`,\n  cars = `car`,\n  titanic = `titanic`,\n  parallelCars = `parallelCars`,\n}\n\nexport const SAMPLE_DATASET_OPTIONS = Object.values(SampleDataset)\n\nexport const sampleDatasetIcons: Record<SampleDataset, JSX.Element> = {\n  [SampleDataset.flowers]: <LocalFlorist />,\n  [SampleDataset.birds]: <Air />,\n  [SampleDataset.cars]: <DirectionsCar />,\n  [SampleDataset.titanic]: <DirectionsBoat />,\n  [SampleDataset.parallelCars]: <AirportShuttle />,\n}\n\nexport const sampleDatasets: Record<SampleDataset, DataType[]> = {\n  [SampleDataset.flowers]: flowerJson,\n  [SampleDataset.birds]: birdJson,\n  [SampleDataset.cars]: carJson,\n  [SampleDataset.titanic]: titanicJson,\n  [SampleDataset.parallelCars]: parallelCarsJson,\n}\n","import { GridLayoutItem } from '../../types/views/Grid'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { ViewType } from './ViewTypes'\n\nexport const DEFAULT_BRUSH_COLOR = `#830606`\nexport const DEFAULT_BRUSH_BG_COLOR_TABLE = `#ffcfcf`\nexport const DEFAULT_BRUSH_FONT_COLOR_TABLE = `#111111`\nexport const DEFAULT_FONT_COLOR_PARALLEL_SETS = `#252525`\n\nexport const VIEW_BORDER_SIZE = 5\n\nexport const DRAG_HANDLE = `drag-handle`\n\nexport const HEADER_HEIGHT = 30\n\nexport const VIEW_DEFAULT_SIZE: Dimensions = {\n  width: 0,\n  height: 0,\n}\n\nexport const COLUMNS_COUNT = 25\nexport const ROW_HEIGHT = 10\n\nexport const VIEW_LIMITS: Record<ViewType, Required<Pick<GridLayoutItem, `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.Glyphs]: {\n    minW: 4,\n    minH: 6,\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    minW: 4,\n    minH: 8,\n  },\n  [ViewType.DataTable]: {\n    minW: 4,\n    minH: 10,\n  },\n  [ViewType.ParallelSetsBundled]: {\n    minW: 4,\n    minH: 8,\n  },\n}\n\nexport const DEFAULT_VIEW_DIMENSIONS: Record<ViewType, Required<Pick<GridLayoutItem, `w` | `h` | `minW` | `minH`>>> = {\n  [ViewType.ParallelCoordinates]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  [ViewType.ScatterPlotMatrix]: {\n    w: 14,\n    h: 26,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  [ViewType.Glyphs]: {\n    w: 12,\n    h: 12,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n  [ViewType.ScatterPlotGlyphs]: {\n    w: 12,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.ScatterPlotGlyphs],\n  },\n  [ViewType.DataTable]: {\n    w: 18,\n    h: 20,\n    ...VIEW_LIMITS[ViewType.DataTable],\n  },\n  [ViewType.ParallelSetsBundled]: {\n    w: 12,\n    h: 16,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n}\n\nexport const DEFAULT_GRID_LAYOUT_QUANTITATIVE: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelCoordinates,\n    w: 14,\n    h: 17,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelCoordinates],\n  },\n  {\n    i: ViewType.ScatterPlotMatrix,\n    w: 11,\n    h: 30,\n    x: 14,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ScatterPlotMatrix],\n  },\n  {\n    i: ViewType.Glyphs,\n    w: 14,\n    h: 13,\n    x: 0,\n    y: 17,\n    ...VIEW_LIMITS[ViewType.Glyphs],\n  },\n]\n\nexport const DEFAULT_GRID_LAYOUT_NOMINAL: GridLayoutItem[] = [\n  {\n    i: ViewType.ParallelSetsBundled,\n    w: 25,\n    h: 25,\n    x: 0,\n    y: 0,\n    ...VIEW_LIMITS[ViewType.ParallelSetsBundled],\n  },\n]\n","export const CATEGORY_LIMIT = 10\n\nexport enum OptionType {\n  leave = `leave`,\n  change = `change`,\n  filter = `filter`,\n}\n\nexport const OPTION_TYPES = Object.values(OptionType)\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, ChangeEvent } from 'react'\nimport { Add, AutoGraph } from '@mui/icons-material'\nimport { Box, Button } from '@mui/material'\n\nimport { DataType, SelectableDataType } from '../../../../../types/data/data'\n\nimport { CsvParse, isArrayOfDataType } from '../../../../../helpers/data/dataConvertors'\n\nimport { DataLoadError, DataLoadState } from '../../../../../constants/data/dataLoadState'\nimport {\n  SAMPLE_DATASET_OPTIONS,\n  SampleDataset,\n  sampleDatasetIcons,\n  sampleDatasets,\n} from '../../../../../constants/data/sampleDataset'\n\nimport { FILE_READER_TEXT } from '../../../../../text/SiteText'\n\nimport {\n  fileReaderStyle,\n  getFileReaderBoxStyle,\n} from '../../../../../components-style/content/top-toolbar/items/file-reader/fileReaderStyle'\n\nimport { SelectionDialog } from '../../../common/dialogs/SelectionDialog'\nimport { InformationDialog } from '../../../common/dialogs/InformationDialog'\nimport { ClickableButton } from '../buttons/ClickableButton'\nimport { getAttributeKeys } from '../../../../../helpers/data/data'\nimport { NullDialog } from './NullDialog'\n\nexport interface FileReaderDataProps {\n  setDataset: (dataset: ReadonlyArray<SelectableDataType> | null) => void\n  setDataLoadState: Dispatch<SetStateAction<DataLoadState>>\n}\n\nexport interface FileReaderProps extends FileReaderDataProps {\n  isHighlighted: boolean\n}\n\nexport const addSelected = (data: Array<DataType>): Array<SelectableDataType> =>\n  data.map((d) => ({ ...d, selected: false }))\n\nenum AcceptableFileTypes {\n  json = `application/json`,\n  csv = `text/csv`,\n}\n\nconst FILE_INPUT_ID = `FILE_INPUT`\n\nexport const FileReader: VoidFunctionComponent<FileReaderProps> = ({ setDataset, setDataLoadState, isHighlighted }) => {\n  const [isSampleDataDialogOpen, setIsSampleDataDialogOpen] = useState(false)\n\n  const [isNullDialogOpen, setIsNullDialogOpen] = useState(false)\n  const [nullContainingAttributes, setNullContainingAttributes] = useState<Array<keyof SelectableDataType>>([])\n  const [rawDataset, setRawDataset] = useState<Array<SelectableDataType>>([])\n\n  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)\n  const [alertDialogText, setAlertDialogText] = useState<{ title: string; description: string } | null>(null)\n\n  const handleListItemClick = useCallback(\n    (optionKey: SampleDataset) => {\n      setIsSampleDataDialogOpen(false)\n      const dataset = sampleDatasets[optionKey]\n      setDataset(addSelected(dataset))\n      setDataLoadState(DataLoadState.Loaded)\n    },\n    [setDataLoadState, setDataset],\n  )\n\n  const closeDialog = useCallback(() => {\n    setIsNullDialogOpen(false)\n    setRawDataset([])\n    setNullContainingAttributes([])\n  }, [])\n\n  const getDatasetFromFile = useCallback(\n    async (fileType: AcceptableFileTypes | string, selectedFile: File): Promise<DataType[] | null> => {\n      switch (fileType) {\n        case AcceptableFileTypes.json: {\n          const text = await selectedFile.text()\n          return JSON.parse(text)\n        }\n        case AcceptableFileTypes.csv: {\n          const textCsv = await selectedFile.text()\n          return CsvParse(textCsv)\n        }\n        default: {\n          return null\n        }\n      }\n    },\n    [],\n  )\n\n  const handleFileChange = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      if (e.target.files?.length) {\n        setDataLoadState(DataLoadState.Loading)\n        const selectedFile = e.target.files[0]\n        const fileType = selectedFile.type\n        const dataset = await getDatasetFromFile(fileType, selectedFile)\n\n        if (dataset === null || !isArrayOfDataType(dataset)) {\n          const dataLoadErrorType = dataset === null ? DataLoadError.unsupportedFile : DataLoadError.unsupportedFormat\n          setDataLoadState(DataLoadState.NoData)\n          setAlertDialogText(FILE_READER_TEXT.alertDialog[dataLoadErrorType])\n          setIsAlertDialogOpen(true)\n          setDataset(null)\n          return\n        }\n\n        const selectableDataset = addSelected(dataset)\n        const nullContainingAttributes = getAttributeKeys(selectableDataset).filter((att) =>\n          dataset.some((data) => data[att] === null),\n        )\n        if (nullContainingAttributes.length) {\n          setNullContainingAttributes(nullContainingAttributes)\n          setRawDataset(selectableDataset)\n          setIsNullDialogOpen(true)\n          const fileEl = document.getElementById(FILE_INPUT_ID) as unknown as { value: null }\n          fileEl.value = null\n          return\n        }\n        setDataset(selectableDataset)\n        setDataLoadState(DataLoadState.Loaded)\n      }\n    },\n    [getDatasetFromFile, setDataLoadState, setDataset],\n  )\n\n  return (\n    <>\n      <SelectionDialog\n        isOpen={isSampleDataDialogOpen}\n        onClose={() => setIsSampleDataDialogOpen(false)}\n        title={FILE_READER_TEXT.sampleDataDialogTitle}\n        options={SAMPLE_DATASET_OPTIONS.map((key) => ({\n          key,\n          label: FILE_READER_TEXT.sampleDataDialogText[key],\n          icon: sampleDatasetIcons[key],\n        }))}\n        handleListItemClick={handleListItemClick}\n      />\n      <InformationDialog\n        isOpen={isAlertDialogOpen}\n        onClose={() => setIsAlertDialogOpen(false)}\n        title={alertDialogText?.title}\n        description={alertDialogText?.description}\n        confirmText={FILE_READER_TEXT.alertDialog.confirm}\n        alert={true}\n      />\n      <NullDialog\n        isOpen={isNullDialogOpen}\n        onClose={() => {\n          setDataLoadState(DataLoadState.NoData)\n          closeDialog()\n        }}\n        nullContainingAttributes={nullContainingAttributes}\n        dataset={rawDataset}\n        setDataset={(dataset) => {\n          setDataset(dataset)\n          setDataLoadState(DataLoadState.Loaded)\n          closeDialog()\n        }}\n      />\n      <Box sx={getFileReaderBoxStyle(isHighlighted)}>\n        <ClickableButton\n          onClick={() => setIsSampleDataDialogOpen(true)}\n          icon={<AutoGraph />}\n          label={FILE_READER_TEXT.sampleDataLabel}\n        />\n        <Button sx={fileReaderStyle.button} variant=\"contained\" component=\"label\">\n          <Add />\n          {FILE_READER_TEXT.button}\n          <input type=\"file\" hidden id={FILE_INPUT_ID} onChange={handleFileChange} />\n        </Button>\n      </Box>\n    </>\n  )\n}\n","import { SampleDataset } from '../constants/data/sampleDataset'\nimport { DataLoadError } from '../constants/data/dataLoadState'\nimport { OptionType } from '../constants/data/data'\n\nexport const EMPTY_DATA_TEXT = {\n  content: `To use the application, first load the dataset from a JSON or CSV file. You can also try this application with sample data.`,\n  loading: `Loading...`,\n}\n\nexport const TOP_TOOLBAR_TEXT = {\n  labelDetailsVisible: `Display details`,\n  labelClearBrushes: `Clear brushes`,\n  labelAddView: `Add a view`,\n  labelBrushingOnEOM: `Brushing set only at the end of the move`,\n  labelBrushColor: `Brush color`,\n  addViewDialogTitle: `Add a view`,\n  noOption: `All view options are currently displayed.`,\n  saveText: {\n    header: `Save to file`,\n    description: `Do you want to save the visualization to an SVG file?`,\n    save: `Save`,\n    confirm: `Save`,\n    cancel: `Cancel`,\n  },\n  filter: `Filter`,\n}\n\nexport const FILE_READER_TEXT = {\n  button: `Select a file`,\n  sampleDataLabel: `Try it on the sample data`,\n  sampleDataDialogTitle: `Select sample dataset`,\n  sampleDataDialogText: {\n    [SampleDataset.flowers]: `Flower dataset`,\n    [SampleDataset.birds]: `Bird dataset`,\n    [SampleDataset.cars]: `Car dataset`,\n    [SampleDataset.titanic]: `Titanic dataset`,\n    [SampleDataset.parallelCars]: `Car parallel dataset`,\n  },\n  alertDialog: {\n    [DataLoadError.unsupportedFile]: {\n      title: `File type not supported`,\n      description: `This file type is not supported. Use JSON or CSV file.`,\n    },\n    [DataLoadError.unsupportedFormat]: {\n      title: `File format not supported`,\n      description: `The file format is invalid. The valid json file format is an array of objects with the same keys and simple JSON values (number, string, boolean, null)`,\n    },\n    confirm: `OK`,\n  },\n  nullDialog: {\n    title: `Data with null values occurred!`,\n    description: `This application provides only basic operations for modifying null data values. For better processing, use applications designed for this purpose.`,\n    confirm: `Confirm`,\n    optionsText: {\n      [OptionType.leave]: `Leave as is`,\n      [OptionType.filter]: `Filter`,\n      [OptionType.change]: `Change all`,\n    },\n    optionsDescription: {\n      [OptionType.leave]: `This option leaves the data as is. On numeric scales, null values will be cast to 0, in the table they will be displayed as null, for categorical data a separate category will be created.`,\n      [OptionType.filter]: `This option filters out all data with null values. These data will not be considered further in the application.`,\n      [OptionType.change]: `This option replaces all null values with the value entered below.`,\n    },\n    changeTo: `Change to`,\n    attribute: `Attribute:`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { TOP_TOOLBAR_COLORS } from '../../../styles/colors'\n\nexport const topToolbarStyle: Record<string, SxProps> = {\n  toolbar: {\n    width: `100%`,\n    padding: px(10, 0),\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `stretch`,\n    bgcolor: TOP_TOOLBAR_COLORS.background,\n    color: TOP_TOOLBAR_COLORS.font,\n  },\n  separator: {\n    height: `100%`,\n    margin: px(0, 4),\n    borderLeft: border(2, TOP_TOOLBAR_COLORS.border),\n  },\n  left: {\n    display: `flex`,\n    margin: px(0, 12),\n    alignItems: `center`,\n  },\n  middle: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n  right: {\n    display: `flex`,\n    alignItems: `center`,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const topToolbarButtonStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 5),\n    padding: px(4),\n    minWidth: 0,\n    '&.MuiButtonBase-root': {\n      bgcolor: BUTTON_COLORS.buttonDisableBackground,\n      color: BUTTON_COLORS.fontDisabled,\n      border: border(1, BUTTON_COLORS.border),\n    },\n    '&.MuiButtonBase-root:not(.Mui-disabled)': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n      color: BUTTON_COLORS.fontOn,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonHoverBackground,\n      },\n      '&.MuiToggleButton-root:not(.Mui-selected)': {\n        bgcolor: BUTTON_COLORS.buttonOffBackground,\n        color: BUTTON_COLORS.fontOff,\n      },\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\nexport interface ClickableButtonDataProps {\n  onClick: () => void\n  disabled?: boolean\n  icon: JSX.Element\n  label: string\n}\n\nexport type ButtonProps = ClickableButtonDataProps\n\nexport const ClickableButton: VoidFunctionComponent<ButtonProps> = ({ icon, onClick, disabled, label }) => (\n  <Button variant=\"contained\" onClick={onClick} sx={topToolbarButtonStyle.button} disabled={disabled}>\n    <Tooltip title={label}>{icon}</Tooltip>\n  </Button>\n)\n","import { parse } from 'csv-string'\nimport { DataType, JsonValue } from '../../types/data/data'\n\nexport const isJsonValue = (value: unknown): value is JsonValue =>\n  typeof value === `number` || typeof value === `string` || typeof value === `boolean` || value === null\n\nexport const isArrayOfDataType = (dataset: unknown): dataset is ReadonlyArray<DataType> => {\n  if (Array.isArray(dataset) && dataset.length > 0) {\n    const example = dataset[0]\n    const keys = Object.keys(example)\n    return dataset.every(\n      (data) => Object.keys(data).every((key, idx) => key === keys[idx]) && Object.values(data).every(isJsonValue),\n    )\n  }\n  return false\n}\n\nexport const CsvParse = (textCsv: string): DataType[] =>\n  parse(textCsv, { output: `objects` }).map((data) =>\n    Object.fromEntries(\n      Object.keys(data).map((key) => {\n        const value = data[key]\n        if (value.toLowerCase() === `null` || value === ``) return [key, null]\n        if (value.toLowerCase() === `true`) return [key, true]\n        if (value.toLowerCase() === `false`) return [key, false]\n        const numValue = Number(value.replace(`,`, `.`))\n        if (!isNaN(numValue)) return [key, numValue]\n        return [key, value]\n      }),\n    ),\n  )\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS, HIGHLIGHT_COLOR } from '../../../../../styles/colors'\n\nexport const getFileReaderBoxStyle = (isHighlighted: boolean): SxProps => ({\n  transition: `0.3s all ease`,\n  border: isHighlighted ? border(2, HIGHLIGHT_COLOR.border) : border(0, HIGHLIGHT_COLOR.border),\n  bgcolor: isHighlighted ? HIGHLIGHT_COLOR.background : HIGHLIGHT_COLOR.backgroundGone,\n\n  padding: isHighlighted ? px(8, 2) : 0,\n  borderRadius: px(10),\n})\n\nexport const fileReaderStyle: Record<string, SxProps> = {\n  button: {\n    margin: px(0, 6, 0, 2),\n    bgcolor: BUTTON_COLORS.buttonOnBackground,\n    color: BUTTON_COLORS.fontOn,\n    '&:hover': {\n      bgcolor: BUTTON_COLORS.buttonHoverBackground,\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS, ERROR_COLORS, BUTTON_COLORS } from '../../../styles/colors'\n\nexport const dialogStyle: Record<string, SxProps> = {\n  dialog: {\n    '& .MuiPaper-root': {\n      minWidth: px(300),\n    },\n  },\n  alert: {\n    color: ERROR_COLORS.font,\n  },\n  description: {\n    padding: px(25, 30, 20),\n    color: SITE_COLORS.font,\n  },\n  innerContent: {\n    padding: px(0, 40, 10),\n  },\n  contentBox: {\n    height: px(120),\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  text: {\n    color: SITE_COLORS.font,\n  },\n  toggleDialogGroup: {\n    width: `100%`,\n    marginBottom: px(5),\n    display: `flex`,\n  },\n  toggleDialogButton: {\n    flexGrow: 1,\n    padding: px(6),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonDialogBackground,\n      color: BUTTON_COLORS.buttonDialogFont,\n      '&:hover': {\n        bgcolor: BUTTON_COLORS.buttonDialogHoverBackground,\n      },\n    },\n  },\n  button: {\n    margin: px(0, 20, 20),\n  },\n  attHeader: {\n    fontSize: px(16),\n    fontWeight: `bold`,\n    paddingBottom: px(4),\n    color: SITE_COLORS.font,\n  },\n  textInput: {\n    minWidth: `95%`,\n    alignSelf: `center`,\n    '&.MuiFormControl-root': {\n      margin: px(20, 6, 6),\n    },\n    '& input': {\n      padding: px(8, 10, 6),\n    },\n  },\n}\n","import {\n  Avatar,\n  Dialog,\n  DialogTitle,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface Option<T> {\n  key: T\n  label: string\n  icon: JSX.Element\n}\n\nexport interface SelectionDialogProps<T> {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  options: Array<Option<T>>\n  handleListItemClick: (optionKey: T) => void\n  noOptionText?: string\n}\n\nexport const SelectionDialog = <T,>({\n  isOpen,\n  onClose,\n  title,\n  options,\n  handleListItemClick,\n  noOptionText,\n}: SelectionDialogProps<T>): JSX.Element => (\n  <Dialog onClose={onClose} open={isOpen} sx={dialogStyle.dialog}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <List>\n      {options.map((option) => (\n        <ListItem button onClick={() => handleListItemClick(option.key)} key={String(option.key)}>\n          <ListItemAvatar>\n            <Avatar>{option.icon}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={option.label} />\n        </ListItem>\n      ))}\n      {!options.length && <Typography sx={dialogStyle.description}>{noOptionText}</Typography>}\n    </List>\n  </Dialog>\n)\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nimport { dialogStyle } from '../../../../components-style/content/common/dialogStyle'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  description?: string\n  confirmText: string\n  alert?: boolean\n}\n\nexport const InformationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  onClose,\n  title,\n  description,\n  confirmText,\n  alert = false,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText sx={alert ? dialogStyle.alert : {}}>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} autoFocus>\n        {confirmText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import {\n  CheckedForSelectableDataType,\n  ExtentForSelectableDataType,\n  NominalRecord,\n  NominalValueProperties,\n  SelectableDataType,\n  SelectedKey,\n} from '../../types/data/data'\n\nimport { CATEGORY_LIMIT } from '../../constants/data/data'\nimport { NodeDataPoint, SankeyGraph } from '../../types/d3-sankey'\n\nconst getDatasetSample = (dataset: ReadonlyArray<SelectableDataType>) => dataset[0]\n\nexport const getAttributeKeys = (dataset: ReadonlyArray<SelectableDataType>): Array<keyof SelectableDataType> =>\n  Object.keys(getDatasetSample(dataset)).filter((key) => key !== SelectedKey)\n\nexport const getDefaultQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => getAttributeKeys(dataset).filter((key) => typeof dataset[0][key] === `number`)\n\nexport const getQuantitativeAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> =>\n  getAttributeKeys(dataset).filter((key) => dataset.every((data) => !isNaN(Number(data[key]))))\n\nexport const getCategoryAttributesKeys = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): Array<keyof SelectableDataType> => {\n  const keys = getAttributeKeys(dataset)\n  return keys.filter((key) => {\n    const uniqueValues = new Set(dataset.map((data) => data[key]))\n    return uniqueValues.size < CATEGORY_LIMIT\n  })\n}\n\nexport const getDefaultAllAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const keys = getAttributeKeys(dataset)\n  return Object.fromEntries(keys.map((key) => [key, true]))\n}\n\nexport const getDefaultQuantitativeAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => {\n  const defaultQuantitativeAttributesKeys = getDefaultQuantitativeAttributesKeys(dataset)\n  const possibleQuantitativeAttributesKeys = getQuantitativeAttributesKeys(dataset)\n\n  return Object.fromEntries(\n    possibleQuantitativeAttributesKeys.map((key) => [key, defaultQuantitativeAttributesKeys.some((kk) => kk === key)]),\n  )\n}\n\nexport const getDefaultNominalAttributesChecked = (\n  dataset: ReadonlyArray<SelectableDataType>,\n): CheckedForSelectableDataType => Object.fromEntries(getCategoryAttributesKeys(dataset).map((key) => [key, true]))\n\nexport const getDefaultSelectionForAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): ExtentForSelectableDataType => Object.fromEntries(displayAttributes.map((key) => [key, null]))\n\nexport const getNominalValueProperties = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  attribute: keyof SelectableDataType,\n): Array<NominalValueProperties> =>\n  dataset.reduce((nominalValuePropertiesArr, data) => {\n    const containedIdx = nominalValuePropertiesArr.findIndex((values) => values.name === String(data[attribute]))\n    if (containedIdx !== -1) {\n      const prev = nominalValuePropertiesArr[containedIdx]\n      nominalValuePropertiesArr[containedIdx] = {\n        ...prev,\n        count: nominalValuePropertiesArr[containedIdx].count + 1,\n        countSelected: nominalValuePropertiesArr[containedIdx].countSelected + (data.selected ? 1 : 0),\n      }\n      return nominalValuePropertiesArr\n    }\n    const newNominalValueProperties: NominalValueProperties = {\n      name: String(data[attribute]),\n      attribute,\n      count: 1,\n      countSelected: data.selected ? 1 : 0,\n    }\n    nominalValuePropertiesArr = [...nominalValuePropertiesArr, newNominalValueProperties]\n    return nominalValuePropertiesArr\n  }, [] as Array<NominalValueProperties>)\n\nexport const getNominalValuesRecord = (dataset: ReadonlyArray<SelectableDataType>): NominalRecord =>\n  Object.fromEntries(\n    getCategoryAttributesKeys(dataset).map((attribute) => [attribute, getNominalValueProperties(dataset, attribute)]),\n  )\n\nexport const getNeighborAttributes = (\n  displayAttributes: Array<keyof SelectableDataType>,\n): Array<[keyof SelectableDataType, keyof SelectableDataType]> =>\n  displayAttributes.slice(0, -1).map((att, idx) => [att, displayAttributes[idx + 1]])\n\nexport const getGraph = (\n  dataset: ReadonlyArray<SelectableDataType>,\n  record: NominalRecord,\n  attFrom: keyof SelectableDataType,\n  attTo: keyof SelectableDataType,\n): SankeyGraph => {\n  const nodes: Array<NodeDataPoint> = [...record[attFrom], ...record[attTo]]\n  const toIdxStart = record[attFrom].length\n\n  const links = record[attFrom].flatMap((from, idxFrom) =>\n    record[attTo].map((to, idxTo) => {\n      const filtered = dataset.filter(\n        (data) => String(data[attFrom]) === String(from.name) && String(data[attTo]) === String(to.name),\n      )\n      return {\n        source: idxFrom,\n        target: idxTo + toIdxStart,\n        names: [from.name, to.name],\n        selected: filtered.filter((data) => data.selected).length,\n        value: filtered.length,\n      }\n    }),\n  )\n\n  return { nodes, links }\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  TextField,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material'\n\nimport { SelectableDataType } from '../../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../../helpers/data/formatText'\n\nimport { OPTION_TYPES, OptionType } from '../../../../../constants/data/data'\n\nimport { FILE_READER_TEXT } from '../../../../../text/SiteText'\n\nimport { dialogStyle } from '../../../../../components-style/content/common/dialogStyle'\n\nexport interface NullDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  nullContainingAttributes: Array<keyof SelectableDataType>\n  dataset: Array<SelectableDataType>\n  setDataset: (dataset: Array<SelectableDataType>) => void\n}\n\nexport const NullDialog: VoidFunctionComponent<NullDialogProps> = ({\n  isOpen,\n  onClose,\n  nullContainingAttributes,\n  dataset,\n  setDataset,\n}) => {\n  const [optionsChosen, setOptionsChosen] = useState<Record<keyof SelectableDataType, OptionType>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, OptionType.leave])),\n  )\n  const [replaceValue, setReplaceValue] = useState<Record<keyof SelectableDataType, string>>(\n    Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])),\n  )\n\n  useEffect(() => {\n    setOptionsChosen(Object.fromEntries(nullContainingAttributes.map((att) => [att, OptionType.leave])))\n    setReplaceValue(Object.fromEntries(nullContainingAttributes.map((att) => [att, ``])))\n  }, [nullContainingAttributes])\n\n  const getFixedDataset = useCallback(\n    (dataset: SelectableDataType[], attribute: keyof SelectableDataType) => {\n      switch (optionsChosen[attribute]) {\n        case OptionType.filter:\n          return dataset.filter((data) => data[attribute] !== null)\n        case OptionType.change: {\n          const newValue = !isNaN(Number(replaceValue[attribute]))\n            ? Number(replaceValue[attribute])\n            : replaceValue[attribute]\n          return dataset.map((data) => ({\n            ...data,\n            [attribute]: data[attribute] === null ? newValue : data[attribute],\n          }))\n        }\n        case OptionType.leave:\n          return dataset\n      }\n    },\n    [optionsChosen, replaceValue],\n  )\n\n  const handleNullDialogConfirm = useCallback(() => {\n    let datasetFixed: SelectableDataType[] = dataset\n    nullContainingAttributes.forEach((attribute) => {\n      datasetFixed = getFixedDataset(datasetFixed, attribute)\n    })\n    setDataset(datasetFixed)\n  }, [dataset, getFixedDataset, nullContainingAttributes, setDataset])\n\n  const handleToggleChange = useCallback(\n    (value: OptionType, attribute: keyof SelectableDataType) =>\n      setOptionsChosen((prev) => ({\n        ...prev,\n        [attribute]: value,\n      })),\n    [],\n  )\n  const handleReplaceChange = useCallback(\n    (value: string, attribute: keyof SelectableDataType) =>\n      setReplaceValue((prev) => ({\n        ...prev,\n        [attribute]: value,\n      })),\n    [],\n  )\n\n  return (\n    <Dialog onClose={onClose} open={isOpen}>\n      <DialogTitle>{FILE_READER_TEXT.nullDialog.title}</DialogTitle>\n      <Divider />\n      <DialogContent>\n        <DialogContentText sx={dialogStyle.description}>{FILE_READER_TEXT.nullDialog.description}</DialogContentText>\n        {nullContainingAttributes.map((attribute) => {\n          const option = optionsChosen[attribute]\n          return (\n            <Box key={attribute} sx={dialogStyle.innerContent}>\n              <Typography sx={dialogStyle.attHeader}>{`${\n                FILE_READER_TEXT.nullDialog.attribute\n              } ${otherCasesToWhitespaces(attribute)}`}</Typography>\n              <ToggleButtonGroup\n                sx={dialogStyle.toggleDialogGroup}\n                value={option}\n                exclusive\n                onChange={(e, value) => handleToggleChange(value, attribute)}\n              >\n                {OPTION_TYPES.map((optType, idx) => (\n                  <ToggleButton sx={dialogStyle.toggleDialogButton} value={optType} key={idx}>\n                    {FILE_READER_TEXT.nullDialog.optionsText[optType]}\n                  </ToggleButton>\n                ))}\n              </ToggleButtonGroup>\n              <Box sx={dialogStyle.contentBox}>\n                <Typography sx={dialogStyle.text}>{FILE_READER_TEXT.nullDialog.optionsDescription[option]}</Typography>\n                {option === OptionType.change && (\n                  <TextField\n                    label={FILE_READER_TEXT.nullDialog.changeTo}\n                    sx={dialogStyle.textInput}\n                    defaultValue={replaceValue[attribute]}\n                    onChange={(e) => handleReplaceChange(e.target.value, attribute)}\n                  />\n                )}\n              </Box>\n            </Box>\n          )\n        })}\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"contained\" onClick={handleNullDialogConfirm} sx={dialogStyle.button} autoFocus>\n          {FILE_READER_TEXT.nullDialog.confirm}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { SelectableDataType } from '../../types/data/data'\n\ntype Comparator = (a: SelectableDataType, b: SelectableDataType) => number\n\nconst descCompare = <T>(a: T, b: T, orderBy: keyof T) =>\n  b[orderBy] < a[orderBy] ? -1 : b[orderBy] > a[orderBy] ? 1 : 0\n\nexport enum SortType {\n  asc = `asc`,\n  desc = `desc`,\n}\n\nexport const getComparator = (sort: SortType, orderBy: keyof SelectableDataType): Comparator =>\n  sort === SortType.desc ? (a, b) => descCompare(a, b, orderBy) : (a, b) => -descCompare(a, b, orderBy)\n","import { Dispatch, VoidFunctionComponent, MouseEvent, SetStateAction, useCallback } from 'react'\nimport { ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material'\n\nimport { topToolbarButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/topToolbarButtonStyle'\n\ntype SetValue = Dispatch<SetStateAction<boolean>> | ((newValue: boolean) => void)\n\nexport interface ToggleButtonProps {\n  value: boolean\n  setValue: SetValue\n  icon: JSX.Element\n  label: string\n  disabled?: boolean\n}\nconst ON_VALUE = `on`\n\nexport const ToggleButtonSingle: VoidFunctionComponent<ToggleButtonProps> = ({\n  icon,\n  value,\n  setValue,\n  label,\n  disabled,\n}) => {\n  const handleChange = useCallback(\n    (event: MouseEvent<HTMLElement>, checked: string[]) => {\n      if (checked.length && checked[0] === ON_VALUE) {\n        return setValue(true)\n      }\n      return setValue(false)\n    },\n    [setValue],\n  )\n  return (\n    <ToggleButtonGroup value={value ? [ON_VALUE] : []} onChange={handleChange}>\n      <ToggleButton sx={topToolbarButtonStyle.button} value={ON_VALUE} aria-label={label} disabled={disabled}>\n        <Tooltip title={label}>{icon}</Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const openSettingsButtonStyle: Record<string, SxProps> = {\n  settings: {\n    margin: px(0, 10, 0, 6),\n    color: BUTTON_COLORS.buttonOnBackground,\n    '& .Mui-disabled': {\n      color: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Settings } from '@mui/icons-material'\nimport { IconButton } from '@mui/material'\n\nimport { openSettingsButtonStyle } from '../../../../../components-style/content/top-toolbar/items/buttons/openSettingsButtonStyle'\n\nexport interface OpenSettingsButtonProps {\n  disabled?: boolean\n  open: () => void\n}\n\nexport const OpenSettingsButton: VoidFunctionComponent<OpenSettingsButtonProps> = ({ disabled, open }) => (\n  <IconButton size=\"small\" disabled={disabled} onClick={open} sx={openSettingsButtonStyle.settings}>\n    <Settings />\n  </IconButton>\n)\n","import { SxProps } from '@mui/system'\nimport { border, px } from '../../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../../styles/colors'\n\nexport const getColorInputStyle = (disabled?: boolean): SxProps => ({\n  display: `flex`,\n  '& .MuiSvgIcon-root': {\n    color: disabled ? BUTTON_COLORS.fontDisabled : BUTTON_COLORS.buttonOnBackground,\n  },\n})\n\nexport const getColorInputBoxStyle = (color: string, disabled?: boolean): SxProps => ({\n  bgcolor: disabled ? BUTTON_COLORS.fontDisabled : color,\n  minWidth: px(25),\n  minHeight: px(25),\n  borderRadius: px(5),\n  ml: px(2),\n  border: border(1, disabled ? BUTTON_COLORS.buttonDisableBackground : BUTTON_COLORS.colorBorder),\n})\n\nexport const colorInputStyle: Record<string, SxProps> = {\n  inputBox: {\n    position: `relative`,\n    '& input': {\n      width: `100%`,\n      opacity: 0,\n      position: `absolute`,\n      left: 0,\n    },\n  },\n}\n","import { useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Box, Tooltip } from '@mui/material'\n\nimport { useDebounce } from '../../../../../helpers/react/useDebounce'\n\nimport { COLOR_DEBOUNCE } from '../../../../../constants/debounce/debounce'\n\nimport {\n  colorInputStyle,\n  getColorInputBoxStyle,\n  getColorInputStyle,\n} from '../../../../../components-style/content/top-toolbar/items/buttons/colorButtonStyle'\n\nexport interface ColorButtonProps {\n  color: string\n  handleSetColor: (color: string) => void\n  tooltip: string\n  disabled?: boolean\n  icon: JSX.Element\n}\n\nexport const ColorButton: VoidFunctionComponent<ColorButtonProps> = ({\n  color,\n  handleSetColor,\n  tooltip,\n  disabled,\n  icon,\n}) => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n  useEffect(() => {\n    handleSetColor(debouncedColor)\n  }, [debouncedColor, handleSetColor])\n\n  return (\n    <Tooltip title={tooltip} disableHoverListener={disabled}>\n      <Box sx={colorInputStyle.inputBox}>\n        <input disabled={disabled} type=\"color\" value={color} onChange={(e) => setCurrentColor(e.target.value)} />\n        <Box sx={getColorInputStyle(disabled)}>\n          {icon}\n          <Box sx={getColorInputBoxStyle(color, disabled)} />\n        </Box>\n      </Box>\n    </Tooltip>\n  )\n}\n","export const TEXT_INPUT_DEBOUNCE = 400\n\nexport const BRUSH_DEBOUNCE = 10\n\nexport const COLOR_DEBOUNCE = 60\n","import { Dispatch, VoidFunctionComponent, SetStateAction } from 'react'\nimport { AddCircle, AutoFixOff, Brush, SkipNext } from '@mui/icons-material'\nimport { Info } from '@mui/icons-material'\n\nimport { Box } from '@mui/material'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { topToolbarStyle } from '../../../components-style/content/top-toolbar/topToolbarStyle'\n\nimport { ClickableButton } from './items/buttons/ClickableButton'\nimport { FileReader, FileReaderDataProps } from './items/file-reader/FileReader'\nimport { ToggleButtonSingle } from './items/buttons/ToggleButtonSingle'\nimport { OpenSettingsButton } from './items/buttons/OpenSettingsButton'\nimport { ColorButton } from './items/buttons/ColorButton'\n\nexport interface TopToolbarProps extends FileReaderDataProps {\n  openDrawer: SideEffectVoid\n  isToolsDisabled: boolean\n\n  isDetailsVisible: boolean\n  setIsDetailsVisible: Dispatch<SetStateAction<boolean>>\n  isBrushingOnEndOfMove: boolean\n  setIsBrushingOnEndOfMove: (newIsBrushingOnEndOfMove: boolean) => void\n\n  isBrushingActive: boolean\n  clearBrushes: () => void\n\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n\n  brushColor: string\n  setBrushColor: Dispatch<SetStateAction<string>>\n}\n\nexport const TopToolbar: VoidFunctionComponent<TopToolbarProps> = ({\n  openDrawer,\n  isToolsDisabled,\n  isDetailsVisible,\n  setIsDetailsVisible,\n  isBrushingOnEndOfMove,\n  setIsBrushingOnEndOfMove,\n  isBrushingActive,\n  clearBrushes,\n  setDataset,\n  setDataLoadState,\n  setIsAddViewDialogOpen,\n  brushColor,\n  setBrushColor,\n}) => (\n  <Box sx={topToolbarStyle.toolbar}>\n    <Box sx={topToolbarStyle.left}>\n      <ClickableButton\n        icon={<AddCircle />}\n        onClick={() => setIsAddViewDialogOpen(true)}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelAddView}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ToggleButtonSingle\n        icon={<Info />}\n        value={isDetailsVisible}\n        setValue={setIsDetailsVisible}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelDetailsVisible}\n      />\n      <ToggleButtonSingle\n        icon={<SkipNext />}\n        value={isBrushingOnEndOfMove}\n        setValue={setIsBrushingOnEndOfMove}\n        disabled={isToolsDisabled}\n        label={TOP_TOOLBAR_TEXT.labelBrushingOnEOM}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.middle}>\n      <ColorButton\n        color={brushColor}\n        handleSetColor={(color) => setBrushColor(color)}\n        icon={<Brush />}\n        disabled={isToolsDisabled}\n        tooltip={TOP_TOOLBAR_TEXT.labelBrushColor}\n      />\n      <Box sx={topToolbarStyle.separator} />\n      <ClickableButton\n        icon={<AutoFixOff />}\n        onClick={clearBrushes}\n        disabled={!isBrushingActive}\n        label={TOP_TOOLBAR_TEXT.labelClearBrushes}\n      />\n    </Box>\n    <Box sx={topToolbarStyle.right}>\n      <FileReader setDataset={setDataset} setDataLoadState={setDataLoadState} isHighlighted={isToolsDisabled} />\n      <OpenSettingsButton open={openDrawer} disabled={isToolsDisabled} />\n    </Box>\n  </Box>\n)\n","/**\n * Every string is retyped to the concrete string value, because of deeper D3.js type checks,\n * that can cause errors if only string type is used with it\n */\ninterface SVGType {\n  elements: {\n    svg: `svg`\n    g: `g`\n    circle: `circle`\n    rect: `rect`\n    path: `path`\n    text: `text`\n    div: `div`\n  }\n  attributes: {\n    class: `class`\n    d: `d`\n    transform: `transform`\n    x: `x`\n    y: `y`\n    width: `width`\n    height: `height`\n    cx: `cx`\n    cy: `cy`\n    r: `r`\n    stroke: `stroke`\n    strokeWidth: `stroke-width`\n    textAnchor: `text-anchor`\n  }\n  style: {\n    fill: `fill`\n    stroke: `stroke`\n    opacity: `opacity`\n    left: `left`\n    top: `top`\n    display: `display`\n  }\n  values: {\n    none: `none`\n    block: `block`\n    start: `start`\n    end: `end`\n    middle: `middle`\n  }\n}\n\n/**\n * Constants used to work with svg D3.js.\n * Helps to avoid typos and make clear list of what is used\n */\nexport const SVG: SVGType = {\n  elements: {\n    svg: `svg`,\n    g: `g`,\n    circle: `circle`,\n    rect: `rect`,\n    path: `path`,\n    text: `text`,\n    div: `div`,\n  },\n  attributes: {\n    class: `class`,\n    d: `d`,\n    transform: `transform`,\n    x: `x`,\n    y: `y`,\n    width: `width`,\n    height: `height`,\n    cx: `cx`,\n    cy: `cy`,\n    r: `r`,\n    stroke: `stroke`,\n    strokeWidth: `stroke-width`,\n    textAnchor: `text-anchor`,\n  },\n  style: {\n    fill: `fill`,\n    stroke: `stroke`,\n    opacity: `opacity`,\n    left: `left`,\n    top: `top`,\n    display: `display`,\n  },\n  values: {\n    none: `none`,\n    block: `block`,\n    start: `start`,\n    end: `end`,\n    middle: `middle`,\n  },\n}\n","import { selectAll } from 'd3'\n\nimport { SVG } from '../../constants/svg'\n\nimport { getClass } from './stringGetters'\n\nexport const displayDetails = (isDetailsVisible: boolean | undefined, tooltipClass: string): void => {\n  if (isDetailsVisible) {\n    selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.block)\n    return\n  }\n  selectAll(getClass(tooltipClass)).style(SVG.style.display, SVG.values.none)\n}\n","export const TOOLTIP_CLASS = `tooltip-class`\n\nexport const TOOLTIP = {\n  visible: 1,\n  invisible: 0,\n  easeIn: 200,\n  easeOut: 500,\n  padding: {\n    top: 5,\n    bottom: 10,\n    lr: 5,\n  },\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\n\nexport const MENU_BASE_TEXT = {\n  more: `More options`,\n  empty: `-----`,\n}\n\nexport const MENU_TEXT = {\n  attributes: `Display attributes:`,\n  category: `Colored by`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const MARGIN_MENU_TEXT = {\n  header: `Margin`,\n  top: `Top`,\n  right: `Right`,\n  bottom: `Bottom`,\n  left: `Left`,\n}\n\nexport const OPACITY_MENU_TEXT = {\n  all: `Brushing not active`,\n  selected: `Selected`,\n  notSelected: `Not selected`,\n}\n\nexport const PALETTE_PICKER_TEXT = {\n  header: `Category colors`,\n  categoriesLabel: [`c1`, `c2`, `c3`, `c4`, `c5`, `c6`, `c7`, `c8`, `c9`, `c10`],\n}\n\nexport const VIEW_NAMES: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `Parallel Coordinates`,\n  [ViewType.ScatterPlotMatrix]: `Scatter Plot Matrix`,\n  [ViewType.Glyphs]: `Glyphs`,\n  [ViewType.ScatterPlotGlyphs]: `Scatter Plot Glyphs`,\n  [ViewType.DataTable]: `Data Table`,\n  [ViewType.ParallelSetsBundled]: `Parallel Sets (bundled layout)`,\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { TOOLTIP } from '../../../constants/views/tooltip'\nimport { PLOT_COLORS } from '../../../styles/colors'\n\nexport const viewGridStyle: Record<string, SxProps> = {\n  tooltip: {\n    position: `fixed`,\n    padding: px(TOOLTIP.padding.top, TOOLTIP.padding.lr, TOOLTIP.padding.bottom),\n    bgcolor: PLOT_COLORS.tooltipBackground,\n    color: PLOT_COLORS.tooltipFont,\n    borderRadius: px(5),\n    pointerEvents: `none`,\n    opacity: 0,\n    zIndex: 10,\n  },\n}\n","import { SxProps } from '@mui/system'\n\nimport { border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS } from '../../../styles/colors'\n\nexport const dataDrawerStyle: Record<string, SxProps> = {\n  drawer: {\n    width: px(250),\n    flexShrink: 0,\n    '& .MuiDrawer-paper': {\n      bgcolor: DATA_DRAWER_COLORS.background,\n      width: px(250),\n      alignItems: `flex-end`,\n      border: border(1, DATA_DRAWER_COLORS.border),\n    },\n    '& hr': {\n      width: `100%`,\n    },\n    '& .MuiSelect-select': {\n      padding: px(10, 12, 8),\n    },\n  },\n  header: {},\n  chevron: {\n    color: DATA_DRAWER_COLORS.icon,\n  },\n  menu: {\n    width: `100%`,\n    display: `flex`,\n    flexDirection: `column`,\n    flexGrow: 1,\n  },\n}\n","export enum ColoringType {\n  left = `Left`,\n  right = `Right`,\n  no = `No color`,\n}\n","export enum ParallelSetsBrushingType {\n  top = `top`,\n  overlay = `overlay`,\n}\n","import { schemeCategory10 } from 'd3'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { SortType } from '../../helpers/data/comparator'\n\nexport const MIN_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const GLYPHS_DEFAULT: Pick<\n  GlyphsSettings,\n  `glyphSize` | `glyphSpacing` | `margins` | `opacity` | `colorCategory` | `sortType`\n> = {\n  sortType: SortType.asc,\n  glyphSize: 35,\n  glyphSpacing: 3,\n  margins: [15, 10, 20, 10],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const GLYPHS_TEXT = {\n  unavailable: `The glyph plot cannot be displayed with less than 3 attributes. To generate a glyph plot, select more attributes from the menu.`,\n}\n\nexport const GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.Glyphs],\n  sorting: `Sorted by`,\n  unavailable: `The glyph plot cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  glyphSpacing: `Glyph spacing`,\n  opacity: `Opacity of glyphs`,\n  sort: `Sort...`,\n  ...MENU_TEXT,\n}\n","import { SxProps } from '@mui/system'\n\nimport { calc, border, px } from '../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_COLORS, ERROR_COLORS } from '../../../styles/colors'\nimport { DATA_DRAWER_FONT } from '../../../styles/font'\n\nexport const dataDrawerMenuStyle: Record<string, SxProps> = {\n  drawerMenu: {\n    width: calc(-20, `100%`),\n    padding: px(10),\n    display: `flex`,\n    flexDirection: `column`,\n    textAlign: `left`,\n    bgcolor: DATA_DRAWER_COLORS.drawerItemBackground,\n    borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n    '& h1': {\n      borderBottom: border(1, DATA_DRAWER_COLORS.drawerItemBorder),\n      fontSize: DATA_DRAWER_FONT.headerFontSize,\n      width: `100%`,\n    },\n    '& hr': {\n      margin: px(4, 0, 3),\n    },\n    '& label': {\n      fontSize: DATA_DRAWER_FONT.labelFontSize,\n      color: DATA_DRAWER_COLORS.label,\n    },\n    '& .MuiFormControlLabel-root': {\n      padding: px(2, 10),\n    },\n    '& .MuiCheckbox-root ': {\n      padding: 0,\n    },\n    '& > div': {\n      marginTop: px(10),\n    },\n  },\n  insufficientAttributeNum: {\n    padding: px(10),\n    fontSize: DATA_DRAWER_FONT.fontSize,\n    color: ERROR_COLORS.font,\n  },\n  accordion: {\n    '&.MuiPaper-root': {\n      borderRadius: 0,\n    },\n    '& .MuiButtonBase-root': {\n      minHeight: 0,\n      bgcolor: DATA_DRAWER_COLORS.drawerItemBackgroundDimmed,\n      '&.Mui-expanded': {\n        minHeight: 0,\n      },\n    },\n    '& .MuiAccordionSummary-content': {\n      margin: px(2, 0, 5),\n      '&.Mui-expanded': {\n        margin: px(2, 0, 5),\n      },\n    },\n    '& .MuiAccordionDetails-root': {\n      padding: 0,\n      '& > *:not(hr)': {\n        padding: px(5, 7),\n      },\n    },\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const menuTextStyle: Record<string, SxProps> = {\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n    padding: px(6, 5, 3),\n  },\n}\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const attributeCheckerStyle: Record<string, SxProps> = {\n  buttons: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  control: {\n    margin: px(0, 5),\n    padding: 0,\n    minWidth: 0,\n    height: 15,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, Button, Checkbox, FormControlLabel } from '@mui/material'\nimport { ArrowDropDown, ArrowDropUp } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType, SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings, SettingsType } from '../../../../types/views/settings/Settings'\nimport { attributeCheckerStyle } from '../../../../components-style/content/data-drawer/items/attributeCheckerStyle'\n\nexport interface AttributeCheckerProps<Opt extends SettingsType> {\n  viewType: ViewType\n  attributesKeys: Array<keyof SelectableDataType>\n  handleChangeSettings?: () => void\n  getNewSettings: (newChecked: CheckedForSelectableDataType, prevSettings: Opt) => Partial<Opt>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n\n  checked: CheckedForSelectableDataType\n  setChecked: Dispatch<SetStateAction<CheckedForSelectableDataType>>\n  setAttributesKeys: Dispatch<SetStateAction<Array<keyof SelectableDataType>>>\n}\n\nexport const AttributeChecker = <Opt extends SettingsType>({\n  viewType,\n  attributesKeys,\n  handleChangeSettings,\n  getNewSettings,\n  setSettings,\n  label,\n  checked,\n  setChecked,\n  setAttributesKeys,\n}: AttributeCheckerProps<Opt>): JSX.Element => {\n  const handleCheckboxChange = useCallback(\n    (eventChecked: boolean, key: keyof SelectableDataType) => {\n      const newChecked = { ...checked, [key]: eventChecked }\n      setChecked(newChecked)\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        const newSettings = getNewSettings(newChecked, prevSettings)\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            ...newSettings,\n          },\n        }\n      })\n    },\n    [checked, getNewSettings, handleChangeSettings, setChecked, setSettings, viewType],\n  )\n  const handleMove = useCallback(\n    (newAttributesKeys: Array<keyof SelectableDataType>) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setAttributesKeys(newAttributesKeys)\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]! as Opt\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            displayAttributes: newAttributesKeys.filter((key) => checked[key]),\n          },\n        }\n      })\n    },\n    [checked, handleChangeSettings, setAttributesKeys, setSettings, viewType],\n  )\n\n  const onUpButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx - 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx - 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  const onDownButton = useCallback(\n    (idx: number) => {\n      const newAttributesKeys = [...attributesKeys]\n      ;[newAttributesKeys[idx + 1], newAttributesKeys[idx]] = [newAttributesKeys[idx], newAttributesKeys[idx + 1]]\n      handleMove(newAttributesKeys)\n    },\n    [attributesKeys, handleMove],\n  )\n\n  return (\n    <>\n      <label>{label}</label>\n      {attributesKeys.map((key, idx) => (\n        <FormControlLabel\n          control={\n            <>\n              <Box sx={attributeCheckerStyle.buttons}>\n                <Button onClick={() => onUpButton(idx)} disabled={idx === 0} sx={attributeCheckerStyle.control}>\n                  <ArrowDropUp />\n                </Button>\n                <Button\n                  onClick={() => onDownButton(idx)}\n                  disabled={idx === attributesKeys.length - 1}\n                  sx={attributeCheckerStyle.control}\n                >\n                  <ArrowDropDown />\n                </Button>\n              </Box>\n              <Checkbox checked={checked[key]} onChange={(e) => handleCheckboxChange(e.target.checked, key)} />\n            </>\n          }\n          label={otherCasesToWhitespaces(key)}\n          key={`check-${viewType}-${idx}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface CategorySelectorProps {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const CategorySelector: VoidFunctionComponent<CategorySelectorProps> = ({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n}) => {\n  const handleSelectCategoryChange = useCallback(\n    (categoryAttribute: keyof SelectableDataType | -1) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            categoryAttribute: categoryAttribute === -1 ? undefined : categoryAttribute,\n          },\n        }\n      })\n    },\n    [setSettings, viewType],\n  )\n\n  return (\n    <TextField value={value ?? -1} onChange={(e) => handleSelectCategoryChange(e.target.value)} select label={label}>\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`category-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n      <MenuItem value={-1}>{MENU_TEXT.empty}</MenuItem>\n    </TextField>\n  )\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { MenuItem, TextField } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nexport interface SelectorProps<Opt> {\n  viewType: ViewType\n  value: keyof SelectableDataType\n  attributesKeys: Array<keyof SelectableDataType>\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n  label: string\n  settingsKey: keyof Opt\n}\n\nexport const Selector = <Opt,>({\n  viewType,\n  value,\n  attributesKeys,\n  setSettings,\n  label,\n  settingsKey,\n  handleChangeSettings,\n}: SelectorProps<Opt>): JSX.Element => {\n  const handleSelectChange = useCallback(\n    (newValue: keyof SelectableDataType) => {\n      if (handleChangeSettings) handleChangeSettings()\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [handleChangeSettings, setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <TextField\n      value={value}\n      onChange={(e) => handleSelectChange(e.target.value as keyof SelectableDataType)}\n      select\n      label={label}\n    >\n      {attributesKeys.map((key, idx) => (\n        <MenuItem value={key} key={`${settingsKey}-${viewType}-${idx}`}>\n          {otherCasesToWhitespaces(key)}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const numberInputStyles: Record<string, SxProps> = {\n  vertical: {\n    display: `flex`,\n    flexDirection: `column`,\n  },\n  horizontal: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  textField: {\n    '&.MuiFormControl-root': {\n      margin: px(6, 6, 4),\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { MarginArray } from '../../../../types/styling/Margin'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport { MARGIN_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface MarginInputProps {\n  margins: MarginArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n  handleChangeSettings?: () => void\n}\n\nexport const MarginInput: VoidFunctionComponent<MarginInputProps> = ({\n  margins,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentMargins, setCurrentMargins] = useState<MarginArray>(margins)\n  const debouncedMargins = useDebounce(currentMargins, TEXT_INPUT_DEBOUNCE)\n\n  const handleMarginChange = useCallback((newMargin: number, idx: number) => {\n    setCurrentMargins((oldMargins) => {\n      const newMargins: MarginArray = [...oldMargins]\n      newMargins[idx] = newMargin\n      return newMargins\n    })\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          margins: debouncedMargins,\n        },\n      }\n    })\n  }, [debouncedMargins, handleChangeSettings, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{MARGIN_MENU_TEXT.header}</Typography>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.top}\n          type=\"number\"\n          defaultValue={margins[0]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 0)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.right}\n          type=\"number\"\n          defaultValue={margins[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 1)}\n        />\n      </Box>\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={MARGIN_MENU_TEXT.bottom}\n          type=\"number\"\n          defaultValue={margins[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 2)}\n        />\n        <TextField\n          label={MARGIN_MENU_TEXT.left}\n          type=\"number\"\n          defaultValue={margins[3]}\n          sx={numberInputStyles.textField}\n          inputProps={{ inputMode: `numeric`, min: 0 }}\n          onChange={(e) => handleMarginChange(Number(e.target.value), 3)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, TextField } from '@mui/material'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nexport interface NumberInputProps<Opt> {\n  viewType: ViewType\n  label: string\n  valueKey: keyof Opt\n  value: number\n  setSettings: Dispatch<SetStateAction<Settings>>\n  min?: number\n  max?: number\n  handleChangeSettings?: () => void\n}\n\nexport const NumberInput = <Opt,>({\n  label,\n  value,\n  valueKey,\n  setSettings,\n  viewType,\n  min,\n  max,\n  handleChangeSettings,\n}: NumberInputProps<Opt>): JSX.Element => {\n  const [currentValue, setCurrentValue] = useState(value)\n  const debouncedValue = useDebounce(currentValue, COLOR_DEBOUNCE)\n\n  const handleChangeValue = useCallback((newValue: number) => {\n    setCurrentValue(newValue)\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [valueKey]: debouncedValue,\n        },\n      }\n    })\n  }, [debouncedValue, setSettings, valueKey, viewType, handleChangeValue, handleChangeSettings])\n\n  const minVal = min ? { min } : { min: 0 }\n  const maxVal = max ? { max } : {}\n  return (\n    <Box>\n      <TextField\n        label={label}\n        type=\"number\"\n        defaultValue={value}\n        sx={numberInputStyles.textField}\n        inputProps={{ inputMode: `numeric`, ...minVal, ...maxVal }}\n        onChange={(e) => handleChangeValue(Number(e.target.value))}\n      />\n    </Box>\n  )\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useCallback, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@mui/material'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { TEXT_INPUT_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport { OPACITY_MENU_TEXT } from '../../../../text/views-and-menus/common'\n\nimport { numberInputStyles } from '../../../../components-style/content/data-drawer/items/numberInputStyles'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface OpacityInputProps {\n  header: string\n  opacities: Opacity\n  setSettings: Dispatch<SetStateAction<Settings>>\n  viewType: ViewType\n}\n\nexport const OpacityInput: VoidFunctionComponent<OpacityInputProps> = ({\n  header,\n  opacities,\n  setSettings,\n  viewType,\n}) => {\n  const [currentOpacities, setCurrentOpacities] = useState<Opacity>(opacities)\n  const debouncedOpacities = useDebounce(currentOpacities, TEXT_INPUT_DEBOUNCE)\n\n  const handleOpacityChange = useCallback((newOpacity: number, idx: number) => {\n    setCurrentOpacities((oldOpacities) => {\n      const newOpacities: Opacity = [...oldOpacities]\n      newOpacities[idx] = newOpacity\n      return newOpacities\n    })\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          opacity: debouncedOpacities,\n        },\n      }\n    })\n  }, [debouncedOpacities, setSettings, viewType])\n\n  return (\n    <Box sx={numberInputStyles.vertical}>\n      <Typography sx={menuTextStyle.text}>{header}</Typography>\n      <TextField\n        label={OPACITY_MENU_TEXT.all}\n        type=\"number\"\n        defaultValue={opacities[0]}\n        sx={numberInputStyles.textField}\n        inputProps={{ min: 0, max: 100 }}\n        onChange={(e) => handleOpacityChange(Number(e.target.value), 0)}\n      />\n      <Box sx={numberInputStyles.horizontal}>\n        <TextField\n          label={OPACITY_MENU_TEXT.selected}\n          type=\"number\"\n          defaultValue={opacities[1]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 1)}\n        />\n        <TextField\n          label={OPACITY_MENU_TEXT.notSelected}\n          type=\"number\"\n          defaultValue={opacities[2]}\n          sx={numberInputStyles.textField}\n          inputProps={{ min: 0, max: 100 }}\n          onChange={(e) => handleOpacityChange(Number(e.target.value), 2)}\n        />\n      </Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { px } from '../../../../helpers/d3/stringGetters'\nimport { DATA_DRAWER_FONT } from '../../../../styles/font'\n\nexport const getPalettePickerColorInputStyle = (colors: ColorArray, index: number): SxProps => ({\n  bgcolor: colors[index],\n  '& input': {\n    width: `100%`,\n    height: px(20),\n    opacity: 0,\n  },\n})\n\nexport const palettePickerStyle: Record<string, SxProps> = {\n  picker: {\n    margin: px(5, 7),\n  },\n  text: {\n    fontSize: px(DATA_DRAWER_FONT.fontSize),\n  },\n  row: {\n    display: `flex`,\n    flexDirection: `row`,\n  },\n  col: {\n    display: `flex`,\n    flexDirection: `column`,\n    width: `20%`,\n  },\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useState, useEffect, useCallback } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { ColorArray } from '../../../../types/styling/ColorArray'\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport { PALETTE_PICKER_TEXT } from '../../../../text/views-and-menus/common'\n\nimport {\n  getPalettePickerColorInputStyle,\n  palettePickerStyle,\n} from '../../../../components-style/content/data-drawer/items/palettePickerStyle'\n\nexport interface PalettePickerProps {\n  viewType: ViewType\n  colors: ColorArray\n  setSettings: Dispatch<SetStateAction<Settings>>\n  handleChangeSettings?: () => void\n}\n\nexport const PalettePicker: VoidFunctionComponent<PalettePickerProps> = ({\n  colors,\n  setSettings,\n  viewType,\n  handleChangeSettings,\n}) => {\n  const [currentColors, setCurrentColors] = useState<ColorArray>(colors)\n  const debouncedColors = useDebounce(currentColors, COLOR_DEBOUNCE)\n\n  const handleSetColor = useCallback((newColor: string, idx: number) => {\n    if (newColor) {\n      setCurrentColors((oldColors) => {\n        const newColors: ColorArray = [...oldColors]\n        newColors[idx] = newColor\n        return newColors\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (handleChangeSettings) handleChangeSettings()\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          colorCategory: debouncedColors,\n        },\n      }\n    })\n  }, [debouncedColors, setSettings, viewType, handleChangeSettings])\n\n  const getInput = useCallback(\n    (idx: number) => (\n      <Box sx={palettePickerStyle.col} key={idx}>\n        <label>{PALETTE_PICKER_TEXT.categoriesLabel[idx]}</label>\n        <Box sx={getPalettePickerColorInputStyle(colors, idx)}>\n          <input type=\"color\" value={colors[idx]} onChange={(e) => handleSetColor(e.target.value, idx)} />\n        </Box>\n      </Box>\n    ),\n    [colors, handleSetColor],\n  )\n  return (\n    <Box sx={palettePickerStyle.picker}>\n      <Typography sx={palettePickerStyle.text}>{PALETTE_PICKER_TEXT.header}</Typography>\n      <Box sx={palettePickerStyle.row}>{[0, 1, 2, 3, 4].map((idx) => getInput(idx))}</Box>\n      <Box sx={palettePickerStyle.row}>{[5, 6, 7, 8, 9].map((idx) => getInput(idx))}</Box>\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\nimport { BUTTON_COLORS } from '../../../../styles/colors'\n\nexport const toggleButtonsStyle: Record<string, SxProps> = {\n  box: {\n    marginTop: important(0),\n  },\n  group: {\n    width: `100%`,\n    display: `flex`,\n  },\n  button: {\n    flexGrow: 1,\n    padding: px(2, 5),\n    '&.Mui-selected': {\n      bgcolor: BUTTON_COLORS.buttonOnBackground,\n    },\n  },\n}\n","import { Dispatch, SetStateAction, useCallback } from 'react'\nimport { Box, ToggleButton, ToggleButtonGroup } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { toggleButtonsStyle } from '../../../../components-style/content/data-drawer/items/toggleButtonsStyle'\n\ninterface ToggleButtonsProps<T, Opt> {\n  viewType: ViewType\n  value: T\n  options: T[]\n  setSettings: Dispatch<SetStateAction<Settings>>\n  settingsKey: keyof Opt\n}\n\nexport const ToggleButtons = <T, Opt>({\n  viewType,\n  value,\n  options,\n  setSettings,\n  settingsKey,\n}: ToggleButtonsProps<T, Opt>): JSX.Element => {\n  const handleToggleButtonChange = useCallback(\n    (newValue: T) => {\n      setSettings((prev) => {\n        const prevSettings = prev[viewType]!\n        return {\n          ...prev,\n          [viewType]: {\n            ...prevSettings,\n            [settingsKey]: newValue,\n          },\n        }\n      })\n    },\n    [setSettings, settingsKey, viewType],\n  )\n\n  return (\n    <Box sx={toggleButtonsStyle.box}>\n      <ToggleButtonGroup\n        sx={toggleButtonsStyle.group}\n        value={value}\n        exclusive\n        onChange={(e, value) => handleToggleButtonChange(value)}\n      >\n        {options.map((opt, idx) => (\n          <ToggleButton sx={toggleButtonsStyle.button} value={opt} key={idx}>\n            {opt}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport {\n  glyphSizeKey,\n  glyphSpacingKey,\n  GlyphsSettings,\n  sortAttributeKey,\n  sortTypeKey,\n} from '../../../../types/views/settings/GlyphsSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { GLYPHS_DEFAULT, MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { Selector } from '../../data-drawer/items/Selector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { SortType } from '../../../../helpers/data/comparator'\n\nexport const GlyphsMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.Glyphs\n  const glyphsSettings = settings[viewType]\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const sortableAttributes = quantitativeAttributesKeys.filter((key) => checked[key])\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultSortAttribute = newQaKeys.filter((key) => newChecked[key])?.[0]\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newGlyphs: GlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        sortAttribute: defaultSortAttribute,\n        categoryAttribute: defaultCategoryAttribute,\n        ...GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.Glyphs]: newGlyphs }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType, prevSettings: GlyphsSettings): Partial<GlyphsSettings> => {\n      const displayAttributes = getCurrentDisplayAttributes(newChecked)\n      const newSortableAttributes = quantitativeAttributesKeys.filter((key) => newChecked[key])\n      const sortAttribute = newChecked[prevSettings.sortAttribute]\n        ? prevSettings.sortAttribute\n        : newSortableAttributes?.[0]\n      return { displayAttributes, sortAttribute }\n    },\n    [getCurrentDisplayAttributes, quantitativeAttributesKeys],\n  )\n\n  if (glyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={glyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.category}\n            />\n            <Selector\n              viewType={viewType}\n              value={glyphsSettings.sortAttribute!}\n              attributesKeys={sortableAttributes}\n              setSettings={setSettings}\n              label={GLYPHS_MENU_TEXT.sorting}\n              settingsKey={sortAttributeKey}\n            />\n            <Typography sx={menuTextStyle.text}>{GLYPHS_MENU_TEXT.sort}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={glyphsSettings.sortType}\n              options={Object.values<SortType>(SortType)}\n              setSettings={setSettings}\n              settingsKey={sortTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput margins={glyphsSettings.margins} setSettings={setSettings} viewType={viewType} />\n                <Divider />\n                <NumberInput\n                  value={glyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={glyphsSettings.glyphSpacing}\n                  valueKey={glyphSpacingKey}\n                  setSettings={setSettings}\n                  label={GLYPHS_MENU_TEXT.glyphSpacing}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={GLYPHS_MENU_TEXT.opacity}\n                  opacities={glyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker colors={glyphsSettings.colorCategory} setSettings={setSettings} viewType={viewType} />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SortType } from '../../../helpers/data/comparator'\n\nimport { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const sortAttributeKey = `sortAttribute`\nexport const sortTypeKey = `sortType`\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\n\n/**\n * Settings for Glyphs view\n */\nexport interface GlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Attribute for sorting glyphs from lowest to highest value\n   */\n  [sortAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Sort type - asc/desc\n   */\n  [sortTypeKey]: SortType\n\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Spacing between glyphs\n   */\n  [glyphSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_COORDINATES_DEFAULT: Pick<\n  ParallelCoordinatesSettings,\n  `margins` | `lineWidth` | `opacity` | `colorCategory`\n> = {\n  margins: [10, 55, 25, 60],\n  lineWidth: 1,\n  opacity: [50, 60, 20],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_COORDINATES_TEXT = {\n  unavailable: `Parallel coordinates plot cannot be displayed with a single attribute. To generate a parallel coordinates plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_COORDINATES_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelCoordinates],\n  unavailable: `The parallel coordinates plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of lines`,\n  lineWidth: `Line width`,\n  ...MENU_TEXT,\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { lineWidthKey, ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { MenuProps } from '../../../../types/views/MenuProps'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT,\n  PARALLEL_COORDINATES_DEFAULT,\n} from '../../../../constants/views/parallelCoordinates'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { PARALLEL_COORDINATES_MENU_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ParallelCoordinatesMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ParallelCoordinates\n  const parallelCoordinatesSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelCoordinatesMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newParallelCoordinates: ParallelCoordinatesSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...PARALLEL_COORDINATES_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelCoordinates]: newParallelCoordinates }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelCoordinatesMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ParallelCoordinates),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (parallelCoordinatesSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_COORDINATES_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={parallelCoordinatesSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={PARALLEL_COORDINATES_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_COORDINATES_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelCoordinatesSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={parallelCoordinatesSettings.lineWidth}\n                  valueKey={lineWidthKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_COORDINATES_MENU_TEXT.lineWidth}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_COORDINATES_MENU_TEXT.opacity}\n                  opacities={parallelCoordinatesSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelCoordinatesSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_COORDINATES_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const lineWidthKey = `lineWidth`\n\n/**\n * Settings for Parallel Coordinates view\n */\nexport interface ParallelCoordinatesSettings extends ViewVisualizationSettings {\n  /**\n   * Width of a data line\n   */\n  [lineWidthKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT = 2\n\nexport const SCATTER_PLOT_MATRIX_DEFAULT: Pick<\n  ScatterPlotMatrixSettings,\n  `margins` | `pointSize` | `opacity` | `colorCategory` | `horizontalSpacing` | `verticalSpacing`\n> = {\n  margins: [15, 15, 20, 30],\n  pointSize: 3,\n  horizontalSpacing: 12,\n  verticalSpacing: 12,\n  opacity: [45, 80, 15],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_MATRIX_TEXT = {\n  tooSmall: `Scatter plot cannot be displayed, window is too small. Change the size, number of attributes displayed or margin to display scatter plot matrix`,\n  unavailable: `Scatter plot cannot be displayed with a single attribute. To generate a scatter plot, select multiple attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_MATRIX_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotMatrix],\n  sizes: `Sizes`,\n  unavailable: `The scatter plot matrix plot cannot be used while data has less than 2 numerical attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of data points`,\n  pointSize: `Point size`,\n  horizontalSpacing: `Horizontal spacing`,\n  verticalSpacing: `Vertical spacing`,\n  ...MENU_TEXT,\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  horizontalSpacingKey,\n  pointSizeKey,\n  ScatterPlotMatrixSettings,\n  verticalSpacingKey,\n} from '../../../../types/views/settings/ScatterPlotMatrixSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport {\n  MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_MATRIX_DEFAULT,\n} from '../../../../constants/views/scatterPlotMatrix'\n\nimport { SCATTER_PLOT_MATRIX_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\n\nexport const ScatterPlotMatrixMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotMatrix\n  const scatterPlotMatrixSettings = settings[viewType]\n\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  // first time empty\n  const createScatterPlotMatrixMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotMatrix: ScatterPlotMatrixSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        ...SCATTER_PLOT_MATRIX_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotMatrix]: newScatterPlotMatrix }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotMatrixMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotMatrix),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotMatrixSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_MATRIX_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              handleChangeSettings={handleChangeSettings}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotMatrixSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_MATRIX_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_MATRIX_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotMatrixSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <Typography sx={menuTextStyle.text}>{SCATTER_PLOT_MATRIX_MENU_TEXT.sizes}</Typography>\n                <NumberInput\n                  value={scatterPlotMatrixSettings.pointSize}\n                  valueKey={pointSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.pointSize}\n                  viewType={viewType}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.horizontalSpacing}\n                  valueKey={horizontalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.horizontalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <NumberInput\n                  value={scatterPlotMatrixSettings.verticalSpacing}\n                  valueKey={verticalSpacingKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_MATRIX_MENU_TEXT.verticalSpacing}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_MATRIX_MENU_TEXT.opacity}\n                  opacities={scatterPlotMatrixSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotMatrixSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_MATRIX_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const pointSizeKey = `pointSize`\nexport const horizontalSpacingKey = `horizontalSpacing`\nexport const verticalSpacingKey = `verticalSpacing`\n\n/**\n * Settings for Scatter Plot Matrix view\n */\nexport interface ScatterPlotMatrixSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a data point\n   */\n  [pointSizeKey]: number\n  /**\n   * Size of horizontal spacing\n   */\n  [horizontalSpacingKey]: number\n  /**\n   * Size of vertical spacing\n   */\n  [verticalSpacingKey]: number\n}\n","import { schemeCategory10 } from 'd3'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\n\nexport const MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT = 3\n\nexport const SCATTER_PLOT_GLYPHS_DEFAULT: Pick<\n  ScatterPlotGlyphsSettings,\n  `glyphSize` | `margins` | `opacity` | `colorCategory`\n> = {\n  glyphSize: 30,\n  margins: [20, 20, 10, 20],\n  opacity: [60, 90, 30],\n  colorCategory: schemeCategory10 as ColorArray,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const SCATTER_PLOT_GLYPHS_TEXT = {\n  unavailable: `The scatter plot with glyphs cannot be displayed with less than 3 attributes. To generate a scatter plot with glyphs, select more attributes from the menu.`,\n}\n\nexport const SCATTER_PLOT_GLYPHS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ScatterPlotGlyphs],\n  xAttribute: `X axis values`,\n  yAttribute: `Y axis values`,\n  unavailable: `The scatter plot with glyphs cannot be used while data has less than 3 numerical attributes. Try to use different type of visualization that fits your data.`,\n  glyphSize: `Glyph size`,\n  opacity: `Opacity of glyphs`,\n  ...MENU_TEXT,\n}\n","import { useCallback, useEffect, useMemo, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  glyphSizeKey,\n  ScatterPlotGlyphsSettings,\n  xAttributeKey,\n  yAttributeKey,\n} from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\n\nimport {\n  getCategoryAttributesKeys,\n  getDefaultQuantitativeAttributesChecked,\n  getQuantitativeAttributesKeys,\n} from '../../../../helpers/data/data'\n\nimport {\n  MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT,\n  SCATTER_PLOT_GLYPHS_DEFAULT,\n} from '../../../../constants/views/scatterPlotGlyphs'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\n\nimport { SCATTER_PLOT_GLYPHS_MENU_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { CategorySelector } from '../../data-drawer/items/CategorySelector'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { Selector } from '../../data-drawer/items/Selector'\n\nexport const ScatterPlotGlyphsMenu: VoidFunctionComponent<MenuProps> = ({\n  dataset,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const viewType = ViewType.ScatterPlotGlyphs\n  const scatterPlotGlyphsSettings = settings[viewType]\n  const defaultX = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[0], [dataset])\n  const defaultY = useMemo(() => getQuantitativeAttributesKeys(dataset)?.[1], [dataset])\n  const [quantitativeAttributesKeys, setQuantitativeAttributesKeys] = useState(getQuantitativeAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultQuantitativeAttributesChecked(dataset))\n\n  const categoricalAttributes = getCategoryAttributesKeys(dataset)\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => quantitativeAttributesKeys.filter((key) => currChecked[key]),\n    [quantitativeAttributesKeys],\n  )\n\n  const createScatterPlotGlyphsMenu = useCallback(() => {\n    const newChecked = getDefaultQuantitativeAttributesChecked(dataset)\n    const newQaKeys = getQuantitativeAttributesKeys(dataset)\n    const defaultCategoryAttribute = getCategoryAttributesKeys(dataset)?.[0]\n    setChecked(newChecked)\n    setQuantitativeAttributesKeys(newQaKeys)\n    setSettings((prev) => {\n      const newScatterPlotGlyphsSettings: ScatterPlotGlyphsSettings = {\n        displayAttributes: newQaKeys.filter((key) => newChecked[key]),\n        categoryAttribute: defaultCategoryAttribute,\n        xAttribute: defaultX,\n        yAttribute: defaultY,\n        ...SCATTER_PLOT_GLYPHS_DEFAULT,\n      }\n      return { ...prev, [ViewType.ScatterPlotGlyphs]: newScatterPlotGlyphsSettings }\n    })\n  }, [setSettings, defaultX, defaultY, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createScatterPlotGlyphsMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<ScatterPlotGlyphsSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  const handleChangeSettings = useCallback(\n    () => cleanSelectedIfViewWasBrushing(ViewType.ScatterPlotGlyphs),\n    [cleanSelectedIfViewWasBrushing],\n  )\n\n  if (scatterPlotGlyphsSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{SCATTER_PLOT_GLYPHS_MENU_TEXT.header}</h1>\n        {quantitativeAttributesKeys.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={quantitativeAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setQuantitativeAttributesKeys}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.xAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.xAttribute}\n              settingsKey={xAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <Selector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.yAttribute}\n              attributesKeys={quantitativeAttributesKeys}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.yAttribute}\n              settingsKey={yAttributeKey}\n              handleChangeSettings={handleChangeSettings}\n            />\n            <CategorySelector\n              viewType={viewType}\n              value={scatterPlotGlyphsSettings.categoryAttribute!}\n              attributesKeys={categoricalAttributes}\n              setSettings={setSettings}\n              label={SCATTER_PLOT_GLYPHS_MENU_TEXT.category}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{SCATTER_PLOT_GLYPHS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={scatterPlotGlyphsSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n                <Divider />\n                <NumberInput\n                  value={scatterPlotGlyphsSettings.glyphSize}\n                  valueKey={glyphSizeKey}\n                  setSettings={setSettings}\n                  label={SCATTER_PLOT_GLYPHS_MENU_TEXT.glyphSize}\n                  viewType={viewType}\n                />\n                <Divider />\n                <OpacityInput\n                  header={SCATTER_PLOT_GLYPHS_MENU_TEXT.opacity}\n                  opacities={scatterPlotGlyphsSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={scatterPlotGlyphsSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                  handleChangeSettings={handleChangeSettings}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{SCATTER_PLOT_GLYPHS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { SelectableDataType } from '../../data/data'\n\nimport { ViewVisualizationSettings } from './VisualizationSettings'\n\nexport const glyphSizeKey = `glyphSize`\nexport const glyphSpacingKey = `glyphSpacing`\nexport const xAttributeKey = `xAttribute`\nexport const yAttributeKey = `yAttribute`\n\n/**\n * Settings for Scatter Plot Glyphs view\n */\nexport interface ScatterPlotGlyphsSettings extends ViewVisualizationSettings {\n  /**\n   * Size of a glyph\n   */\n  [glyphSizeKey]: number\n\n  /**\n   * Numerical attribute for axis x\n   */\n  [xAttributeKey]: keyof SelectableDataType\n\n  /**\n   * Numerical attribute for axis y\n   */\n  [yAttributeKey]: keyof SelectableDataType\n}\n","import { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { DEFAULT_BRUSH_BG_COLOR_TABLE, DEFAULT_BRUSH_FONT_COLOR_TABLE } from './common'\n\nexport const MIN_DATA_TABLE_ATTRIBUTE_COUNT = 1\n\nexport const DATA_TABLE_DEFAULT: Pick<\n  DataTableSettings,\n  `rowHeight` | `selectedBackgroundColor` | `selectedFontColor`\n> = {\n  rowHeight: 45,\n  selectedBackgroundColor: DEFAULT_BRUSH_BG_COLOR_TABLE,\n  selectedFontColor: DEFAULT_BRUSH_FONT_COLOR_TABLE,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { SortType } from '../../helpers/data/comparator'\nimport { MENU_BASE_TEXT, VIEW_NAMES } from './common'\n\nexport const DATA_TABLE_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.DataTable],\n  unavailable: `The dataset seems to have less than one attribute, which makes him not valid. Please choose different dataset.`,\n  attributes: `Display columns`,\n  rowHeight: `Table row height`,\n  selectedBackgroundColor: `Selected background color`,\n  selectedFontColor: `Selected font color`,\n  ...MENU_BASE_TEXT,\n}\n\nexport const DATA_TABLE_TEXT = {\n  checkboxTooltip: `Select all`,\n  [SortType.asc]: `Sort ascending`,\n  [SortType.desc]: `Sort descending`,\n  unavailable: `The Data Table view cannot be displayed without attributes. To generate a Data Table view, select more attributes from the menu.`,\n}\n","import { SxProps } from '@mui/system'\n\nimport { px } from '../../../../helpers/d3/stringGetters'\n\nexport const getColorPickerInputStyle = (color: string): SxProps => ({\n  bgcolor: color,\n  width: px(25),\n  borderRadius: px(5),\n  '& input': {\n    width: `100%`,\n    height: px(25),\n    opacity: 0,\n  },\n})\n\nexport const colorPickerStyle: Record<string, SxProps> = {\n  picker: {\n    display: `flex`,\n    justifyContent: `space-between`,\n    alignItems: `center`,\n  },\n}\n","import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { Box, Typography } from '@mui/material'\n\nimport { Settings } from '../../../../types/views/settings/Settings'\n\nimport { useDebounce } from '../../../../helpers/react/useDebounce'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { COLOR_DEBOUNCE } from '../../../../constants/debounce/debounce'\n\nimport {\n  colorPickerStyle,\n  getColorPickerInputStyle,\n} from '../../../../components-style/content/data-drawer/items/colorPickerStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nexport interface ColorPickerProps<Opt> {\n  viewType: ViewType\n  color: string\n  settingsKey: keyof Opt\n  setSettings: Dispatch<SetStateAction<Settings>>\n  label: string\n}\n\nexport const ColorPicker = <Opt,>({\n  viewType,\n  color,\n  settingsKey,\n  setSettings,\n  label,\n}: ColorPickerProps<Opt>): JSX.Element => {\n  const [currentColor, setCurrentColor] = useState(color)\n  const debouncedColor = useDebounce(currentColor, COLOR_DEBOUNCE)\n\n  const handleChangeColor = useCallback((newColor: string) => {\n    if (newColor) {\n      setCurrentColor(newColor)\n    }\n  }, [])\n\n  useEffect(() => {\n    setSettings((prev) => {\n      const prevSettings = prev[viewType]!\n      return {\n        ...prev,\n        [viewType]: {\n          ...prevSettings,\n          [settingsKey]: debouncedColor,\n        },\n      }\n    })\n  }, [debouncedColor, setSettings, settingsKey, viewType])\n  return (\n    <Box sx={colorPickerStyle.picker}>\n      <Typography sx={menuTextStyle.text}>{label}</Typography>\n      <Box sx={getColorPickerInputStyle(color)}>\n        <input type=\"color\" value={color} onChange={(e) => handleChangeColor(e.target.value)} />\n      </Box>\n    </Box>\n  )\n}\n","import { VoidFunctionComponent, useCallback, useEffect, useState } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  DataTableSettings,\n  rowHeightKey,\n  selectedBackgroundColorKey,\n  selectedFontColorKey,\n} from '../../../../types/views/settings/DataTableSettings'\n\nimport { getAttributeKeys, getDefaultAllAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { DATA_TABLE_DEFAULT, MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\n\nimport { DATA_TABLE_MENU_TEXT } from '../../../../text/views-and-menus/dataTable'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const DataTableMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.DataTable\n  const dataTableSettings = settings[viewType]\n  const [attributesKeys, setAttributesKeys] = useState(getAttributeKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultAllAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => attributesKeys.filter((key) => currChecked[key]),\n    [attributesKeys],\n  )\n\n  const createDataTableMenu = useCallback(() => {\n    const newChecked = getDefaultAllAttributesChecked(dataset)\n    const newKeys = getAttributeKeys(dataset)\n    setChecked(newChecked)\n    setAttributesKeys(newKeys)\n    setSettings((prev) => {\n      const newDataTableSettings: DataTableSettings = {\n        displayAttributes: newKeys.filter((key) => newChecked[key]),\n        ...DATA_TABLE_DEFAULT,\n      }\n      return { ...prev, [ViewType.DataTable]: newDataTableSettings }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createDataTableMenu(), [dataset]) // first time empty, call once\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType): Partial<DataTableSettings> => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (dataTableSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{DATA_TABLE_MENU_TEXT.header}</h1>\n        {attributesKeys.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={attributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={DATA_TABLE_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setAttributesKeys}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{DATA_TABLE_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <NumberInput\n                  viewType={viewType}\n                  value={dataTableSettings.rowHeight}\n                  valueKey={rowHeightKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.rowHeight}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedBackgroundColor}\n                  settingsKey={selectedBackgroundColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedBackgroundColor}\n                />\n                <ColorPicker\n                  viewType={viewType}\n                  color={dataTableSettings.selectedFontColor}\n                  settingsKey={selectedFontColorKey}\n                  setSettings={setSettings}\n                  label={DATA_TABLE_MENU_TEXT.selectedFontColor}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{DATA_TABLE_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { VisualizationSettings } from './VisualizationSettings'\n\nexport const rowHeightKey = `rowHeight`\nexport const selectedBackgroundColorKey = `selectedBackgroundColor`\nexport const selectedFontColorKey = `selectedFontColor`\n\n/**\n * Settings for Data Table view\n */\nexport interface DataTableSettings extends VisualizationSettings {\n  /**\n   * Height of the table row\n   */\n  [rowHeightKey]: number\n\n  /**\n   * Selected background color\n   */\n  [selectedBackgroundColorKey]: string\n  /**\n   * Selected font color\n   */\n  [selectedFontColorKey]: string\n}\n","import { schemeCategory10 } from 'd3'\n\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\nimport { ColorArray } from '../../types/styling/ColorArray'\nimport { ColoringType } from '../data/ColoringType'\nimport { ParallelSetsBrushingType } from '../data/ParallelSetsBrushingType'\nimport { DEFAULT_FONT_COLOR_PARALLEL_SETS } from './common'\n\nexport const MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT = 2\n\nexport const PARALLEL_SETS_BUNDLED_DEFAULT: Pick<\n  ParallelSetsBundledSettings,\n  | `margins`\n  | `opacity`\n  | `colorCategory`\n  | `tabWidth`\n  | `tabSpacing`\n  | `tabGap`\n  | `coloringType`\n  | `brushingType`\n  | `fontColor`\n> = {\n  margins: [5, 50, 10, 50],\n  opacity: [60, 70, 25],\n  colorCategory: schemeCategory10 as ColorArray,\n  tabWidth: 8,\n  tabSpacing: 3,\n  tabGap: 10,\n  coloringType: ColoringType.left,\n  brushingType: ParallelSetsBrushingType.top,\n  fontColor: DEFAULT_FONT_COLOR_PARALLEL_SETS,\n}\n","export enum BrushAction {\n  start = `start`,\n  move = `brush`,\n  end = `end`,\n}\n","export enum MouseAction {\n  mouseOver = `mouseover`,\n  mouseOut = `mouseout`,\n  click = `click`,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { MENU_TEXT, VIEW_NAMES } from './common'\n\nexport const PARALLEL_SETS_BUNDLED_TEXT = {\n  unavailable: `Parallel sets plot cannot be displayed with a single attribute. To generate a parallel sets plot, select multiple attributes from the menu.`,\n}\n\nexport const PARALLEL_SETS_MENU_TEXT = {\n  header: VIEW_NAMES[ViewType.ParallelSetsBundled],\n  unavailable: `The parallel sets plot cannot be used while data has less than 2 nominal attributes. Try to use different type of visualization that fits your data.`,\n  opacity: `Opacity of connectors`,\n  tabWidth: `Width of the tabs`,\n  tabSpacing: `Spacing between tabs`,\n  tabGap: `Gap between tabs`,\n  coloringType: `Coloring from...`,\n  brushing: `Brushing...`,\n  fontColor: `Inner font color`,\n  ...MENU_TEXT,\n}\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Divider, Typography } from '@mui/material'\nimport { ExpandMore } from '@mui/icons-material'\n\nimport { CheckedForSelectableDataType } from '../../../../types/data/data'\nimport { MenuProps } from '../../../../types/views/MenuProps'\nimport {\n  brushingTypeKey,\n  coloringTypeKey,\n  fontColorKey,\n  ParallelSetsBundledSettings,\n  tabGapKey,\n  tabSpacingKey,\n  tabWidthKey,\n} from '../../../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { getCategoryAttributesKeys, getDefaultNominalAttributesChecked } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport {\n  MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT,\n  PARALLEL_SETS_BUNDLED_DEFAULT,\n} from '../../../../constants/views/parallelSetsBundled'\nimport { ColoringType } from '../../../../constants/data/ColoringType'\nimport { ParallelSetsBrushingType } from '../../../../constants/data/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_MENU_TEXT } from '../../../../text/views-and-menus/parallelSetsBundled'\n\nimport { dataDrawerMenuStyle } from '../../../../components-style/content/data-drawer/dataDrawerMenuStyle'\nimport { menuTextStyle } from '../../../../components-style/content/data-drawer/items/menuTextStyle'\n\nimport { AttributeChecker } from '../../data-drawer/items/AttributeChecker'\nimport { MarginInput } from '../../data-drawer/items/MarginInput'\nimport { OpacityInput } from '../../data-drawer/items/OpacityInput'\nimport { PalettePicker } from '../../data-drawer/items/PalettePicker'\nimport { NumberInput } from '../../data-drawer/items/NumberInput'\nimport { ToggleButtons } from '../../data-drawer/items/ToggleButtons'\nimport { ColorPicker } from '../../data-drawer/items/ColorPicker'\n\nexport const ParallelSetsBundledMenu: VoidFunctionComponent<MenuProps> = ({ dataset, settings, setSettings }) => {\n  const viewType = ViewType.ParallelSetsBundled\n  const parallelSetsBundledSettings = settings[viewType]\n\n  const [nominalAttributesKeys, setNominalAttributesKeys] = useState(getCategoryAttributesKeys(dataset))\n  const [checked, setChecked] = useState<CheckedForSelectableDataType>(getDefaultNominalAttributesChecked(dataset))\n\n  const getCurrentDisplayAttributes = useCallback(\n    (currChecked: CheckedForSelectableDataType) => nominalAttributesKeys.filter((key) => currChecked[key]),\n    [nominalAttributesKeys],\n  )\n\n  // first time empty\n  const createParallelSetsBundledMenu = useCallback(() => {\n    const newChecked = getDefaultNominalAttributesChecked(dataset)\n    const newCatKeys = getCategoryAttributesKeys(dataset)\n    setChecked(newChecked)\n    setNominalAttributesKeys(newCatKeys)\n    setSettings((prev) => {\n      const newParallelSetsBundled: ParallelSetsBundledSettings = {\n        displayAttributes: newCatKeys.filter((key) => newChecked[key]),\n        ...PARALLEL_SETS_BUNDLED_DEFAULT,\n      }\n      return { ...prev, [ViewType.ParallelSetsBundled]: newParallelSetsBundled }\n    })\n  }, [setSettings, dataset])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => createParallelSetsBundledMenu(), [dataset])\n\n  const getNewSettingsForAttributeChecker = useCallback(\n    (newChecked: CheckedForSelectableDataType) => ({\n      displayAttributes: getCurrentDisplayAttributes(newChecked),\n    }),\n    [getCurrentDisplayAttributes],\n  )\n\n  if (parallelSetsBundledSettings) {\n    return (\n      <Box sx={dataDrawerMenuStyle.drawerMenu}>\n        <h1>{PARALLEL_SETS_MENU_TEXT.header}</h1>\n        {nominalAttributesKeys.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT ? (\n          <>\n            <AttributeChecker\n              viewType={viewType}\n              attributesKeys={nominalAttributesKeys}\n              getNewSettings={getNewSettingsForAttributeChecker}\n              setSettings={setSettings}\n              label={PARALLEL_SETS_MENU_TEXT.attributes}\n              checked={checked}\n              setChecked={setChecked}\n              setAttributesKeys={setNominalAttributesKeys}\n            />\n            <Typography sx={menuTextStyle.text}>{PARALLEL_SETS_MENU_TEXT.coloringType}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={parallelSetsBundledSettings.coloringType}\n              options={Object.values<ColoringType>(ColoringType)}\n              setSettings={setSettings}\n              settingsKey={coloringTypeKey}\n            />\n            <Typography sx={menuTextStyle.text}>{PARALLEL_SETS_MENU_TEXT.brushing}</Typography>\n            <ToggleButtons\n              viewType={viewType}\n              value={parallelSetsBundledSettings.brushingType}\n              options={Object.values<ParallelSetsBrushingType>(ParallelSetsBrushingType)}\n              setSettings={setSettings}\n              settingsKey={brushingTypeKey}\n            />\n            <Accordion sx={dataDrawerMenuStyle.accordion}>\n              <AccordionSummary expandIcon={<ExpandMore />}>\n                <Typography>{PARALLEL_SETS_MENU_TEXT.more}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <MarginInput\n                  margins={parallelSetsBundledSettings.margins}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_MENU_TEXT.tabWidth}\n                  valueKey={tabWidthKey}\n                  value={parallelSetsBundledSettings.tabWidth}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_MENU_TEXT.tabSpacing}\n                  valueKey={tabSpacingKey}\n                  value={parallelSetsBundledSettings.tabSpacing}\n                  setSettings={setSettings}\n                />\n                <NumberInput\n                  viewType={viewType}\n                  label={PARALLEL_SETS_MENU_TEXT.tabGap}\n                  valueKey={tabGapKey}\n                  value={parallelSetsBundledSettings.tabGap}\n                  setSettings={setSettings}\n                />\n                <Divider />\n                <ColorPicker\n                  viewType={viewType}\n                  color={parallelSetsBundledSettings.fontColor}\n                  settingsKey={fontColorKey}\n                  setSettings={setSettings}\n                  label={PARALLEL_SETS_MENU_TEXT.fontColor}\n                />\n                <Divider />\n                <OpacityInput\n                  header={PARALLEL_SETS_MENU_TEXT.opacity}\n                  opacities={parallelSetsBundledSettings.opacity}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n                <Divider />\n                <PalettePicker\n                  colors={parallelSetsBundledSettings.colorCategory}\n                  setSettings={setSettings}\n                  viewType={viewType}\n                />\n              </AccordionDetails>\n            </Accordion>\n          </>\n        ) : (\n          <Box sx={dataDrawerMenuStyle.insufficientAttributeNum}>{PARALLEL_SETS_MENU_TEXT.unavailable}</Box>\n        )}\n      </Box>\n    )\n  }\n  return null\n}\n","import { ColoringType } from '../../../constants/data/ColoringType'\nimport { ParallelSetsBrushingType } from '../../../constants/data/ParallelSetsBrushingType'\n\nimport { BaseViewVisualizationSettings } from './VisualizationSettings'\n\nexport const tabWidthKey = `tabWidth`\nexport const tabSpacingKey = `tabSpacing`\nexport const tabGapKey = `tabGap`\nexport const coloringTypeKey = `coloringType`\nexport const brushingTypeKey = `brushingType`\nexport const fontColorKey = `fontColor`\n\n/**\n * Settings for Parallel Sets Bundled view\n */\nexport interface ParallelSetsBundledSettings extends BaseViewVisualizationSettings {\n  /**\n   * Is coloring from left side\n   */\n  [coloringTypeKey]: ColoringType\n\n  /**\n   * Brushing - displayed from top top or overlay\n   */\n  [brushingTypeKey]: ParallelSetsBrushingType\n\n  /**\n   * Width of a tab\n   */\n  [tabWidthKey]: number\n\n  /**\n   * Spacing of tabs\n   */\n  [tabSpacingKey]: number\n\n  /**\n   * Gap between tabs (vertically)\n   */\n  [tabGapKey]: number\n\n  /**\n   * Font color\n   */\n  [fontColorKey]: string\n}\n","import { Dispatch, VoidFunctionComponent, SetStateAction, useMemo } from 'react'\nimport { Box, Divider, Drawer, IconButton } from '@mui/material'\nimport { ChevronRight } from '@mui/icons-material'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { dataDrawerStyle } from '../../../components-style/content/data-drawer/dataDrawerStyle'\n\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GlyphsMenu } from '../views/glyphs/GlyphsMenu'\nimport { ParallelCoordinatesMenu } from '../views/parallel-coordinates/ParallelCoordinatesMenu'\nimport { ScatterPlotMatrixMenu } from '../views/scatter-plot-matrix/ScatterPlotMatrixMenu'\nimport { ScatterPlotGlyphsMenu } from '../views/scatter-plot-glyphs/ScatterPlotGlyphsMenu'\nimport { DataTableMenu } from '../views/data-table/DataTableMenu'\nimport { ParallelSetsBundledMenu } from '../views/parallel-sets-bundeled/ParallelSetsBundledMenu'\n\nexport interface DataDrawerProps {\n  isOpen: boolean\n  close: SideEffectVoid\n  dataset: ReadonlyArray<SelectableDataType>\n  views: ViewType[]\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n}\n\nexport const DataDrawer: VoidFunctionComponent<DataDrawerProps> = ({\n  isOpen,\n  close,\n  dataset,\n  views,\n  settings,\n  setSettings,\n  cleanSelectedIfViewWasBrushing,\n}) => {\n  const menus = useMemo(\n    () =>\n      views.map((view, idx) => {\n        switch (view) {\n          case ViewType.Glyphs:\n            return (\n              <GlyphsMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelCoordinates:\n            return (\n              <ParallelCoordinatesMenu\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotMatrix:\n            return (\n              <ScatterPlotMatrixMenu\n                dataset={dataset}\n                settings={settings!}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ScatterPlotGlyphs:\n            return (\n              <ScatterPlotGlyphsMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.DataTable:\n            return (\n              <DataTableMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          case ViewType.ParallelSetsBundled:\n            return (\n              <ParallelSetsBundledMenu\n                dataset={dataset}\n                settings={settings}\n                setSettings={setSettings}\n                cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n                key={idx}\n              />\n            )\n          default:\n            return null\n        }\n      }),\n    [cleanSelectedIfViewWasBrushing, dataset, setSettings, settings, views],\n  )\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen} sx={dataDrawerStyle.drawer}>\n      <Box sx={dataDrawerStyle.header}>\n        <IconButton onClick={close}>\n          <ChevronRight sx={dataDrawerStyle.chevron} />\n        </IconButton>\n      </Box>\n      <Divider />\n      <Box sx={dataDrawerStyle.menu}>{menus.map((menu) => menu)}</Box>\n    </Drawer>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nimport { HEADER_HEIGHT } from '../../../constants/views/common'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { VIEW_COLORS } from '../../../styles/colors'\n\nexport const gridItemStyle: Record<string, SxProps> = {\n  gridItem: {\n    height: `100%`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderWidth: 1,\n    borderStyle: `solid`,\n  },\n  text: {\n    padding: px(0, 8),\n  },\n  header: {\n    height: HEADER_HEIGHT - 2,\n    display: `flex`,\n    alignItems: `center`,\n    justifyContent: `space-between`,\n    cursor: `all-scroll`,\n    bgcolor: VIEW_COLORS.itemBackground,\n    borderColor: VIEW_COLORS.border,\n    borderBottomWidth: 1,\n    borderBottomStyle: `solid`,\n    padding: 0,\n  },\n}\n","import { ViewType } from '../views/ViewTypes'\n\nexport const SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `spmSvgId`,\n  [ViewType.Glyphs]: `glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `spgSvgId`,\n  [ViewType.DataTable]: `dataTableId`,\n  [ViewType.ParallelSetsBundled]: `psbSvgId`,\n}\n\nexport const CONTAINER_SAVE_ID: Record<ViewType, string> = {\n  [ViewType.ParallelCoordinates]: `C_pcSvgId`,\n  [ViewType.ScatterPlotMatrix]: `C_spmSvgId`,\n  [ViewType.Glyphs]: `C_glyphSvgId`,\n  [ViewType.ScatterPlotGlyphs]: `C_spgSvgId`,\n  [ViewType.DataTable]: `C_dataTableId`,\n  [ViewType.ParallelSetsBundled]: `C_psbSvgId`,\n}\n","import { ViewType } from '../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../constants/save/save'\n\nexport const saveSvgToFile = (svgEl: Element, fileName: string): void => {\n  svgEl.setAttribute(`xmlns`, `http://www.w3.org/2000/svg`)\n  const svgData = svgEl.outerHTML\n  const preface = `<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n`\n  const svgBlob = new Blob([preface, svgData], { type: `image/svg+xml;charset=utf-8` })\n  const svgUrl = URL.createObjectURL(svgBlob)\n  const downloadLink = document.createElement(`a`)\n  downloadLink.href = svgUrl\n  downloadLink.download = fileName\n  document.body.appendChild(downloadLink)\n  downloadLink.click()\n  document.body.removeChild(downloadLink)\n}\n\ntype StyleNode = { sheet: CSSStyleSheet }\n\nexport const saveSvg = (viewType: ViewType): void => {\n  const svgContainer = document.querySelector(`#${CONTAINER_SAVE_ID[viewType]}`)\n  const svg = document.querySelector(`#${SAVE_ID[viewType]}`)\n  if (!svgContainer || !svg) {\n    // eslint-disable-next-line no-console\n    console.error(`Identifier class missing, saving is not possible`)\n    return\n  }\n\n  const containerClass = Array.from(svgContainer.classList).filter((cls) => !cls.includes(`MuiBox`))[0]\n  const newStyleNodes = ([...document.querySelectorAll(`[data-emotion]`)] as unknown as Array<StyleNode>)\n    .flatMap(({ sheet }) => [...sheet.cssRules].map((rules) => rules.cssText))\n    .filter((sheet) => sheet.includes(`.${containerClass}`))\n    .map((sheet) => sheet.replace(`.${containerClass} `, ``))\n    .map((style) => {\n      const node = document.createElement(`style`)\n      node.innerHTML = style\n      svg.insertBefore(node, svg.firstChild)\n      return node\n    })\n  saveSvgToFile(svg, viewType)\n\n  newStyleNodes.forEach((node) => node.remove())\n}\n","import { SxProps } from '@mui/system'\nimport { BUTTON_COLORS } from '../../../styles/colors'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const inlineButtonStyles: Record<string, SxProps> = {\n  button: {\n    margin: 0,\n    padding: 0,\n    minWidth: 0,\n    color: BUTTON_COLORS.buttonInlined,\n  },\n  buttonActive: {\n    color: BUTTON_COLORS.buttonInlinedFontOn,\n    bgcolor: BUTTON_COLORS.buttonInlinedBgOn,\n    borderRadius: px(5),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider } from '@mui/material'\n\nexport interface InformationDialogProps {\n  isOpen: boolean\n  title?: string\n  description?: string\n  onConfirm: () => void\n  onClose: () => void\n  confirmText: string\n  cancelText: string\n}\n\nexport const ConfirmationDialog: VoidFunctionComponent<InformationDialogProps> = ({\n  isOpen,\n  title,\n  description,\n  onConfirm,\n  onClose,\n  confirmText,\n  cancelText,\n}) => (\n  <Dialog onClose={onClose} open={isOpen}>\n    <DialogTitle>{title}</DialogTitle>\n    <Divider />\n    <DialogContent>\n      <DialogContentText>{description}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onConfirm} variant=\"contained\" autoFocus>\n        {confirmText}\n      </Button>\n      <Button onClick={onClose} variant=\"outlined\">\n        {cancelText}\n      </Button>\n    </DialogActions>\n  </Dialog>\n)\n","import { useCallback, useState, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { Save } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\n\nimport { saveSvg } from '../../../helpers/d3/saveSvg'\n\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\n\nimport { inlineButtonStyles } from '../../../components-style/content/common/inlineButtonStyles'\n\nimport { ConfirmationDialog } from './dialogs/ConfirmationDialog'\n\nexport interface DataSaveButtonProps {\n  viewType: ViewType\n}\n\nexport const DataSaveButton: VoidFunctionComponent<DataSaveButtonProps> = ({ viewType }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\n  const openDialog = useCallback(() => setIsDialogOpen(true), [])\n  const closeDialog = useCallback(() => setIsDialogOpen(false), [])\n\n  const onConfirm = useCallback(() => {\n    saveSvg(viewType)\n    setIsDialogOpen(false)\n  }, [viewType])\n\n  return (\n    <>\n      <ConfirmationDialog\n        isOpen={isDialogOpen}\n        title={TOP_TOOLBAR_TEXT.saveText.header}\n        description={TOP_TOOLBAR_TEXT.saveText.description}\n        onConfirm={onConfirm}\n        onClose={closeDialog}\n        confirmText={TOP_TOOLBAR_TEXT.saveText.confirm}\n        cancelText={TOP_TOOLBAR_TEXT.saveText.cancel}\n      />\n      <Button\n        variant=\"text\"\n        onClick={openDialog}\n        sx={inlineButtonStyles.button}\n        aria-label={TOP_TOOLBAR_TEXT.saveText.save}\n      >\n        <Tooltip title={TOP_TOOLBAR_TEXT.saveText.save}>\n          <Save />\n        </Tooltip>\n      </Button>\n    </>\n  )\n}\n","import { px } from '../../helpers/d3/stringGetters'\n\n/**\n * Class for defining margin for the view.\n * Important especially for the user to be able to reveal axis labels, but also for aesthetic reasons.\n */\nexport class Margin {\n  readonly width: number\n  readonly height: number\n  readonly toString: string\n  constructor(readonly top: number, readonly right: number, readonly bottom: number, readonly left: number) {\n    this.width = this.right + this.left\n    this.height = this.top + this.bottom\n    this.toString = px(this.top, this.right, this.bottom, this.left)\n  }\n}\n\n/**\n * Array of margins - top, right, bottom, left\n */\nexport type MarginArray = [number, number, number, number]\n","import { Extent } from '../../types/d3-types'\n\nexport const isInRange = (number: number, range: [number, number]): boolean => number > range[0] && number < range[1]\n\nexport const isInRanges = (ranges: Extent, cx: number, cy: number): boolean => {\n  const [x0, x1, y0, y1] = [ranges[0][0], ranges[1][0], ranges[0][1], ranges[1][1]]\n  return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1\n}\n","import { extent } from 'd3'\n\nimport { ExtentReqForSelectableDataType, SelectableDataType } from '../../types/data/data'\n\nexport const getExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      return [key, calculatedExtent]\n    }),\n  )\n\nexport const getExtendedExtentInDomains = (\n  domains: Array<keyof SelectableDataType>,\n  dataset: ReadonlyArray<SelectableDataType>,\n  percentDown: number,\n  percentUp = 0,\n): ExtentReqForSelectableDataType =>\n  Object.fromEntries(\n    domains.map((key) => {\n      const calculatedExtent = extent(dataset, (d) => Number(d[key]))\n      if (calculatedExtent[0] === undefined) throw new Error(`Invalid prop to create extent from`)\n      const extentSize = calculatedExtent[1] - calculatedExtent[0]\n      const p = [-(percentDown / 100) * extentSize, (percentUp / 100) * extentSize]\n      const finalExtent: [number, number] = [calculatedExtent[0] + p[0], calculatedExtent[1] + p[1]]\n      return [key, finalExtent]\n    }),\n  )\n","import { ScaleOrdinal } from 'd3'\n\nimport { SelectableDataType } from '../../types/data/data'\nimport { DataEach } from '../../types/d3-types'\n\nexport type GetCategoryColor = (data: SelectableDataType) => string\n\nexport const getCategoryColor =\n  (categoryAttribute: keyof SelectableDataType | undefined, color: ScaleOrdinal<string, string>): GetCategoryColor =>\n  (data) =>\n    categoryAttribute ? color(String(data[categoryAttribute])) : color(`1`)\n\nconst TEXT_Y_SHIFTS = { odd: 9, even: 19 }\nexport const TOGGLE_TEXT_Y_SHIFT = Math.max(...Object.values(TEXT_Y_SHIFTS))\n\nexport const getTextTogglingYShift: DataEach<unknown, SVGTextElement, number> = (_, idx) =>\n  idx % 2 === 0 ? -TEXT_Y_SHIFTS.odd : -TEXT_Y_SHIFTS.even // index 0 is first, so odd\n","export const HTML = {\n  newLine: `<br/>`,\n}\n","/**\n * tooltip and it's actions\n */\nimport { select } from 'd3'\n\nimport { MouseEvent } from 'react'\nimport { OnMouseEvent } from '../../types/d3-types'\n\nimport { TOOLTIP, TOOLTIP_CLASS } from '../../constants/views/tooltip'\nimport { SVG } from '../../constants/svg'\nimport { HTML } from '../../constants/html'\n\nimport { getClass, px } from './stringGetters'\n\nexport const onMouseOverTooltip =\n  <T>(stringFunction: (data: T) => string[]): OnMouseEvent<T> =>\n  ({ clientX, clientY }: MouseEvent, data: T): void => {\n    const tooltip = select(getClass(TOOLTIP_CLASS))\n    tooltip.transition().duration(TOOLTIP.easeIn).style(SVG.style.opacity, TOOLTIP.visible)\n    tooltip\n      .html(stringFunction(data).join(HTML.newLine))\n      .style(SVG.style.left, px(clientX))\n      .style(SVG.style.top, px(clientY))\n  }\n\nexport const onMouseOutTooltip = (): null => {\n  select(getClass(TOOLTIP_CLASS)).transition().duration(TOOLTIP.easeOut).style(SVG.style.opacity, TOOLTIP.invisible)\n  return null\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const PARALLEL_COORDINATES_CLASS = `parallelCoordinates`\nexport const SELECTED_CLASS = `parallelCoordinatesSelected`\nexport const AXES_TEXT_CLASS = `parallelCoordinatesAxesText`\n\nexport const getParallelCoordinatesStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& path': {\n    fill: `none`,\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.parallelCoordinatesSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n  },\n  '& .parallelCoordinatesAxesText': {\n    textAnchor: `middle`,\n    fontWeight: `bold`,\n    fill: PLOT_COLORS.fontColor,\n    fontSize: PLOT_FONT.fontSize,\n  },\n})\n","import { SxProps } from '@mui/system'\n\nimport { Margin } from '../../../types/styling/Margin'\n\nexport const getViewsNotDisplayStyle = (width: number, height: number, margin: Margin): SxProps => ({\n  width: width - margin.width,\n  height: height - margin.height,\n  padding: margin.toString,\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { Box } from '@mui/material'\nimport { axisLeft, brushY, line, scaleLinear, scaleOrdinal, scalePoint, select, selectAll } from 'd3'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { BrushSelection1d } from '../../../../types/brushing/BrushSelection'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { ParallelCoordinatesSettings } from '../../../../types/views/settings/ParallelCoordinatesSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Extent, DataEachG, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\n\nimport { toStringArray } from '../../../../helpers/basic/retype'\nimport { isInRange } from '../../../../helpers/basic/range'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getDefaultSelectionForAttributes } from '../../../../helpers/data/data'\nimport { getCategoryColor, getTextTogglingYShift, TOGGLE_TEXT_Y_SHIFT } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelCoordinates'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { PARALLEL_COORDINATES_TEXT } from '../../../../text/views-and-menus/parallelCoordinates'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXES_TEXT_CLASS,\n  getParallelCoordinatesStyle,\n  PARALLEL_COORDINATES_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nconst BRUSH_WIDTH = 30\nconst BRUSH_RADIUS = BRUSH_WIDTH / 2\nconst BRUSH_OVERLAP = 5\n\nconst AXES = `AXES`\nexport const PARALLEL_COORDINATES = `PARALLEL_COORDINATES`\n\nexport interface ParallelCoordinatesProps extends VisualizationView, Brushable, ParallelCoordinatesSettings {}\n\nexport const ParallelCoordinates: VoidFunctionComponent<ParallelCoordinatesProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  categoryAttribute,\n  refreshViews,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  lineWidth,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n  const upperPadding = TOGGLE_TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  // selected coloring\n  selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createParallelCoordinates = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n    const xScale = scalePoint([0, innerWidth]).domain(toStringArray(displayAttributes))\n    const yScales = displayAttributes.map((attribute) =>\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[attribute]),\n    )\n\n    const selections = getDefaultSelectionForAttributes(displayAttributes)\n\n    const setBrushingSelection = () => {\n      if (displayAttributes.every((dimension) => selections[dimension] === null)) {\n        // check selections, if there is none in every line, false\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n        return\n      }\n      dataset.forEach((data) => {\n        data.selected = displayAttributes.every((dimension, idx) => {\n          const selectedRange = selections[dimension]\n          if (selectedRange === null) return true // nothing in dimension selected, do not block\n          const valueOnAxis = yScales[idx](Number(data[dimension]))\n          return isInRange(valueOnAxis, selectedRange)\n        })\n      })\n      refreshViews()\n    }\n\n    const cleanBrushingSelection = () => {\n      displayAttributes.forEach((key) => (selections[key] = null))\n      setComponentBrushing(null)\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, keyof SelectableDataType>> = {\n      [BrushAction.start]: () => setComponentBrushing(ViewType.ParallelCoordinates),\n      [BrushAction.move]: (brushEvent, axisName) => {\n        if (!isBrushingOnEndOfMove) {\n          selections[axisName] = brushEvent.selection as BrushSelection1d\n          setBrushingSelection()\n        }\n      },\n      [BrushAction.end]: (brushEvent, axisName) => {\n        selections[axisName] = brushEvent.selection as BrushSelection1d\n        if (displayAttributes.some((key) => selections[key] !== null)) {\n          return setBrushingSelection()\n        }\n        return cleanBrushingSelection() // nothing is selected\n      },\n    }\n    const brushExtent: Extent = [\n      [-BRUSH_RADIUS, -BRUSH_OVERLAP],\n      [BRUSH_RADIUS, innerHeight + BRUSH_OVERLAP],\n    ]\n\n    const brush = brushY<keyof SelectableDataType>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    const addAxes: DataEachG<keyof SelectableDataType> = (attribute, idx, elements) =>\n      select(elements[idx]).call(axisLeft(yScales[idx]))\n\n    const getDataLinePath: DataEachP<SelectableDataType, string | null> = (data) =>\n      line()(\n        displayAttributes.map((attribute, idx) => [xScale(String(attribute))!, yScales[idx](Number(data[attribute]))]),\n      )\n\n    // plot data\n    svg\n      .selectAll(PARALLEL_COORDINATES)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.path)\n      .attr(SVG.attributes.d, getDataLinePath)\n      .attr(SVG.attributes.class, PARALLEL_COORDINATES_CLASS)\n      .attr(SVG.attributes.strokeWidth, lineWidth)\n\n      .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n      .on(MouseAction.mouseOut, onMouseOutTooltip)\n      .style(SVG.style.stroke, getCategoryColor(categoryAttribute, color))\n\n    const getAxisTransform: DataEachG<keyof SelectableDataType, string> = (attribute) =>\n      getTranslate([xScale(String(attribute))!, 0])\n\n    // plot axes, add brush\n    const brushableAxes = svg\n      .selectAll(AXES)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getAxisTransform)\n      .each(addAxes)\n      .call(brush)\n\n    // add text to axes\n    brushableAxes\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.y, getTextTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n\n    registerCleanBrushing(() => {\n      brushableAxes.each((attribute, idx, elements) => {\n        const axis = select(elements[idx])\n        brushY().clear(axis)\n      })\n      Object.keys(selections).forEach((selLKey) => (selections[selLKey] = null))\n    })\n\n    // selected coloring\n    selectAll(getClass(PARALLEL_COORDINATES_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    categoryAttribute,\n    displayAttributes,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    lineWidth,\n    color,\n  ])\n\n  useEffect(\n    () => createParallelCoordinates(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, innerWidth, innerHeight, lineWidth, isBrushingOnEndOfMove, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_COORDINATES_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelCoordinatesStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelCoordinates]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelCoordinates]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{PARALLEL_COORDINATES_TEXT.unavailable}</Box>\n}\n","export const toStringArray = <T>(values: Array<T>): Array<string> => values.map((v) => String(v))\n","import { SelectableDataType } from '../../types/data/data'\nimport { MatrixItem } from '../../types/data/MatrixData'\nimport { Dimensions } from '../../types/basic/dimensions'\nimport { getTranslate } from './stringGetters'\n\nexport const getMatrix = (keys: Array<keyof SelectableDataType>): MatrixItem[] =>\n  keys.map((rowKey, rowIdx) => keys.map((colKey, colIdx) => ({ rowIdx, colIdx, rowKey, colKey }))).flat()\n\nexport const getCellInnerSize = (length: number, spacing: number): number => length - 2 * spacing\n\nexport const getCellTranslateInMatrix =\n  (rect: Dimensions, maxIdx: number): ((matrixItem: MatrixItem) => string) =>\n  ({ rowIdx, colIdx }) =>\n    getTranslate([(maxIdx - rowIdx) * rect.width, colIdx * rect.height])\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { PLOT_FONT } from '../../../../styles/font'\n\nexport const DATA_POINT_CLASS = `scatterPlotMatrixPoint`\nexport const DUPLICATES_CLASS = `scatterPlotMatrixDuplicates`\nexport const AXIS_CLASS = `scatterPlotMatrixAxis`\nexport const RECT_CLASS = `scatterPlotMatrixRect`\nexport const CELL_CLASS = `scatterPlotMatrixCell`\nexport const SELECTED_CLASS = `scatterPlotMatrixSelected`\n\nexport const getScatterPlotMatrixStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    fontSize: PLOT_FONT.fontSize,\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotMatrixAxis': {\n    shapeRendering: `crispEdges`,\n    '& line': {\n      stroke: PLOT_COLORS.axisLines,\n    },\n    '& path': {\n      display: `none`,\n    },\n  },\n  '& .scatterPlotMatrixRect': {\n    shapeRendering: `crispEdges`,\n    fill: `none`,\n    stroke: PLOT_COLORS.dataBox,\n  },\n  '& .scatterPlotMatrixCell': {\n    '& text': {\n      fontWeight: `bold`,\n      fill: `black`,\n    },\n  },\n  '& .scatterPlotMatrixPoint': {\n    fillOpacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotMatrixSelected': {\n      fill: important(brushColor),\n      fillOpacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotMatrixDuplicates': {\n    opacity: 0,\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport {\n  Axis,\n  axisBottom,\n  axisLeft,\n  brush,\n  NumberValue,\n  ScaleLinear,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n} from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotMatrixSettings } from '../../../../types/views/settings/ScatterPlotMatrixSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { Dimensions } from '../../../../types/basic/dimensions'\nimport { MatrixItem, MatrixPosition } from '../../../../types/data/MatrixData'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\nimport { Extent, DataEachC, DataEachG, OnBrushEvent } from '../../../../types/d3-types'\n\nimport {\n  getAttributeFromMatrixFormatted,\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCellInnerSize, getCellTranslateInMatrix, getMatrix } from '../../../../helpers/d3/matrix'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotMatrix'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_MATRIX_TEXT } from '../../../../text/views-and-menus/scatterPlotMatrix'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport {\n  AXIS_CLASS,\n  getScatterPlotMatrixStyle,\n  DATA_POINT_CLASS,\n  RECT_CLASS,\n  SELECTED_CLASS,\n  DUPLICATES_CLASS,\n  CELL_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-matrix/scatterPlotMatrixStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\n\nexport interface ScatterPlotMatrixProps extends VisualizationView, Brushable, ScatterPlotMatrixSettings {}\n\ntype CellBrushing = { cell: MatrixPosition | null }\n\nexport const DATA_POINT = `DATA_POINT`\nexport const AXIS_X = `AXIS_X`\nexport const AXIS_Y = `AXIS_Y`\nexport const CELL = `CELL`\nexport const CELL_DUPLICATES = `CELL_DUPLICATES`\n\nexport const TICKS = {\n  X: 6,\n  Y: 6,\n}\n\nexport const ScatterPlotMatrix: VoidFunctionComponent<ScatterPlotMatrixProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  pointSize,\n  horizontalSpacing,\n  verticalSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height]\n\n  // selected coloring\n  selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, DUPLICATES_CLASS)\n\n  const createScatterPlotMatrix = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const attributesCount = displayAttributes.length\n    const rect: Dimensions = {\n      width: innerWidth / attributesCount,\n      height: innerHeight / attributesCount,\n    }\n    if (getCellInnerSize(rect.width, horizontalSpacing) < 0 || getCellInnerSize(rect.height, verticalSpacing) < 0)\n      return // rect not big enough\n\n    const extentInDomains = getExtentInDomains(displayAttributes, dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([horizontalSpacing, rect.width - horizontalSpacing]),\n      scaleLinear([rect.height - verticalSpacing, verticalSpacing]),\n    ]\n\n    const [xAxis, yAxis] = [axisBottom(xScale), axisLeft(yScale)]\n    xAxis.ticks(TICKS.X).tickSize(innerHeight)\n    yAxis.ticks(TICKS.Y).tickSize(-innerWidth)\n\n    const setAxis =\n      (a: ScaleLinear<number, number>, axis: Axis<NumberValue>): DataEachG<keyof SelectableDataType> =>\n      (attribute, index, elements) => {\n        a.domain(extentInDomains[attribute])\n        select(elements[index]).call(axis)\n      }\n    const getTransformX: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([(attributesCount - 1 - idx) * rect.width, 0])\n    const getTransformY: DataEachG<keyof SelectableDataType, string> = (attribute, idx) =>\n      getTranslate([0, idx * rect.height])\n\n    // axes on X (horizontal)\n    svg\n      .selectAll(AXIS_X)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformX)\n      .each(setAxis(xScale, xAxis))\n\n    // axes on Y (vertical)\n    svg\n      .selectAll(AXIS_Y)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .attr(SVG.attributes.transform, getTransformY)\n      .each(setAxis(yScale, yAxis))\n\n    const plotMatrixItem: DataEachG<MatrixItem> = (matrixItem, idx, elements) => {\n      // set domains\n      xScale.domain(extentInDomains[matrixItem.rowKey])\n      yScale.domain(extentInDomains[matrixItem.colKey])\n\n      const cell = select(elements[idx])\n      const getCx: DataEachC<SelectableDataType, number> = (data) => xScale(Number(data[matrixItem.rowKey]))\n      const getCy: DataEachC<SelectableDataType, number> = (data) => yScale(Number(data[matrixItem.colKey]))\n\n      // make rectangle surrounding data\n      cell\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, RECT_CLASS)\n        .attr(SVG.attributes.x, horizontalSpacing)\n        .attr(SVG.attributes.y, verticalSpacing)\n        .attr(SVG.attributes.width, getCellInnerSize(rect.width, horizontalSpacing))\n        .attr(SVG.attributes.height, getCellInnerSize(rect.height, verticalSpacing))\n\n      // make data points\n      cell\n        .selectAll(DATA_POINT)\n        .data(dataset)\n        .enter()\n        .append(SVG.elements.circle)\n        .attr(SVG.attributes.cx, getCx)\n        .attr(SVG.attributes.cy, getCy)\n        .attr(SVG.attributes.r, pointSize)\n        .attr(SVG.attributes.class, DATA_POINT_CLASS)\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n    }\n\n    const cell = svg\n      .selectAll(CELL)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, CELL_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // add labels to diagonal\n    cell\n      .filter((matrixItem) => matrixItem.rowIdx === matrixItem.colIdx)\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.x, 1.5 * horizontalSpacing)\n      .attr(SVG.attributes.y, verticalSpacing + PLOT_FONT_BOX_SIZE)\n      .text(getAttributeFromMatrixFormatted)\n\n    const brushing: CellBrushing = {\n      cell: null,\n    }\n\n    const clearBrush = () => {\n      cell.each((d, idx, elements) => {\n        brush().clear(select(elements[idx]))\n      })\n    }\n\n    const setBrushingSelection = ({ rowKey, colKey }: MatrixItem, selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) => (data.selected = isInRanges(selection, xScale(Number(data[rowKey])), yScale(Number(data[colKey])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType, MatrixItem>> = {\n      [BrushAction.start]: (_, { rowIdx, colIdx, rowKey, colKey }) => {\n        setComponentBrushing(ViewType.ScatterPlotMatrix)\n        if (!brushing.cell || brushing.cell.rowIdx !== rowIdx || brushing.cell.colIdx !== colIdx) {\n          clearBrush()\n          brushing.cell = { rowIdx, colIdx }\n          xScale.domain(extentInDomains[rowKey])\n          yScale.domain(extentInDomains[colKey])\n        }\n      },\n      [BrushAction.move]: ({ selection }, matrixItem) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(matrixItem, brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }, matrixItem) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(matrixItem, brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [0, 0],\n      [rect.width, rect.height],\n    ]\n\n    const makeBrush = brush<MatrixItem>()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    registerCleanBrushing(() => {\n      clearBrush()\n      brushing.cell = null\n    })\n\n    cell.call(makeBrush)\n\n    // make points in second layer so details can be displayed\n    svg\n      .selectAll(CELL_DUPLICATES)\n      .data(getMatrix(displayAttributes))\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, DUPLICATES_CLASS)\n      .attr(SVG.attributes.transform, getCellTranslateInMatrix(rect, attributesCount - 1))\n      .each(plotMatrixItem)\n\n    // selected coloring\n    selectAll(getClass(DATA_POINT_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    horizontalSpacing,\n    verticalSpacing,\n    refreshViews,\n    categoryAttribute,\n    displayAttributes,\n    setComponentBrushing,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n    pointSize,\n    color,\n  ])\n\n  useEffect(\n    () => createScatterPlotMatrix(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      pointSize,\n      horizontalSpacing,\n      verticalSpacing,\n      isBrushingOnEndOfMove,\n      colorCategory,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (\n    getCellInnerSize(innerWidth / displayAttributes.length, horizontalSpacing) < 0 ||\n    getCellInnerSize(innerHeight / displayAttributes.length, verticalSpacing) < 0\n  )\n    return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.tooSmall}</Box> // rect not big enough\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_MATRIX_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotMatrixStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotMatrix]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotMatrix]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_MATRIX_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const GLYPHS_CLASS = `glyphs`\nexport const SELECTED_CLASS = `glyphsSelected`\n\nexport const getGlyphsStyle = (opacity: Opacity, isBrushActive: boolean, brushColor: string): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .glyphs': {\n    opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n    cursor: `pointer`,\n    '&.glyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { GlyphsSettings } from '../../../../types/views/settings/GlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\n\nimport { getExtendedExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { getComparator } from '../../../../helpers/data/comparator'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { SVG } from '../../../../constants/svg'\nimport { MIN_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/glyphs'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { GLYPHS_TEXT } from '../../../../text/views-and-menus/glyphs'\n\nimport {\n  getGlyphsStyle,\n  GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/glyphs/glyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { DataEachP, OnMouseEvent } from '../../../../types/d3-types'\n\nexport interface GlyphsProps extends VisualizationView, Brushable, GlyphsSettings {}\n\nconst GLYPHS = `GLYPHS`\n\nexport const Glyphs: VoidFunctionComponent<GlyphsProps> = ({\n  dataset,\n  width,\n  height,\n  displayAttributes,\n  categoryAttribute,\n  isBrushingActive,\n  setComponentBrushing,\n  refreshViews,\n  sortAttribute,\n  sortType,\n  colorCategory,\n  glyphSize,\n  glyphSpacing,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n\n  const sortableDataset = useMemo<SelectableDataType[]>(() => [...dataset], [dataset])\n  const sortedDataset = useMemo(\n    () => sortableDataset.sort(getComparator(sortType, sortAttribute)),\n    [sortableDataset, sortAttribute, sortType],\n  )\n\n  const color = scaleOrdinal(colorCategory)\n\n  const innerWidth = width - margin.width\n  const glyphSizeWithSpacing = glyphSize + glyphSpacing\n  const glyphsCountPerLine = Math.floor(innerWidth / glyphSizeWithSpacing)\n  const glyphsCountPerHeight = Math.ceil(dataset.length / glyphsCountPerLine)\n  const innerHeight = glyphsCountPerHeight * glyphSizeWithSpacing\n  const glyphRadius = glyphSize / 2\n\n  // selected coloring\n  selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  const createGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain([0, glyphsCountPerLine]),\n      scaleLinear([innerHeight, 0]).domain([0, glyphsCountPerHeight]),\n    ]\n\n    const extentInDomains = getExtendedExtentInDomains(displayAttributes, dataset, 5)\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphRadius]).domain(extentInDomains[attribute]),\n    )\n\n    // functions setting attributes\n    const getTransform: DataEachP<SelectableDataType, string> = (data) => {\n      const idx = sortedDataset.indexOf(data)\n      return getTranslate([\n        xScale(idx % glyphsCountPerLine) + glyphRadius,\n        yScale(glyphsCountPerHeight - Math.floor(idx / glyphsCountPerLine)) + glyphRadius,\n      ])\n    }\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const onMouseClick: OnMouseEvent<SelectableDataType> = (_, changedData) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.Glyphs)\n      refreshViews()\n    }\n\n    svg\n      .selectAll(GLYPHS)\n      .data(dataset)\n      .enter()\n      .each((data, idx, elements) => {\n        select(elements[idx])\n          .append(SVG.elements.g)\n          .selectAll(SVG.elements.path)\n          .data([data])\n          .enter()\n          .append(SVG.elements.path)\n          .attr(SVG.attributes.class, GLYPHS_CLASS)\n          .attr(SVG.attributes.d, getGlyphPath)\n          .attr(SVG.attributes.transform, getTransform)\n          .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n          .on(MouseAction.mouseOut, onMouseOutTooltip)\n          .on(MouseAction.click, onMouseClick)\n          .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n      })\n    // selected coloring, needed again\n    selectAll(getClass(GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n  }, [\n    dataset,\n    sortedDataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    glyphsCountPerLine,\n    glyphsCountPerHeight,\n    glyphRadius,\n    displayAttributes,\n    categoryAttribute,\n    color,\n  ])\n\n  useEffect(\n    () => createGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [displayAttributes, categoryAttribute, sortAttribute, sortType, innerWidth, innerHeight, colorCategory],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box sx={getGlyphsStyle(opacity, isBrushingActive, brushColor)} id={CONTAINER_SAVE_ID[ViewType.Glyphs]}>\n        <svg width={width} height={innerHeight + margin.height} id={SAVE_ID[ViewType.Glyphs]}>\n          <g ref={component} transform={getTranslate([margin.left, margin.top])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{GLYPHS_TEXT.unavailable}</Box>\n}\n","import { SxProps } from '@mui/system'\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { important } from '../../../../helpers/d3/stringGetters'\nimport { PLOT_COLORS } from '../../../../styles/colors'\n\nexport const SCATTER_PLOT_GLYPHS_CLASS = `scatterPlotGlyphs`\nexport const SELECTED_CLASS = `scatterPlotGlyphsSelected`\nexport const AXIS_CLASS = `scatterPlotAxis`\nexport const DUPLICATES_CLASS = `scatterPlotGlyphsDuplicates`\n\nexport const getScatterPlotGlyphsStyle = (\n  opacity: Opacity,\n  isBrushingActive: boolean,\n  brushColor: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .scatterPlotGlyphs': {\n    opacity: !isBrushingActive ? opacity[0] / 100 : opacity[2] / 100,\n    '&.scatterPlotGlyphsSelected': {\n      fill: important(brushColor),\n      opacity: opacity[1] / 100,\n    },\n  },\n  '& .scatterPlotGlyphsDuplicates': {\n    opacity: 0,\n  },\n  '& .scatterPlotAxis': {\n    shapeRendering: `crispEdges`,\n    '& line, path': {\n      stroke: PLOT_COLORS.axisLinesDark,\n    },\n  },\n})\n","import { VoidFunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { axisBottom, axisLeft, brush, lineRadial, scaleLinear, scaleOrdinal, scaleRadial, select, selectAll } from 'd3'\nimport { Box } from '@mui/material'\n\nimport { SelectableDataType } from '../../../../types/data/data'\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ScatterPlotGlyphsSettings } from '../../../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { BrushSelection2d } from '../../../../types/brushing/BrushSelection'\n\nimport {\n  getAttributeValuesWithLabel,\n  getClass,\n  getEverything,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../../helpers/d3/displayDetails'\nimport { getExtentInDomains } from '../../../../helpers/d3/extent'\nimport { getCategoryColor } from '../../../../helpers/d3/attributeGetters'\nimport { isInRanges } from '../../../../helpers/basic/range'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { SVG } from '../../../../constants/svg'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { BrushAction } from '../../../../constants/actions/BrushAction'\nimport { MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT } from '../../../../constants/views/scatterPlotGlyphs'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\n\nimport { SCATTER_PLOT_GLYPHS_TEXT } from '../../../../text/views-and-menus/scatterPlotGlyphs'\n\nimport {\n  AXIS_CLASS,\n  DUPLICATES_CLASS,\n  getScatterPlotGlyphsStyle,\n  SCATTER_PLOT_GLYPHS_CLASS,\n  SELECTED_CLASS,\n} from '../../../../components-style/content/views/scatter-plot-glyphs/scatterPlotGlyphsStyle'\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport { Extent, DataEachP, OnBrushEvent } from '../../../../types/d3-types'\nimport { TOOLTIP_CLASS } from '../../../../constants/views/tooltip'\n\nconst SCATTER_PLOT_GLYPHS = `SCATTER_PLOT_GLYPHS`\nconst AXIS_X = `axisX`\nconst AXIS_Y = `axisY`\n\nexport interface ScatterPlotGlyphsProps extends VisualizationView, Brushable, ScatterPlotGlyphsSettings {}\n\nexport const ScatterPlotGlyphs: VoidFunctionComponent<ScatterPlotGlyphsProps> = ({\n  width,\n  height,\n  dataset,\n  refreshViews,\n  displayAttributes,\n  xAttribute,\n  yAttribute,\n  categoryAttribute,\n  registerCleanBrushing,\n  setComponentBrushing,\n  isBrushingActive,\n  isDetailsVisible,\n  isBrushingOnEndOfMove,\n  colorCategory,\n  glyphSize,\n  margins,\n  opacity,\n  brushColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const color = scaleOrdinal(colorCategory)\n\n  const [innerWidth, innerHeight] = [width - margin.width - glyphSize, height - margin.height - glyphSize]\n\n  // selected coloring\n  selectAll(getClass(SCATTER_PLOT_GLYPHS_CLASS)).classed(SELECTED_CLASS, (d) => (d as SelectableDataType).selected)\n\n  displayDetails(isDetailsVisible, TOOLTIP_CLASS)\n\n  const createScatterPlotGlyphs = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const extentInDomains = getExtentInDomains([...displayAttributes, xAttribute, yAttribute], dataset)\n\n    const [xScale, yScale] = [\n      scaleLinear([0, innerWidth]).domain(extentInDomains[xAttribute]),\n      scaleLinear([innerHeight, 0]).domain(extentInDomains[yAttribute]),\n    ]\n\n    const lineRadialGenerator = lineRadial()\n    const radialScales = displayAttributes.map((attribute) =>\n      scaleRadial([0, glyphSize / 2]).domain(extentInDomains[attribute]),\n    )\n\n    const getGlyphPath: DataEachP<SelectableDataType, string | null> = (data) =>\n      lineRadialGenerator(\n        displayAttributes.map((key, idx) => [\n          (2 * Math.PI * idx) / displayAttributes.length,\n          radialScales[idx](Number(data[key])),\n        ]),\n      )\n\n    const makeGlyphs = (className: string) =>\n      svg\n        .selectAll(SCATTER_PLOT_GLYPHS)\n        .data(dataset)\n        .enter()\n        .each((data, idx, elements) => {\n          select(elements[idx])\n            .append(SVG.elements.g)\n            .selectAll(SVG.elements.path)\n            .data([data])\n            .enter()\n            .append(SVG.elements.path)\n            .attr(SVG.attributes.class, className)\n            .attr(SVG.attributes.d, getGlyphPath)\n            .attr(\n              SVG.attributes.transform,\n              getTranslate([xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute]))]),\n            )\n            .on(MouseAction.mouseOver, onMouseOverTooltip(getAttributeValuesWithLabel))\n            .on(MouseAction.mouseOut, onMouseOutTooltip)\n            .style(SVG.style.fill, getCategoryColor(categoryAttribute, color))\n        })\n    makeGlyphs(SCATTER_PLOT_GLYPHS_CLASS)\n\n    const axisX = svg\n      .selectAll(AXIS_X)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.transform, getTranslate([0, innerHeight]))\n      .attr(SVG.attributes.class, AXIS_CLASS)\n    axisX.call(axisBottom(xScale))\n    svg\n      .selectAll(AXIS_Y)\n      .data(dataset)\n      .enter()\n      .append(SVG.elements.g)\n      .attr(SVG.attributes.class, AXIS_CLASS)\n      .call(axisLeft(yScale))\n    const setBrushingSelection = (selection: BrushSelection2d) => {\n      if (selection) {\n        dataset.forEach(\n          (data) =>\n            (data.selected = isInRanges(selection, xScale(Number(data[xAttribute])), yScale(Number(data[yAttribute])))),\n        )\n        refreshViews()\n      }\n    }\n\n    const onBrush: Record<BrushAction, OnBrushEvent<SelectableDataType>> = {\n      [BrushAction.start]: () => {\n        setComponentBrushing(ViewType.ScatterPlotGlyphs)\n      },\n      [BrushAction.move]: ({ selection }) => {\n        if (!isBrushingOnEndOfMove) {\n          const brushSelection = selection as BrushSelection2d\n          setBrushingSelection(brushSelection)\n        }\n      },\n      [BrushAction.end]: ({ selection }) => {\n        const brushSelection = selection as BrushSelection2d\n        setBrushingSelection(brushSelection)\n        if (!brushSelection) {\n          setComponentBrushing(null)\n        }\n      },\n    }\n    const brushExtent: Extent = [\n      [-glyphSize / 2, -glyphSize / 2],\n      [innerWidth + glyphSize / 2, innerHeight + glyphSize / 2],\n    ]\n\n    const makeBrush = brush()\n      .on(BrushAction.start, onBrush[BrushAction.start])\n      .on(BrushAction.move, onBrush[BrushAction.move])\n      .on(BrushAction.end, onBrush[BrushAction.end])\n      .extent(brushExtent)\n\n    svg.call(makeBrush)\n\n    // make duplicates for brushing/tooltip\n    makeGlyphs(DUPLICATES_CLASS)\n    registerCleanBrushing(() => {\n      brush().clear(svg)\n    })\n  }, [\n    dataset,\n    innerWidth,\n    innerHeight,\n    refreshViews,\n    setComponentBrushing,\n    xAttribute,\n    yAttribute,\n    displayAttributes,\n    categoryAttribute,\n    glyphSize,\n    color,\n    registerCleanBrushing,\n    isBrushingOnEndOfMove,\n  ])\n\n  useEffect(\n    () => createScatterPlotGlyphs(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      categoryAttribute,\n      innerWidth,\n      innerHeight,\n      glyphSize,\n      isBrushingOnEndOfMove,\n      colorCategory,\n      xAttribute,\n      yAttribute,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_SCATTER_PLOT_GLYPHS_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getScatterPlotGlyphsStyle(opacity, isBrushingActive, brushColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ScatterPlotGlyphs]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ScatterPlotGlyphs]}>\n          <g ref={component} transform={getTranslate([margin.left + glyphSize / 2, margin.top + glyphSize / 2])} />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{SCATTER_PLOT_GLYPHS_TEXT.unavailable}</Box>\n}\n","interface FormType {\n  checkbox: `checkbox`\n}\n\nexport const FORM: FormType = {\n  checkbox: `checkbox`,\n}\n","import { SxProps } from '@mui/system'\nimport { TABLE_COLORS } from '../../../../styles/colors'\nimport { important, px } from '../../../../helpers/d3/stringGetters'\n\nexport const getDataTableRowStyle = (\n  rowHeight: number,\n  selected: boolean,\n  selectedBackgroundColor: string,\n  selectedFontColor: string,\n): SxProps => ({\n  height: rowHeight,\n  bgcolor: selected ? important(selectedBackgroundColor) : ``,\n  '& .MuiTableCell-root': {\n    color: selected ? important(selectedFontColor) : ``,\n  },\n  '& .MuiTableCell-root, .MuiCheckbox-root': {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nexport const dataTableStyle: Record<string, SxProps> = {\n  tableHead: {\n    bgcolor: TABLE_COLORS.headerBackground,\n  },\n  tableHeadRow: {\n    height: 30,\n    fontWeight: `bold`,\n    '& .MuiTableCell-root, .MuiCheckbox-root': {\n      color: TABLE_COLORS.headerFont,\n    },\n    '& .MuiTableSortLabel-root.Mui-active, .MuiTableSortLabel-root:hover, .MuiTableSortLabel-icon': {\n      color: important(TABLE_COLORS.headerFontActive),\n    },\n  },\n  tableBody: {\n    bgcolor: TABLE_COLORS.rowsBackground,\n  },\n  filterRow: {\n    bgcolor: TABLE_COLORS.filterBackground,\n  },\n  filterCell: {\n    padding: px(5),\n  },\n  filter: {\n    width: `90%`,\n    bgcolor: TABLE_COLORS.rowsBackground,\n    borderRadius: px(5),\n    '&.MuiFormControl-root': {\n      margin: 0,\n    },\n    '& input': {\n      padding: px(5, 10, 4),\n    },\n  },\n  filterIcon: {\n    paddingLeft: px(12),\n    color: TABLE_COLORS.filterIconFont,\n  },\n  notDisplayed: {\n    padding: 10,\n  },\n}\n","import { useCallback, useMemo, useState, VoidFunctionComponent } from 'react'\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  TextField,\n  Tooltip,\n} from '@mui/material'\nimport { FilterListOutlined } from '@mui/icons-material'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { DataTableSettings } from '../../../../types/views/settings/DataTableSettings'\nimport { SelectableDataType } from '../../../../types/data/data'\n\nimport { dataToReadable, otherCasesToWhitespaces } from '../../../../helpers/data/formatText'\nimport { getComparator, SortType } from '../../../../helpers/data/comparator'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { MIN_DATA_TABLE_ATTRIBUTE_COUNT } from '../../../../constants/views/dataTable'\nimport { FORM } from '../../../../constants/form'\n\nimport { DATA_TABLE_TEXT } from '../../../../text/views-and-menus/dataTable'\nimport {\n  dataTableStyle,\n  getDataTableRowStyle,\n} from '../../../../components-style/content/views/data-table/dataTableStyle'\n\nexport interface DataTableProps extends VisualizationView, Brushable, DataTableSettings {\n  showFilter: boolean\n}\n\nexport const DataTable: VoidFunctionComponent<DataTableProps> = ({\n  dataset,\n  displayAttributes,\n  refreshViews,\n  setComponentBrushing,\n  rowHeight,\n  selectedBackgroundColor,\n  selectedFontColor,\n  showFilter,\n}) => {\n  const [order, setOrder] = useState<SortType>(SortType.asc)\n  const [orderBy, setOrderBy] = useState<keyof SelectableDataType>(displayAttributes[0])\n  const [filterValues, setFilterValues] = useState<{ [p: keyof SelectableDataType]: string }>(\n    Object.fromEntries(displayAttributes.map((key) => [key, ``])),\n  )\n\n  const filteredDataset = useMemo<SelectableDataType[]>(\n    () =>\n      [...dataset].filter((data) =>\n        displayAttributes.every((attribute) => String(data[attribute]).includes(filterValues[attribute])),\n      ),\n    [dataset, displayAttributes, filterValues],\n  )\n\n  const sortedDataset = useMemo(\n    () => filteredDataset.sort(getComparator(order, orderBy)),\n    [filteredDataset, order, orderBy],\n  )\n\n  const handleSelectClick = useCallback(\n    (changedData: SelectableDataType) => {\n      changedData.selected = !changedData.selected\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing],\n  )\n\n  const handleSelectAllClick = useCallback(\n    (checked: boolean) => {\n      sortedDataset.forEach((data) => (data.selected = checked))\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.DataTable)\n      refreshViews()\n    },\n    [dataset, refreshViews, setComponentBrushing, sortedDataset],\n  )\n\n  const handleRequestSort = useCallback(\n    (property: keyof SelectableDataType) => {\n      const isAsc = orderBy === property && order === SortType.asc\n      setOrder(isAsc ? SortType.desc : SortType.asc)\n      setOrderBy(property)\n    },\n    [order, orderBy],\n  )\n\n  const handleFilterValueChange = useCallback((newValue: string, key: keyof SelectableDataType) => {\n    setFilterValues((prev) => ({\n      ...prev,\n      [key]: newValue,\n    }))\n  }, [])\n\n  const createSortHandler = useCallback(\n    (property: keyof SelectableDataType) => () => {\n      handleRequestSort(property)\n    },\n    [handleRequestSort],\n  )\n\n  const sortTooltipTitle = useCallback(\n    (headCellId: keyof SelectableDataType) =>\n      orderBy === headCellId\n        ? DATA_TABLE_TEXT[order === SortType.asc ? SortType.desc : SortType.asc]\n        : DATA_TABLE_TEXT[SortType.asc],\n    [order, orderBy],\n  )\n\n  if (displayAttributes.length >= MIN_DATA_TABLE_ATTRIBUTE_COUNT) {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHead sx={dataTableStyle.tableHead}>\n            <TableRow sx={dataTableStyle.tableHeadRow}>\n              <TableCell padding={FORM.checkbox}>\n                <Tooltip title={DATA_TABLE_TEXT.checkboxTooltip}>\n                  <Checkbox\n                    sx={dataTableStyle.checkAll}\n                    indeterminate={sortedDataset.some((data) => data.selected)}\n                    checked={sortedDataset.every((data) => data.selected)}\n                    onChange={(event) => handleSelectAllClick(event.target.checked)}\n                  />\n                </Tooltip>\n              </TableCell>\n              {displayAttributes.map((attribute) => {\n                const orderedByActive = orderBy === attribute\n                return (\n                  <TableCell key={attribute} sortDirection={orderedByActive ? order : false}>\n                    <Tooltip title={sortTooltipTitle(attribute)}>\n                      <TableSortLabel\n                        active={orderedByActive}\n                        direction={orderedByActive ? order : SortType.asc}\n                        onClick={createSortHandler(attribute)}\n                      >\n                        {otherCasesToWhitespaces(attribute)}\n                      </TableSortLabel>\n                    </Tooltip>\n                  </TableCell>\n                )\n              })}\n            </TableRow>\n            {showFilter && (\n              <TableRow sx={dataTableStyle.filterRow}>\n                <TableCell sx={dataTableStyle.filterIcon} padding={FORM.checkbox}>\n                  <FilterListOutlined />\n                </TableCell>\n                {displayAttributes.map((attribute, idx) => (\n                  <TableCell sx={dataTableStyle.filterCell} key={`filter-${attribute}`}>\n                    <TextField\n                      defaultValue={filterValues[idx]}\n                      sx={dataTableStyle.filter}\n                      onChange={(e) => handleFilterValueChange(e.target.value, attribute)}\n                    />\n                  </TableCell>\n                ))}\n              </TableRow>\n            )}\n          </TableHead>\n          <TableBody sx={dataTableStyle.tableBody}>\n            {sortedDataset.map((data, idx) => {\n              const selected = data.selected\n              return (\n                <TableRow\n                  hover\n                  onClick={() => handleSelectClick(data)}\n                  key={idx}\n                  sx={getDataTableRowStyle(rowHeight, selected, selectedBackgroundColor, selectedFontColor)}\n                >\n                  <TableCell padding={FORM.checkbox}>\n                    <Checkbox checked={selected} />\n                  </TableCell>\n                  {displayAttributes.map((attribute) => (\n                    <TableCell key={`${idx}-${attribute}`}>{dataToReadable(data[attribute])}</TableCell>\n                  ))}\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n  return <Box sx={dataTableStyle.notDisplayed}>{DATA_TABLE_TEXT.unavailable}</Box>\n}\n","import {min} from \"d3-array\";\n\nfunction targetDepth(d) {\n  return d.target.depth;\n}\n\nexport function left(node) {\n  return node.depth;\n}\n\nexport function right(node, n) {\n  return n - 1 - node.height;\n}\n\nexport function justify(node, n) {\n  return node.sourceLinks.length ? node.depth : n - 1;\n}\n\nexport function center(node) {\n  return node.targetLinks.length ? node.depth\n      : node.sourceLinks.length ? min(node.sourceLinks, targetDepth) - 1\n      : 0;\n}\n","export default function constant(x) {\n  return function() {\n    return x;\n  };\n}\n","import {max, min, sum} from \"d3-array\";\nimport {justify} from \"./align.js\";\nimport constant from \"./constant.js\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nfunction computeLinkBreadths({nodes}) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport default function Sankey() {\n  let x0 = 0, y0 = 0, x1 = 1, y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8, py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey() {\n    const graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeSort = function(_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function(_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks({nodes, links}) {\n    for (const [i, node] of nodes.entries()) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    }\n    const nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d]));\n    for (const [i, link] of links.entries()) {\n      link.index = i;\n      let {source, target} = link;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    }\n    if (linkSort != null) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({nodes}) {\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined\n          ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.depth = x;\n        for (const {target} of node.sourceLinks) {\n          next.add(target);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeHeights({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.height = x;\n        for (const {source} of node.targetLinks) {\n          next.add(source);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeLayers({nodes}) {\n    const x = max(nodes, d => d.depth) + 1;\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {source, value} of target.targetLinks) {\n          let v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {target, value} of source.sourceLinks) {\n          let v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({sourceLinks, targetLinks}) {\n    if (linkSort === undefined) {\n      for (const {source: {sourceLinks}} of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {target: {targetLinks}} of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    return 0; // FIX HERE\n  }\n\n  return sankey;\n}\n","import {linkHorizontal} from \"d3-shape\";\n\nfunction horizontalSource(d) {\n  return [d.source.x1, d.y0];\n}\n\nfunction horizontalTarget(d) {\n  return [d.target.x0, d.y1];\n}\n\nexport default function() {\n  return linkHorizontal()\n      .source(horizontalSource)\n      .target(horizontalTarget);\n}\n","import { SxProps } from '@mui/system'\n\nimport { Opacity } from '../../../../types/styling/Opacity'\n\nimport { PLOT_COLORS } from '../../../../styles/colors'\nimport { important } from '../../../../helpers/d3/stringGetters'\n\nexport const SELECTED_CLASS = `parallelSetsBundledSelected`\nexport const TABS_CLASS = `psbTabs`\nexport const LINE_NOT_SELECTED_CLASS = `psbLine`\nexport const CONNECTORS_CLASS = `psbConnector`\nexport const INNER_TEXT_CLASS = `psbInnerText`\nexport const TABS_SELECTED_CLASS = `psbTabsSelected`\n\nexport const getParallelSetsBundledStyle = (\n  opacity: Opacity,\n  isBrushActive: boolean,\n  brushColor: string,\n  fontColorInner: string,\n): SxProps => ({\n  '& svg': {\n    bgcolor: PLOT_COLORS.backgroundColor,\n    font: `12px sans-serif`,\n  },\n  '& .psbConnector': {\n    fill: `none`,\n  },\n  '& .psbTabs': {\n    cursor: `pointer`,\n    '&.psbTabsSelected': {\n      fill: important(brushColor),\n    },\n  },\n  '& path': {\n    '&.parallelSetsBundledSelected': {\n      opacity: opacity[1] / 100,\n      stroke: important(brushColor),\n    },\n    '&.psbLine': {\n      opacity: !isBrushActive ? opacity[0] / 100 : opacity[2] / 100,\n      mixBlendMode: `multiply`,\n    },\n  },\n  '& .psbInnerText': {\n    fill: fontColorInner,\n  },\n})\n","import { useCallback, useEffect, useMemo, useRef, useState, VoidFunctionComponent } from 'react'\nimport { scaleOrdinal, select } from 'd3'\nimport { Box } from '@mui/material'\nimport { sankey, sankeyLinkHorizontal } from '../../../../../lib/d3-sankey'\n\nimport { VisualizationView } from '../../../../types/views/VisualizationView'\nimport { Brushable } from '../../../../types/brushing/Brushable'\nimport { ParallelSetsBundledSettings } from '../../../../types/views/settings/ParallelSetsBundledSettings'\nimport { NominalValueProperties } from '../../../../types/data/data'\nimport { Margin } from '../../../../types/styling/Margin'\nimport { DataLink, NodeData, NodeDataPoint } from '../../../../types/d3-sankey'\nimport { DataEach, Extent, OnMouseEvent } from '../../../../types/d3-types'\n\nimport { getTextTogglingYShift, TOGGLE_TEXT_Y_SHIFT } from '../../../../helpers/d3/attributeGetters'\nimport {\n  getAttributeFormatted,\n  getEverything,\n  getLinkDataPointValuesWithLabel,\n  getNodeDataPointValuesWithLabel,\n  getTranslate,\n} from '../../../../helpers/d3/stringGetters'\nimport { getGraph, getNeighborAttributes, getNominalValuesRecord } from '../../../../helpers/data/data'\n\nimport { ViewType } from '../../../../constants/views/ViewTypes'\nimport { CONTAINER_SAVE_ID, SAVE_ID } from '../../../../constants/save/save'\nimport { MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT } from '../../../../constants/views/parallelSetsBundled'\nimport { SVG } from '../../../../constants/svg'\nimport { AXES_TEXT_CLASS } from '../../../../components-style/content/views/parallel-coordinates/parallelCoordinatesStyle'\nimport { MouseAction } from '../../../../constants/actions/MouseAction'\nimport { ColoringType } from '../../../../constants/data/ColoringType'\nimport { ParallelSetsBrushingType } from '../../../../constants/data/ParallelSetsBrushingType'\n\nimport { PARALLEL_SETS_BUNDLED_TEXT } from '../../../../text/views-and-menus/parallelSetsBundled'\n\nimport { PLOT_FONT_BOX_SIZE } from '../../../../styles/font'\n\nimport { getViewsNotDisplayStyle } from '../../../../components-style/content/views/getViewsNotDisplayStyle'\nimport {\n  CONNECTORS_CLASS,\n  getParallelSetsBundledStyle,\n  INNER_TEXT_CLASS,\n  LINE_NOT_SELECTED_CLASS,\n  SELECTED_CLASS,\n  TABS_CLASS,\n  TABS_SELECTED_CLASS,\n} from '../../../../components-style/content/views/parallel-sets-bundled/parallelSetsBundledStyle'\nimport { onMouseOutTooltip, onMouseOverTooltip } from '../../../../helpers/d3/tooltip'\n\nexport interface ParallelSetsBundledProps extends VisualizationView, Brushable, ParallelSetsBundledSettings {}\n\nexport const CONNECTORS = `CONNECTORS`\nexport const TEXT = `TEXT`\nexport const AXES_TEXT = `AXES_TEXT`\nexport const TABS = `TABS`\n\nexport const TEXT_SHIFT = 2\n\nexport const ParallelSetsBundled: VoidFunctionComponent<ParallelSetsBundledProps> = ({\n  width,\n  height,\n  dataset,\n  displayAttributes,\n  isBrushingActive,\n  colorCategory,\n  margins,\n  opacity,\n  brushColor,\n  redrawTime,\n  setComponentBrushing,\n  refreshViews,\n  tabWidth,\n  tabSpacing,\n  tabGap,\n  coloringType,\n  brushingType,\n  fontColor,\n}) => {\n  const margin = useMemo(() => new Margin(...margins), [margins])\n  const component = useRef<SVGGElement>(null)\n  const upperPadding = TOGGLE_TEXT_Y_SHIFT + PLOT_FONT_BOX_SIZE\n  const [innerWidth, innerHeight] = [width - margin.width, height - margin.height - upperPadding]\n\n  const [nominalValuesRecord, setNominalValuesRecord] = useState(getNominalValuesRecord(dataset))\n  // redraw time needed because it is changing selected\n  useEffect(() => {\n    setNominalValuesRecord(getNominalValuesRecord(dataset))\n  }, [dataset, redrawTime, displayAttributes])\n\n  const createParallelSetsBundled = useCallback(() => {\n    const node = component.current\n    if (!node) return\n    const svg = select(node)\n    svg.selectAll(getEverything()).remove() // clear\n\n    const displayPairs = getNeighborAttributes(displayAttributes)\n    const pairWidth = (innerWidth - (displayAttributes.length - 2) * tabSpacing) / (displayAttributes.length - 1)\n    const valueCounts = displayAttributes.map((att) => nominalValuesRecord[att]).map((arr) => arr.length)\n    const spacesAllMax = Math.max(...valueCounts) - 1\n    const isLeft = (d: NodeData): boolean => Number(d.x0) < pairWidth / 2\n\n    const half = (displayAttributes.length - 1) / 2\n\n    // brushing\n    const onMouseClick: OnMouseEvent<NodeDataPoint> = (_, { attribute, name, count, countSelected }) => {\n      dataset.forEach((data) => {\n        if (String(data[attribute]) === name) {\n          data.selected = count !== countSelected\n        }\n      })\n\n      if (dataset.every((data) => !data.selected)) {\n        setComponentBrushing(null)\n        return\n      }\n      setComponentBrushing(ViewType.ParallelSetsBundled)\n      refreshViews()\n    }\n\n    displayPairs.forEach((displayPair, pairIdx) => {\n      const spacesPairMax = Math.max(valueCounts[pairIdx], valueCounts[pairIdx + 1]) - 1\n      const pairExtent: Extent = [\n        [0, 0],\n        [pairWidth, innerHeight - (spacesAllMax - spacesPairMax) * tabGap],\n      ]\n\n      const color = scaleOrdinal(colorCategory)\n      const sankeyLayout = sankey<NominalValueProperties, DataLink>()\n        .nodeWidth(tabWidth)\n        .nodePadding(tabGap)\n        .nodeSort((a, b) => Number(a.name) - Number(b.name))\n        .extent(pairExtent)\n\n      const graph = getGraph(dataset, nominalValuesRecord, displayPair[0], displayPair[1])\n      const { nodes, links } = sankeyLayout(graph)\n\n      const xShift = pairIdx * (pairWidth + tabSpacing)\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TABS)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.rect)\n        .attr(SVG.attributes.class, (d) =>\n          d.count === d.countSelected ? `${TABS_CLASS} ${TABS_SELECTED_CLASS}` : TABS_CLASS,\n        )\n        .attr(SVG.attributes.x, (d) => Number(d.x0) + xShift)\n        .attr(SVG.attributes.y, (d) => Number(d.y0))\n        .attr(SVG.attributes.height, (d) => Number(d.y1) - Number(d.y0))\n        .attr(SVG.attributes.width, (d) => Number(d.x1) - Number(d.x0))\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getNodeDataPointValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n        .on(MouseAction.click, onMouseClick)\n\n      // connectors\n      const connectors = svg\n        .append(SVG.elements.g)\n        .attr(SVG.attributes.class, CONNECTORS_CLASS)\n        .attr(SVG.attributes.transform, getTranslate([pairIdx * (pairWidth + tabSpacing), 0]))\n        .selectAll(CONNECTORS)\n        .data(links)\n        .enter()\n\n      // base\n      connectors\n        .append(SVG.elements.path)\n        .attr(SVG.attributes.class, LINE_NOT_SELECTED_CLASS)\n        .attr(SVG.attributes.d, sankeyLinkHorizontal())\n        .attr(SVG.attributes.stroke, (d) => {\n          if (coloringType === ColoringType.no) return color(`1`) // one category (first) for all\n          return color(d.names[coloringType === ColoringType.left ? 0 : 1])\n        })\n        .attr(SVG.attributes.strokeWidth, (d) => {\n          if (!d.value || brushingType === ParallelSetsBrushingType.overlay) {\n            return Number(d.width)\n          }\n          return Number(d.width) * ((d.value - d.selected) / d.value)\n        })\n        .attr(SVG.attributes.transform, (d) => {\n          if (brushingType === ParallelSetsBrushingType.overlay) {\n            return getTranslate([0, 0])\n          }\n          const yShift = d.width ? (Number(d.width) - Number(d.width) * ((d.value - d.selected) / d.value)) / 2 : 0\n          return getTranslate([0, yShift])\n        })\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n\n      //brushing\n      connectors\n        .append(SVG.elements.path)\n        .attr(SVG.attributes.class, SELECTED_CLASS)\n        .attr(SVG.attributes.d, sankeyLinkHorizontal())\n        .attr(SVG.attributes.strokeWidth, (d) => (d.value ? Number(d.width) * (d.selected / d.value) : 0))\n        .attr(SVG.attributes.transform, (d) => {\n          if (brushingType === ParallelSetsBrushingType.overlay) {\n            return getTranslate([0, 0])\n          }\n          const yShift = d.width ? -(Number(d.width) - Number(d.width) * (d.selected / d.value)) / 2 : 0\n          return getTranslate([0, yShift])\n        })\n        .on(MouseAction.mouseOver, onMouseOverTooltip(getLinkDataPointValuesWithLabel))\n        .on(MouseAction.mouseOut, onMouseOutTooltip)\n\n      const getTextVisible: DataEach<NodeData, SVGTextElement, number> = (d) => {\n        if (pairIdx === Math.floor(half)) return 1\n        if ((isLeft(d) && pairIdx > half) || (!isLeft(d) && pairIdx < half)) return 0\n        return 1\n      }\n\n      // line text\n      svg\n        .append(SVG.elements.g)\n        .selectAll(TEXT)\n        .data(nodes)\n        .enter()\n        .append(SVG.elements.text)\n        .attr(SVG.attributes.class, INNER_TEXT_CLASS)\n        .attr(SVG.attributes.x, (d) => (isLeft(d) ? Number(d.x1) + TEXT_SHIFT : Number(d.x0) - TEXT_SHIFT) + xShift)\n        .attr(SVG.attributes.y, (d) => (Number(d.y1) + Number(d.y0)) / 2)\n        .attr(SVG.attributes.textAnchor, (d) => (isLeft(d) ? SVG.values.start : SVG.values.end))\n        .style(SVG.style.opacity, getTextVisible)\n        .text((d) => getAttributeFormatted(d.name))\n    })\n    // axis text\n    svg\n      .append(SVG.elements.g)\n      .selectAll(AXES_TEXT)\n      .data(displayAttributes)\n      .enter()\n      .append(SVG.elements.text)\n      .attr(SVG.attributes.textAnchor, SVG.values.middle)\n      .attr(SVG.attributes.x, (_, idx) => idx * (pairWidth + tabSpacing))\n      .attr(SVG.attributes.y, getTextTogglingYShift)\n      .text(getAttributeFormatted)\n      .attr(SVG.attributes.class, AXES_TEXT_CLASS)\n  }, [\n    displayAttributes,\n    innerWidth,\n    tabWidth,\n    nominalValuesRecord,\n    dataset,\n    setComponentBrushing,\n    refreshViews,\n    innerHeight,\n    tabGap,\n    colorCategory,\n    tabSpacing,\n    coloringType,\n    brushingType,\n  ])\n\n  useEffect(\n    () => createParallelSetsBundled(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      displayAttributes,\n      innerWidth,\n      innerHeight,\n      colorCategory,\n      nominalValuesRecord,\n      tabWidth,\n      tabSpacing,\n      tabGap,\n      coloringType,\n      brushingType,\n    ],\n  )\n\n  if (innerWidth < 0 || innerHeight < 0) return <Box />\n  if (displayAttributes.length >= MIN_PARALLEL_SETS_BUNDLED_ATTRIBUTE_COUNT) {\n    return (\n      <Box\n        sx={getParallelSetsBundledStyle(opacity, isBrushingActive, brushColor, fontColor)}\n        id={CONTAINER_SAVE_ID[ViewType.ParallelSetsBundled]}\n      >\n        <svg width={width} height={height} id={SAVE_ID[ViewType.ParallelSetsBundled]}>\n          <g\n            ref={component}\n            width={innerWidth}\n            height={innerHeight}\n            transform={getTranslate([margin.left, margin.top + upperPadding])}\n          />\n        </svg>\n      </Box>\n    )\n  }\n  return <Box sx={getViewsNotDisplayStyle(width, height, margin)}>{PARALLEL_SETS_BUNDLED_TEXT.unavailable}</Box>\n}\n","import { VisualizationView } from '../../types/views/VisualizationView'\nimport { Brushable } from '../../types/brushing/Brushable'\nimport { SettingsType } from '../../types/views/settings/Settings'\nimport { ParallelCoordinatesSettings } from '../../types/views/settings/ParallelCoordinatesSettings'\nimport { ScatterPlotMatrixSettings } from '../../types/views/settings/ScatterPlotMatrixSettings'\nimport { GlyphsSettings } from '../../types/views/settings/GlyphsSettings'\nimport { ScatterPlotGlyphsSettings } from '../../types/views/settings/ScatterPlotGlyphsSettings'\nimport { DataTableSettings } from '../../types/views/settings/DataTableSettings'\nimport { ParallelSetsBundledSettings } from '../../types/views/settings/ParallelSetsBundledSettings'\n\nimport { ParallelCoordinates } from '../../components/content/views/parallel-coordinates/ParallelCoordinates'\nimport { ScatterPlotMatrix } from '../../components/content/views/scatter-plot-matrix/ScatterPlotMatrix'\nimport { Glyphs } from '../../components/content/views/glyphs/Glyphs'\nimport { ScatterPlotGlyphs } from '../../components/content/views/scatter-plot-glyphs/ScatterPlotGlyphs'\nimport { DataTable } from '../../components/content/views/data-table/DataTable'\nimport { ParallelSetsBundled } from '../../components/content/views/parallel-sets-bundeled/ParallelSetsBundled'\n\nimport { ViewType } from './ViewTypes'\n\ntype ViewElementFunction = (\n  props: Brushable & VisualizationView,\n  settings: SettingsType,\n  showFilter?: boolean,\n) => JSX.Element\n\nexport const getViewRecord: Record<ViewType, ViewElementFunction> = {\n  [ViewType.Glyphs]: (p, s) => <Glyphs {...p} {...(s as GlyphsSettings)} />,\n  [ViewType.ParallelCoordinates]: (p, s) => <ParallelCoordinates {...p} {...(s as ParallelCoordinatesSettings)} />,\n  [ViewType.ScatterPlotMatrix]: (p, s) => <ScatterPlotMatrix {...p} {...(s as ScatterPlotMatrixSettings)} />,\n  [ViewType.ScatterPlotGlyphs]: (p, s) => <ScatterPlotGlyphs {...p} {...(s as ScatterPlotGlyphsSettings)} />,\n  [ViewType.DataTable]: (p, s, f) => <DataTable {...p} {...(s as DataTableSettings)} showFilter={!!f} />,\n  [ViewType.ParallelSetsBundled]: (p, s) => <ParallelSetsBundled {...p} {...(s as ParallelSetsBundledSettings)} />,\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { VisualizationView } from '../../../types/views/VisualizationView'\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { VIEW_BORDER_SIZE } from '../../../constants/views/common'\nimport { getViewRecord } from '../../../constants/views/getViewRecord'\n\nimport { getViewBoxStyle } from '../../../components-style/content/views/viewStyle'\n\nexport interface ViewProps extends Brushable, VisualizationView {\n  component: ViewType\n  settings: Settings\n  brushColor: string\n  showFilter?: boolean\n}\n\nexport const View: VoidFunctionComponent<ViewProps> = ({\n  width,\n  height,\n  component,\n  settings,\n  showFilter,\n  ...dataProps\n}) => {\n  const graph = getViewRecord[component]\n  const settingsCurr = settings[component]\n  if (!settingsCurr) return null\n  return (\n    <Box sx={getViewBoxStyle(width, height)}>\n      {graph({ width, height: height - VIEW_BORDER_SIZE, ...dataProps }, settingsCurr, showFilter)}\n    </Box>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const getViewBoxStyle = (w: number, h: number): SxProps => ({\n  width: w,\n  height: h,\n  overflowX: `hidden`,\n  overflowY: `auto`,\n})\n","import { Dispatch, SetStateAction, VoidFunctionComponent } from 'react'\nimport { Button, Tooltip } from '@mui/material'\nimport { FilterList } from '@mui/icons-material'\nimport { inlineButtonStyles } from '../../../../components-style/content/common/inlineButtonStyles'\nimport { TOP_TOOLBAR_TEXT } from '../../../../text/SiteText'\n\nexport interface DataSaveButtonProps {\n  showFilter?: boolean\n  setShowFilter: Dispatch<SetStateAction<boolean | undefined>>\n}\n\nexport const DataFilterButton: VoidFunctionComponent<DataSaveButtonProps> = ({ showFilter, setShowFilter }) => (\n  <>\n    <Button variant=\"text\" onClick={() => setShowFilter(!showFilter)} sx={inlineButtonStyles.button}>\n      <Tooltip title={TOP_TOOLBAR_TEXT.filter}>\n        <FilterList sx={showFilter ? inlineButtonStyles.buttonActive : {}} />\n      </Tooltip>\n    </Button>\n  </>\n)\n","import React, { VoidFunctionComponent, ComponentProps, useState } from 'react'\nimport { useSize } from 'react-use'\nimport { Box, IconButton, Typography } from '@mui/material'\nimport { Close } from '@mui/icons-material'\n\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport { DRAG_HANDLE, HEADER_HEIGHT, VIEW_DEFAULT_SIZE } from '../../../constants/views/common'\n\nimport { gridItemStyle } from '../../../components-style/content/views/gridItemStyle'\n\nimport { DataSaveButton } from '../common/DataSaveButton'\nimport { View } from './View'\nimport { DataFilterButton } from './data-table/DataFilterButton'\n\ntype Props = Omit<ComponentProps<typeof View>, `width` | `height`> & {\n  title: string\n  onRemove: () => void\n  isResizeFinished: boolean\n}\n\nexport const GridItem: VoidFunctionComponent<Props> = ({ onRemove, title, isResizeFinished, ...rest }) => {\n  const [showFilter, setShowFilter] = useState<boolean | undefined>(undefined)\n  const [sized] = useSize(\n    ({ width, height }) => (\n      <Box sx={gridItemStyle.gridItem}>\n        <Box sx={gridItemStyle.header} className={DRAG_HANDLE}>\n          <Typography sx={gridItemStyle.text}>{title}</Typography>\n          <Box>\n            {rest.component !== ViewType.DataTable ? (\n              <DataSaveButton viewType={rest.component} />\n            ) : (\n              <DataFilterButton showFilter={showFilter} setShowFilter={setShowFilter} />\n            )}\n            <IconButton onClick={onRemove}>\n              <Close />\n            </IconButton>\n          </Box>\n        </Box>\n        {isResizeFinished && <View width={width} height={height - HEADER_HEIGHT} {...rest} showFilter={showFilter} />}\n      </Box>\n    ),\n    VIEW_DEFAULT_SIZE,\n  )\n\n  return sized\n}\n","import React, { Dispatch, VoidFunctionComponent, SetStateAction, useCallback, useState, memo } from 'react'\nimport GridLayout, { WidthProvider } from 'react-grid-layout'\nimport { Box } from '@mui/material'\nimport { AddCircle } from '@mui/icons-material'\n\nimport { Brushable } from '../../../types/brushing/Brushable'\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { GridLayoutItem, LayoutArray } from '../../../types/views/Grid'\nimport { Settings } from '../../../types/views/settings/Settings'\n\nimport { getClass } from '../../../helpers/d3/stringGetters'\nimport { displayDetails } from '../../../helpers/d3/displayDetails'\n\nimport { isViewType, ViewType } from '../../../constants/views/ViewTypes'\nimport { COLUMNS_COUNT, DEFAULT_VIEW_DIMENSIONS, DRAG_HANDLE, ROW_HEIGHT } from '../../../constants/views/common'\nimport { TOOLTIP_CLASS } from '../../../constants/views/tooltip'\nimport { TOP_TOOLBAR_TEXT } from '../../../text/SiteText'\nimport { VIEW_NAMES } from '../../../text/views-and-menus/common'\n\nimport { viewGridStyle } from '../../../components-style/content/views/viewGridStyle'\n\nimport { DataDrawer } from '../data-drawer/DataDrawer'\nimport { SelectionDialog } from '../common/dialogs/SelectionDialog'\nimport { GridItem } from './GridItem'\n\nexport interface ViewGridDataProps extends Brushable {\n  dataset: ReadonlyArray<SelectableDataType>\n}\n\nexport interface ViewGridProps extends ViewGridDataProps {\n  isDrawerOpen: boolean\n  isDetailsVisible: boolean\n  closeDrawer: SideEffectVoid\n  cleanSelectedIfViewWasBrushing: (viewType: ViewType) => void\n  settings: Settings\n  setSettings: Dispatch<SetStateAction<Settings>>\n\n  isAddViewDialogOpen: boolean\n  setIsAddViewDialogOpen: Dispatch<SetStateAction<boolean>>\n  layout: GridLayoutItem[]\n  setLayout: Dispatch<SetStateAction<GridLayoutItem[] | null>>\n  brushColor: string\n}\n\nconst ReactGridLayout = WidthProvider(GridLayout)\n\nconst BaseViewGrid: VoidFunctionComponent<ViewGridProps> = ({\n  isDrawerOpen,\n  closeDrawer,\n  cleanSelectedIfViewWasBrushing,\n  settings,\n  setSettings,\n  isAddViewDialogOpen,\n  setIsAddViewDialogOpen,\n  layout,\n  setLayout,\n  ...viewProps\n}) => {\n  const [viewResizing, setViewResizing] = useState<ViewType | null>(null)\n\n  const updateLayout = useCallback(\n    (newLayout: LayoutArray) => {\n      if (!newLayout) return\n      const filteredLayout = newLayout.filter((item) => isViewType(item.i))\n      setLayout(filteredLayout as GridLayoutItem[])\n    },\n    [setLayout],\n  )\n\n  const addView = useCallback(\n    (viewType: ViewType) => {\n      setIsAddViewDialogOpen(false)\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        if (layout.find((item) => item.i === viewType)) return layout\n        const posY = layout.reduce((max, item) => Math.max(item.y, max), 0) + 1\n        return [...layout, { i: viewType, x: 0, y: posY, ...DEFAULT_VIEW_DIMENSIONS[viewType] }]\n      })\n    },\n    [setIsAddViewDialogOpen, setLayout],\n  )\n\n  const removeView = useCallback(\n    (viewType: ViewType) => {\n      setLayout((layout) => {\n        if (layout === null) return layout // should not happen\n        return layout.filter((item) => item.i !== viewType)\n      })\n    },\n    [setLayout],\n  )\n\n  displayDetails(viewProps.isDetailsVisible, TOOLTIP_CLASS)\n\n  const views = layout.map((item) => item.i)\n  const availableViews = Object.values(ViewType).filter((viewType) => !views.includes(viewType))\n  const dialogOptions = availableViews.map((key) => ({ key, label: VIEW_NAMES[key], icon: <AddCircle /> }))\n  return (\n    <Box>\n      <SelectionDialog\n        isOpen={isAddViewDialogOpen}\n        onClose={() => setIsAddViewDialogOpen(false)}\n        title={TOP_TOOLBAR_TEXT.addViewDialogTitle}\n        options={dialogOptions}\n        noOptionText={TOP_TOOLBAR_TEXT.noOption}\n        handleListItemClick={addView}\n      />\n      <DataDrawer\n        isOpen={isDrawerOpen}\n        close={closeDrawer}\n        dataset={viewProps.dataset}\n        views={views}\n        settings={settings}\n        setSettings={setSettings}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n      />\n      <Box sx={viewGridStyle.tooltip} className={TOOLTIP_CLASS} />\n      <ReactGridLayout\n        onLayoutChange={updateLayout}\n        draggableHandle={getClass(DRAG_HANDLE)}\n        onResizeStart={(_, view) => setViewResizing(view.i as ViewType)}\n        onResizeStop={() => setViewResizing(null)}\n        cols={COLUMNS_COUNT}\n        rowHeight={ROW_HEIGHT}\n        isResizable\n      >\n        {layout.map((view) => (\n          <Box key={view.i} data-grid={view}>\n            <GridItem\n              isResizeFinished={view.i !== viewResizing}\n              title={VIEW_NAMES[view.i]}\n              onRemove={() => {\n                cleanSelectedIfViewWasBrushing(view.i)\n                removeView(view.i)\n              }}\n              component={view.i}\n              settings={settings}\n              {...viewProps}\n            />\n          </Box>\n        ))}\n      </ReactGridLayout>\n    </Box>\n  )\n}\n\n// do not rerender if props not change\nexport const ViewGrid = memo(BaseViewGrid)\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\nimport { SITE_COLORS } from '../../../styles/colors'\n\nexport const emptyDataStyle: Record<string, SxProps> = {\n  site: {\n    paddingTop: px(20),\n    color: SITE_COLORS.font,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nimport { emptyDataStyle } from '../../../components-style/content/no-data/emptyDataStyle'\n\nexport const EmptyData: VoidFunctionComponent = () => <Box sx={emptyDataStyle.site}>{EMPTY_DATA_TEXT.content}</Box>\n","import { SxProps } from '@mui/system'\nimport { px } from '../../../helpers/d3/stringGetters'\n\nexport const loadingStyle: Record<string, SxProps> = {\n  load: {\n    paddingTop: px(40),\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { loadingStyle } from '../../../components-style/content/no-data/loadingStyle'\nimport { EMPTY_DATA_TEXT } from '../../../text/SiteText'\n\nexport const Loading: VoidFunctionComponent = () => <Box sx={loadingStyle.load}>{EMPTY_DATA_TEXT.loading}</Box>\n","import { useCallback, useEffect, useState, VoidFunctionComponent } from 'react'\n\nimport { SelectableDataType } from '../../../types/data/data'\nimport { SideEffectVoid } from '../../../types/basic/functionTypes'\nimport { SetComponentBrushing } from '../../../types/brushing/Brushable'\nimport { Settings } from '../../../types/views/settings/Settings'\nimport { GridLayoutItem } from '../../../types/views/Grid'\n\nimport { useUpdatedRef } from '../../../helpers/react/useUpdatedRef'\nimport { useDebounce } from '../../../helpers/react/useDebounce'\n\nimport { DataLoadState } from '../../../constants/data/dataLoadState'\nimport { ViewType } from '../../../constants/views/ViewTypes'\nimport {\n  DEFAULT_BRUSH_COLOR,\n  DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n  DEFAULT_GRID_LAYOUT_NOMINAL,\n} from '../../../constants/views/common'\nimport { BRUSH_DEBOUNCE } from '../../../constants/debounce/debounce'\n\nimport { TopToolbar } from '../top-toolbar/TopToolbar'\nimport { ViewGrid } from '../views/ViewGrid'\nimport { EmptyData } from '../no-data/EmptyData'\nimport { Loading } from '../no-data/Loading'\nimport { getCategoryAttributesKeys, getDefaultQuantitativeAttributesKeys } from '../../../helpers/data/data'\n\nexport const DataContext: VoidFunctionComponent = () => {\n  const [dataLoadState, setDataLoadState] = useState(DataLoadState.NoData)\n\n  const [dataset, setDataset] = useState<ReadonlyArray<SelectableDataType> | null>(null)\n  const [settings, setSettings] = useState<Settings>({})\n\n  const [componentBrushing, setCurrentComponentBrushing] = useState<null | ViewType>(null)\n  const [cleanBrushing, setCleanBrushing] = useState<SideEffectVoid[]>([])\n  const [currentRedrawTime, setRedrawTime] = useState(Date.now())\n\n  const redrawTime = useDebounce(currentRedrawTime, BRUSH_DEBOUNCE) // used for less component re-renders\n\n  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false)\n  const [isDetailsVisible, setIsDetailsVisible] = useState(true)\n  const [isBrushingOnEndOfMove, setIsBrushingOnEndOfMove] = useState(false)\n\n  const [isAddViewDialogOpen, setIsAddViewDialogOpen] = useState(false)\n  const [layout, setLayout] = useState<GridLayoutItem[] | null>(null)\n  const [brushColor, setBrushColor] = useState<string>(DEFAULT_BRUSH_COLOR)\n\n  useEffect(() => {\n    if (!dataset || layout !== null) return\n    setLayout(\n      getCategoryAttributesKeys(dataset).length > getDefaultQuantitativeAttributesKeys(dataset).length\n        ? DEFAULT_GRID_LAYOUT_NOMINAL\n        : DEFAULT_GRID_LAYOUT_QUANTITATIVE,\n    )\n  }, [dataset, layout])\n\n  const cleanBrushingRef = useUpdatedRef(cleanBrushing)\n  const componentBrushingRef = useUpdatedRef(componentBrushing)\n\n  const setDatasetAndRemoveBrushing = useCallback((data: ReadonlyArray<SelectableDataType> | null) => {\n    setSettings({})\n    setDataset(data)\n    setCurrentComponentBrushing(null)\n  }, [])\n\n  const refreshViews = useCallback((): void => {\n    setRedrawTime(Date.now()) // redraw component\n  }, [])\n\n  const cleanAllBrushes = useCallback(\n    (deletePrevSelection = true) => {\n      if (dataset && deletePrevSelection) {\n        dataset.forEach((data) => (data.selected = false))\n        refreshViews()\n      }\n      cleanBrushingRef.current.forEach((f) => f())\n    },\n    [cleanBrushingRef, dataset, refreshViews],\n  )\n\n  const clearBrushesOnButton = useCallback(() => {\n    setCurrentComponentBrushing(null)\n    cleanAllBrushes()\n  }, [cleanAllBrushes])\n\n  const setComponentBrushing: SetComponentBrushing = useCallback(\n    (newComponent) => {\n      if (componentBrushingRef.current !== newComponent) {\n        cleanAllBrushes(\n          newComponent !== ViewType.DataTable &&\n            newComponent !== ViewType.Glyphs &&\n            newComponent !== ViewType.ParallelSetsBundled,\n        )\n      }\n      setCurrentComponentBrushing(newComponent)\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const registerCleanBrushing = useCallback((cleanBrushing: SideEffectVoid) => {\n    setCleanBrushing((prev) => [...prev, cleanBrushing])\n  }, [])\n\n  const cleanSelectedIfViewWasBrushing = useCallback(\n    (component: ViewType) => {\n      if (componentBrushingRef.current === component) {\n        cleanAllBrushes()\n        setCurrentComponentBrushing(null)\n      }\n    },\n    [cleanAllBrushes, componentBrushingRef],\n  )\n\n  const setIsBrushingOnEndOfMoveAndRemoveBrushing = useCallback(\n    (newIsBrushingOnEndOfMove: boolean) => {\n      cleanAllBrushes()\n      setCurrentComponentBrushing(null)\n      setIsBrushingOnEndOfMove(newIsBrushingOnEndOfMove)\n    },\n    [cleanAllBrushes],\n  )\n\n  const closeDrawer = useCallback(() => setDrawerOpen(false), [])\n  const openDrawer = useCallback(() => setDrawerOpen(true), [])\n\n  const topToolbarComponent = (\n    <TopToolbar\n      openDrawer={openDrawer}\n      isToolsDisabled={dataset === null}\n      isDetailsVisible={isDetailsVisible}\n      setIsDetailsVisible={setIsDetailsVisible}\n      isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      setIsBrushingOnEndOfMove={setIsBrushingOnEndOfMoveAndRemoveBrushing}\n      isBrushingActive={componentBrushingRef.current !== null}\n      clearBrushes={clearBrushesOnButton}\n      setDataset={setDatasetAndRemoveBrushing}\n      setDataLoadState={setDataLoadState}\n      setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n      brushColor={brushColor}\n      setBrushColor={setBrushColor}\n    />\n  )\n\n  if (dataLoadState === DataLoadState.NoData) {\n    return (\n      <>\n        {topToolbarComponent}\n        <EmptyData />\n      </>\n    )\n  }\n  if (dataLoadState === DataLoadState.Loading || !dataset) {\n    return (\n      <>\n        {topToolbarComponent}\n        <Loading />\n      </>\n    )\n  }\n\n  if (!layout) return null\n\n  return (\n    <>\n      {topToolbarComponent}\n      <ViewGrid\n        isDrawerOpen={isDrawerOpen}\n        isDetailsVisible={isDetailsVisible}\n        closeDrawer={closeDrawer}\n        cleanSelectedIfViewWasBrushing={cleanSelectedIfViewWasBrushing}\n        settings={settings}\n        setSettings={setSettings}\n        dataset={dataset}\n        isAddViewDialogOpen={isAddViewDialogOpen}\n        setIsAddViewDialogOpen={setIsAddViewDialogOpen}\n        layout={layout}\n        setLayout={setLayout}\n        brushColor={brushColor}\n        registerCleanBrushing={registerCleanBrushing}\n        setComponentBrushing={setComponentBrushing}\n        refreshViews={refreshViews}\n        redrawTime={redrawTime}\n        isBrushingActive={componentBrushingRef.current !== null}\n        isBrushingOnEndOfMove={isBrushingOnEndOfMove}\n      />\n    </>\n  )\n}\n","import { SxProps } from '@mui/system'\n\nexport const appStyle: Record<string, SxProps> = {\n  app: {\n    textAlign: `center`,\n    minHeight: `100vh`,\n    display: `flex`,\n    flexDirection: `column`,\n    alignItems: `center`,\n  },\n  content: {\n    flexGrow: 1,\n    width: `100%`,\n  },\n}\n","import { VoidFunctionComponent } from 'react'\nimport { Box } from '@mui/material'\n\nimport { Header } from './components/header/Header'\nimport { Footer } from './components/footer/Footer'\nimport { DataContext } from './components/content/context/DataContext'\n\nimport { appStyle } from './appStyle'\n\nexport const App: VoidFunctionComponent = () => (\n  <Box sx={appStyle.app}>\n    <Header />\n    <Box sx={appStyle.content}>\n      <DataContext />\n    </Box>\n    <Footer />\n  </Box>\n)\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport { App } from './app/App'\nimport './index.css'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(`root`),\n)\n"],"sourceRoot":""}